{
  "version": "https://jsonfeed.org/version/1",
  "title": "Cymetrics Tech Blog",
  "home_page_url": "https://cymetrics.github.io/blog",
  "feed_url": "https://cymetrics.github.io/blog/feed/feed.json",
  "description": "Cymetrics 技術部落格",
  "author": {
    "name": "Cymetrics 技術部落格",
    "url": ""
  },
  "items": [{
      "id": "https://cymetrics.github.io/posts/huli/why-only-reset-password-not-retrieve-password/",
      "url": "https://cymetrics.github.io/posts/huli/why-only-reset-password-not-retrieve-password/",
      "title": "為什麼忘記密碼時只能重設，不把舊密碼告訴我？",
      "content_html": "<p>某天小明在整理他的我的最愛（到底誰的），發現了一個以前很常逛，但已經將近半年多沒去的一個論壇。小明想回去看看那邊變得怎麼樣了，於是點進去那個論壇，輸入了帳號密碼，得到了密碼錯誤的回覆。</p>\n<p>嘗試了幾次之後，系統提示小明可以使用「忘記密碼」的功能，所以小明填了自己的 email 之後去信箱收信，發現系統傳來一個「重設密碼」的連結。雖然說最後小明成功利用重新設定的密碼登入，但有個問題讓他百思不得其解：</p>\n<blockquote>\n<p>「奇怪欸，幹嘛要我重設密碼，為什麼不把舊的密碼寄給我就好？」</p>\n</blockquote>\n<p>應該有許多人都跟小明一樣，有過類似的疑惑。把舊密碼寄給我不是很好嗎，幹嘛強迫我換密碼？</p>\n<p>這一個看似簡單的問題，背後其實藏了許多資訊安全相關的概念，就讓我們慢慢尋找問題的答案，順便學習一些基本的資安知識吧！</p>\n<p>先提醒一下，雖然說前半段看起來可能跟文章主題無關，但好酒沉甕底，我保證最後會把這些東西關聯起來。</p>\n<h2 id=\"%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB\"><a class=\"direct-link\" href=\"#%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB\">#</a> 被偷走的資料庫</h2>\n<p>大家應該很常看到新聞說哪個網站的資料又被偷走了，顧客個資全部都外洩出去。例如說<a href=\"https://tw.news.yahoo.com/%E5%80%8B%E8%B3%87%E9%81%AD%E6%B4%A9-%E9%BA%A5%E7%95%B6%E5%8B%9E%E8%81%B2%E6%98%8E-%E4%B8%8D%E5%90%AB%E4%BB%98%E6%AC%BE%E8%B3%87%E6%96%99-103012207.html\">麥當勞</a>在近期就發生了類似的事件：</p>\n<p><img src=\"/img/posts/huli/reset-password/p1.png\" alt=\"麥當勞資料外洩的通知信\"></p>\n<p>這邊我想帶大家探討的兩個問題是：</p>\n<ol>\n<li>資料真的這麼容易外洩嗎？</li>\n<li>資料外洩之後，可能造成什麼後果？</li>\n</ol>\n<p>我們先來看第一個問題，有很多安全性的漏洞可以造成資料外洩，而有些漏洞的攻擊方式，比你想的還簡單一百倍。</p>\n<p><img src=\"/img/posts/huli/reset-password/p2.jpeg\" alt=\"Photo by Arget on Unsplash\"></p>\n<p>你想像中的駭客可能像上面那樣，打著一大堆不知道在幹嘛的指令，畫面上出現很多黑底白字或是綠字的畫面，完全搞不懂在幹嘛，但是做著做著網站就被打下來了。</p>\n<p>而事實上有些漏洞，可能在網址列上面改幾個字就攻擊成功了，就算你不懂任何程式也做得到。</p>\n<p>舉例來說好了，假設今天有個購物網站，你買了一些東西之後送出訂單，訂單成立後跳轉到訂單頁面，上面有著一大堆你的個資，例如說：姓名、收貨地址、聯絡電話以及 Email 等等。</p>\n<p>然後你發現訂單頁面的網址是 <a href=\"https://shop.huli.tw/orders?id=14597\">https://shop.huli.tw/orders?id=14597</a></p>\n<p>而正好你的訂單編號也是 14597，在好奇心的驅使之下，你就試著把數字改成 14596，然後按下 Enter。</p>\n<p>當網站載入完成之後，你竟然還真的能看到編號為 14596 的訂單，上面出現一個你不認識的人的姓名、收貨地址、聯絡電話跟 Email。</p>\n<p>有些攻擊就是這麼樸實無華且枯燥，只要改個字就能看到屬於其他人的資料。這時候如果你會寫程式的話，就可以寫個腳本自動去抓 id 是 1 一直到 id 是 15000 的資料，你就拿到了這個購物網站 15000 筆訂單的資訊，也就是一萬多個顧客的個資。</p>\n<p>這過程中沒有什麼黑底白字的畫面，也不用一直瘋狂打字，唯一需要的只有改數字，個資就輕鬆到手。</p>\n<p>這類型的漏洞有個專有名詞，稱為 IDOR，全名是：Insecure direct object references，大約就是不安全的直接資料存取的意思。漏洞產生的原因就是工程師在開發時，並沒有注意到權限控管，因此讓使用者能存取到其他人的資料。</p>\n<p>有些人看到這邊可能以為我只是為了文章淺顯易懂，所以才舉一個簡化的例子，現實生活中的攻擊才沒這麼簡單。</p>\n<p>這句話算是對了一半，大部分的網站確實都不會有這麼明顯的一個漏洞，攻擊方式會更複雜一點。但可怕的是，還真的有些網站就是這麼簡單，就是改個數字就可以拿到別人的資料。</p>\n<p>台灣有一個網站叫做 <a href=\"https://zeroday.hitcon.org/\">HITCON ZeroDay</a>，是由台灣駭客協會所維護的漏洞回報平台。有些人發現漏洞之後可能會竊取個資拿去賣，從事非法行為，也有些人發現漏洞只是為了鍛鍊技術，並沒有想要做什麼壞事。</p>\n<p>因此就可以透過這個平台進行回報，回報漏洞之後負責維護平台的志工們會幫你驗證漏洞，驗證過後回報給負責的廠商，讓他們去修復漏洞。</p>\n<p>這個平台上的漏洞在修復過後隔一陣子會公開，或者儘管廠商沒有回報修復，過一陣子（例如說兩個月）後也會公開，因此在這平台上可以找到許多公開的漏洞，看過之後你大概就不會想在網站註冊時留下真實個資了…</p>\n<p>例如說這兩個就是 IDOR 的真實漏洞：</p>\n<ol>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00206\">享健身xarefit 任意訪問/下載所有會員個資</a></li>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00260\">DoorGods 防疫門神實聯制系統IDOR導致個資外洩</a></li>\n</ol>\n<p>對，不要懷疑，就真的只是在網址上改個數字而已這麼容易。</p>\n<p>以後只要看到網址列上有這種數字，就可以試著去改改看，搞不好不會寫程式的你也可以發現 IDOR 的漏洞。</p>\n<p>除了這種只要改個東西的漏洞之外，還有另外一個很常見但是需要一點技術能力才能攻破的漏洞，叫做 SQL Injection。</p>\n<p>先來講講 SQL 是什麼，簡單來說就是跟資料庫查詢東西的一種程式語言。既然說是語言那就會有固定語法，若是以中文舉例，大概就像是：</p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 1 的」，按照「建立時間」排序</p>\n</blockquote>\n<p>用「」框起來的部分代表可以變動，而其他關鍵字例如說「去找」、「給我」這些都是固定的，因為語法要固定才能寫程式去解析。</p>\n<p>同樣以上面假想的購物網站為例，如果網址是 <a href=\"https://shop.huli.tw/orders?id=14597%EF%BC%8C%E9%82%A3%E7%B6%B2%E7%AB%99%E5%8E%BB%E8%B7%9F%E8%B3%87%E6%96%99%E5%BA%AB%E6%8B%BF%E8%B3%87%E6%96%99%E6%99%82%EF%BC%8C%E6%8C%87%E4%BB%A4%E5%A4%A7%E6%A6%82%E5%B0%B1%E6%98%AF%EF%BC%9A\">https://shop.huli.tw/orders?id=14597，那網站去跟資料庫拿資料時，指令大概就是：</a></p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 14597 的」</p>\n</blockquote>\n<p>因為網址列上的 id 是 14597 嘛，所以這個 id 就會被放到查詢的指令去，如果 id 是別的，那查詢的指令也會不一樣。</p>\n<p>這時候如果我的 id 不是數字，而是「1 的順便給我使用者資料」，查詢就變成：</p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 1 的順便給我使用者資料」</p>\n</blockquote>\n<p>那整個網站的使用者資料就順便被我抓下來了。</p>\n<p>這個攻擊之所以叫做 SQL injection，重點就在於那個 injection，攻擊者「注入」了一段文字被當作指令的一部分執行，所以攻擊者就可以執行任意查詢。</p>\n<p>比起上面講的 IDOR，SQL injection 通常會更為致命，因為不只是訂單資料本身，連其他資料也會被一起撈出來。所以除了訂單資料，會員資料跟商品資料都有可能一起外洩。</p>\n<p>這邊也隨便找兩個公開的案例：</p>\n<ol>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2020-00276\">北一女中網站存在SQL Injection漏洞</a></li>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00052\">桃園高中 網站 SQL injection</a></li>\n</ol>\n<p>而防禦方式就是不要把使用者輸入的「1 的順便給我使用者資料」直接當作指令，而是經過一些處理，讓整段查詢變成：「給我 id 是：『1 的順便給我使用者資料』的資料」，那因為沒有這個 id，所以什麼事也不會發生。</p>\n<h2 id=\"%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F\">#</a> 個資洩漏了，然後呢？</h2>\n<p>前面我們已經看到了針對那些沒有做好防禦的網站，個資外洩是多麽容易的一件事情。</p>\n<p>那個資洩漏之後，對使用者會有什麼影響呢？</p>\n<p>大家最感同身受的應該就是詐騙電話吧，例如說某些買書的網站或是訂房網站，打過來跟你說什麼要分期退款，為了博取你的信任，連你買了哪本書，訂了哪個房間，或是你家地址跟姓名全都講得出來。</p>\n<p>這些都是因為資料外洩的緣故，詐騙集團才會知道的這麼清楚。</p>\n<p>但除了這些個資以外，還有兩個東西也會外洩，那就是你的帳號跟密碼。</p>\n<p>也許你會想說：「不就帳號跟密碼嗎，我就在那個網站上面改密碼以後再用就好啦！」</p>\n<p>事情也許沒有你想的這麼簡單。如果你沒有用密碼管理軟體的話，我大膽猜測你所有的密碼可能都是同一組。因為怕記不起來嘛，所以乾脆都用同一組密碼。</p>\n<p>這時候如果帳密外洩，駭客是不是就可以拿這組帳密去其他服務試試看？</p>\n<p>拿去登你的 Google，登你的 Facebook，這時候用同一組密碼的人就會被登進去。所以從表面看只是一個購物網站被入侵，但造成的結果卻是你的 Google 還有 Facebook 也一起被盜了。</p>\n<p>所以，有時候某個網站被盜帳號可能不是那個網站的問題，而是駭客在其他地方拿到了你的帳號密碼，就來這邊試試看，沒想到就中了。</p>\n<p>對於網站的開發者而言，保護好使用者的個資是天經地義的事情，保護密碼也是，有沒有什麼好方法可以保護密碼呢？</p>\n<p>加密嗎？把密碼用某些演算法加密，這樣資料庫儲存的就會是加密後的結果，儘管被偷走了，駭客只要沒有解密的方法就解不開。</p>\n<p>聽起來似乎是最安全的做法了，但其實還有一個問題，那就是網站的開發者還是會知道怎麼解密，如果有工程師監守自盜怎麼辦？他還是可以知道每個使用者的密碼是什麼，可以把這些資訊拿去賣或者是自己利用。</p>\n<p>嗯…似乎我們也不能怎麼樣，因為無論如何，開發者都需要有方法知道資料庫存的密碼究竟是多少吧？不然在登入的時候怎麼確認帳號密碼是對的？</p>\n<p>再者，這樣聽起來應該夠安全了，要怎麼樣才能更安全？難道要連網站的開發者都無法解密，都不知道密碼是什麼才夠安全嗎？</p>\n<p>Bingo！答對了，就是要這樣沒錯！</p>\n<h2 id=\"%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB\"><a class=\"direct-link\" href=\"#%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB\">#</a> 沒有人知道你的密碼，包括網站本身</h2>\n<p>事實上，網站的資料庫是不會儲存你的密碼的。</p>\n<p>或更精確地說，不會儲存你的「原始密碼」，但會儲存密碼經過某種運算後的結果，而且最重要的是，這個運算是無法還原的。</p>\n<p>直接舉例比較快，假設今天有個很簡單的演算法，可以把密碼做轉換，轉換方式是：「數字不做轉換，英文字母把 a 換成 1，b 換成 2…z 換成 26」，以此類推，第幾個字母就換成幾，大小寫不分都一樣（先假設不會有符號）。</p>\n<p>如果密碼是 abc123，轉換完就變成 123123。</p>\n<p>在使用者註冊的時候，網站就把使用者輸入的 abc123 轉成 123123，然後存到資料庫裡面。因此資料庫存的密碼是 123123，而不是 abc123。</p>\n<p>當使用者登入時，我們就再把輸入的值用同樣的邏輯轉換，如果輸入一樣，轉換後的結果就會一樣對吧？就知道密碼是不是正確的。</p>\n<p>當駭客把資料庫偷走以後，會拿到 123123 這組密碼，那一樣啊，不是可以推論出原本是 abc123 嗎？不不不，沒這麼簡單。</p>\n<p>123123、abcabc、12cab3…這些密碼轉換之後，不也是 123123 嗎？所以儘管知道轉換規則跟結果，卻沒有辦法還原成「唯一一組密碼」，這就是這個演算法厲害的地方！</p>\n<p>這樣的轉換就叫做雜湊（Hash），abc123 每次 hash 過後的結果都會是 123123，但是從 123123 卻無法推回輸入一定是 abc123，因為有其他種可能性存在。</p>\n<p>這就是 hash 跟加密最大的不同。</p>\n<p>加密跟解密是成對的，如果可以加密就一定可以解密，所以你知道密文跟密鑰，就可以知道明文。但 hash 不同，你知道 hash 的演算法跟結果，卻無法回推出原本的輸入是什麼。</p>\n<p>而這個機制最常見的應用之一，就在於密碼的儲存。</p>\n<p>在註冊時把 hash 過後的密碼存進資料庫，登入時把輸入的密碼 hash 過後跟資料庫比對，就知道密碼是否正確。就算資料庫被偷，駭客也不知道使用者的密碼是什麼，因為回推不出來。</p>\n<p>這就是為什麼忘記密碼的時候，網站不會跟你講原本的密碼是什麼，因為網站本身也不知道啊！</p>\n<p>所以不能「找回密碼」，只能「重設密碼」，因為重設就代表你輸入新的密碼，然後網站把新的密碼 hash 之後存進資料庫，未來登入時就會用這組新的 hash 去比對。</p>\n<p>有些人可能會注意到這樣的儲存方式似乎有個漏洞，延續前面的例子，資料庫存的是 123123 而我的原始密碼是 abc123，這樣如果用「abcabc」，hash 過後也是 123123，不就也可以登入嗎？這樣不太對吧，這不是我的密碼欸</p>\n<p>有兩個不同的輸入卻產生出同一組輸出，這種狀況稱為碰撞（hash collision），碰撞一定會發生，但如果演算法設計的好，碰撞的機率就超級無敵小，小到幾乎可以忽略。</p>\n<p>前面提的轉換規則只是為了方便舉例，真實世界中用的演算法複雜許多，就算只有一個字不同，結果都會天差地遠，以 SHA256 這個演算法為例：</p>\n<ol>\n<li>abc123 =&gt; 6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090</li>\n<li>abc124 =&gt; cd7011e7a6b27d44ce22a71a4cdfc2c47d5c67e335319ed7f6ae72cc03d7d63f</li>\n</ol>\n<p>類似的輸入卻產生截然不同的輸出。</p>\n<p>像我前面舉例用的轉換就是不安全的 hash 演算法，要盡量避免使用或是避免自己設計，盡可能使用密碼學家跟專家設計出的演算法，像是上面提到的 SHA256。</p>\n<p>在使用這些演算法的時候，也要特別注意一下是否安全，因為有些演算法雖然也是由專家設計，但已經被證明是不安全的，例如說密碼用 MD5 來 hash 後儲存就是不安全的，可以參考：<a href=\"https://security.stackexchange.com/questions/19906/is-md5-considered-insecure\">Is MD5 considered insecure?</a></p>\n<h2 id=\"%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F\">#</a> 所以，儲存 hash 後的值就沒事了嗎？</h2>\n<p>抱歉，其實只儲存密碼 hash 過後的值是不夠的。</p>\n<p>咦，為什麼？我剛剛不是說沒辦法反推出結果嗎，那為什麼不夠？</p>\n<p>雖然說沒辦法反推出結果，但攻擊者可以利用「輸入一樣，輸出一定一樣」的特性，先建好一個資料庫。</p>\n<p>舉例來說，假設有個很常見的密碼 abc123，hash 過後的值是 6ca13d，那攻擊者就可以先算好，然後把這個關係存在資料庫，所以攻擊者的資料庫裡面就可能會有一百萬組最常見密碼的清單，裡面有著每個密碼跟它 hash 過後的值。</p>\n<p>那接下來只要在 hash 過後的資料庫發現 6ca13d，攻擊者就可以透過查表的方式，查出原本的密碼是 abc123。這不是利用演算法反推結果，這只是利用現有資料來查詢而已。</p>\n<p>為了防禦這種攻擊，還要做一件事情叫做加鹽（Salting），沒錯，就是鹽巴的那個鹽。通常會幫每個使用者產生一個獨一無二的鹽巴，例如說 5ab3od（實際上會更長，可能 16 或 32 個字以上），接著把我的密碼 abc123 加上我的鹽巴，變成 abc1235ab3od，然後用這個加鹽過後的結果去做 hash。</p>\n<p>為什麼要這樣做呢？</p>\n<p>因為攻擊者預先準備好的表格中，比起 abc123，出現 abc1235ab3od 的機率顯然更低，同時又因為長度變長了，暴力破解的難度變得更高。如此一來，密碼就變得更難破解了。</p>\n<p>更多資訊請參考：<a href=\"https://www.ithome.com.tw/voice/127918\">不是祕密的祕密</a></p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>忘記密碼時網站不會把密碼寄給我，因為網站自己都不知道我的密碼是什麼。雖然聽起來不太可能，但實際狀況就是如此。為了安全性，這是必須的手段。</p>\n<p>要達成這樣的目的，背後最重要的技術原理就是 hash，「同樣的密碼會產生同樣的 hash 值，但從 hash 值沒辦法對應回原本的密碼」就是秘訣所在。</p>\n<p>反之，如果你發現有網站可以找回你的密碼，那就得要多加注意，有可能網站資料庫存的不是 hash 值而是你的密碼。在這種狀況下，萬一有天資料庫被入侵，帳密被偷走，駭客就能得知你真實的密碼，然後去試其他的服務。</p>\n<p>有關於密碼管理，現在瀏覽器也有功能可以自動幫你產生密碼外加記憶密碼，或也可以使用現成的密碼管理軟體，都可以在不同網站產生不同的密碼。</p>\n<p>這篇希望能讓對這個領域陌生的讀者們也能知道一些基本的概念，包括：</p>\n<ol>\n<li>有些網站比你想得脆弱很多，改個網址就可以拿到別人的資料</li>\n<li>對於安全性做得不好的網站，拿到整個資料庫不是一件難事</li>\n<li>忘記密碼只能重設，不能找回，是因為網站也不知道你的密碼</li>\n<li>如果有網站可以把舊密碼給你，那你得要小心一點</li>\n</ol>\n",
      "date_published": "2021-07-09T00:00:00-00:00"
    },{
      "id": "https://cymetrics.github.io/posts/huli/paged-js-to-pdf/",
      "url": "https://cymetrics.github.io/posts/huli/paged-js-to-pdf/",
      "title": "用 Paged.js 做出適合印成 PDF 的 HTML 網頁",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>之前在公司內接到了一個需求，需要產生出一份 PDF 格式的報告。想要產一份 PDF 有很多種做法，例如說可以先用 Word 做，做完之後再轉成 PDF。但我聽到這需求時，最先出現的想法就是寫成網頁，然後再利用列印功能轉成 PDF。</p>\n<p>我在前公司的時候看過一個用 JS 來產生 PDF 的專案，是用 <a href=\"https://pdfkit.org/\">PDFKit</a> 來做，自由度極高，但我覺得滿難維護的。原因是用這一套的話，就有點像是把 PDF 畫出來，你要指定 (x,y) 座標去畫東西，可能改一個小地方，就要改很多行程式碼。</p>\n<p>那時候我想說怎麼不直接用最簡單的 HTML + CSS 就好，切好版之後再轉成 PDF，如果不想手動轉，也可以透過 headless chrome 去轉，因為是網頁的關係所以應該滿好維護的。而且排版的話因為是用 HTML 跟 CSS，應該會比用畫的簡單許多才對。</p>\n<p>直到我後來接觸到網頁轉 PDF，才發現事情不像我想的這麼簡單。</p>\n<!-- summary -->\n<!-- more -->\n<h2 id=\"%E7%9B%AE%E6%A8%99\"><a class=\"direct-link\" href=\"#%E7%9B%AE%E6%A8%99\">#</a> 目標</h2>\n<p>先讓大家知道一下最後需要產生的報告長什麼樣子是很重要的，因為這樣才能評估每一項技術是否能達成這個需求。</p>\n<p>底下先大概講一下我預期中要達到的功能，也就是報告最後的長相。</p>\n<p>第一，要有一個封面頁，不能有頁首頁尾跟頁碼，而且內容要置中。</p>\n<p>第二，要可以自訂每一頁的頁首跟頁碼格式，還要可以設定頁尾，像這樣：</p>\n<p><img src=\"https://static.coderbridge.com/img/aszx87410/fb7f9b13e57943d1a576f38545fc09b3.png\" alt=\"\"></p>\n<p>第三，表格的地方如果跨頁，要自動重複顯示 table head：</p>\n<p><img src=\"https://static.coderbridge.com/img/aszx87410/7dfbc8b6f4af4b18b4a1bf391126d18b.png\" alt=\"\"></p>\n<p>或大家也可以直接看看最後 PDF 長什麼樣子：<a href=\"https://aszx87410.github.io/demo/print/print_demo.pdf\">https://aszx87410.github.io/demo/print/print_demo.pdf</a></p>\n<p>知道目標之後，就可以來研究一下該怎麼達成這些功能。</p>\n<h2 id=\"html-%E7%B6%B2%E9%A0%81%E8%BD%89-pdf---%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9F%E5%8A%9F%E8%83%BD-%40media-print\"><a class=\"direct-link\" href=\"#html-%E7%B6%B2%E9%A0%81%E8%BD%89-pdf---%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9F%E5%8A%9F%E8%83%BD-%40media-print\">#</a> HTML 網頁轉 PDF - 利用原生功能 @media print</h2>\n<p>因為對這一塊不熟，所以先 Google 了一些中文文章來看，包括：</p>\n<ol>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10232006\">CSS - 網頁列印與樣式</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10198913\">其實Css的內心還住著一位Print</a></li>\n<li><a href=\"https://medium.com/unalai/%E5%8E%9F%E4%BE%86%E5%89%8D%E7%AB%AF%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0-%E4%B8%8D%E6%98%AF%E5%8F%AA%E8%A6%81-window-print-%E5%B0%B1%E5%A5%BD%E4%BA%86-7af44cacf43e\">原來前端網頁列印，不是只要 window.print() 就好了</a></li>\n<li><a href=\"https://tsengbatty.medium.com/media-print-%E4%BD%A0%E6%98%AF%E8%AA%B0-ae093fab85b8\">@media print 你是誰？</a></li>\n<li><a href=\"https://kakadodo.github.io/2018/03/13/css-media-print-setting/\">關於 @media print 的二三事..</a></li>\n<li><a href=\"https://penghuachen.github.io/2020/12/10/%E9%80%8F%E9%81%8E-CSS-%E5%88%97%E5%8D%B0-print-%E8%A8%AD%E5%AE%9A%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0%E6%99%82%E7%9A%84%E6%A8%A3%E5%BC%8F/\">透過 CSS 列印(print) 設定網頁列印時的樣式</a></li>\n</ol>\n<p>重點大概就是利用 CSS <code>@media print</code> 去做設定，然後可以設置什麼時候換頁，以及記得勾選一些設定才能把背景顯示出來。</p>\n<p>我自己稍微嘗試了一下這些做法，發現這些可以處理基本的需求，但如果需求再複雜一點就沒辦法了。</p>\n<p>舉例來說，如果我想自訂每一頁的頁首頁尾，該怎麼辦？每一頁的頁首跟頁尾都有可能不一樣。如果我事先可以規劃多少內容一頁的話，或許還有機會解決，但如果不行呢？例如說我有一個很長的列表，我根本不知道會有幾頁，那該怎麼做？</p>\n<p>關於頁首頁尾，我有找到這篇：<a href=\"https://medium.com/@Idan_Co/the-ultimate-print-html-template-with-header-footer-568f415f6d2a\">The Ultimate Print HTML Template with Header &amp; Footer</a> 確實有幫助，但沒辦法解決頁碼的問題。</p>\n<p>上面的這些做法，頁碼就是靠著列印時勾選瀏覽器預設的頁碼，然後標題就是網頁的標題或是網址，這些樣式我該怎麼客製化？例如說我想把頁碼換位置，做得到嗎？</p>\n<p>後來我在網路上搜尋過一輪，發現這些似乎不是原生 CSS 可以解決的狀況。於是我把方向轉成：「先用 HTML 印出沒有頁碼的 PDF，再從後端加工處理」。因為已經有 PDF 了，所以自然而然也可以知道有幾頁，那就可以用開頭說的 PDFKit 或是其他 library 加上去了。意思就是先轉成 PDF，再加工，需要有兩道程序。</p>\n<p>我還找到了一套 <a href=\"https://github.com/Kozea/WeasyPrint/tree/master\">WeasyPrint</a>，看起來好像也可以自訂頁首頁尾跟頁碼，不過依然不是理想中的解決方案。</p>\n<p>正當我開始覺得：「這些只用前端網頁的話好像做不到」的時候，救星出現了。</p>\n<h2 id=\"paged.js%EF%BC%8C%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0%E6%8E%92%E7%89%88%E7%9A%84%E6%9C%80%E4%BD%B3%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\"><a class=\"direct-link\" href=\"#paged.js%EF%BC%8C%E7%B6%B2%E9%A0%81%E5%88%97%E5%8D%B0%E6%8E%92%E7%89%88%E7%9A%84%E6%9C%80%E4%BD%B3%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\">#</a> Paged.js，網頁列印排版的最佳解決方案</h2>\n<p><a href=\"https://www.pagedjs.org/\">Paged.js</a> 對自己的介紹是：</p>\n<blockquote>\n<p>Paged.js is a free and open source JavaScript library that paginates content in the browser to create PDF output from any HTML content. This means you can design works for print (eg. books) using HTML and CSS!</p>\n</blockquote>\n<blockquote>\n<p>Paged.js follows the Paged Media standards published by the W3C (ie the Paged Media Module, and the Generated Content for Paged Media Module). In effect Paged.js acts as a polyfill for the CSS modules to print content using features that are not yet natively supported by browsers.</p>\n</blockquote>\n<p>簡單來說呢，Paged.js 是一個開源的 JavaScript library，用來幫助你列印出 PDF。而嚴格來說它其實有很多的部分是 polyfill。事實上，W3C 已經有一些負責列印相關的 CSS 屬性，可是還處於草稿的階段，因此瀏覽器也還沒實作，所以需要靠著 Paged.js 來 polyfill。</p>\n<p>先給大家看一下用 Paged.js 可以做到的成果是什麼：</p>\n<ol>\n<li>demo 網站：<a href=\"https://aszx87410.github.io/demo/print/print.html\">https://aszx87410.github.io/demo/print/print.html</a></li>\n<li>產生出的 PDF：<a href=\"https://aszx87410.github.io/demo/print/print_demo.pdf\">https://aszx87410.github.io/demo/print/print_demo.pdf</a></li>\n</ol>\n<p>如果想要學習 Paged.js 的使用，我非常推薦去看官方文件，因為功能都寫在上面了，這篇文章只是想讓大家知道一下有這個解法，因此不會講得太多。底下就簡單講一下我想要的每個功能是怎麼實作出來的。</p>\n<p>這些功能其實用圖片跟文字有點難解釋，因為我建議稍微看過之後，直接去看上面附的 demo 網站的 source code，我覺得會比較容易理解。</p>\n<h2 id=\"%E8%87%AA%E8%A8%82%E6%AF%8F%E5%80%8B%E9%A0%81%E9%9D%A2\"><a class=\"direct-link\" href=\"#%E8%87%AA%E8%A8%82%E6%AF%8F%E5%80%8B%E9%A0%81%E9%9D%A2\">#</a> 自訂每個頁面</h2>\n<p>原生的 CSS 好像只能統一對頁面調整，但是 Paged.js 支援針對各種頁面，比如說：</p>\n<pre class=\"language-js\"><code class=\"language-js\">@page <span class=\"token punctuation\">{</span><br>  size<span class=\"token operator\">:</span> <span class=\"token constant\">A4</span><span class=\"token punctuation\">;</span><br>  margin<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> <span class=\"token number\">20</span>mm<span class=\"token punctuation\">;</span><br>  margin<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span> <span class=\"token number\">20</span>mm<span class=\"token punctuation\">;</span><br>  margin<span class=\"token operator\">-</span>left<span class=\"token operator\">:</span> <span class=\"token number\">20</span>mm<span class=\"token punctuation\">;</span><br>  margin<span class=\"token operator\">-</span>right<span class=\"token operator\">:</span> <span class=\"token number\">20</span>mm<span class=\"token punctuation\">;</span><br>  padding<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> <span class=\"token number\">2</span>rem<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br>@page<span class=\"token operator\">:</span><span class=\"token function\">nth</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  padding<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我先針對所有頁面統一調整 margin 跟 padding，但是對第一頁取消 padding-top，因為第一頁是封面所以不需要 padding。</p>\n<p>如果不想用頁數來做 selector，也可以直接幫頁面取名，像是這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    ...<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.page-cover</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">page</span><span class=\"token punctuation\">:</span> coverPage<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token atrule\"><span class=\"token rule\">@page</span> coverPage</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣做的話，就可以針對特定類型的頁面去做頁面樣式的控制。</p>\n<h2 id=\"%E8%87%AA%E8%A8%82%E9%A0%81%E9%A6%96%E5%8F%8A%E9%A0%81%E5%B0%BE\"><a class=\"direct-link\" href=\"#%E8%87%AA%E8%A8%82%E9%A0%81%E9%A6%96%E5%8F%8A%E9%A0%81%E5%B0%BE\">#</a> 自訂頁首及頁尾</h2>\n<p>Paged.js 會自動幫你把內容分頁，然後幫你把每一頁都加上預設的排版與 CSS 等等，而經過改造後的每一頁都會長這樣（圖片取自於官網）：</p>\n<p><img src=\"https://static.coderbridge.com/img/aszx87410/ab3c1b0e5274433f92d00c50f4213428.png\" alt=\"\"></p>\n<p>Page area 是你的內容，而其他地方都是區塊的名稱，你可以用 CSS 來決定這些區塊要放什麼，舉例來說：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@page</span></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token atrule\"><span class=\"token rule\">@top-center</span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣寫的話，在每個頁面的中間上方都會出現：<code>hello</code> 這個字。</p>\n<p>因此可以透過這樣子的 CSS，非常輕易就達成自訂頁首以及頁尾這個功能。不過這只是最基本的而已，精彩的還在後面。</p>\n<p>很多時候只有文字是不夠的，我們還想要加一些樣式，或甚至是圖片。再者，每一頁的頁首跟頁尾都有可能不同，有可能這一頁的標題我想叫做 A，下一頁叫做 B，這樣怎麼辦呢？</p>\n<p>在 Paged.js 裡面有個概念叫做：running headers/footers，可以利用這個概念來達成動態的頁首以及頁尾。</p>\n<p>剛剛的 CSS 本來 content 都會是固定的，現在可以改一下：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@page</span></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token atrule\"><span class=\"token rule\">@top-center</span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣寫的話，中間的內容就會是叫做 title 的 element。那這個 element 又是什麼呢？一樣用 CSS 指定即可：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.title</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> <span class=\"token function\">running</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.25rem<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊有個大家應該沒看過的 position 值，叫做 <code>running(title)</code>，意思就是要把 <code>.title</code> 這個元素設定成 running title，對應到了剛剛的 <code>element(title)</code>。</p>\n<p>因此只要把每一頁的 title 都放在 HTML 裡面，就會自動去抓它的內容，然後放在你想放置的位置。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>這是第一頁標題<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>    第一頁內容<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>這是第二頁標題<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>    第二頁內容<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>上面的那兩個 title class 的 div，就不會出現在文件的內容中，而是會被拉到 top center 那個位置。而 title 的內容也會隨著頁面而變，是個超級方便的功能！</p>\n<p>範例中的頁尾則是這樣做的：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@page</span></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token atrule\"><span class=\"token rule\">@bottom-left</span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span>footer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.footer</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> <span class=\"token function\">running</span><span class=\"token punctuation\">(</span>footer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #999<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 2px solid #ccc<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>本文件僅供教學使用，請勿用於商業之用途<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>除了內容可以客製以外，那幾格的樣式也可以。例如說範例中我把整個 header 的背景顏色都變了，因為這幾個格子其實都有預設的 class，因此可以透過 CSS 來做：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.pagedjs_page:not([data-page-number=\"1\"]) .pagedjs_margin-top-left-corner-holder,<br>.pagedjs_page:not([data-page-number=\"1\"]) .pagedjs_margin-top,<br>.pagedjs_page:not([data-page-number=\"1\"]) .pagedjs_margin-top-right-corner-holder</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #658db4<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 2px #658db4<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊前面會加上 <code>.pagedjs_page:not([data-page-number=&quot;1&quot;])</code> 是因為第一頁我不想動到，所以用這個 selector 排除了第一頁。而那個 outline 是因為我發現有時候好像 header 會有一條白色，猜測可能是 render 的問題，所以想說看能不能硬把它蓋掉：</p>\n<p><img src=\"https://static.coderbridge.com/img/aszx87410/1809c0aa81244436a0676d8f121e34d6.png\" alt=\"\"></p>\n<h2 id=\"%E8%87%AA%E8%A8%82%E9%A0%81%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E8%87%AA%E8%A8%82%E9%A0%81%E7%A2%BC\">#</a> 自訂頁碼</h2>\n<p>關於頁碼的部分，Paged.js 提供了兩個 CSS counter 可以使用：<code>counter(page)</code> 與 <code>counter(pages)</code>。</p>\n<p>如果想跟範例一樣在右上角加上頁數，就可以這樣寫：</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@page</span></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token atrule\"><span class=\"token rule\">@top-right</span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span><br>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"第 \"</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token string\">\" 頁，共 \"</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">)</span> <span class=\"token string\">\" 頁\"</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣就可以做到在任意地方加上頁碼了！而且可以自訂格式，如果要調整樣式的話也可以直接調整。</p>\n<h2 id=\"table-head-%E8%87%AA%E5%8B%95%E5%BB%B6%E7%BA%8C\"><a class=\"direct-link\" href=\"#table-head-%E8%87%AA%E5%8B%95%E5%BB%B6%E7%BA%8C\">#</a> Table head 自動延續</h2>\n<p>其實有關於 table head 會自動延續這個功能，使用原生的 HTML table 標籤時就有了。只是 Paged.js 可能處理上有一些問題，所以這功能就不見了。</p>\n<p>但要加回來也不難，我有找到一段簡單的程式碼可以解掉這個問題，來源：<a href=\"https://gitlab.pagedmedia.org/tools/pagedjs/issues/84#note_535\">Repeat table header on subsequent pages</a></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  <span class=\"token comment\">// @see: https://gitlab.pagedmedia.org/tools/pagedjs/issues/84#note_535</span><br>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeatingTableHeaders</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Paged<span class=\"token punctuation\">.</span>Handler</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunker<span class=\"token punctuation\">,</span> polisher<span class=\"token punctuation\">,</span> caller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>chunker<span class=\"token punctuation\">,</span> polisher<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token function\">afterPageLayout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pageElement<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> breakToken<span class=\"token punctuation\">,</span> chunker</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token comment\">// Find all split table elements</span><br>      <span class=\"token keyword\">let</span> tables <span class=\"token operator\">=</span> pageElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table[data-split-from]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>      tables<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">table</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Get the reference UUID of the node</span><br>        <span class=\"token keyword\">let</span> ref <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// Find the node in the original source</span><br>        <span class=\"token keyword\">let</span> sourceTable <span class=\"token operator\">=</span> chunker<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[data-ref='\"</span> <span class=\"token operator\">+</span> ref <span class=\"token operator\">+</span> <span class=\"token string\">\"']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// Find if there is a header</span><br>        <span class=\"token keyword\">let</span> header <span class=\"token operator\">=</span> sourceTable<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token comment\">// Clone the header element</span><br>          <span class=\"token keyword\">let</span> clonedHeader <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          <span class=\"token comment\">// Insert the header at the start of the split table</span><br>          table<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>clonedHeader<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  Paged<span class=\"token punctuation\">.</span><span class=\"token function\">registerHandlers</span><span class=\"token punctuation\">(</span>RepeatingTableHeaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>HTML 的部分記得用 table 來做就好，像這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>網址<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>文章名稱<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>瀏覽次數<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>跳出率<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>blog.huli.tw<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>34532<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>52.3%<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>以上幾個示範程式碼都滿短的，而且大多數都是 CSS，用這套之前還真的沒想過可以透過 CSS 來調整這麼多東西。</p>\n<p>我自己用過 Paged.js 這套以後十分滿意，是我目前認為純前端做 HTML 轉 PDF 版型的最佳方案，原因之一就是我前面說的，除了它之外，我沒有找到其它套件可以支援自訂頁首頁尾以及頁碼等等。這套用起來真的很驚艷，因為我想解決的需求，它都有提供解決方案，而且用起來其實還滿好用的。</p>\n<p>唯一美中不足的地方大概就是上面有些截圖會看到的那個大概 1px 的白線，我猜應該是瀏覽器 render 的時候有一些問題之類的，或搞不好也跟 PDF viewer 什麼的有關。但那個如果真的想蓋掉應該不是難事，最麻煩頂多就是硬畫一條線上去蓋住。</p>\n<p>我自己需要的功能都放在範例裡面了，想看完整範例程式碼的話我放在這邊：<a href=\"https://github.com/aszx87410/demo/blob/master/print/print.html\">https://github.com/aszx87410/demo/blob/master/print/print.html</a></p>\n<p>想要其他更多功能的話，可以參考 Paged.js 的文件跟官網：<a href=\"https://www.pagedjs.org/\">https://www.pagedjs.org/</a></p>\n<p>這篇推薦給所有跟我有類似需求的人，希望 Paged.js 也可以解決你們的問題。或如果你有知道哪些純前端的套件比 Paged.js 更好用的，也可以推薦給我。</p>\n",
      "date_published": "2018-09-30T00:00:00-00:00"
    }
  ]
}
